require = (function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f
            }
            var l = n[o] = {exports: {}};
            t[o][0].call(l.exports, function (e) {
                var n = t[o][1][e];
                return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
        }
        return n[o].exports
    }

    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s
})({
    1: [function (require, module, exports) {
        (function (global) {
            "use strict";

            require("core-js/shim");

            require("regenerator-runtime/runtime");

            if (global._babelPolyfill) {
                throw new Error("only one instance of @babel/polyfill is allowed");
            }

            global._babelPolyfill = true;
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {"core-js/shim": 356, "regenerator-runtime/runtime": 683}],
    2: [function (require, module, exports) {
        "use strict";
        module.exports = asPromise;

        /**
         * Callback as used by {@link util.asPromise}.
         * @typedef asPromiseCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {...*} params Additional arguments
         * @returns {undefined}
         */

        /**
         * Returns a promise from a node-style callback function.
         * @memberof util
         * @param {asPromiseCallback} fn Function to call
         * @param {*} ctx Function context
         * @param {...*} params Function arguments
         * @returns {Promise<*>} Promisified function
         */
        function asPromise(fn, ctx/*, varargs */) {
            var params = new Array(arguments.length - 1),
                offset = 0,
                index = 2,
                pending = true;
            while (index < arguments.length)
                params[offset++] = arguments[index++];
            return new Promise(function executor(resolve, reject) {
                params[offset] = function callback(err/*, varargs */) {
                    if (pending) {
                        pending = false;
                        if (err)
                            reject(err);
                        else {
                            var params = new Array(arguments.length - 1),
                                offset = 0;
                            while (offset < params.length)
                                params[offset++] = arguments[offset];
                            resolve.apply(null, params);
                        }
                    }
                };
                try {
                    fn.apply(ctx || null, params);
                } catch (err) {
                    if (pending) {
                        pending = false;
                        reject(err);
                    }
                }
            });
        }

    }, {}],
    3: [function (require, module, exports) {
        "use strict";

        /**
         * A minimal base64 implementation for number arrays.
         * @memberof util
         * @namespace
         */
        var base64 = exports;

        /**
         * Calculates the byte length of a base64 encoded string.
         * @param {string} string Base64 encoded string
         * @returns {number} Byte length
         */
        base64.length = function length(string) {
            var p = string.length;
            if (!p)
                return 0;
            var n = 0;
            while (--p % 4 > 1 && string.charAt(p) === "=")
                ++n;
            return Math.ceil(string.length * 3) / 4 - n;
        };

// Base64 encoding table
        var b64 = new Array(64);

// Base64 decoding table
        var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
        for (var i = 0; i < 64;)
            s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

        /**
         * Encodes a buffer to a base64 encoded string.
         * @param {Uint8Array} buffer Source buffer
         * @param {number} start Source start
         * @param {number} end Source end
         * @returns {string} Base64 encoded string
         */
        base64.encode = function encode(buffer, start, end) {
            var parts = null,
                chunk = [];
            var i = 0, // output index
                j = 0, // goto index
                t;     // temporary
            while (start < end) {
                var b = buffer[start++];
                switch (j) {
                    case 0:
                        chunk[i++] = b64[b >> 2];
                        t = (b & 3) << 4;
                        j = 1;
                        break;
                    case 1:
                        chunk[i++] = b64[t | b >> 4];
                        t = (b & 15) << 2;
                        j = 2;
                        break;
                    case 2:
                        chunk[i++] = b64[t | b >> 6];
                        chunk[i++] = b64[b & 63];
                        j = 0;
                        break;
                }
                if (i > 8191) {
                    (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
                    i = 0;
                }
            }
            if (j) {
                chunk[i++] = b64[t];
                chunk[i++] = 61;
                if (j === 1)
                    chunk[i++] = 61;
            }
            if (parts) {
                if (i)
                    parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
                return parts.join("");
            }
            return String.fromCharCode.apply(String, chunk.slice(0, i));
        };

        var invalidEncoding = "invalid encoding";

        /**
         * Decodes a base64 encoded string to a buffer.
         * @param {string} string Source string
         * @param {Uint8Array} buffer Destination buffer
         * @param {number} offset Destination offset
         * @returns {number} Number of bytes written
         * @throws {Error} If encoding is invalid
         */
        base64.decode = function decode(string, buffer, offset) {
            var start = offset;
            var j = 0, // goto index
                t;     // temporary
            for (var i = 0; i < string.length;) {
                var c = string.charCodeAt(i++);
                if (c === 61 && j > 1)
                    break;
                if ((c = s64[c]) === undefined)
                    throw Error(invalidEncoding);
                switch (j) {
                    case 0:
                        t = c;
                        j = 1;
                        break;
                    case 1:
                        buffer[offset++] = t << 2 | (c & 48) >> 4;
                        t = c;
                        j = 2;
                        break;
                    case 2:
                        buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                        t = c;
                        j = 3;
                        break;
                    case 3:
                        buffer[offset++] = (t & 3) << 6 | c;
                        j = 0;
                        break;
                }
            }
            if (j === 1)
                throw Error(invalidEncoding);
            return offset - start;
        };

        /**
         * Tests if the specified string appears to be base64 encoded.
         * @param {string} string String to test
         * @returns {boolean} `true` if probably base64 encoded, otherwise false
         */
        base64.test = function test(string) {
            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
        };

    }, {}],
    4: [function (require, module, exports) {
        "use strict";
        module.exports = EventEmitter;

        /**
         * Constructs a new event emitter instance.
         * @classdesc A minimal event emitter.
         * @memberof util
         * @constructor
         */
        function EventEmitter() {

            /**
             * Registered listeners.
             * @type {Object.<string,*>}
             * @private
             */
            this._listeners = {};
        }

        /**
         * Registers an event listener.
         * @param {string} evt Event name
         * @param {function} fn Listener
         * @param {*} [ctx] Listener context
         * @returns {util.EventEmitter} `this`
         */
        EventEmitter.prototype.on = function on(evt, fn, ctx) {
            (this._listeners[evt] || (this._listeners[evt] = [])).push({
                fn: fn,
                ctx: ctx || this
            });
            return this;
        };

        /**
         * Removes an event listener or any matching listeners if arguments are omitted.
         * @param {string} [evt] Event name. Removes all listeners if omitted.
         * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
         * @returns {util.EventEmitter} `this`
         */
        EventEmitter.prototype.off = function off(evt, fn) {
            if (evt === undefined)
                this._listeners = {};
            else {
                if (fn === undefined)
                    this._listeners[evt] = [];
                else {
                    var listeners = this._listeners[evt];
                    for (var i = 0; i < listeners.length;)
                        if (listeners[i].fn === fn)
                            listeners.splice(i, 1);
                        else
                            ++i;
                }
            }
            return this;
        };

        /**
         * Emits an event by calling its listeners with the specified arguments.
         * @param {string} evt Event name
         * @param {...*} args Arguments
         * @returns {util.EventEmitter} `this`
         */
        EventEmitter.prototype.emit = function emit(evt) {
            var listeners = this._listeners[evt];
            if (listeners) {
                var args = [],
                    i = 1;
                for (; i < arguments.length;)
                    args.push(arguments[i++]);
                for (i = 0; i < listeners.length;)
                    listeners[i].fn.apply(listeners[i++].ctx, args);
            }
            return this;
        };

    }, {}],
    5: [function (require, module, exports) {
        "use strict";

        module.exports = factory(factory);

        /**
         * Reads / writes floats / doubles from / to buffers.
         * @name util.float
         * @namespace
         */

        /**
         * Writes a 32 bit float to a buffer using little endian byte order.
         * @name util.float.writeFloatLE
         * @function
         * @param {number} val Value to write
         * @param {Uint8Array} buf Target buffer
         * @param {number} pos Target buffer offset
         * @returns {undefined}
         */

        /**
         * Writes a 32 bit float to a buffer using big endian byte order.
         * @name util.float.writeFloatBE
         * @function
         * @param {number} val Value to write
         * @param {Uint8Array} buf Target buffer
         * @param {number} pos Target buffer offset
         * @returns {undefined}
         */

        /**
         * Reads a 32 bit float from a buffer using little endian byte order.
         * @name util.float.readFloatLE
         * @function
         * @param {Uint8Array} buf Source buffer
         * @param {number} pos Source buffer offset
         * @returns {number} Value read
         */

        /**
         * Reads a 32 bit float from a buffer using big endian byte order.
         * @name util.float.readFloatBE
         * @function
         * @param {Uint8Array} buf Source buffer
         * @param {number} pos Source buffer offset
         * @returns {number} Value read
         */

        /**
         * Writes a 64 bit double to a buffer using little endian byte order.
         * @name util.float.writeDoubleLE
         * @function
         * @param {number} val Value to write
         * @param {Uint8Array} buf Target buffer
         * @param {number} pos Target buffer offset
         * @returns {undefined}
         */

        /**
         * Writes a 64 bit double to a buffer using big endian byte order.
         * @name util.float.writeDoubleBE
         * @function
         * @param {number} val Value to write
         * @param {Uint8Array} buf Target buffer
         * @param {number} pos Target buffer offset
         * @returns {undefined}
         */

        /**
         * Reads a 64 bit double from a buffer using little endian byte order.
         * @name util.float.readDoubleLE
         * @function
         * @param {Uint8Array} buf Source buffer
         * @param {number} pos Source buffer offset
         * @returns {number} Value read
         */

        /**
         * Reads a 64 bit double from a buffer using big endian byte order.
         * @name util.float.readDoubleBE
         * @function
         * @param {Uint8Array} buf Source buffer
         * @param {number} pos Source buffer offset
         * @returns {number} Value read
         */

// Factory function for the purpose of node-based testing in modified global environments
        function factory(exports) {

            // float: typed array
            if (typeof Float32Array !== "undefined") (function () {

                var f32 = new Float32Array([-0]),
                    f8b = new Uint8Array(f32.buffer),
                    le = f8b[3] === 128;

                function writeFloat_f32_cpy(val, buf, pos) {
                    f32[0] = val;
                    buf[pos] = f8b[0];
                    buf[pos + 1] = f8b[1];
                    buf[pos + 2] = f8b[2];
                    buf[pos + 3] = f8b[3];
                }

                function writeFloat_f32_rev(val, buf, pos) {
                    f32[0] = val;
                    buf[pos] = f8b[3];
                    buf[pos + 1] = f8b[2];
                    buf[pos + 2] = f8b[1];
                    buf[pos + 3] = f8b[0];
                }

                /* istanbul ignore next */
                exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
                /* istanbul ignore next */
                exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

                function readFloat_f32_cpy(buf, pos) {
                    f8b[0] = buf[pos];
                    f8b[1] = buf[pos + 1];
                    f8b[2] = buf[pos + 2];
                    f8b[3] = buf[pos + 3];
                    return f32[0];
                }

                function readFloat_f32_rev(buf, pos) {
                    f8b[3] = buf[pos];
                    f8b[2] = buf[pos + 1];
                    f8b[1] = buf[pos + 2];
                    f8b[0] = buf[pos + 3];
                    return f32[0];
                }

                /* istanbul ignore next */
                exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
                /* istanbul ignore next */
                exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

                // float: ieee754
            })(); else (function () {

                function writeFloat_ieee754(writeUint, val, buf, pos) {
                    var sign = val < 0 ? 1 : 0;
                    if (sign)
                        val = -val;
                    if (val === 0)
                        writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
                    else if (isNaN(val))
                        writeUint(2143289344, buf, pos);
                    else if (val > 3.4028234663852886e+38) // +-Infinity
                        writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
                    else if (val < 1.1754943508222875e-38) // denormal
                        writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
                    else {
                        var exponent = Math.floor(Math.log(val) / Math.LN2),
                            mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                        writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
                    }
                }

                exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
                exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

                function readFloat_ieee754(readUint, buf, pos) {
                    var uint = readUint(buf, pos),
                        sign = (uint >> 31) * 2 + 1,
                        exponent = uint >>> 23 & 255,
                        mantissa = uint & 8388607;
                    return exponent === 255
                        ? mantissa
                            ? NaN
                            : sign * Infinity
                        : exponent === 0 // denormal
                            ? sign * 1.401298464324817e-45 * mantissa
                            : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
                }

                exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
                exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

            })();

            // double: typed array
            if (typeof Float64Array !== "undefined") (function () {

                var f64 = new Float64Array([-0]),
                    f8b = new Uint8Array(f64.buffer),
                    le = f8b[7] === 128;

                function writeDouble_f64_cpy(val, buf, pos) {
                    f64[0] = val;
                    buf[pos] = f8b[0];
                    buf[pos + 1] = f8b[1];
                    buf[pos + 2] = f8b[2];
                    buf[pos + 3] = f8b[3];
                    buf[pos + 4] = f8b[4];
                    buf[pos + 5] = f8b[5];
                    buf[pos + 6] = f8b[6];
                    buf[pos + 7] = f8b[7];
                }

                function writeDouble_f64_rev(val, buf, pos) {
                    f64[0] = val;
                    buf[pos] = f8b[7];
                    buf[pos + 1] = f8b[6];
                    buf[pos + 2] = f8b[5];
                    buf[pos + 3] = f8b[4];
                    buf[pos + 4] = f8b[3];
                    buf[pos + 5] = f8b[2];
                    buf[pos + 6] = f8b[1];
                    buf[pos + 7] = f8b[0];
                }

                /* istanbul ignore next */
                exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
                /* istanbul ignore next */
                exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

                function readDouble_f64_cpy(buf, pos) {
                    f8b[0] = buf[pos];
                    f8b[1] = buf[pos + 1];
                    f8b[2] = buf[pos + 2];
                    f8b[3] = buf[pos + 3];
                    f8b[4] = buf[pos + 4];
                    f8b[5] = buf[pos + 5];
                    f8b[6] = buf[pos + 6];
                    f8b[7] = buf[pos + 7];
                    return f64[0];
                }

                function readDouble_f64_rev(buf, pos) {
                    f8b[7] = buf[pos];
                    f8b[6] = buf[pos + 1];
                    f8b[5] = buf[pos + 2];
                    f8b[4] = buf[pos + 3];
                    f8b[3] = buf[pos + 4];
                    f8b[2] = buf[pos + 5];
                    f8b[1] = buf[pos + 6];
                    f8b[0] = buf[pos + 7];
                    return f64[0];
                }

                /* istanbul ignore next */
                exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
                /* istanbul ignore next */
                exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

                // double: ieee754
            })(); else (function () {

                function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
                    var sign = val < 0 ? 1 : 0;
                    if (sign)
                        val = -val;
                    if (val === 0) {
                        writeUint(0, buf, pos + off0);
                        writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
                    } else if (isNaN(val)) {
                        writeUint(0, buf, pos + off0);
                        writeUint(2146959360, buf, pos + off1);
                    } else if (val > 1.7976931348623157e+308) { // +-Infinity
                        writeUint(0, buf, pos + off0);
                        writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
                    } else {
                        var mantissa;
                        if (val < 2.2250738585072014e-308) { // denormal
                            mantissa = val / 5e-324;
                            writeUint(mantissa >>> 0, buf, pos + off0);
                            writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                        } else {
                            var exponent = Math.floor(Math.log(val) / Math.LN2);
                            if (exponent === 1024)
                                exponent = 1023;
                            mantissa = val * Math.pow(2, -exponent);
                            writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                            writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                        }
                    }
                }

                exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
                exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

                function readDouble_ieee754(readUint, off0, off1, buf, pos) {
                    var lo = readUint(buf, pos + off0),
                        hi = readUint(buf, pos + off1);
                    var sign = (hi >> 31) * 2 + 1,
                        exponent = hi >>> 20 & 2047,
                        mantissa = 4294967296 * (hi & 1048575) + lo;
                    return exponent === 2047
                        ? mantissa
                            ? NaN
                            : sign * Infinity
                        : exponent === 0 // denormal
                            ? sign * 5e-324 * mantissa
                            : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
                }

                exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
                exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

            })();

            return exports;
        }

// uint helpers

        function writeUintLE(val, buf, pos) {
            buf[pos] = val & 255;
            buf[pos + 1] = val >>> 8 & 255;
            buf[pos + 2] = val >>> 16 & 255;
            buf[pos + 3] = val >>> 24;
        }

        function writeUintBE(val, buf, pos) {
            buf[pos] = val >>> 24;
            buf[pos + 1] = val >>> 16 & 255;
            buf[pos + 2] = val >>> 8 & 255;
            buf[pos + 3] = val & 255;
        }

        function readUintLE(buf, pos) {
            return (buf[pos]
                | buf[pos + 1] << 8
                | buf[pos + 2] << 16
                | buf[pos + 3] << 24) >>> 0;
        }

        function readUintBE(buf, pos) {
            return (buf[pos] << 24
                | buf[pos + 1] << 16
                | buf[pos + 2] << 8
                | buf[pos + 3]) >>> 0;
        }

    }, {}],
    6: [function (require, module, exports) {
        "use strict";
        module.exports = inquire;

        /**
         * Requires a module only if available.
         * @memberof util
         * @param {string} moduleName Module to require
         * @returns {?Object} Required module if available and not empty, otherwise `null`
         */
        function inquire(moduleName) {
            try {
                var mod = eval("quire".replace(/^/, "re"))(moduleName); // eslint-disable-line no-eval
                if (mod && (mod.length || Object.keys(mod).length))
                    return mod;
            } catch (e) {
            } // eslint-disable-line no-empty
            return null;
        }

    }, {}],
    7: [function (require, module, exports) {
        "use strict";
        module.exports = pool;

        /**
         * An allocator as used by {@link util.pool}.
         * @typedef PoolAllocator
         * @type {function}
         * @param {number} size Buffer size
         * @returns {Uint8Array} Buffer
         */

        /**
         * A slicer as used by {@link util.pool}.
         * @typedef PoolSlicer
         * @type {function}
         * @param {number} start Start offset
         * @param {number} end End offset
         * @returns {Uint8Array} Buffer slice
         * @this {Uint8Array}
         */

        /**
         * A general purpose buffer pool.
         * @memberof util
         * @function
         * @param {PoolAllocator} alloc Allocator
         * @param {PoolSlicer} slice Slicer
         * @param {number} [size=8192] Slab size
         * @returns {PoolAllocator} Pooled allocator
         */
        function pool(alloc, slice, size) {
            var SIZE = size || 8192;
            var MAX = SIZE >>> 1;
            var slab = null;
            var offset = SIZE;
            return function pool_alloc(size) {
                if (size < 1 || size > MAX)
                    return alloc(size);
                if (offset + size > SIZE) {
                    slab = alloc(SIZE);
                    offset = 0;
                }
                var buf = slice.call(slab, offset, offset += size);
                if (offset & 7) // align to 32 bit
                    offset = (offset | 7) + 1;
                return buf;
            };
        }

    }, {}],
    8: [function (require, module, exports) {
        "use strict";

        /**
         * A minimal UTF8 implementation for number arrays.
         * @memberof util
         * @namespace
         */
        var utf8 = exports;

        /**
         * Calculates the UTF8 byte length of a string.
         * @param {string} string String
         * @returns {number} Byte length
         */
        utf8.length = function utf8_length(string) {
            var len = 0,
                c = 0;
            for (var i = 0; i < string.length; ++i) {
                c = string.charCodeAt(i);
                if (c < 128)
                    len += 1;
                else if (c < 2048)
                    len += 2;
                else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
                    ++i;
                    len += 4;
                } else
                    len += 3;
            }
            return len;
        };

        /**
         * Reads UTF8 bytes as a string.
         * @param {Uint8Array} buffer Source buffer
         * @param {number} start Source start
         * @param {number} end Source end
         * @returns {string} String read
         */
        utf8.read = function utf8_read(buffer, start, end) {
            var len = end - start;
            if (len < 1)
                return "";
            var parts = null,
                chunk = [],
                i = 0, // char offset
                t;     // temporary
            while (start < end) {
                t = buffer[start++];
                if (t < 128)
                    chunk[i++] = t;
                else if (t > 191 && t < 224)
                    chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
                else if (t > 239 && t < 365) {
                    t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
                    chunk[i++] = 0xD800 + (t >> 10);
                    chunk[i++] = 0xDC00 + (t & 1023);
                } else
                    chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
                if (i > 8191) {
                    (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
                    i = 0;
                }
            }
            if (parts) {
                if (i)
                    parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
                return parts.join("");
            }
            return String.fromCharCode.apply(String, chunk.slice(0, i));
        };

        /**
         * Writes a string as UTF8 bytes.
         * @param {string} string Source string
         * @param {Uint8Array} buffer Destination buffer
         * @param {number} offset Destination offset
         * @returns {number} Bytes written
         */
        utf8.write = function utf8_write(string, buffer, offset) {
            var start = offset,
                c1, // character 1
                c2; // character 2
            for (var i = 0; i < string.length; ++i) {
                c1 = string.charCodeAt(i);
                if (c1 < 128) {
                    buffer[offset++] = c1;
                } else if (c1 < 2048) {
                    buffer[offset++] = c1 >> 6 | 192;
                    buffer[offset++] = c1 & 63 | 128;
                } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
                    c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
                    ++i;
                    buffer[offset++] = c1 >> 18 | 240;
                    buffer[offset++] = c1 >> 12 & 63 | 128;
                    buffer[offset++] = c1 >> 6 & 63 | 128;
                    buffer[offset++] = c1 & 63 | 128;
                } else {
                    buffer[offset++] = c1 >> 12 | 224;
                    buffer[offset++] = c1 >> 6 & 63 | 128;
                    buffer[offset++] = c1 & 63 | 128;
                }
            }
            return offset - start;
        };

    }, {}],
    9: [function (require, module, exports) {
        module.exports = require('./lib/axios');
    }, {"./lib/axios": 11}],
    10: [function (require, module, exports) {
        (function (process) {
            'use strict';

            var utils = require('./../utils');
            var settle = require('./../core/settle');
            var buildURL = require('./../helpers/buildURL');
            var parseHeaders = require('./../helpers/parseHeaders');
            var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
            var createError = require('../core/createError');
            var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || require('./../helpers/btoa');

            module.exports = function xhrAdapter(config) {
                return new Promise(function dispatchXhrRequest(resolve, reject) {
                    var requestData = config.data;
                    var requestHeaders = config.headers;

                    if (utils.isFormData(requestData)) {
                        delete requestHeaders['Content-Type']; // Let the browser set it
                    }

                    var request = new XMLHttpRequest();
                    var loadEvent = 'onreadystatechange';
                    var xDomain = false;

                    // For IE 8/9 CORS support
                    // Only supports POST and GET calls and doesn't returns the response headers.
                    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
                    if (process.env.NODE_ENV !== 'test' &&
                        typeof window !== 'undefined' &&
                        window.XDomainRequest && !('withCredentials' in request) &&
                        !isURLSameOrigin(config.url)) {
                        request = new window.XDomainRequest();
                        loadEvent = 'onload';
                        xDomain = true;
                        request.onprogress = function handleProgress() {
                        };
                        request.ontimeout = function handleTimeout() {
                        };
                    }

                    // HTTP basic authentication
                    if (config.auth) {
                        var username = config.auth.username || '';
                        var password = config.auth.password || '';
                        requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
                    }

                    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

                    // Set the request timeout in MS
                    request.timeout = config.timeout;

                    // Listen for ready state
                    request[loadEvent] = function handleLoad() {
                        if (!request || (request.readyState !== 4 && !xDomain)) {
                            return;
                        }

                        // The request errored out and we didn't get a response, this will be
                        // handled by onerror instead
                        // With one exception: request that using file: protocol, most browsers
                        // will return status as 0 even though it's a successful request
                        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                            return;
                        }

                        // Prepare the response
                        var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
                        var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
                        var response = {
                            data: responseData,
                            // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
                            status: request.status === 1223 ? 204 : request.status,
                            statusText: request.status === 1223 ? 'No Content' : request.statusText,
                            headers: responseHeaders,
                            config: config,
                            request: request
                        };

                        settle(resolve, reject, response);

                        // Clean up request
                        request = null;
                    };

                    // Handle low level network errors
                    request.onerror = function handleError() {
                        // Real errors are hidden from us by the browser
                        // onerror should only fire if it's a network error
                        reject(createError('Network Error', config, null, request));

                        // Clean up request
                        request = null;
                    };

                    // Handle timeout
                    request.ontimeout = function handleTimeout() {
                        reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
                            request));

                        // Clean up request
                        request = null;
                    };

                    // Add xsrf header
                    // This is only done if running in a standard browser environment.
                    // Specifically not if we're in a web worker, or react-native.
                    if (utils.isStandardBrowserEnv()) {
                        var cookies = require('./../helpers/cookies');

                        // Add xsrf header
                        var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
                            cookies.read(config.xsrfCookieName) :
                            undefined;

                        if (xsrfValue) {
                            requestHeaders[config.xsrfHeaderName] = xsrfValue;
                        }
                    }

                    // Add headers to the request
                    if ('setRequestHeader' in request) {
                        utils.forEach(requestHeaders, function setRequestHeader(val, key) {
                            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
                                // Remove Content-Type if data is undefined
                                delete requestHeaders[key];
                            } else {
                                // Otherwise add header to the request
                                request.setRequestHeader(key, val);
                            }
                        });
                    }

                    // Add withCredentials to request if needed
                    if (config.withCredentials) {
                        request.withCredentials = true;
                    }

                    // Add responseType to request if needed
                    if (config.responseType) {
                        try {
                            request.responseType = config.responseType;
                        } catch (e) {
                            // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
                            // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
                            if (config.responseType !== 'json') {
                                throw e;
                            }
                        }
                    }

                    // Handle progress if needed
                    if (typeof config.onDownloadProgress === 'function') {
                        request.addEventListener('progress', config.onDownloadProgress);
                    }

                    // Not all browsers support upload events
                    if (typeof config.onUploadProgress === 'function' && request.upload) {
                        request.upload.addEventListener('progress', config.onUploadProgress);
                    }

                    if (config.cancelToken) {
                        // Handle cancellation
                        config.cancelToken.promise.then(function onCanceled(cancel) {
                            if (!request) {
                                return;
                            }

                            request.abort();
                            reject(cancel);
                            // Clean up request
                            request = null;
                        });
                    }

                    if (requestData === undefined) {
                        requestData = null;
                    }

                    // Send the request
                    request.send(requestData);
                });
            };

        }).call(this, require('_process'))
    }, {
        "../core/createError": 17,
        "./../core/settle": 20,
        "./../helpers/btoa": 24,
        "./../helpers/buildURL": 25,
        "./../helpers/cookies": 27,
        "./../helpers/isURLSameOrigin": 29,
        "./../helpers/parseHeaders": 31,
        "./../utils": 33,
        "_process": 691
    }],
    11: [function (require, module, exports) {
        'use strict';

        var utils = require('./utils');
        var bind = require('./helpers/bind');
        var Axios = require('./core/Axios');
        var defaults = require('./defaults');

        /**
         * Create an instance of Axios
         *
         * @param {Object} defaultConfig The default config for the instance
         * @return {Axios} A new instance of Axios
         */
        function createInstance(defaultConfig) {
            var context = new Axios(defaultConfig);
            var instance = bind(Axios.prototype.request, context);

            // Copy axios.prototype to instance
            utils.extend(instance, Axios.prototype, context);

            // Copy context to instance
            utils.extend(instance, context);

            return instance;
        }

// Create the default instance to be exported
        var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
        axios.Axios = Axios;

// Factory for creating new instances
        axios.create = function create(instanceConfig) {
            return createInstance(utils.merge(defaults, instanceConfig));
        };

// Expose Cancel & CancelToken
        axios.Cancel = require('./cancel/Cancel');
        axios.CancelToken = require('./cancel/CancelToken');
        axios.isCancel = require('./cancel/isCancel');

// Expose all/spread
        axios.all = function all(promises) {
            return Promise.all(promises);
        };
        axios.spread = require('./helpers/spread');

        module.exports = axios;

// Allow use of default import syntax in TypeScript
        module.exports.default = axios;

    }, {
        "./cancel/Cancel": 12,
        "./cancel/CancelToken": 13,
        "./cancel/isCancel": 14,
        "./core/Axios": 15,
        "./defaults": 22,
        "./helpers/bind": 23,
        "./helpers/spread": 32,
        "./utils": 33
    }],
    12: [function (require, module, exports) {
        'use strict';

        /**
         * A `Cancel` is an object that is thrown when an operation is canceled.
         *
         * @class
         * @param {string=} message The message.
         */
        function Cancel(message) {
            this.message = message;
        }

        Cancel.prototype.toString = function toString() {
            return 'Cancel' + (this.message ? ': ' + this.message : '');
        };

        Cancel.prototype.__CANCEL__ = true;

        module.exports = Cancel;

    }, {}],
    13: [function (require, module, exports) {
        'use strict';

        var Cancel = require('./Cancel');

        /**
         * A `CancelToken` is an object that can be used to request cancellation of an operation.
         *
         * @class
         * @param {Function} executor The executor function.
         */
        function CancelToken(executor) {
            if (typeof executor !== 'function') {
                throw new TypeError('executor must be a function.');
            }

            var resolvePromise;
            this.promise = new Promise(function promiseExecutor(resolve) {
                resolvePromise = resolve;
            });

            var token = this;
            executor(function cancel(message) {
                if (token.reason) {
                    // Cancellation has already been requested
                    return;
                }

                token.reason = new Cancel(message);
                resolvePromise(token.reason);
            });
        }

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        CancelToken.prototype.throwIfRequested = function throwIfRequested() {
            if (this.reason) {
                throw this.reason;
            }
        };

        /**
         * Returns an object that contains a new `CancelToken` and a function that, when called,
         * cancels the `CancelToken`.
         */
        CancelToken.source = function source() {
            var cancel;
            var token = new CancelToken(function executor(c) {
                cancel = c;
            });
            return {
                token: token,
                cancel: cancel
            };
        };

        module.exports = CancelToken;

    }, {"./Cancel": 12}],
    14: [function (require, module, exports) {
        'use strict';

        module.exports = function isCancel(value) {
            return !!(value && value.__CANCEL__);
        };

    }, {}],
    15: [function (require, module, exports) {
        'use strict';

        var defaults = require('./../defaults');
        var utils = require('./../utils');
        var InterceptorManager = require('./InterceptorManager');
        var dispatchRequest = require('./dispatchRequest');

        /**
         * Create a new instance of Axios
         *
         * @param {Object} instanceConfig The default config for the instance
         */
        function Axios(instanceConfig) {
            this.defaults = instanceConfig;
            this.interceptors = {
                request: new InterceptorManager(),
                response: new InterceptorManager()
            };
        }

        /**
         * Dispatch a request
         *
         * @param {Object} config The config specific for this request (merged with this.defaults)
         */
        Axios.prototype.request = function request(config) {
            /*eslint no-param-reassign:0*/
            // Allow for axios('example/url'[, config]) a la fetch API
            if (typeof config === 'string') {
                config = utils.merge({
                    url: arguments[0]
                }, arguments[1]);
            }

            config = utils.merge(defaults, this.defaults, {method: 'get'}, config);
            config.method = config.method.toLowerCase();

            // Hook up interceptors middleware
            var chain = [dispatchRequest, undefined];
            var promise = Promise.resolve(config);

            this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
                chain.unshift(interceptor.fulfilled, interceptor.rejected);
            });

            this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
                chain.push(interceptor.fulfilled, interceptor.rejected);
            });

            while (chain.length) {
                promise = promise.then(chain.shift(), chain.shift());
            }

            return promise;
        };

// Provide aliases for supported request methods
        utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function (url, config) {
                return this.request(utils.merge(config || {}, {
                    method: method,
                    url: url
                }));
            };
        });

        utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function (url, data, config) {
                return this.request(utils.merge(config || {}, {
                    method: method,
                    url: url,
                    data: data
                }));
            };
        });

        module.exports = Axios;

    }, {"./../defaults": 22, "./../utils": 33, "./InterceptorManager": 16, "./dispatchRequest": 18}],
    16: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');

        function InterceptorManager() {
            this.handlers = [];
        }

        /**
         * Add a new interceptor to the stack
         *
         * @param {Function} fulfilled The function to handle `then` for a `Promise`
         * @param {Function} rejected The function to handle `reject` for a `Promise`
         *
         * @return {Number} An ID used to remove interceptor later
         */
        InterceptorManager.prototype.use = function use(fulfilled, rejected) {
            this.handlers.push({
                fulfilled: fulfilled,
                rejected: rejected
            });
            return this.handlers.length - 1;
        };

        /**
         * Remove an interceptor from the stack
         *
         * @param {Number} id The ID that was returned by `use`
         */
        InterceptorManager.prototype.eject = function eject(id) {
            if (this.handlers[id]) {
                this.handlers[id] = null;
            }
        };

        /**
         * Iterate over all the registered interceptors
         *
         * This method is particularly useful for skipping over any
         * interceptors that may have become `null` calling `eject`.
         *
         * @param {Function} fn The function to call for each interceptor
         */
        InterceptorManager.prototype.forEach = function forEach(fn) {
            utils.forEach(this.handlers, function forEachHandler(h) {
                if (h !== null) {
                    fn(h);
                }
            });
        };

        module.exports = InterceptorManager;

    }, {"./../utils": 33}],
    17: [function (require, module, exports) {
        'use strict';

        var enhanceError = require('./enhanceError');

        /**
         * Create an Error with the specified message, config, error code, request and response.
         *
         * @param {string} message The error message.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The created error.
         */
        module.exports = function createError(message, config, code, request, response) {
            var error = new Error(message);
            return enhanceError(error, config, code, request, response);
        };

    }, {"./enhanceError": 19}],
    18: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');
        var transformData = require('./transformData');
        var isCancel = require('../cancel/isCancel');
        var defaults = require('../defaults');
        var isAbsoluteURL = require('./../helpers/isAbsoluteURL');
        var combineURLs = require('./../helpers/combineURLs');

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        function throwIfCancellationRequested(config) {
            if (config.cancelToken) {
                config.cancelToken.throwIfRequested();
            }
        }

        /**
         * Dispatch a request to the server using the configured adapter.
         *
         * @param {object} config The config that is to be used for the request
         * @returns {Promise} The Promise to be fulfilled
         */
        module.exports = function dispatchRequest(config) {
            throwIfCancellationRequested(config);

            // Support baseURL config
            if (config.baseURL && !isAbsoluteURL(config.url)) {
                config.url = combineURLs(config.baseURL, config.url);
            }

            // Ensure headers exist
            config.headers = config.headers || {};

            // Transform request data
            config.data = transformData(
                config.data,
                config.headers,
                config.transformRequest
            );

            // Flatten headers
            config.headers = utils.merge(
                config.headers.common || {},
                config.headers[config.method] || {},
                config.headers || {}
            );

            utils.forEach(
                ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
                function cleanHeaderConfig(method) {
                    delete config.headers[method];
                }
            );

            var adapter = config.adapter || defaults.adapter;

            return adapter(config).then(function onAdapterResolution(response) {
                throwIfCancellationRequested(config);

                // Transform response data
                response.data = transformData(
                    response.data,
                    response.headers,
                    config.transformResponse
                );

                return response;
            }, function onAdapterRejection(reason) {
                if (!isCancel(reason)) {
                    throwIfCancellationRequested(config);

                    // Transform response data
                    if (reason && reason.response) {
                        reason.response.data = transformData(
                            reason.response.data,
                            reason.response.headers,
                            config.transformResponse
                        );
                    }
                }

                return Promise.reject(reason);
            });
        };

    }, {
        "../cancel/isCancel": 14,
        "../defaults": 22,
        "./../helpers/combineURLs": 26,
        "./../helpers/isAbsoluteURL": 28,
        "./../utils": 33,
        "./transformData": 21
    }],
    19: [function (require, module, exports) {
        'use strict';

        /**
         * Update an Error with the specified config, error code, and response.
         *
         * @param {Error} error The error to update.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The error.
         */
        module.exports = function enhanceError(error, config, code, request, response) {
            error.config = config;
            if (code) {
                error.code = code;
            }
            error.request = request;
            error.response = response;
            return error;
        };

    }, {}],
    20: [function (require, module, exports) {
        'use strict';

        var createError = require('./createError');

        /**
         * Resolve or reject a Promise based on response status.
         *
         * @param {Function} resolve A function that resolves the promise.
         * @param {Function} reject A function that rejects the promise.
         * @param {object} response The response.
         */
        module.exports = function settle(resolve, reject, response) {
            var validateStatus = response.config.validateStatus;
            // Note: status is not exposed by XDomainRequest
            if (!response.status || !validateStatus || validateStatus(response.status)) {
                resolve(response);
            } else {
                reject(createError(
                    'Request failed with status code ' + response.status,
                    response.config,
                    null,
                    response.request,
                    response
                ));
            }
        };

    }, {"./createError": 17}],
    21: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');

        /**
         * Transform the data for a request or a response
         *
         * @param {Object|String} data The data to be transformed
         * @param {Array} headers The headers for the request or response
         * @param {Array|Function} fns A single function or Array of functions
         * @returns {*} The resulting transformed data
         */
        module.exports = function transformData(data, headers, fns) {
            /*eslint no-param-reassign:0*/
            utils.forEach(fns, function transform(fn) {
                data = fn(data, headers);
            });

            return data;
        };

    }, {"./../utils": 33}],
    22: [function (require, module, exports) {
        (function (process) {
            'use strict';

            var utils = require('./utils');
            var normalizeHeaderName = require('./helpers/normalizeHeaderName');

            var DEFAULT_CONTENT_TYPE = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };

            function setContentTypeIfUnset(headers, value) {
                if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
                    headers['Content-Type'] = value;
                }
            }

            function getDefaultAdapter() {
                var adapter;
                if (typeof XMLHttpRequest !== 'undefined') {
                    // For browsers use XHR adapter
                    adapter = require('./adapters/xhr');
                } else if (typeof process !== 'undefined') {
                    // For node use HTTP adapter
                    adapter = require('./adapters/http');
                }
                return adapter;
            }

            var defaults = {
                adapter: getDefaultAdapter(),

                transformRequest: [function transformRequest(data, headers) {
                    normalizeHeaderName(headers, 'Content-Type');
                    if (utils.isFormData(data) ||
                        utils.isArrayBuffer(data) ||
                        utils.isBuffer(data) ||
                        utils.isStream(data) ||
                        utils.isFile(data) ||
                        utils.isBlob(data)
                    ) {
                        return data;
                    }
                    if (utils.isArrayBufferView(data)) {
                        return data.buffer;
                    }
                    if (utils.isURLSearchParams(data)) {
                        setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                        return data.toString();
                    }
                    if (utils.isObject(data)) {
                        setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
                        return JSON.stringify(data);
                    }
                    return data;
                }],

                transformResponse: [function transformResponse(data) {
                    /*eslint no-param-reassign:0*/
                    if (typeof data === 'string') {
                        try {
                            data = JSON.parse(data);
                        } catch (e) { /* Ignore */
                        }
                    }
                    return data;
                }],

                timeout: 0,

                xsrfCookieName: 'XSRF-TOKEN',
                xsrfHeaderName: 'X-XSRF-TOKEN',

                maxContentLength: -1,

                validateStatus: function validateStatus(status) {
                    return status >= 200 && status < 300;
                }
            };

            defaults.headers = {
                common: {
                    'Accept': 'application/json, text/plain, */*'
                }
            };

            utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
                defaults.headers[method] = {};
            });

            utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
                defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
            });

            module.exports = defaults;

        }).call(this, require('_process'))
    }, {
        "./adapters/http": 10,
        "./adapters/xhr": 10,
        "./helpers/normalizeHeaderName": 30,
        "./utils": 33,
        "_process": 691
    }],
    23: [function (require, module, exports) {
        'use strict';

        module.exports = function bind(fn, thisArg) {
            return function wrap() {
                var args = new Array(arguments.length);
                for (var i = 0; i < args.length; i++) {
                    args[i] = arguments[i];
                }
                return fn.apply(thisArg, args);
            };
        };

    }, {}],
    24: [function (require, module, exports) {
        'use strict';

// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

        function E() {
            this.message = 'String contains an invalid character';
        }

        E.prototype = new Error;
        E.prototype.code = 5;
        E.prototype.name = 'InvalidCharacterError';

        function btoa(input) {
            var str = String(input);
            var output = '';
            for (
                // initialize result and counter
                var block, charCode, idx = 0, map = chars;
                // if the next str index does not exist:
                //   change the mapping table to "="
                //   check if d has no fractional digits
                str.charAt(idx | 0) || (map = '=', idx % 1);
                // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
                output += map.charAt(63 & block >> 8 - idx % 1 * 8)
            ) {
                charCode = str.charCodeAt(idx += 3 / 4);
                if (charCode > 0xFF) {
                    throw new E();
                }
                block = block << 8 | charCode;
            }
            return output;
        }

        module.exports = btoa;

    }, {}],
    25: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');

        function encode(val) {
            return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
        }

        /**
         * Build a URL by appending params to the end
         *
         * @param {string} url The base of the url (e.g., http://www.google.com)
         * @param {object} [params] The params to be appended
         * @returns {string} The formatted url
         */
        module.exports = function buildURL(url, params, paramsSerializer) {
            /*eslint no-param-reassign:0*/
            if (!params) {
                return url;
            }

            var serializedParams;
            if (paramsSerializer) {
                serializedParams = paramsSerializer(params);
            } else if (utils.isURLSearchParams(params)) {
                serializedParams = params.toString();
            } else {
                var parts = [];

                utils.forEach(params, function serialize(val, key) {
                    if (val === null || typeof val === 'undefined') {
                        return;
                    }

                    if (utils.isArray(val)) {
                        key = key + '[]';
                    }

                    if (!utils.isArray(val)) {
                        val = [val];
                    }

                    utils.forEach(val, function parseValue(v) {
                        if (utils.isDate(v)) {
                            v = v.toISOString();
                        } else if (utils.isObject(v)) {
                            v = JSON.stringify(v);
                        }
                        parts.push(encode(key) + '=' + encode(v));
                    });
                });

                serializedParams = parts.join('&');
            }

            if (serializedParams) {
                url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
            }

            return url;
        };

    }, {"./../utils": 33}],
    26: [function (require, module, exports) {
        'use strict';

        /**
         * Creates a new URL by combining the specified URLs
         *
         * @param {string} baseURL The base URL
         * @param {string} relativeURL The relative URL
         * @returns {string} The combined URL
         */
        module.exports = function combineURLs(baseURL, relativeURL) {
            return relativeURL
                ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
                : baseURL;
        };

    }, {}],
    27: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');

        module.exports = (
            utils.isStandardBrowserEnv() ?

                // Standard browser envs support document.cookie
                (function standardBrowserEnv() {
                    return {
                        write: function write(name, value, expires, path, domain, secure) {
                            var cookie = [];
                            cookie.push(name + '=' + encodeURIComponent(value));

                            if (utils.isNumber(expires)) {
                                cookie.push('expires=' + new Date(expires).toGMTString());
                            }

                            if (utils.isString(path)) {
                                cookie.push('path=' + path);
                            }

                            if (utils.isString(domain)) {
                                cookie.push('domain=' + domain);
                            }

                            if (secure === true) {
                                cookie.push('secure');
                            }

                            document.cookie = cookie.join('; ');
                        },

                        read: function read(name) {
                            var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
                            return (match ? decodeURIComponent(match[3]) : null);
                        },

                        remove: function remove(name) {
                            this.write(name, '', Date.now() - 86400000);
                        }
                    };
                })() :

                // Non standard browser env (web workers, react-native) lack needed support.
                (function nonStandardBrowserEnv() {
                    return {
                        write: function write() {
                        },
                        read: function read() {
                            return null;
                        },
                        remove: function remove() {
                        }
                    };
                })()
        );

    }, {"./../utils": 33}],
    28: [function (require, module, exports) {
        'use strict';

        /**
         * Determines whether the specified URL is absolute
         *
         * @param {string} url The URL to test
         * @returns {boolean} True if the specified URL is absolute, otherwise false
         */
        module.exports = function isAbsoluteURL(url) {
            // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
            // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
            // by any combination of letters, digits, plus, period, or hyphen.
            return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
        };

    }, {}],
    29: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');

        module.exports = (
            utils.isStandardBrowserEnv() ?

                // Standard browser envs have full support of the APIs needed to test
                // whether the request URL is of the same origin as current location.
                (function standardBrowserEnv() {
                    var msie = /(msie|trident)/i.test(navigator.userAgent);
                    var urlParsingNode = document.createElement('a');
                    var originURL;

                    /**
                     * Parse a URL to discover it's components
                     *
                     * @param {String} url The URL to be parsed
                     * @returns {Object}
                     */
                    function resolveURL(url) {
                        var href = url;

                        if (msie) {
                            // IE needs attribute set twice to normalize properties
                            urlParsingNode.setAttribute('href', href);
                            href = urlParsingNode.href;
                        }

                        urlParsingNode.setAttribute('href', href);

                        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
                        return {
                            href: urlParsingNode.href,
                            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                            host: urlParsingNode.host,
                            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                            hostname: urlParsingNode.hostname,
                            port: urlParsingNode.port,
                            pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                                urlParsingNode.pathname :
                                '/' + urlParsingNode.pathname
                        };
                    }

                    originURL = resolveURL(window.location.href);

                    /**
                     * Determine if a URL shares the same origin as the current location
                     *
                     * @param {String} requestURL The URL to test
                     * @returns {boolean} True if URL shares the same origin, otherwise false
                     */
                    return function isURLSameOrigin(requestURL) {
                        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
                        return (parsed.protocol === originURL.protocol &&
                            parsed.host === originURL.host);
                    };
                })() :

                // Non standard browser envs (web workers, react-native) lack needed support.
                (function nonStandardBrowserEnv() {
                    return function isURLSameOrigin() {
                        return true;
                    };
                })()
        );

    }, {"./../utils": 33}],
    30: [function (require, module, exports) {
        'use strict';

        var utils = require('../utils');

        module.exports = function normalizeHeaderName(headers, normalizedName) {
            utils.forEach(headers, function processHeader(value, name) {
                if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                    headers[normalizedName] = value;
                    delete headers[name];
                }
            });
        };

    }, {"../utils": 33}],
    31: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
        var ignoreDuplicateOf = [
            'age', 'authorization', 'content-length', 'content-type', 'etag',
            'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
            'last-modified', 'location', 'max-forwards', 'proxy-authorization',
            'referer', 'retry-after', 'user-agent'
        ];

        /**
         * Parse headers into an object
         *
         * ```
         * Date: Wed, 27 Aug 2014 08:58:49 GMT
         * Content-Type: application/json
         * Connection: keep-alive
         * Transfer-Encoding: chunked
         * ```
         *
         * @param {String} headers Headers needing to be parsed
         * @returns {Object} Headers parsed into an object
         */
        module.exports = function parseHeaders(headers) {
            var parsed = {};
            var key;
            var val;
            var i;

            if (!headers) {
                return parsed;
            }

            utils.forEach(headers.split('\n'), function parser(line) {
                i = line.indexOf(':');
                key = utils.trim(line.substr(0, i)).toLowerCase();
                val = utils.trim(line.substr(i + 1));

                if (key) {
                    if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
                        return;
                    }
                    if (key === 'set-cookie') {
                        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
                    } else {
                        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
                    }
                }
            });

            return parsed;
        };

    }, {"./../utils": 33}],
    32: [function (require, module, exports) {
        'use strict';

        /**
         * Syntactic sugar for invoking a function and expanding an array for arguments.
         *
         * Common use case would be to use `Function.prototype.apply`.
         *
         *  ```js
         *  function f(x, y, z) {}
         *  var args = [1, 2, 3];
         *  f.apply(null, args);
         *  ```
         *
         * With `spread` this example can be re-written.
         *
         *  ```js
         *  spread(function(x, y, z) {})([1, 2, 3]);
         *  ```
         *
         * @param {Function} callback
         * @returns {Function}
         */
        module.exports = function spread(callback) {
            return function wrap(arr) {
                return callback.apply(null, arr);
            };
        };

    }, {}],
    33: [function (require, module, exports) {
        'use strict';

        var bind = require('./helpers/bind');
        var isBuffer = require('is-buffer');

        /*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

        var toString = Object.prototype.toString;

        /**
         * Determine if a value is an Array
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Array, otherwise false
         */
        function isArray(val) {
            return toString.call(val) === '[object Array]';
        }

        /**
         * Determine if a value is an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an ArrayBuffer, otherwise false
         */
        function isArrayBuffer(val) {
            return toString.call(val) === '[object ArrayBuffer]';
        }

        /**
         * Determine if a value is a FormData
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an FormData, otherwise false
         */
        function isFormData(val) {
            return (typeof FormData !== 'undefined') && (val instanceof FormData);
        }

        /**
         * Determine if a value is a view on an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
         */
        function isArrayBufferView(val) {
            var result;
            if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
                result = ArrayBuffer.isView(val);
            } else {
                result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
            }
            return result;
        }

        /**
         * Determine if a value is a String
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a String, otherwise false
         */
        function isString(val) {
            return typeof val === 'string';
        }

        /**
         * Determine if a value is a Number
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Number, otherwise false
         */
        function isNumber(val) {
            return typeof val === 'number';
        }

        /**
         * Determine if a value is undefined
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if the value is undefined, otherwise false
         */
        function isUndefined(val) {
            return typeof val === 'undefined';
        }

        /**
         * Determine if a value is an Object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Object, otherwise false
         */
        function isObject(val) {
            return val !== null && typeof val === 'object';
        }

        /**
         * Determine if a value is a Date
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Date, otherwise false
         */
        function isDate(val) {
            return toString.call(val) === '[object Date]';
        }

        /**
         * Determine if a value is a File
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a File, otherwise false
         */
        function isFile(val) {
            return toString.call(val) === '[object File]';
        }

        /**
         * Determine if a value is a Blob
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Blob, otherwise false
         */
        function isBlob(val) {
            return toString.call(val) === '[object Blob]';
        }

        /**
         * Determine if a value is a Function
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Function, otherwise false
         */
        function isFunction(val) {
            return toString.call(val) === '[object Function]';
        }

        /**
         * Determine if a value is a Stream
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Stream, otherwise false
         */
        function isStream(val) {
            return isObject(val) && isFunction(val.pipe);
        }

        /**
         * Determine if a value is a URLSearchParams object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a URLSearchParams object, otherwise false
         */
        function isURLSearchParams(val) {
            return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
        }

        /**
         * Trim excess whitespace off the beginning and end of a string
         *
         * @param {String} str The String to trim
         * @returns {String} The String freed of excess whitespace
         */
        function trim(str) {
            return str.replace(/^\s*/, '').replace(/\s*$/, '');
        }

        /**
         * Determine if we're running in a standard browser environment
         *
         * This allows axios to run in a web worker, and react-native.
         * Both environments support XMLHttpRequest, but not fully standard globals.
         *
         * web workers:
         *  typeof window -> undefined
         *  typeof document -> undefined
         *
         * react-native:
         *  navigator.product -> 'ReactNative'
         */
        function isStandardBrowserEnv() {
            if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
                return false;
            }
            return (
                typeof window !== 'undefined' &&
                typeof document !== 'undefined'
            );
        }

        /**
         * Iterate over an Array or an Object invoking a function for each item.
         *
         * If `obj` is an Array callback will be called passing
         * the value, index, and complete array for each item.
         *
         * If 'obj' is an Object callback will be called passing
         * the value, key, and complete object for each property.
         *
         * @param {Object|Array} obj The object to iterate
         * @param {Function} fn The callback to invoke for each item
         */
        function forEach(obj, fn) {
            // Don't bother if no value provided
            if (obj === null || typeof obj === 'undefined') {
                return;
            }

            // Force an array if not already something iterable
            if (typeof obj !== 'object') {
                /*eslint no-param-reassign:0*/
                obj = [obj];
            }

            if (isArray(obj)) {
                // Iterate over array values
                for (var i = 0, l = obj.length; i < l; i++) {
                    fn.call(null, obj[i], i, obj);
                }
            } else {
                // Iterate over object keys
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key)) {
                        fn.call(null, obj[key], key, obj);
                    }
                }
            }
        }

        /**
         * Accepts varargs expecting each argument to be an object, then
         * immutably merges the properties of each object and returns result.
         *
         * When multiple objects contain the same key the later object in
         * the arguments list will take precedence.
         *
         * Example:
         *
         * ```js
         * var result = merge({foo: 123}, {foo: 456});
         * console.log(result.foo); // outputs 456
         * ```
         *
         * @param {Object} obj1 Object to merge
         * @returns {Object} Result of all merge properties
         */
        function merge(/* obj1, obj2, obj3, ... */) {
            var result = {};

            function assignValue(val, key) {
                if (typeof result[key] === 'object' && typeof val === 'object') {
                    result[key] = merge(result[key], val);
                } else {
                    result[key] = val;
                }
            }

            for (var i = 0, l = arguments.length; i < l; i++) {
                forEach(arguments[i], assignValue);
            }
            return result;
        }

        /**
         * Extends object a by mutably adding to it the properties of object b.
         *
         * @param {Object} a The object to be extended
         * @param {Object} b The object to copy properties from
         * @param {Object} thisArg The object to bind function to
         * @return {Object} The resulting value of object a
         */
        function extend(a, b, thisArg) {
            forEach(b, function assignValue(val, key) {
                if (thisArg && typeof val === 'function') {
                    a[key] = bind(val, thisArg);
                } else {
                    a[key] = val;
                }
            });
            return a;
        }

        module.exports = {
            isArray: isArray,
            isArrayBuffer: isArrayBuffer,
            isBuffer: isBuffer,
            isFormData: isFormData,
            isArrayBufferView: isArrayBufferView,
            isString: isString,
            isNumber: isNumber,
            isObject: isObject,
            isUndefined: isUndefined,
            isDate: isDate,
            isFile: isFile,
            isBlob: isBlob,
            isFunction: isFunction,
            isStream: isStream,
            isURLSearchParams: isURLSearchParams,
            isStandardBrowserEnv: isStandardBrowserEnv,
            forEach: forEach,
            merge: merge,
            extend: extend,
            trim: trim
        };

    }, {"./helpers/bind": 23, "is-buffer": 367}],
    34: [function (require, module, exports) {
        /**
         * Bit twiddling hacks for JavaScript.
         *
         * Author: Mikola Lysenko
         *
         * Ported from Stanford bit twiddling hack library:
         *    http://graphics.stanford.edu/~seander/bithacks.html
         */

        "use strict";
        "use restrict";

//Number of bits in an integer
        var INT_BITS = 32;

//Constants
        exports.INT_BITS = INT_BITS;
        exports.INT_MAX = 0x7fffffff;
        exports.INT_MIN = -1 << (INT_BITS - 1);

//Returns -1, 0, +1 depending on sign of x
        exports.sign = function (v) {
            return (v > 0) - (v < 0);
        }

//Computes absolute value of integer
        exports.abs = function (v) {
            var mask = v >> (INT_BITS - 1);
            return (v ^ mask) - mask;
        }

//Computes minimum of integers x and y
        exports.min = function (x, y) {
            return y ^ ((x ^ y) & -(x < y));
        }

//Computes maximum of integers x and y
        exports.max = function (x, y) {
            return x ^ ((x ^ y) & -(x < y));
        }

//Checks if a number is a power of two
        exports.isPow2 = function (v) {
            return !(v & (v - 1)) && (!!v);
        }

//Computes log base 2 of v
        exports.log2 = function (v) {
            var r, shift;
            r = (v > 0xFFFF) << 4;
            v >>>= r;
            shift = (v > 0xFF) << 3;
            v >>>= shift;
            r |= shift;
            shift = (v > 0xF) << 2;
            v >>>= shift;
            r |= shift;
            shift = (v > 0x3) << 1;
            v >>>= shift;
            r |= shift;
            return r | (v >> 1);
        }

//Computes log base 10 of v
        exports.log10 = function (v) {
            return (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :
                (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :
                    (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;
        }

//Counts number of bits
        exports.popCount = function (v) {
            v = v - ((v >>> 1) & 0x55555555);
            v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
            return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
        }

//Counts number of trailing zeros
        function countTrailingZeros(v) {
            var c = 32;
            v &= -v;
            if (v) c--;
            if (v & 0x0000FFFF) c -= 16;
            if (v & 0x00FF00FF) c -= 8;
            if (v & 0x0F0F0F0F) c -= 4;
            if (v & 0x33333333) c -= 2;
            if (v & 0x55555555) c -= 1;
            return c;
        }

        exports.countTrailingZeros = countTrailingZeros;

//Rounds to next power of 2
        exports.nextPow2 = function (v) {
            v += v === 0;
            --v;
            v |= v >>> 1;
            v |= v >>> 2;
            v |= v >>> 4;
            v |= v >>> 8;
            v |= v >>> 16;
            return v + 1;
        }

//Rounds down to previous power of 2
        exports.prevPow2 = function (v) {
            v |= v >>> 1;
            v |= v >>> 2;
            v |= v >>> 4;
            v |= v >>> 8;
            v |= v >>> 16;
            return v - (v >>> 1);
        }

//Computes parity of word
        exports.parity = function (v) {
            v ^= v >>> 16;
            v ^= v >>> 8;
            v ^= v >>> 4;
            v &= 0xf;
            return (0x6996 >>> v) & 1;
        }

        var REVERSE_TABLE = new Array(256);

        (function (tab) {
            for (var i = 0; i < 256; ++i) {
                var v = i, r = i, s = 7;
                for (v >>>= 1; v; v >>>= 1) {
                    r <<= 1;
                    r |= v & 1;
                    --s;
                }
                tab[i] = (r << s) & 0xff;
            }
        })(REVERSE_TABLE);

//Reverse bits in a 32 bit word
        exports.reverse = function (v) {
            return (REVERSE_TABLE[v & 0xff] << 24) |
                (REVERSE_TABLE[(v >>> 8) & 0xff] << 16) |
                (REVERSE_TABLE[(v >>> 16) & 0xff] << 8) |
                REVERSE_TABLE[(v >>> 24) & 0xff];
        }

//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes
        exports.interleave2 = function (x, y) {
            x &= 0xFFFF;
            x = (x | (x << 8)) & 0x00FF00FF;
            x = (x | (x << 4)) & 0x0F0F0F0F;
            x = (x | (x << 2)) & 0x33333333;
            x = (x | (x << 1)) & 0x55555555;

            y &= 0xFFFF;
            y = (y | (y << 8)) & 0x00FF00FF;
            y = (y | (y << 4)) & 0x0F0F0F0F;
            y = (y | (y << 2)) & 0x33333333;
            y = (y | (y << 1)) & 0x55555555;

            return x | (y << 1);
        }

//Extracts the nth interleaved component
        exports.deinterleave2 = function (v, n) {
            v = (v >>> n) & 0x55555555;
            v = (v | (v >>> 1)) & 0x33333333;
            v = (v | (v >>> 2)) & 0x0F0F0F0F;
            v = (v | (v >>> 4)) & 0x00FF00FF;
            v = (v | (v >>> 16)) & 0x000FFFF;
            return (v << 16) >> 16;
        }


//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes
        exports.interleave3 = function (x, y, z) {
            x &= 0x3FF;
            x = (x | (x << 16)) & 4278190335;
            x = (x | (x << 8)) & 251719695;
            x = (x | (x << 4)) & 3272356035;
            x = (x | (x << 2)) & 1227133513;

            y &= 0x3FF;
            y = (y | (y << 16)) & 4278190335;
            y = (y | (y << 8)) & 251719695;
            y = (y | (y << 4)) & 3272356035;
            y = (y | (y << 2)) & 1227133513;
            x |= (y << 1);

            z &= 0x3FF;
            z = (z | (z << 16)) & 4278190335;
            z = (z | (z << 8)) & 251719695;
            z = (z | (z << 4)) & 3272356035;
            z = (z | (z << 2)) & 1227133513;

            return x | (z << 2);
        }

//Extracts nth interleaved component of a 3-tuple
        exports.deinterleave3 = function (v, n) {
            v = (v >>> n) & 1227133513;
            v = (v | (v >>> 2)) & 3272356035;
            v = (v | (v >>> 4)) & 251719695;
            v = (v | (v >>> 8)) & 4278190335;
            v = (v | (v >>> 16)) & 0x3FF;
            return (v << 22) >> 22;
        }

//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)
        exports.nextCombination = function (v) {
            var t = v | (v - 1);
            return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));
        }


    }, {}],
    35: [function (require, module, exports) {
        (function (process, global) {
            /* @preserve
 * The MIT License (MIT)
 *
 * Copyright (c) 2013-2017 Petka Antonov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
            /**
             * bluebird build version 3.5.1
             * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, using, timers, filter, any, each
             */
            !function (e) {
                if ("object" == typeof exports && "undefined" != typeof module) module.exports = e(); else if ("function" == typeof define && define.amd) define([], e); else {
                    var f;
                    "undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof self && (f = self), f.Promise = e()
                }
            }(function () {
                var define, module, exports;
                return (function e(t, n, r) {
                    function s(o, u) {
                        if (!n[o]) {
                            if (!t[o]) {
                                var a = typeof _dereq_ == "function" && _dereq_;
                                if (!u && a) return a(o, !0);
                                if (i) return i(o, !0);
                                var f = new Error("Cannot find module '" + o + "'");
                                throw f.code = "MODULE_NOT_FOUND", f
                            }
                            var l = n[o] = {exports: {}};
                            t[o][0].call(l.exports, function (e) {
                                var n = t[o][1][e];
                                return s(n ? n : e)
                            }, l, l.exports, e, t, n, r)
                        }
                        return n[o].exports
                    }

                    var i = typeof _dereq_ == "function" && _dereq_;
                    for (var o = 0; o < r.length; o++) s(r[o]);
                    return s
                })({
                    1: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise) {
                            var SomePromiseArray = Promise._SomePromiseArray;

                            function any(promises) {
                                var ret = new SomePromiseArray(promises);
                                var promise = ret.promise();
                                ret.setHowMany(1);
                                ret.setUnwrap();
                                ret.init();
                                return promise;
                            }

                            Promise.any = function (promises) {
                                return any(promises);
                            };

                            Promise.prototype.any = function () {
                                return any(this);
                            };

                        };

                    }, {}], 2: [function (_dereq_, module, exports) {
                        "use strict";
                        var firstLineError;
                        try {
                            throw new Error();
                        } catch (e) {
                            firstLineError = e;
                        }
                        var schedule = _dereq_("./schedule");
                        var Queue = _dereq_("./queue");
                        var util = _dereq_("./util");

                        function Async() {
                            this._customScheduler = false;
                            this._isTickUsed = false;
                            this._lateQueue = new Queue(16);
                            this._normalQueue = new Queue(16);
                            this._haveDrainedQueues = false;
                            this._trampolineEnabled = true;
                            var self = this;
                            this.drainQueues = function () {
                                self._drainQueues();
                            };
                            this._schedule = schedule;
                        }

                        Async.prototype.setScheduler = function (fn) {
                            var prev = this._schedule;
                            this._schedule = fn;
                            this._customScheduler = true;
                            return prev;
                        };

                        Async.prototype.hasCustomScheduler = function () {
                            return this._customScheduler;
                        };

                        Async.prototype.enableTrampoline = function () {
                            this._trampolineEnabled = true;
                        };

                        Async.prototype.disableTrampolineIfNecessary = function () {
                            if (util.hasDevTools) {
                                this._trampolineEnabled = false;
                            }
                        };

                        Async.prototype.haveItemsQueued = function () {
                            return this._isTickUsed || this._haveDrainedQueues;
                        };


                        Async.prototype.fatalError = function (e, isNode) {
                            if (isNode) {
                                process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) +
                                    "\n");
                                process.exit(2);
                            } else {
                                this.throwLater(e);
                            }
                        };

                        Async.prototype.throwLater = function (fn, arg) {
                            if (arguments.length === 1) {
                                arg = fn;
                                fn = function () {
                                    throw arg;
                                };
                            }
                            if (typeof setTimeout !== "undefined") {
                                setTimeout(function () {
                                    fn(arg);
                                }, 0);
                            } else try {
                                this._schedule(function () {
                                    fn(arg);
                                });
                            } catch (e) {
                                throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                            }
                        };

                        function AsyncInvokeLater(fn, receiver, arg) {
                            this._lateQueue.push(fn, receiver, arg);
                            this._queueTick();
                        }

                        function AsyncInvoke(fn, receiver, arg) {
                            this._normalQueue.push(fn, receiver, arg);
                            this._queueTick();
                        }

                        function AsyncSettlePromises(promise) {
                            this._normalQueue._pushOne(promise);
                            this._queueTick();
                        }

                        if (!util.hasDevTools) {
                            Async.prototype.invokeLater = AsyncInvokeLater;
                            Async.prototype.invoke = AsyncInvoke;
                            Async.prototype.settlePromises = AsyncSettlePromises;
                        } else {
                            Async.prototype.invokeLater = function (fn, receiver, arg) {
                                if (this._trampolineEnabled) {
                                    AsyncInvokeLater.call(this, fn, receiver, arg);
                                } else {
                                    this._schedule(function () {
                                        setTimeout(function () {
                                            fn.call(receiver, arg);
                                        }, 100);
                                    });
                                }
                            };

                            Async.prototype.invoke = function (fn, receiver, arg) {
                                if (this._trampolineEnabled) {
                                    AsyncInvoke.call(this, fn, receiver, arg);
                                } else {
                                    this._schedule(function () {
                                        fn.call(receiver, arg);
                                    });
                                }
                            };

                            Async.prototype.settlePromises = function (promise) {
                                if (this._trampolineEnabled) {
                                    AsyncSettlePromises.call(this, promise);
                                } else {
                                    this._schedule(function () {
                                        promise._settlePromises();
                                    });
                                }
                            };
                        }

                        Async.prototype._drainQueue = function (queue) {
                            while (queue.length() > 0) {
                                var fn = queue.shift();
                                if (typeof fn !== "function") {
                                    fn._settlePromises();
                                    continue;
                                }
                                var receiver = queue.shift();
                                var arg = queue.shift();
                                fn.call(receiver, arg);
                            }
                        };

                        Async.prototype._drainQueues = function () {
                            this._drainQueue(this._normalQueue);
                            this._reset();
                            this._haveDrainedQueues = true;
                            this._drainQueue(this._lateQueue);
                        };

                        Async.prototype._queueTick = function () {
                            if (!this._isTickUsed) {
                                this._isTickUsed = true;
                                this._schedule(this.drainQueues);
                            }
                        };

                        Async.prototype._reset = function () {
                            this._isTickUsed = false;
                        };

                        module.exports = Async;
                        module.exports.firstLineError = firstLineError;

                    }, {"./queue": 26, "./schedule": 29, "./util": 36}], 3: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise, INTERNAL, tryConvertToPromise, debug) {
                            var calledBind = false;
                            var rejectThis = function (_, e) {
                                this._reject(e);
                            };

                            var targetRejected = function (e, context) {
                                context.promiseRejectionQueued = true;
                                context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
                            };

                            var bindingResolved = function (thisArg, context) {
                                if (((this._bitField & 50397184) === 0)) {
                                    this._resolveCallback(context.target);
                                }
                            };

                            var bindingRejected = function (e, context) {
                                if (!context.promiseRejectionQueued) this._reject(e);
                            };

                            Promise.prototype.bind = function (thisArg) {
                                if (!calledBind) {
                                    calledBind = true;
                                    Promise.prototype._propagateFrom = debug.propagateFromFunction();
                                    Promise.prototype._boundValue = debug.boundValueFunction();
                                }
                                var maybePromise = tryConvertToPromise(thisArg);
                                var ret = new Promise(INTERNAL);
                                ret._propagateFrom(this, 1);
                                var target = this._target();
                                ret._setBoundTo(maybePromise);
                                if (maybePromise instanceof Promise) {
                                    var context = {
                                        promiseRejectionQueued: false,
                                        promise: ret,
                                        target: target,
                                        bindingPromise: maybePromise
                                    };
                                    target._then(INTERNAL, targetRejected, undefined, ret, context);
                                    maybePromise._then(
                                        bindingResolved, bindingRejected, undefined, ret, context);
                                    ret._setOnCancel(maybePromise);
                                } else {
                                    ret._resolveCallback(target);
                                }
                                return ret;
                            };

                            Promise.prototype._setBoundTo = function (obj) {
                                if (obj !== undefined) {
                                    this._bitField = this._bitField | 2097152;
                                    this._boundTo = obj;
                                } else {
                                    this._bitField = this._bitField & (~2097152);
                                }
                            };

                            Promise.prototype._isBound = function () {
                                return (this._bitField & 2097152) === 2097152;
                            };

                            Promise.bind = function (thisArg, value) {
                                return Promise.resolve(value).bind(thisArg);
                            };
                        };

                    }, {}], 4: [function (_dereq_, module, exports) {
                        "use strict";
                        var old;
                        if (typeof Promise !== "undefined") old = Promise;

                        function noConflict() {
                            try {
                                if (Promise === bluebird) Promise = old;
                            } catch (e) {
                            }
                            return bluebird;
                        }

                        var bluebird = _dereq_("./promise")();
                        bluebird.noConflict = noConflict;
                        module.exports = bluebird;

                    }, {"./promise": 22}], 5: [function (_dereq_, module, exports) {
                        "use strict";
                        var cr = Object.create;
                        if (cr) {
                            var callerCache = cr(null);
                            var getterCache = cr(null);
                            callerCache[" size"] = getterCache[" size"] = 0;
                        }

                        module.exports = function (Promise) {
                            var util = _dereq_("./util");
                            var canEvaluate = util.canEvaluate;
                            var isIdentifier = util.isIdentifier;

                            var getMethodCaller;
                            var getGetter;
                            if (!true) {
                                var makeMethodCaller = function (methodName) {
                                    return new Function("ensureMethod", "                                    \n\
        return function(obj) {                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) {                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
            }                                                                \n\
        };                                                                   \n\
        ".replace(/methodName/g, methodName))(ensureMethod);
                                };

                                var makeGetter = function (propertyName) {
                                    return new Function("obj", "                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ".replace("propertyName", propertyName));
                                };

                                var getCompiled = function (name, compiler, cache) {
                                    var ret = cache[name];
                                    if (typeof ret !== "function") {
                                        if (!isIdentifier(name)) {
                                            return null;
                                        }
                                        ret = compiler(name);
                                        cache[name] = ret;
                                        cache[" size"]++;
                                        if (cache[" size"] > 512) {
                                            var keys = Object.keys(cache);
                                            for (var i = 0; i < 256; ++i) delete cache[keys[i]];
                                            cache[" size"] = keys.length - 256;
                                        }
                                    }
                                    return ret;
                                };

                                getMethodCaller = function (name) {
                                    return getCompiled(name, makeMethodCaller, callerCache);
                                };

                                getGetter = function (name) {
                                    return getCompiled(name, makeGetter, getterCache);
                                };
                            }

                            function ensureMethod(obj, methodName) {
                                var fn;
                                if (obj != null) fn = obj[methodName];
                                if (typeof fn !== "function") {
                                    var message = "Object " + util.classString(obj) + " has no method '" +
                                        util.toString(methodName) + "'";
                                    throw new Promise.TypeError(message);
                                }
                                return fn;
                            }

                            function caller(obj) {
                                var methodName = this.pop();
                                var fn = ensureMethod(obj, methodName);
                                return fn.apply(obj, this);
                            }

                            Promise.prototype.call = function (methodName) {
                                var args = [].slice.call(arguments, 1);
                                ;
                                if (!true) {
                                    if (canEvaluate) {
                                        var maybeCaller = getMethodCaller(methodName);
                                        if (maybeCaller !== null) {
                                            return this._then(
                                                maybeCaller, undefined, undefined, args, undefined);
                                        }
                                    }
                                }
                                args.push(methodName);
                                return this._then(caller, undefined, undefined, args, undefined);
                            };

                            function namedGetter(obj) {
                                return obj[this];
                            }

                            function indexedGetter(obj) {
                                var index = +this;
                                if (index < 0) index = Math.max(0, index + obj.length);
                                return obj[index];
                            }

                            Promise.prototype.get = function (propertyName) {
                                var isIndex = (typeof propertyName === "number");
                                var getter;
                                if (!isIndex) {
                                    if (canEvaluate) {
                                        var maybeGetter = getGetter(propertyName);
                                        getter = maybeGetter !== null ? maybeGetter : namedGetter;
                                    } else {
                                        getter = namedGetter;
                                    }
                                } else {
                                    getter = indexedGetter;
                                }
                                return this._then(getter, undefined, undefined, propertyName, undefined);
                            };
                        };

                    }, {"./util": 36}], 6: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise, PromiseArray, apiRejection, debug) {
                            var util = _dereq_("./util");
                            var tryCatch = util.tryCatch;
                            var errorObj = util.errorObj;
                            var async = Promise._async;

                            Promise.prototype["break"] = Promise.prototype.cancel = function () {
                                if (!debug.cancellation()) return this._warn("cancellation is disabled");

                                var promise = this;
                                var child = promise;
                                while (promise._isCancellable()) {
                                    if (!promise._cancelBy(child)) {
                                        if (child._isFollowing()) {
                                            child._followee().cancel();
                                        } else {
                                            child._cancelBranched();
                                        }
                                        break;
                                    }

                                    var parent = promise._cancellationParent;
                                    if (parent == null || !parent._isCancellable()) {
                                        if (promise._isFollowing()) {
                                            promise._followee().cancel();
                                        } else {
                                            promise._cancelBranched();
                                        }
                                        break;
                                    } else {
                                        if (promise._isFollowing()) promise._followee().cancel();
                                        promise._setWillBeCancelled();
                                        child = promise;
                                        promise = parent;
                                    }
                                }
                            };

                            Promise.prototype._branchHasCancelled = function () {
                                this._branchesRemainingToCancel--;
                            };

                            Promise.prototype._enoughBranchesHaveCancelled = function () {
                                return this._branchesRemainingToCancel === undefined ||
                                    this._branchesRemainingToCancel <= 0;
                            };

                            Promise.prototype._cancelBy = function (canceller) {
                                if (canceller === this) {
                                    this._branchesRemainingToCancel = 0;
                                    this._invokeOnCancel();
                                    return true;
                                } else {
                                    this._branchHasCancelled();
                                    if (this._enoughBranchesHaveCancelled()) {
                                        this._invokeOnCancel();
                                        return true;
                                    }
                                }
                                return false;
                            };

                            Promise.prototype._cancelBranched = function () {
                                if (this._enoughBranchesHaveCancelled()) {
                                    this._cancel();
                                }
                            };

                            Promise.prototype._cancel = function () {
                                if (!this._isCancellable()) return;
                                this._setCancelled();
                                async.invoke(this._cancelPromises, this, undefined);
                            };

                            Promise.prototype._cancelPromises = function () {
                                if (this._length() > 0) this._settlePromises();
                            };

                            Promise.prototype._unsetOnCancel = function () {
                                this._onCancelField = undefined;
                            };

                            Promise.prototype._isCancellable = function () {
                                return this.isPending() && !this._isCancelled();
                            };

                            Promise.prototype.isCancellable = function () {
                                return this.isPending() && !this.isCancelled();
                            };

                            Promise.prototype._doInvokeOnCancel = function (onCancelCallback, internalOnly) {
                                if (util.isArray(onCancelCallback)) {
                                    for (var i = 0; i < onCancelCallback.length; ++i) {
                                        this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
                                    }
                                } else if (onCancelCallback !== undefined) {
                                    if (typeof onCancelCallback === "function") {
                                        if (!internalOnly) {
                                            var e = tryCatch(onCancelCallback).call(this._boundValue());
                                            if (e === errorObj) {
                                                this._attachExtraTrace(e.e);
                                                async.throwLater(e.e);
                                            }
                                        }
                                    } else {
                                        onCancelCallback._resultCancelled(this);
                                    }
                                }
                            };

                            Promise.prototype._invokeOnCancel = function () {
                                var onCancelCallback = this._onCancel();
                                this._unsetOnCancel();
                                async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
                            };

                            Promise.prototype._invokeInternalOnCancel = function () {
                                if (this._isCancellable()) {
                                    this._doInvokeOnCancel(this._onCancel(), true);
                                    this._unsetOnCancel();
                                }
                            };

                            Promise.prototype._resultCancelled = function () {
                                this.cancel();
                            };

                        };

                    }, {"./util": 36}], 7: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (NEXT_FILTER) {
                            var util = _dereq_("./util");
                            var getKeys = _dereq_("./es5").keys;
                            var tryCatch = util.tryCatch;
                            var errorObj = util.errorObj;

                            function catchFilter(instances, cb, promise) {
                                return function (e) {
                                    var boundTo = promise._boundValue();
                                    predicateLoop: for (var i = 0; i < instances.length; ++i) {
                                        var item = instances[i];

                                        if (item === Error ||
                                            (item != null && item.prototype instanceof Error)) {
                                            if (e instanceof item) {
                                                return tryCatch(cb).call(boundTo, e);
                                            }
                                        } else if (typeof item === "function") {
                                            var matchesPredicate = tryCatch(item).call(boundTo, e);
                                            if (matchesPredicate === errorObj) {
                                                return matchesPredicate;
                                            } else if (matchesPredicate) {
                                                return tryCatch(cb).call(boundTo, e);
                                            }
                                        } else if (util.isObject(e)) {
                                            var keys = getKeys(item);
                                            for (var j = 0; j < keys.length; ++j) {
                                                var key = keys[j];
                                                if (item[key] != e[key]) {
                                                    continue predicateLoop;
                                                }
                                            }
                                            return tryCatch(cb).call(boundTo, e);
                                        }
                                    }
                                    return NEXT_FILTER;
                                };
                            }

                            return catchFilter;
                        };

                    }, {"./es5": 13, "./util": 36}], 8: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise) {
                            var longStackTraces = false;
                            var contextStack = [];

                            Promise.prototype._promiseCreated = function () {
                            };
                            Promise.prototype._pushContext = function () {
                            };
                            Promise.prototype._popContext = function () {
                                return null;
                            };
                            Promise._peekContext = Promise.prototype._peekContext = function () {
                            };

                            function Context() {
                                this._trace = new Context.CapturedTrace(peekContext());
                            }

                            Context.prototype._pushContext = function () {
                                if (this._trace !== undefined) {
                                    this._trace._promiseCreated = null;
                                    contextStack.push(this._trace);
                                }
                            };

                            Context.prototype._popContext = function () {
                                if (this._trace !== undefined) {
                                    var trace = contextStack.pop();
                                    var ret = trace._promiseCreated;
                                    trace._promiseCreated = null;
                                    return ret;
                                }
                                return null;
                            };

                            function createContext() {
                                if (longStackTraces) return new Context();
                            }

                            function peekContext() {
                                var lastIndex = contextStack.length - 1;
                                if (lastIndex >= 0) {
                                    return contextStack[lastIndex];
                                }
                                return undefined;
                            }

                            Context.CapturedTrace = null;
                            Context.create = createContext;
                            Context.deactivateLongStackTraces = function () {
                            };
                            Context.activateLongStackTraces = function () {
                                var Promise_pushContext = Promise.prototype._pushContext;
                                var Promise_popContext = Promise.prototype._popContext;
                                var Promise_PeekContext = Promise._peekContext;
                                var Promise_peekContext = Promise.prototype._peekContext;
                                var Promise_promiseCreated = Promise.prototype._promiseCreated;
                                Context.deactivateLongStackTraces = function () {
                                    Promise.prototype._pushContext = Promise_pushContext;
                                    Promise.prototype._popContext = Promise_popContext;
                                    Promise._peekContext = Promise_PeekContext;
                                    Promise.prototype._peekContext = Promise_peekContext;
                                    Promise.prototype._promiseCreated = Promise_promiseCreated;
                                    longStackTraces = false;
                                };
                                longStackTraces = true;
                                Promise.prototype._pushContext = Context.prototype._pushContext;
                                Promise.prototype._popContext = Context.prototype._popContext;
                                Promise._peekContext = Promise.prototype._peekContext = peekContext;
                                Promise.prototype._promiseCreated = function () {
                                    var ctx = this._peekContext();
                                    if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
                                };
                            };
                            return Context;
                        };

                    }, {}], 9: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise, Context) {
                            var getDomain = Promise._getDomain;
                            var async = Promise._async;
                            var Warning = _dereq_("./errors").Warning;
                            var util = _dereq_("./util");
                            var canAttachTrace = util.canAttachTrace;
                            var unhandledRejectionHandled;
                            var possiblyUnhandledRejection;
                            var bluebirdFramePattern =
                                /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
                            var nodeFramePattern = /\((?:timers\.js):\d+:\d+\)/;
                            var parseLinePattern = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
                            var stackFramePattern = null;
                            var formatStack = null;
                            var indentStackFrames = false;
                            var printWarning;
                            var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 &&
                                (true ||
                                    util.env("BLUEBIRD_DEBUG") ||
                                    util.env("NODE_ENV") === "development"));

                            var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 &&
                                (debugging || util.env("BLUEBIRD_WARNINGS")));

                            var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 &&
                                (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));

                            var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 &&
                                (warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));

                            Promise.prototype.suppressUnhandledRejections = function () {
                                var target = this._target();
                                target._bitField = ((target._bitField & (~1048576)) |
                                    524288);
                            };

                            Promise.prototype._ensurePossibleRejectionHandled = function () {
                                if ((this._bitField & 524288) !== 0) return;
                                this._setRejectionIsUnhandled();
                                var self = this;
                                setTimeout(function () {
                                    self._notifyUnhandledRejection();
                                }, 1);
                            };

                            Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
                                fireRejectionEvent("rejectionHandled",
                                    unhandledRejectionHandled, undefined, this);
                            };

                            Promise.prototype._setReturnedNonUndefined = function () {
                                this._bitField = this._bitField | 268435456;
                            };

                            Promise.prototype._returnedNonUndefined = function () {
                                return (this._bitField & 268435456) !== 0;
                            };

                            Promise.prototype._notifyUnhandledRejection = function () {
                                if (this._isRejectionUnhandled()) {
                                    var reason = this._settledValue();
                                    this._setUnhandledRejectionIsNotified();
                                    fireRejectionEvent("unhandledRejection",
                                        possiblyUnhandledRejection, reason, this);
                                }
                            };

                            Promise.prototype._setUnhandledRejectionIsNotified = function () {
                                this._bitField = this._bitField | 262144;
                            };

                            Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
                                this._bitField = this._bitField & (~262144);
                            };

                            Promise.prototype._isUnhandledRejectionNotified = function () {
                                return (this._bitField & 262144) > 0;
                            };

                            Promise.prototype._setRejectionIsUnhandled = function () {
                                this._bitField = this._bitField | 1048576;
                            };

                            Promise.prototype._unsetRejectionIsUnhandled = function () {
                                this._bitField = this._bitField & (~1048576);
                                if (this._isUnhandledRejectionNotified()) {
                                    this._unsetUnhandledRejectionIsNotified();
                                    this._notifyUnhandledRejectionIsHandled();
                                }
                            };

                            Promise.prototype._isRejectionUnhandled = function () {
                                return (this._bitField & 1048576) > 0;
                            };

                            Promise.prototype._warn = function (message, shouldUseOwnTrace, promise) {
                                return warn(message, shouldUseOwnTrace, promise || this);
                            };

                            Promise.onPossiblyUnhandledRejection = function (fn) {
                                var domain = getDomain();
                                possiblyUnhandledRejection =
                                    typeof fn === "function" ? (domain === null ?
                                        fn : util.domainBind(domain, fn))
                                        : undefined;
                            };

                            Promise.onUnhandledRejectionHandled = function (fn) {
                                var domain = getDomain();
                                unhandledRejectionHandled =
                                    typeof fn === "function" ? (domain === null ?
                                        fn : util.domainBind(domain, fn))
                                        : undefined;
                            };

                            var disableLongStackTraces = function () {
                            };
                            Promise.longStackTraces = function () {
                                if (async.haveItemsQueued() && !config.longStackTraces) {
                                    throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                                }
                                if (!config.longStackTraces && longStackTracesIsSupported()) {
                                    var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
                                    var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
                                    config.longStackTraces = true;
                                    disableLongStackTraces = function () {
                                        if (async.haveItemsQueued() && !config.longStackTraces) {
                                            throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                                        }
                                        Promise.prototype._captureStackTrace = Promise_captureStackTrace;
                                        Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
                                        Context.deactivateLongStackTraces();
                                        async.enableTrampoline();
                                        config.longStackTraces = false;
                                    };
                                    Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
                                    Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
                                    Context.activateLongStackTraces();
                                    async.disableTrampolineIfNecessary();
                                }
                            };

                            Promise.hasLongStackTraces = function () {
                                return config.longStackTraces && longStackTracesIsSupported();
                            };

                            var fireDomEvent = (function () {
                                try {
                                    if (typeof CustomEvent === "function") {
                                        var event = new CustomEvent("CustomEvent");
                                        util.global.dispatchEvent(event);
                                        return function (name, event) {
                                            var domEvent = new CustomEvent(name.toLowerCase(), {
                                                detail: event,
                                                cancelable: true
                                            });
                                            return !util.global.dispatchEvent(domEvent);
                                        };
                                    } else if (typeof Event === "function") {
                                        var event = new Event("CustomEvent");
                                        util.global.dispatchEvent(event);
                                        return function (name, event) {
                                            var domEvent = new Event(name.toLowerCase(), {
                                                cancelable: true
                                            });
                                            domEvent.detail = event;
                                            return !util.global.dispatchEvent(domEvent);
                                        };
                                    } else {
                                        var event = document.createEvent("CustomEvent");
                                        event.initCustomEvent("testingtheevent", false, true, {});
                                        util.global.dispatchEvent(event);
                                        return function (name, event) {
                                            var domEvent = document.createEvent("CustomEvent");
                                            domEvent.initCustomEvent(name.toLowerCase(), false, true,
                                                event);
                                            return !util.global.dispatchEvent(domEvent);
                                        };
                                    }
                                } catch (e) {
                                }
                                return function () {
                                    return false;
                                };
                            })();

                            var fireGlobalEvent = (function () {
                                if (util.isNode) {
                                    return function () {
                                        return process.emit.apply(process, arguments);
                                    };
                                } else {
                                    if (!util.global) {
                                        return function () {
                                            return false;
                                        };
                                    }
                                    return function (name) {
                                        var methodName = "on" + name.toLowerCase();
                                        var method = util.global[methodName];
                                        if (!method) return false;
                                        method.apply(util.global, [].slice.call(arguments, 1));
                                        return true;
                                    };
                                }
                            })();

                            function generatePromiseLifecycleEventObject(name, promise) {
                                return {promise: promise};
                            }

                            var eventToObjectGenerator = {
                                promiseCreated: generatePromiseLifecycleEventObject,
                                promiseFulfilled: generatePromiseLifecycleEventObject,
                                promiseRejected: generatePromiseLifecycleEventObject,
                                promiseResolved: generatePromiseLifecycleEventObject,
                                promiseCancelled: generatePromiseLifecycleEventObject,
                                promiseChained: function (name, promise, child) {
                                    return {promise: promise, child: child};
                                },
                                warning: function (name, warning) {
                                    return {warning: warning};
                                },
                                unhandledRejection: function (name, reason, promise) {
                                    return {reason: reason, promise: promise};
                                },
                                rejectionHandled: generatePromiseLifecycleEventObject
                            };

                            var activeFireEvent = function (name) {
                                var globalEventFired = false;
                                try {
                                    globalEventFired = fireGlobalEvent.apply(null, arguments);
                                } catch (e) {
                                    async.throwLater(e);
                                    globalEventFired = true;
                                }

                                var domEventFired = false;
                                try {
                                    domEventFired = fireDomEvent(name,
                                        eventToObjectGenerator[name].apply(null, arguments));
                                } catch (e) {
                                    async.throwLater(e);
                                    domEventFired = true;
                                }

                                return domEventFired || globalEventFired;
                            };

                            Promise.config = function (opts) {
                                opts = Object(opts);
                                if ("longStackTraces" in opts) {
                                    if (opts.longStackTraces) {
                                        Promise.longStackTraces();
                                    } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {
                                        disableLongStackTraces();
                                    }
                                }
                                if ("warnings" in opts) {
                                    var warningsOption = opts.warnings;
                                    config.warnings = !!warningsOption;
                                    wForgottenReturn = config.warnings;

                                    if (util.isObject(warningsOption)) {
                                        if ("wForgottenReturn" in warningsOption) {
                                            wForgottenReturn = !!warningsOption.wForgottenReturn;
                                        }
                                    }
                                }
                                if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
                                    if (async.haveItemsQueued()) {
                                        throw new Error(
                                            "cannot enable cancellation after promises are in use");
                                    }
                                    Promise.prototype._clearCancellationData =
                                        cancellationClearCancellationData;
                                    Promise.prototype._propagateFrom = cancellationPropagateFrom;
                                    Promise.prototype._onCancel = cancellationOnCancel;
                                    Promise.prototype._setOnCancel = cancellationSetOnCancel;
                                    Promise.prototype._attachCancellationCallback =
                                        cancellationAttachCancellationCallback;
                                    Promise.prototype._execute = cancellationExecute;
                                    propagateFromFunction = cancellationPropagateFrom;
                                    config.cancellation = true;
                                }
                                if ("monitoring" in opts) {
                                    if (opts.monitoring && !config.monitoring) {
                                        config.monitoring = true;
                                        Promise.prototype._fireEvent = activeFireEvent;
                                    } else if (!opts.monitoring && config.monitoring) {
                                        config.monitoring = false;
                                        Promise.prototype._fireEvent = defaultFireEvent;
                                    }
                                }
                                return Promise;
                            };

                            function defaultFireEvent() {
                                return false;
                            }

                            Promise.prototype._fireEvent = defaultFireEvent;
                            Promise.prototype._execute = function (executor, resolve, reject) {
                                try {
                                    executor(resolve, reject);
                                } catch (e) {
                                    return e;
                                }
                            };
                            Promise.prototype._onCancel = function () {
                            };
                            Promise.prototype._setOnCancel = function (handler) {
                                ;
                            };
                            Promise.prototype._attachCancellationCallback = function (onCancel) {
                                ;
                            };
                            Promise.prototype._captureStackTrace = function () {
                            };
                            Promise.prototype._attachExtraTrace = function () {
                            };
                            Promise.prototype._clearCancellationData = function () {
                            };
                            Promise.prototype._propagateFrom = function (parent, flags) {
                                ;
                                ;
                            };

                            function cancellationExecute(executor, resolve, reject) {
                                var promise = this;
                                try {
                                    executor(resolve, reject, function (onCancel) {
                                        if (typeof onCancel !== "function") {
                                            throw new TypeError("onCancel must be a function, got: " +
                                                util.toString(onCancel));
                                        }
                                        promise._attachCancellationCallback(onCancel);
                                    });
                                } catch (e) {
                                    return e;
                                }
                            }

                            function cancellationAttachCancellationCallback(onCancel) {
                                if (!this._isCancellable()) return this;

                                var previousOnCancel = this._onCancel();
                                if (previousOnCancel !== undefined) {
                                    if (util.isArray(previousOnCancel)) {
                                        previousOnCancel.push(onCancel);
                                    } else {
                                        this._setOnCancel([previousOnCancel, onCancel]);
                                    }
                                } else {
                                    this._setOnCancel(onCancel);
                                }
                            }

                            function cancellationOnCancel() {
                                return this._onCancelField;
                            }

                            function cancellationSetOnCancel(onCancel) {
                                this._onCancelField = onCancel;
                            }

                            function cancellationClearCancellationData() {
                                this._cancellationParent = undefined;
                                this._onCancelField = undefined;
                            }

                            function cancellationPropagateFrom(parent, flags) {
                                if ((flags & 1) !== 0) {
                                    this._cancellationParent = parent;
                                    var branchesRemainingToCancel = parent._branchesRemainingToCancel;
                                    if (branchesRemainingToCancel === undefined) {
                                        branchesRemainingToCancel = 0;
                                    }
                                    parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
                                }
                                if ((flags & 2) !== 0 && parent._isBound()) {
                                    this._setBoundTo(parent._boundTo);
                                }
                            }

                            function bindingPropagateFrom(parent, flags) {
                                if ((flags & 2) !== 0 && parent._isBound()) {
                                    this._setBoundTo(parent._boundTo);
                                }
                            }

                            var propagateFromFunction = bindingPropagateFrom;

                            function boundValueFunction() {
                                var ret = this._boundTo;
                                if (ret !== undefined) {
                                    if (ret instanceof Promise) {
                                        if (ret.isFulfilled()) {
                                            return ret.value();
                                        } else {
                                            return undefined;
                                        }
                                    }
                                }
                                return ret;
                            }

                            function longStackTracesCaptureStackTrace() {
                                this._trace = new CapturedTrace(this._peekContext());
                            }

                            function longStackTracesAttachExtraTrace(error, ignoreSelf) {
                                if (canAttachTrace(error)) {
                                    var trace = this._trace;
                                    if (trace !== undefined) {
                                        if (ignoreSelf) trace = trace._parent;
                                    }
                                    if (trace !== undefined) {
                                        trace.attachExtraTrace(error);
                                    } else if (!error.__stackCleaned__) {
                                        var parsed = parseStackAndMessage(error);
                                        util.notEnumerableProp(error, "stack",
                                            parsed.message + "\n" + parsed.stack.join("\n"));
                                        util.notEnumerableProp(error, "__stackCleaned__", true);
                                    }
                                }
                            }

                            function checkForgottenReturns(returnValue, promiseCreated, name, promise,
                                                           parent) {
                                if (returnValue === undefined && promiseCreated !== null &&
                                    wForgottenReturn) {
                                    if (parent !== undefined && parent._returnedNonUndefined()) return;
                                    if ((promise._bitField & 65535) === 0) return;

                                    if (name) name = name + " ";
                                    var handlerLine = "";
                                    var creatorLine = "";
                                    if (promiseCreated._trace) {
                                        var traceLines = promiseCreated._trace.stack.split("\n");
                                        var stack = cleanStack(traceLines);
                                        for (var i = stack.length - 1; i >= 0; --i) {
                                            var line = stack[i];
                                            if (!nodeFramePattern.test(line)) {
                                                var lineMatches = line.match(parseLinePattern);
                                                if (lineMatches) {
                                                    handlerLine = "at " + lineMatches[1] +
                                                        ":" + lineMatches[2] + ":" + lineMatches[3] + " ";
                                                }
                                                break;
                                            }
                                        }

                                        if (stack.length > 0) {
                                            var firstUserLine = stack[0];
                                            for (var i = 0; i < traceLines.length; ++i) {

                                                if (traceLines[i] === firstUserLine) {
                                                    if (i > 0) {
                                                        creatorLine = "\n" + traceLines[i - 1];
                                                    }
                                                    break;
                                                }
                                            }

                                        }
                                    }
                                    var msg = "a promise was created in a " + name +
                                        "handler " + handlerLine + "but was not returned from it, " +
                                        "see http://goo.gl/rRqMUw" +
                                        creatorLine;
                                    promise._warn(msg, true, promiseCreated);
                                }
                            }

                            function deprecated(name, replacement) {
                                var message = name +
                                    " is deprecated and will be removed in a future version.";
                                if (replacement) message += " Use " + replacement + " instead.";
                                return warn(message);
                            }

                            function warn(message, shouldUseOwnTrace, promise) {
                                if (!config.warnings) return;
                                var warning = new Warning(message);
                                var ctx;
                                if (shouldUseOwnTrace) {
                                    promise._attachExtraTrace(warning);
                                } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
                                    ctx.attachExtraTrace(warning);
                                } else {
                                    var parsed = parseStackAndMessage(warning);
                                    warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
                                }

                                if (!activeFireEvent("warning", warning)) {
                                    formatAndLogError(warning, "", true);
                                }
                            }

                            function reconstructStack(message, stacks) {
                                for (var i = 0; i < stacks.length - 1; ++i) {
                                    stacks[i].push("From previous event:");
                                    stacks[i] = stacks[i].join("\n");
                                }
                                if (i < stacks.length) {
                                    stacks[i] = stacks[i].join("\n");
                                }
                                return message + "\n" + stacks.join("\n");
                            }

                            function removeDuplicateOrEmptyJumps(stacks) {
                                for (var i = 0; i < stacks.length; ++i) {
                                    if (stacks[i].length === 0 ||
                                        ((i + 1 < stacks.length) && stacks[i][0] === stacks[i + 1][0])) {
                                        stacks.splice(i, 1);
                                        i--;
                                    }
                                }
                            }

                            function removeCommonRoots(stacks) {
                                var current = stacks[0];
                                for (var i = 1; i < stacks.length; ++i) {
                                    var prev = stacks[i];
                                    var currentLastIndex = current.length - 1;
                                    var currentLastLine = current[currentLastIndex];
                                    var commonRootMeetPoint = -1;

                                    for (var j = prev.length - 1; j >= 0; --j) {
                                        if (prev[j] === currentLastLine) {
                                            commonRootMeetPoint = j;
                                            break;
                                        }
                                    }

                                    for (var j = commonRootMeetPoint; j >= 0; --j) {
                                        var line = prev[j];
                                        if (current[currentLastIndex] === line) {
                                            current.pop();
                                            currentLastIndex--;
                                        } else {
                                            break;
                                        }
                                    }
                                    current = prev;
                                }
                            }

                            function cleanStack(stack) {
                                var ret = [];
                                for (var i = 0; i < stack.length; ++i) {
                                    var line = stack[i];
                                    var isTraceLine = "    (No stack trace)" === line ||
                                        stackFramePattern.test(line);
                                    var isInternalFrame = isTraceLine && shouldIgnore(line);
                                    if (isTraceLine && !isInternalFrame) {
                                        if (indentStackFrames && line.charAt(0) !== " ") {
                                            line = "    " + line;
                                        }
                                        ret.push(line);
                                    }
                                }
                                return ret;
                            }

                            function stackFramesAsArray(error) {
                                var stack = error.stack.replace(/\s+$/g, "").split("\n");
                                for (var i = 0; i < stack.length; ++i) {
                                    var line = stack[i];
                                    if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
                                        break;
                                    }
                                }
                                if (i > 0 && error.name != "SyntaxError") {
                                    stack = stack.slice(i);
                                }
                                return stack;
                            }

                            function parseStackAndMessage(error) {
                                var stack = error.stack;
                                var message = error.toString();
                                stack = typeof stack === "string" && stack.length > 0
                                    ? stackFramesAsArray(error) : ["    (No stack trace)"];
                                return {
                                    message: message,
                                    stack: error.name == "SyntaxError" ? stack : cleanStack(stack)
                                };
                            }

                            function formatAndLogError(error, title, isSoft) {
                                if (typeof console !== "undefined") {
                                    var message;
                                    if (util.isObject(error)) {
                                        var stack = error.stack;
                                        message = title + formatStack(stack, error);
                                    } else {
                                        message = title + String(error);
                                    }
                                    if (typeof printWarning === "function") {
                                        printWarning(message, isSoft);
                                    } else if (typeof console.log === "function" ||
                                        typeof console.log === "object") {
                                        console.log(message);
                                    }
                                }
                            }

                            function fireRejectionEvent(name, localHandler, reason, promise) {
                                var localEventFired = false;
                                try {
                                    if (typeof localHandler === "function") {
                                        localEventFired = true;
                                        if (name === "rejectionHandled") {
                                            localHandler(promise);
                                        } else {
                                            localHandler(reason, promise);
                                        }
                                    }
                                } catch (e) {
                                    async.throwLater(e);
                                }

                                if (name === "unhandledRejection") {
                                    if (!activeFireEvent(name, reason, promise) && !localEventFired) {
                                        formatAndLogError(reason, "Unhandled rejection ");
                                    }
                                } else {
                                    activeFireEvent(name, promise);
                                }
                            }

                            function formatNonError(obj) {
                                var str;
                                if (typeof obj === "function") {
                                    str = "[function " +
                                        (obj.name || "anonymous") +
                                        "]";
                                } else {
                                    str = obj && typeof obj.toString === "function"
                                        ? obj.toString() : util.toString(obj);
                                    var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
                                    if (ruselessToString.test(str)) {
                                        try {
                                            var newStr = JSON.stringify(obj);
                                            str = newStr;
                                        } catch (e) {

                                        }
                                    }
                                    if (str.length === 0) {
                                        str = "(empty array)";
                                    }
                                }
                                return ("(<" + snip(str) + ">, no stack trace)");
                            }

                            function snip(str) {
                                var maxChars = 41;
                                if (str.length < maxChars) {
                                    return str;
                                }
                                return str.substr(0, maxChars - 3) + "...";
                            }

                            function longStackTracesIsSupported() {
                                return typeof captureStackTrace === "function";
                            }

                            var shouldIgnore = function () {
                                return false;
                            };
                            var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;

                            function parseLineInfo(line) {
                                var matches = line.match(parseLineInfoRegex);
                                if (matches) {
                                    return {
                                        fileName: matches[1],
                                        line: parseInt(matches[2], 10)
                                    };
                                }
                            }

                            function setBounds(firstLineError, lastLineError) {
                                if (!longStackTracesIsSupported()) return;
                                var firstStackLines = firstLineError.stack.split("\n");
                                var lastStackLines = lastLineError.stack.split("\n");
                                var firstIndex = -1;
                                var lastIndex = -1;
                                var firstFileName;
                                var lastFileName;
                                for (var i = 0; i < firstStackLines.length; ++i) {
                                    var result = parseLineInfo(firstStackLines[i]);
                                    if (result) {
                                        firstFileName = result.fileName;
                                        firstIndex = result.line;
                                        break;
                                    }
                                }
                                for (var i = 0; i < lastStackLines.length; ++i) {
                                    var result = parseLineInfo(lastStackLines[i]);
                                    if (result) {
                                        lastFileName = result.fileName;
                                        lastIndex = result.line;
                                        break;
                                    }
                                }
                                if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
                                    firstFileName !== lastFileName || firstIndex >= lastIndex) {
                                    return;
                                }

                                shouldIgnore = function (line) {
                                    if (bluebirdFramePattern.test(line)) return true;
                                    var info = parseLineInfo(line);
                                    if (info) {
                                        if (info.fileName === firstFileName &&
                                            (firstIndex <= info.line && info.line <= lastIndex)) {
                                            return true;
                                        }
                                    }
                                    return false;
                                };
                            }

                            function CapturedTrace(parent) {
                                this._parent = parent;
                                this._promisesCreated = 0;
                                var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
                                captureStackTrace(this, CapturedTrace);
                                if (length > 32) this.uncycle();
                            }

                            util.inherits(CapturedTrace, Error);
                            Context.CapturedTrace = CapturedTrace;

                            CapturedTrace.prototype.uncycle = function () {
                                var length = this._length;
                                if (length < 2) return;
                                var nodes = [];
                                var stackToIndex = {};

                                for (var i = 0, node = this; node !== undefined; ++i) {
                                    nodes.push(node);
                                    node = node._parent;
                                }
                                length = this._length = i;
                                for (var i = length - 1; i >= 0; --i) {
                                    var stack = nodes[i].stack;
                                    if (stackToIndex[stack] === undefined) {
                                        stackToIndex[stack] = i;
                                    }
                                }
                                for (var i = 0; i < length; ++i) {
                                    var currentStack = nodes[i].stack;
                                    var index = stackToIndex[currentStack];
                                    if (index !== undefined && index !== i) {
                                        if (index > 0) {
                                            nodes[index - 1]._parent = undefined;
                                            nodes[index - 1]._length = 1;
                                        }
                                        nodes[i]._parent = undefined;
                                        nodes[i]._length = 1;
                                        var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

                                        if (index < length - 1) {
                                            cycleEdgeNode._parent = nodes[index + 1];
                                            cycleEdgeNode._parent.uncycle();
                                            cycleEdgeNode._length =
                                                cycleEdgeNode._parent._length + 1;
                                        } else {
                                            cycleEdgeNode._parent = undefined;
                                            cycleEdgeNode._length = 1;
                                        }
                                        var currentChildLength = cycleEdgeNode._length + 1;
                                        for (var j = i - 2; j >= 0; --j) {
                                            nodes[j]._length = currentChildLength;
                                            currentChildLength++;
                                        }
                                        return;
                                    }
                                }
                            };

                            CapturedTrace.prototype.attachExtraTrace = function (error) {
                                if (error.__stackCleaned__) return;
                                this.uncycle();
                                var parsed = parseStackAndMessage(error);
                                var message = parsed.message;
                                var stacks = [parsed.stack];

                                var trace = this;
                                while (trace !== undefined) {
                                    stacks.push(cleanStack(trace.stack.split("\n")));
                                    trace = trace._parent;
                                }
                                removeCommonRoots(stacks);
                                removeDuplicateOrEmptyJumps(stacks);
                                util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
                                util.notEnumerableProp(error, "__stackCleaned__", true);
                            };

                            var captureStackTrace = (function stackDetection() {
                                var v8stackFramePattern = /^\s*at\s*/;
                                var v8stackFormatter = function (stack, error) {
                                    if (typeof stack === "string") return stack;

                                    if (error.name !== undefined &&
                                        error.message !== undefined) {
                                        return error.toString();
                                    }
                                    return formatNonError(error);
                                };

                                if (typeof Error.stackTraceLimit === "number" &&
                                    typeof Error.captureStackTrace === "function") {
                                    Error.stackTraceLimit += 6;
                                    stackFramePattern = v8stackFramePattern;
                                    formatStack = v8stackFormatter;
                                    var captureStackTrace = Error.captureStackTrace;

                                    shouldIgnore = function (line) {
                                        return bluebirdFramePattern.test(line);
                                    };
                                    return function (receiver, ignoreUntil) {
                                        Error.stackTraceLimit += 6;
                                        captureStackTrace(receiver, ignoreUntil);
                                        Error.stackTraceLimit -= 6;
                                    };
                                }
                                var err = new Error();

                                if (typeof err.stack === "string" &&
                                    err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
                                    stackFramePattern = /@/;
                                    formatStack = v8stackFormatter;
                                    indentStackFrames = true;
                                    return function captureStackTrace(o) {
                                        o.stack = new Error().stack;
                                    };
                                }

                                var hasStackAfterThrow;
                                try {
                                    throw new Error();
                                } catch (e) {
                                    hasStackAfterThrow = ("stack" in e);
                                }
                                if (!("stack" in err) && hasStackAfterThrow &&
                                    typeof Error.stackTraceLimit === "number") {
                                    stackFramePattern = v8stackFramePattern;
                                    formatStack = v8stackFormatter;
                                    return function captureStackTrace(o) {
                                        Error.stackTraceLimit += 6;
                                        try {
                                            throw new Error();
                                        } catch (e) {
                                            o.stack = e.stack;
                                        }
                                        Error.stackTraceLimit -= 6;
                                    };
                                }

                                formatStack = function (stack, error) {
                                    if (typeof stack === "string") return stack;

                                    if ((typeof error === "object" ||
                                        typeof error === "function") &&
                                        error.name !== undefined &&
                                        error.message !== undefined) {
                                        return error.toString();
                                    }
                                    return formatNonError(error);
                                };

                                return null;

                            })([]);

                            if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
                                printWarning = function (message) {
                                    console.warn(message);
                                };
                                if (util.isNode && process.stderr.isTTY) {
                                    printWarning = function (message, isSoft) {
                                        var color = isSoft ? "\u001b[33m" : "\u001b[31m";
                                        console.warn(color + message + "\u001b[0m\n");
                                    };
                                } else if (!util.isNode && typeof (new Error().stack) === "string") {
                                    printWarning = function (message, isSoft) {
                                        console.warn("%c" + message,
                                            isSoft ? "color: darkorange" : "color: red");
                                    };
                                }
                            }

                            var config = {
                                warnings: warnings,
                                longStackTraces: false,
                                cancellation: false,
                                monitoring: false
                            };

                            if (longStackTraces) Promise.longStackTraces();

                            return {
                                longStackTraces: function () {
                                    return config.longStackTraces;
                                },
                                warnings: function () {
                                    return config.warnings;
                                },
                                cancellation: function () {
                                    return config.cancellation;
                                },
                                monitoring: function () {
                                    return config.monitoring;
                                },
                                propagateFromFunction: function () {
                                    return propagateFromFunction;
                                },
                                boundValueFunction: function () {
                                    return boundValueFunction;
                                },
                                checkForgottenReturns: checkForgottenReturns,
                                setBounds: setBounds,
                                warn: warn,
                                deprecated: deprecated,
                                CapturedTrace: CapturedTrace,
                                fireDomEvent: fireDomEvent,
                                fireGlobalEvent: fireGlobalEvent
                            };
                        };

                    }, {"./errors": 12, "./util": 36}], 10: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise) {
                            function returner() {
                                return this.value;
                            }

                            function thrower() {
                                throw this.reason;
                            }

                            Promise.prototype["return"] =
                                Promise.prototype.thenReturn = function (value) {
                                    if (value instanceof Promise) value.suppressUnhandledRejections();
                                    return this._then(
                                        returner, undefined, undefined, {value: value}, undefined);
                                };

                            Promise.prototype["throw"] =
                                Promise.prototype.thenThrow = function (reason) {
                                    return this._then(
                                        thrower, undefined, undefined, {reason: reason}, undefined);
                                };

                            Promise.prototype.catchThrow = function (reason) {
                                if (arguments.length <= 1) {
                                    return this._then(
                                        undefined, thrower, undefined, {reason: reason}, undefined);
                                } else {
                                    var _reason = arguments[1];
                                    var handler = function () {
                                        throw _reason;
                                    };
                                    return this.caught(reason, handler);
                                }
                            };

                            Promise.prototype.catchReturn = function (value) {
                                if (arguments.length <= 1) {
                                    if (value instanceof Promise) value.suppressUnhandledRejections();
                                    return this._then(
                                        undefined, returner, undefined, {value: value}, undefined);
                                } else {
                                    var _value = arguments[1];
                                    if (_value instanceof Promise) _value.suppressUnhandledRejections();
                                    var handler = function () {
                                        return _value;
                                    };
                                    return this.caught(value, handler);
                                }
                            };
                        };

                    }, {}], 11: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise, INTERNAL) {
                            var PromiseReduce = Promise.reduce;
                            var PromiseAll = Promise.all;

                            function promiseAllThis() {
                                return PromiseAll(this);
                            }

                            function PromiseMapSeries(promises, fn) {
                                return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
                            }

                            Promise.prototype.each = function (fn) {
                                return PromiseReduce(this, fn, INTERNAL, 0)
                                    ._then(promiseAllThis, undefined, undefined, this, undefined);
                            };

                            Promise.prototype.mapSeries = function (fn) {
                                return PromiseReduce(this, fn, INTERNAL, INTERNAL);
                            };

                            Promise.each = function (promises, fn) {
                                return PromiseReduce(promises, fn, INTERNAL, 0)
                                    ._then(promiseAllThis, undefined, undefined, promises, undefined);
                            };

                            Promise.mapSeries = PromiseMapSeries;
                        };


                    }, {}], 12: [function (_dereq_, module, exports) {
                        "use strict";
                        var es5 = _dereq_("./es5");
                        var Objectfreeze = es5.freeze;
                        var util = _dereq_("./util");
                        var inherits = util.inherits;
                        var notEnumerableProp = util.notEnumerableProp;

                        function subError(nameProperty, defaultMessage) {
                            function SubError(message) {
                                if (!(this instanceof SubError)) return new SubError(message);
                                notEnumerableProp(this, "message",
                                    typeof message === "string" ? message : defaultMessage);
                                notEnumerableProp(this, "name", nameProperty);
                                if (Error.captureStackTrace) {
                                    Error.captureStackTrace(this, this.constructor);
                                } else {
                                    Error.call(this);
                                }
                            }

                            inherits(SubError, Error);
                            return SubError;
                        }

                        var _TypeError, _RangeError;
                        var Warning = subError("Warning", "warning");
                        var CancellationError = subError("CancellationError", "cancellation error");
                        var TimeoutError = subError("TimeoutError", "timeout error");
                        var AggregateError = subError("AggregateError", "aggregate error");
                        try {
                            _TypeError = TypeError;
                            _RangeError = RangeError;
                        } catch (e) {
                            _TypeError = subError("TypeError", "type error");
                            _RangeError = subError("RangeError", "range error");
                        }

                        var methods = ("join pop push shift unshift slice filter forEach some " +
                            "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

                        for (var i = 0; i < methods.length; ++i) {
                            if (typeof Array.prototype[methods[i]] === "function") {
                                AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
                            }
                        }

                        es5.defineProperty(AggregateError.prototype, "length", {
                            value: 0,
                            configurable: false,
                            writable: true,
                            enumerable: true
                        });
                        AggregateError.prototype["isOperational"] = true;
                        var level = 0;
                        AggregateError.prototype.toString = function () {
                            var indent = Array(level * 4 + 1).join(" ");
                            var ret = "\n" + indent + "AggregateError of:" + "\n";
                            level++;
                            indent = Array(level * 4 + 1).join(" ");
                            for (var i = 0; i < this.length; ++i) {
                                var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
                                var lines = str.split("\n");
                                for (var j = 0; j < lines.length; ++j) {
                                    lines[j] = indent + lines[j];
                                }
                                str = lines.join("\n");
                                ret += str + "\n";
                            }
                            level--;
                            return ret;
                        };

                        function OperationalError(message) {
                            if (!(this instanceof OperationalError))
                                return new OperationalError(message);
                            notEnumerableProp(this, "name", "OperationalError");
                            notEnumerableProp(this, "message", message);
                            this.cause = message;
                            this["isOperational"] = true;

                            if (message instanceof Error) {
                                notEnumerableProp(this, "message", message.message);
                                notEnumerableProp(this, "stack", message.stack);
                            } else if (Error.captureStackTrace) {
                                Error.captureStackTrace(this, this.constructor);
                            }

                        }

                        inherits(OperationalError, Error);

                        var errorTypes = Error["__BluebirdErrorTypes__"];
                        if (!errorTypes) {
                            errorTypes = Objectfreeze({
                                CancellationError: CancellationError,
                                TimeoutError: TimeoutError,
                                OperationalError: OperationalError,
                                RejectionError: OperationalError,
                                AggregateError: AggregateError
                            });
                            es5.defineProperty(Error, "__BluebirdErrorTypes__", {
                                value: errorTypes,
                                writable: false,
                                enumerable: false,
                                configurable: false
                            });
                        }

                        module.exports = {
                            Error: Error,
                            TypeError: _TypeError,
                            RangeError: _RangeError,
                            CancellationError: errorTypes.CancellationError,
                            OperationalError: errorTypes.OperationalError,
                            TimeoutError: errorTypes.TimeoutError,
                            AggregateError: errorTypes.AggregateError,
                            Warning: Warning
                        };

                    }, {"./es5": 13, "./util": 36}], 13: [function (_dereq_, module, exports) {
                        var isES5 = (function () {
                            "use strict";
                            return this === undefined;
                        })();

                        if (isES5) {
                            module.exports = {
                                freeze: Object.freeze,
                                defineProperty: Object.defineProperty,
                                getDescriptor: Object.getOwnPropertyDescriptor,
                                keys: Object.keys,
                                names: Object.getOwnPropertyNames,
                                getPrototypeOf: Object.getPrototypeOf,
                                isArray: Array.isArray,
                                isES5: isES5,
                                propertyIsWritable: function (obj, prop) {
                                    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
                                    return !!(!descriptor || descriptor.writable || descriptor.set);
                                }
                            };
                        } else {
                            var has = {}.hasOwnProperty;
                            var str = {}.toString;
                            var proto = {}.constructor.prototype;

                            var ObjectKeys = function (o) {
                                var ret = [];
                                for (var key in o) {
                                    if (has.call(o, key)) {
                                        ret.push(key);
                                    }
                                }
                                return ret;
                            };

                            var ObjectGetDescriptor = function (o, key) {
                                return {value: o[key]};
                            };

                            var ObjectDefineProperty = function (o, key, desc) {
                                o[key] = desc.value;
                                return o;
                            };

                            var ObjectFreeze = function (obj) {
                                return obj;
                            };

                            var ObjectGetPrototypeOf = function (obj) {
                                try {
                                    return Object(obj).constructor.prototype;
                                } catch (e) {
                                    return proto;
                                }
                            };

                            var ArrayIsArray = function (obj) {
                                try {
                                    return str.call(obj) === "[object Array]";
                                } catch (e) {
                                    return false;
                                }
                            };

                            module.exports = {
                                isArray: ArrayIsArray,
                                keys: ObjectKeys,
                                names: ObjectKeys,
                                defineProperty: ObjectDefineProperty,
                                getDescriptor: ObjectGetDescriptor,
                                freeze: ObjectFreeze,
                                getPrototypeOf: ObjectGetPrototypeOf,
                                isES5: isES5,
                                propertyIsWritable: function () {
                                    return true;
                                }
                            };
                        }

                    }, {}], 14: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise, INTERNAL) {
                            var PromiseMap = Promise.map;

                            Promise.prototype.filter = function (fn, options) {
                                return PromiseMap(this, fn, options, INTERNAL);
                            };

                            Promise.filter = function (promises, fn, options) {
                                return PromiseMap(promises, fn, options, INTERNAL);
                            };
                        };

                    }, {}], 15: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise, tryConvertToPromise, NEXT_FILTER) {
                            var util = _dereq_("./util");
                            var CancellationError = Promise.CancellationError;
                            var errorObj = util.errorObj;
                            var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);

                            function PassThroughHandlerContext(promise, type, handler) {
                                this.promise = promise;
                                this.type = type;
                                this.handler = handler;
                                this.called = false;
                                this.cancelPromise = null;
                            }

                            PassThroughHandlerContext.prototype.isFinallyHandler = function () {
                                return this.type === 0;
                            };

                            function FinallyHandlerCancelReaction(finallyHandler) {
                                this.finallyHandler = finallyHandler;
                            }

                            FinallyHandlerCancelReaction.prototype._resultCancelled = function () {
                                checkCancel(this.finallyHandler);
                            };

                            function checkCancel(ctx, reason) {
                                if (ctx.cancelPromise != null) {
                                    if (arguments.length > 1) {
                                        ctx.cancelPromise._reject(reason);
                                    } else {
                                        ctx.cancelPromise._cancel();
                                    }
                                    ctx.cancelPromise = null;
                                    return true;
                                }
                                return false;
                            }

                            function succeed() {
                                return finallyHandler.call(this, this.promise._target()._settledValue());
                            }

                            function fail(reason) {
                                if (checkCancel(this, reason)) return;
                                errorObj.e = reason;
                                return errorObj;
                            }

                            function finallyHandler(reasonOrValue) {
                                var promise = this.promise;
                                var handler = this.handler;

                                if (!this.called) {
                                    this.called = true;
                                    var ret = this.isFinallyHandler()
                                        ? handler.call(promise._boundValue())
                                        : handler.call(promise._boundValue(), reasonOrValue);
                                    if (ret === NEXT_FILTER) {
                                        return ret;
                                    } else if (ret !== undefined) {
                                        promise._setReturnedNonUndefined();
                                        var maybePromise = tryConvertToPromise(ret, promise);
                                        if (maybePromise instanceof Promise) {
                                            if (this.cancelPromise != null) {
                                                if (maybePromise._isCancelled()) {
                                                    var reason =
                                                        new CancellationError("late cancellation observer");
                                                    promise._attachExtraTrace(reason);
                                                    errorObj.e = reason;
                                                    return errorObj;
                                                } else if (maybePromise.isPending()) {
                                                    maybePromise._attachCancellationCallback(
                                                        new FinallyHandlerCancelReaction(this));
                                                }
                                            }
                                            return maybePromise._then(
                                                succeed, fail, undefined, this, undefined);
                                        }
                                    }
                                }

                                if (promise.isRejected()) {
                                    checkCancel(this);
                                    errorObj.e = reasonOrValue;
                                    return errorObj;
                                } else {
                                    checkCancel(this);
                                    return reasonOrValue;
                                }
                            }

                            Promise.prototype._passThrough = function (handler, type, success, fail) {
                                if (typeof handler !== "function") return this.then();
                                return this._then(success,
                                    fail,
                                    undefined,
                                    new PassThroughHandlerContext(this, type, handler),
                                    undefined);
                            };

                            Promise.prototype.lastly =
                                Promise.prototype["finally"] = function (handler) {
                                    return this._passThrough(handler,
                                        0,
                                        finallyHandler,
                                        finallyHandler);
                                };


                            Promise.prototype.tap = function (handler) {
                                return this._passThrough(handler, 1, finallyHandler);
                            };

                            Promise.prototype.tapCatch = function (handlerOrPredicate) {
                                var len = arguments.length;
                                if (len === 1) {
                                    return this._passThrough(handlerOrPredicate,
                                        1,
                                        undefined,
                                        finallyHandler);
                                } else {
                                    var catchInstances = new Array(len - 1),
                                        j = 0, i;
                                    for (i = 0; i < len - 1; ++i) {
                                        var item = arguments[i];
                                        if (util.isObject(item)) {
                                            catchInstances[j++] = item;
                                        } else {
                                            return Promise.reject(new TypeError(
                                                "tapCatch statement predicate: "
                                                + "expecting an object but got " + util.classString(item)
                                            ));
                                        }
                                    }
                                    catchInstances.length = j;
                                    var handler = arguments[i];
                                    return this._passThrough(catchFilter(catchInstances, handler, this),
                                        1,
                                        undefined,
                                        finallyHandler);
                                }

                            };

                            return PassThroughHandlerContext;
                        };

                    }, {"./catch_filter": 7, "./util": 36}], 16: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise,
                                                   apiRejection,
                                                   INTERNAL,
                                                   tryConvertToPromise,
                                                   Proxyable,
                                                   debug) {
                            var errors = _dereq_("./errors");
                            var TypeError = errors.TypeError;
                            var util = _dereq_("./util");
                            var errorObj = util.errorObj;
                            var tryCatch = util.tryCatch;
                            var yieldHandlers = [];

                            function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
                                for (var i = 0; i < yieldHandlers.length; ++i) {
                                    traceParent._pushContext();
                                    var result = tryCatch(yieldHandlers[i])(value);
                                    traceParent._popContext();
                                    if (result === errorObj) {
                                        traceParent._pushContext();
                                        var ret = Promise.reject(errorObj.e);
                                        traceParent._popContext();
                                        return ret;
                                    }
                                    var maybePromise = tryConvertToPromise(result, traceParent);
                                    if (maybePromise instanceof Promise) return maybePromise;
                                }
                                return null;
                            }

                            function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
                                if (debug.cancellation()) {
                                    var internal = new Promise(INTERNAL);
                                    var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);
                                    this._promise = internal.lastly(function () {
                                        return _finallyPromise;
                                    });
                                    internal._captureStackTrace();
                                    internal._setOnCancel(this);
                                } else {
                                    var promise = this._promise = new Promise(INTERNAL);
                                    promise._captureStackTrace();
                                }
                                this._stack = stack;
                                this._generatorFunction = generatorFunction;
                                this._receiver = receiver;
                                this._generator = undefined;
                                this._yieldHandlers = typeof yieldHandler === "function"
                                    ? [yieldHandler].concat(yieldHandlers)
                                    : yieldHandlers;
                                this._yieldedPromise = null;
                                this._cancellationPhase = false;
                            }

                            util.inherits(PromiseSpawn, Proxyable);

                            PromiseSpawn.prototype._isResolved = function () {
                                return this._promise === null;
                            };

                            PromiseSpawn.prototype._cleanup = function () {
                                this._promise = this._generator = null;
                                if (debug.cancellation() && this._finallyPromise !== null) {
                                    this._finallyPromise._fulfill();
                                    this._finallyPromise = null;
                                }
                            };

                            PromiseSpawn.prototype._promiseCancelled = function () {
                                if (this._isResolved()) return;
                                var implementsReturn = typeof this._generator["return"] !== "undefined";

                                var result;
                                if (!implementsReturn) {
                                    var reason = new Promise.CancellationError(
                                        "generator .return() sentinel");
                                    Promise.coroutine.returnSentinel = reason;
                                    this._promise._attachExtraTrace(reason);
                                    this._promise._pushContext();
                                    result = tryCatch(this._generator["throw"]).call(this._generator,
                                        reason);
                                    this._promise._popContext();
                                } else {
                                    this._promise._pushContext();
                                    result = tryCatch(this._generator["return"]).call(this._generator,
                                        undefined);
                                    this._promise._popContext();
                                }
                                this._cancellationPhase = true;
                                this._yieldedPromise = null;
                                this._continue(result);
                            };

                            PromiseSpawn.prototype._promiseFulfilled = function (value) {
                                this._yieldedPromise = null;
                                this._promise._pushContext();
                                var result = tryCatch(this._generator.next).call(this._generator, value);
                                this._promise._popContext();
                                this._continue(result);
                            };

                            PromiseSpawn.prototype._promiseRejected = function (reason) {
                                this._yieldedPromise = null;
                                this._promise._attachExtraTrace(reason);
                                this._promise._pushContext();
                                var result = tryCatch(this._generator["throw"])
                                    .call(this._generator, reason);
                                this._promise._popContext();
                                this._continue(result);
                            };

                            PromiseSpawn.prototype._resultCancelled = function () {
                                if (this._yieldedPromise instanceof Promise) {
                                    var promise = this._yieldedPromise;
                                    this._yieldedPromise = null;
                                    promise.cancel();
                                }
                            };

                            PromiseSpawn.prototype.promise = function () {
                                return this._promise;
                            };

                            PromiseSpawn.prototype._run = function () {
                                this._generator = this._generatorFunction.call(this._receiver);
                                this._receiver =
                                    this._generatorFunction = undefined;
                                this._promiseFulfilled(undefined);
                            };

                            PromiseSpawn.prototype._continue = function (result) {
                                var promise = this._promise;
                                if (result === errorObj) {
                                    this._cleanup();
                                    if (this._cancellationPhase) {
                                        return promise.cancel();
                                    } else {
                                        return promise._rejectCallback(result.e, false);
                                    }
                                }

                                var value = result.value;
                                if (result.done === true) {
                                    this._cleanup();
                                    if (this._cancellationPhase) {
                                        return promise.cancel();
                                    } else {
                                        return promise._resolveCallback(value);
                                    }
                                } else {
                                    var maybePromise = tryConvertToPromise(value, this._promise);
                                    if (!(maybePromise instanceof Promise)) {
                                        maybePromise =
                                            promiseFromYieldHandler(maybePromise,
                                                this._yieldHandlers,
                                                this._promise);
                                        if (maybePromise === null) {
                                            this._promiseRejected(
                                                new TypeError(
                                                    "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a".replace("%s", String(value)) +
                                                    "From coroutine:\u000a" +
                                                    this._stack.split("\n").slice(1, -7).join("\n")
                                                )
                                            );
                                            return;
                                        }
                                    }
                                    maybePromise = maybePromise._target();
                                    var bitField = maybePromise._bitField;
                                    ;
                                    if (((bitField & 50397184) === 0)) {
                                        this._yieldedPromise = maybePromise;
                                        maybePromise._proxy(this, null);
                                    } else if (((bitField & 33554432) !== 0)) {
                                        Promise._async.invoke(
                                            this._promiseFulfilled, this, maybePromise._value()
                                        );
                                    } else if (((bitField & 16777216) !== 0)) {
                                        Promise._async.invoke(
                                            this._promiseRejected, this, maybePromise._reason()
                                        );
                                    } else {
                                        this._promiseCancelled();
                                    }
                                }
                            };

                            Promise.coroutine = function (generatorFunction, options) {
                                if (typeof generatorFunction !== "function") {
                                    throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                                }
                                var yieldHandler = Object(options).yieldHandler;
                                var PromiseSpawn$ = PromiseSpawn;
                                var stack = new Error().stack;
                                return function () {
                                    var generator = generatorFunction.apply(this, arguments);
                                    var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                                        stack);
                                    var ret = spawn.promise();
                                    spawn._generator = generator;
                                    spawn._promiseFulfilled(undefined);
                                    return ret;
                                };
                            };

                            Promise.coroutine.addYieldHandler = function (fn) {
                                if (typeof fn !== "function") {
                                    throw new TypeError("expecting a function but got " + util.classString(fn));
                                }
                                yieldHandlers.push(fn);
                            };

                            Promise.spawn = function (generatorFunction) {
                                debug.deprecated("Promise.spawn()", "Promise.coroutine()");
                                if (typeof generatorFunction !== "function") {
                                    return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                                }
                                var spawn = new PromiseSpawn(generatorFunction, this);
                                var ret = spawn.promise();
                                spawn._run(Promise.spawn);
                                return ret;
                            };
                        };

                    }, {"./errors": 12, "./util": 36}], 17: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports =
                            function (Promise, PromiseArray, tryConvertToPromise, INTERNAL, async,
                                      getDomain) {
                                var util = _dereq_("./util");
                                var canEvaluate = util.canEvaluate;
                                var tryCatch = util.tryCatch;
                                var errorObj = util.errorObj;
                                var reject;

                                if (!true) {
                                    if (canEvaluate) {
                                        var thenCallback = function (i) {
                                            return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
                                        };

                                        var promiseSetter = function (i) {
                                            return new Function("promise", "holder", "                           \n\
            'use strict';                                                    \n\
            holder.pIndex = promise;                                         \n\
            ".replace(/Index/g, i));
                                        };

                                        var generateHolderClass = function (total) {
                                            var props = new Array(total);
                                            for (var i = 0; i < props.length; ++i) {
                                                props[i] = "this.p" + (i + 1);
                                            }
                                            var assignment = props.join(" = ") + " = null;";
                                            var cancellationCode = "var promise;\n" + props.map(function (prop) {
                                                return "                                                         \n\
                promise = " + prop + ";                                      \n\
                if (promise instanceof Promise) {                            \n\
                    promise.cancel();                                        \n\
                }                                                            \n\
            ";
                                            }).join("\n");
                                            var passedArguments = props.join(", ");
                                            var name = "Holder$" + total;


                                            var code = "return function(tryCatch, errorObj, Promise, async) {    \n\
            'use strict';                                                    \n\
            function [TheName](fn) {                                         \n\
                [TheProperties]                                              \n\
                this.fn = fn;                                                \n\
                this.asyncNeeded = true;                                     \n\
                this.now = 0;                                                \n\
            }                                                                \n\
                                                                             \n\
            [TheName].prototype._callFunction = function(promise) {          \n\
                promise._pushContext();                                      \n\
                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n\
                promise._popContext();                                       \n\
                if (ret === errorObj) {                                      \n\
                    promise._rejectCallback(ret.e, false);                   \n\
                } else {                                                     \n\
                    promise._resolveCallback(ret);                           \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype.checkFulfillment = function(promise) {       \n\
                var now = ++this.now;                                        \n\
                if (now === [TheTotal]) {                                    \n\
                    if (this.asyncNeeded) {                                  \n\
                        async.invoke(this._callFunction, this, promise);     \n\
                    } else {                                                 \n\
                        this._callFunction(promise);                         \n\
                    }                                                        \n\
                                                                             \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype._resultCancelled = function() {              \n\
                [CancellationCode]                                           \n\
            };                                                               \n\
                                                                             \n\
            return [TheName];                                                \n\
        }(tryCatch, errorObj, Promise, async);                               \n\
        ";

                                            code = code.replace(/\[TheName\]/g, name)
                                                .replace(/\[TheTotal\]/g, total)
                                                .replace(/\[ThePassedArguments\]/g, passedArguments)
                                                .replace(/\[TheProperties\]/g, assignment)
                                                .replace(/\[CancellationCode\]/g, cancellationCode);

                                            return new Function("tryCatch", "errorObj", "Promise", "async", code)
                                            (tryCatch, errorObj, Promise, async);
                                        };

                                        var holderClasses = [];
                                        var thenCallbacks = [];
                                        var promiseSetters = [];

                                        for (var i = 0; i < 8; ++i) {
                                            holderClasses.push(generateHolderClass(i + 1));
                                            thenCallbacks.push(thenCallback(i + 1));
                                            promiseSetters.push(promiseSetter(i + 1));
                                        }

                                        reject = function (reason) {
                                            this._reject(reason);
                                        };
                                    }
                                }

                                Promise.join = function () {
                                    var last = arguments.length - 1;
                                    var fn;
                                    if (last > 0 && typeof arguments[last] === "function") {
                                        fn = arguments[last];
                                        if (!true) {
                                            if (last <= 8 && canEvaluate) {
                                                var ret = new Promise(INTERNAL);
                                                ret._captureStackTrace();
                                                var HolderClass = holderClasses[last - 1];
                                                var holder = new HolderClass(fn);
                                                var callbacks = thenCallbacks;

                                                for (var i = 0; i < last; ++i) {
                                                    var maybePromise = tryConvertToPromise(arguments[i], ret);
                                                    if (maybePromise instanceof Promise) {
                                                        maybePromise = maybePromise._target();
                                                        var bitField = maybePromise._bitField;
                                                        ;
                                                        if (((bitField & 50397184) === 0)) {
                                                            maybePromise._then(callbacks[i], reject,
                                                                undefined, ret, holder);
                                                            promiseSetters[i](maybePromise, holder);
                                                            holder.asyncNeeded = false;
                                                        } else if (((bitField & 33554432) !== 0)) {
                                                            callbacks[i].call(ret,
                                                                maybePromise._value(), holder);
                                                        } else if (((bitField & 16777216) !== 0)) {
                                                            ret._reject(maybePromise._reason());
                                                        } else {
                                                            ret._cancel();
                                                        }
                                                    } else {
                                                        callbacks[i].call(ret, maybePromise, holder);
                                                    }
                                                }

                                                if (!ret._isFateSealed()) {
                                                    if (holder.asyncNeeded) {
                                                        var domain = getDomain();
                                                        if (domain !== null) {
                                                            holder.fn = util.domainBind(domain, holder.fn);
                                                        }
                                                    }
                                                    ret._setAsyncGuaranteed();
                                                    ret._setOnCancel(holder);
                                                }
                                                return ret;
                                            }
                                        }
                                    }
                                    var args = [].slice.call(arguments);
                                    ;
                                    if (fn) args.pop();
                                    var ret = new PromiseArray(args).promise();
                                    return fn !== undefined ? ret.spread(fn) : ret;
                                };

                            };

                    }, {"./util": 36}], 18: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise,
                                                   PromiseArray,
                                                   apiRejection,
                                                   tryConvertToPromise,
                                                   INTERNAL,
                                                   debug) {
                            var getDomain = Promise._getDomain;
                            var util = _dereq_("./util");
                            var tryCatch = util.tryCatch;
                            var errorObj = util.errorObj;
                            var async = Promise._async;

                            function MappingPromiseArray(promises, fn, limit, _filter) {
                                this.constructor$(promises);
                                this._promise._captureStackTrace();
                                var domain = getDomain();
                                this._callback = domain === null ? fn : util.domainBind(domain, fn);
                                this._preservedValues = _filter === INTERNAL
                                    ? new Array(this.length())
                                    : null;
                                this._limit = limit;
                                this._inFlight = 0;
                                this._queue = [];
                                async.invoke(this._asyncInit, this, undefined);
                            }

                            util.inherits(MappingPromiseArray, PromiseArray);

                            MappingPromiseArray.prototype._asyncInit = function () {
                                this._init$(undefined, -2);
                            };

                            MappingPromiseArray.prototype._init = function () {
                            };

                            MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
                                var values = this._values;
                                var length = this.length();
                                var preservedValues = this._preservedValues;
                                var limit = this._limit;

                                if (index < 0) {
                                    index = (index * -1) - 1;
                                    values[index] = value;
                                    if (limit >= 1) {
                                        this._inFlight--;
                                        this._drainQueue();
                                        if (this._isResolved()) return true;
                                    }
                                } else {
                                    if (limit >= 1 && this._inFlight >= limit) {
                                        values[index] = value;
                                        this._queue.push(index);
                                        return false;
                                    }
                                    if (preservedValues !== null) preservedValues[index] = value;

                                    var promise = this._promise;
                                    var callback = this._callback;
                                    var receiver = promise._boundValue();
                                    promise._pushContext();
                                    var ret = tryCatch(callback).call(receiver, value, index, length);
                                    var promiseCreated = promise._popContext();
                                    debug.checkForgottenReturns(
                                        ret,
                                        promiseCreated,
                                        preservedValues !== null ? "Promise.filter" : "Promise.map",
                                        promise
                                    );
                                    if (ret === errorObj) {
                                        this._reject(ret.e);
                                        return true;
                                    }

                                    var maybePromise = tryConvertToPromise(ret, this._promise);
                                    if (maybePromise instanceof Promise) {
                                        maybePromise = maybePromise._target();
                                        var bitField = maybePromise._bitField;
                                        ;
                                        if (((bitField & 50397184) === 0)) {
                                            if (limit >= 1) this._inFlight++;
                                            values[index] = maybePromise;
                                            maybePromise._proxy(this, (index + 1) * -1);
                                            return false;
                                        } else if (((bitField & 33554432) !== 0)) {
                                            ret = maybePromise._value();
                                        } else if (((bitField & 16777216) !== 0)) {
                                            this._reject(maybePromise._reason());
                                            return true;
                                        } else {
                                            this._cancel();
                                            return true;
                                        }
                                    }
                                    values[index] = ret;
                                }
                                var totalResolved = ++this._totalResolved;
                                if (totalResolved >= length) {
                                    if (preservedValues !== null) {
                                        this._filter(values, preservedValues);
                                    } else {
                                        this._resolve(values);
                                    }
                                    return true;
                                }
                                return false;
                            };

                            MappingPromiseArray.prototype._drainQueue = function () {
                                var queue = this._queue;
                                var limit = this._limit;
                                var values = this._values;
                                while (queue.length > 0 && this._inFlight < limit) {
                                    if (this._isResolved()) return;
                                    var index = queue.pop();
                                    this._promiseFulfilled(values[index], index);
                                }
                            };

                            MappingPromiseArray.prototype._filter = function (booleans, values) {
                                var len = values.length;
                                var ret = new Array(len);
                                var j = 0;
                                for (var i = 0; i < len; ++i) {
                                    if (booleans[i]) ret[j++] = values[i];
                                }
                                ret.length = j;
                                this._resolve(ret);
                            };

                            MappingPromiseArray.prototype.preservedValues = function () {
                                return this._preservedValues;
                            };

                            function map(promises, fn, options, _filter) {
                                if (typeof fn !== "function") {
                                    return apiRejection("expecting a function but got " + util.classString(fn));
                                }

                                var limit = 0;
                                if (options !== undefined) {
                                    if (typeof options === "object" && options !== null) {
                                        if (typeof options.concurrency !== "number") {
                                            return Promise.reject(
                                                new TypeError("'concurrency' must be a number but it is " +
                                                    util.classString(options.concurrency)));
                                        }
                                        limit = options.concurrency;
                                    } else {
                                        return Promise.reject(new TypeError(
                                            "options argument must be an object but it is " +
                                            util.classString(options)));
                                    }
                                }
                                limit = typeof limit === "number" &&
                                isFinite(limit) && limit >= 1 ? limit : 0;
                                return new MappingPromiseArray(promises, fn, limit, _filter).promise();
                            }

                            Promise.prototype.map = function (fn, options) {
                                return map(this, fn, options, null);
                            };

                            Promise.map = function (promises, fn, options, _filter) {
                                return map(promises, fn, options, _filter);
                            };


                        };

                    }, {"./util": 36}], 19: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports =
                            function (Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
                                var util = _dereq_("./util");
                                var tryCatch = util.tryCatch;

                                Promise.method = function (fn) {
                                    if (typeof fn !== "function") {
                                        throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
                                    }
                                    return function () {
                                        var ret = new Promise(INTERNAL);
                                        ret._captureStackTrace();
                                        ret._pushContext();
                                        var value = tryCatch(fn).apply(this, arguments);
                                        var promiseCreated = ret._popContext();
                                        debug.checkForgottenReturns(
                                            value, promiseCreated, "Promise.method", ret);
                                        ret._resolveFromSyncValue(value);
                                        return ret;
                                    };
                                };

                                Promise.attempt = Promise["try"] = function (fn) {
                                    if (typeof fn !== "function") {
                                        return apiRejection("expecting a function but got " + util.classString(fn));
                                    }
                                    var ret = new Promise(INTERNAL);
                                    ret._captureStackTrace();
                                    ret._pushContext();
                                    var value;
                                    if (arguments.length > 1) {
                                        debug.deprecated("calling Promise.try with more than 1 argument");
                                        var arg = arguments[1];
                                        var ctx = arguments[2];
                                        value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg)
                                            : tryCatch(fn).call(ctx, arg);
                                    } else {
                                        value = tryCatch(fn)();
                                    }
                                    var promiseCreated = ret._popContext();
                                    debug.checkForgottenReturns(
                                        value, promiseCreated, "Promise.try", ret);
                                    ret._resolveFromSyncValue(value);
                                    return ret;
                                };

                                Promise.prototype._resolveFromSyncValue = function (value) {
                                    if (value === util.errorObj) {
                                        this._rejectCallback(value.e, false);
                                    } else {
                                        this._resolveCallback(value, true);
                                    }
                                };
                            };

                    }, {"./util": 36}], 20: [function (_dereq_, module, exports) {
                        "use strict";
                        var util = _dereq_("./util");
                        var maybeWrapAsError = util.maybeWrapAsError;
                        var errors = _dereq_("./errors");
                        var OperationalError = errors.OperationalError;
                        var es5 = _dereq_("./es5");

                        function isUntypedError(obj) {
                            return obj instanceof Error &&
                                es5.getPrototypeOf(obj) === Error.prototype;
                        }

                        var rErrorKey = /^(?:name|message|stack|cause)$/;

                        function wrapAsOperationalError(obj) {
                            var ret;
                            if (isUntypedError(obj)) {
                                ret = new OperationalError(obj);
                                ret.name = obj.name;
                                ret.message = obj.message;
                                ret.stack = obj.stack;
                                var keys = es5.keys(obj);
                                for (var i = 0; i < keys.length; ++i) {
                                    var key = keys[i];
                                    if (!rErrorKey.test(key)) {
                                        ret[key] = obj[key];
                                    }
                                }
                                return ret;
                            }
                            util.markAsOriginatingFromRejection(obj);
                            return obj;
                        }

                        function nodebackForPromise(promise, multiArgs) {
                            return function (err, value) {
                                if (promise === null) return;
                                if (err) {
                                    var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
                                    promise._attachExtraTrace(wrapped);
                                    promise._reject(wrapped);
                                } else if (!multiArgs) {
                                    promise._fulfill(value);
                                } else {
                                    var args = [].slice.call(arguments, 1);
                                    ;
                                    promise._fulfill(args);
                                }
                                promise = null;
                            };
                        }

                        module.exports = nodebackForPromise;

                    }, {"./errors": 12, "./es5": 13, "./util": 36}], 21: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise) {
                            var util = _dereq_("./util");
                            var async = Promise._async;
                            var tryCatch = util.tryCatch;
                            var errorObj = util.errorObj;

                            function spreadAdapter(val, nodeback) {
                                var promise = this;
                                if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
                                var ret =
                                    tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
                                if (ret === errorObj) {
                                    async.throwLater(ret.e);
                                }
                            }

                            function successAdapter(val, nodeback) {
                                var promise = this;
                                var receiver = promise._boundValue();
                                var ret = val === undefined
                                    ? tryCatch(nodeback).call(receiver, null)
                                    : tryCatch(nodeback).call(receiver, null, val);
                                if (ret === errorObj) {
                                    async.throwLater(ret.e);
                                }
                            }

                            function errorAdapter(reason, nodeback) {
                                var promise = this;
                                if (!reason) {
                                    var newReason = new Error(reason + "");
                                    newReason.cause = reason;
                                    reason = newReason;
                                }
                                var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
                                if (ret === errorObj) {
                                    async.throwLater(ret.e);
                                }
                            }

                            Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
                                                                                                 options) {
                                if (typeof nodeback == "function") {
                                    var adapter = successAdapter;
                                    if (options !== undefined && Object(options).spread) {
                                        adapter = spreadAdapter;
                                    }
                                    this._then(
                                        adapter,
                                        errorAdapter,
                                        undefined,
                                        this,
                                        nodeback
                                    );
                                }
                                return this;
                            };
                        };

                    }, {"./util": 36}], 22: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function () {
                            var makeSelfResolutionError = function () {
                                return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                            };
                            var reflectHandler = function () {
                                return new Promise.PromiseInspection(this._target());
                            };
                            var apiRejection = function (msg) {
                                return Promise.reject(new TypeError(msg));
                            };

                            function Proxyable() {
                            }

                            var UNDEFINED_BINDING = {};
                            var util = _dereq_("./util");

                            var getDomain;
                            if (util.isNode) {
                                getDomain = function () {
                                    var ret = process.domain;
                                    if (ret === undefined) ret = null;
                                    return ret;
                                };
                            } else {
                                getDomain = function () {
                                    return null;
                                };
                            }
                            util.notEnumerableProp(Promise, "_getDomain", getDomain);

                            var es5 = _dereq_("./es5");
                            var Async = _dereq_("./async");
                            var async = new Async();
                            es5.defineProperty(Promise, "_async", {value: async});
                            var errors = _dereq_("./errors");
                            var TypeError = Promise.TypeError = errors.TypeError;
                            Promise.RangeError = errors.RangeError;
                            var CancellationError = Promise.CancellationError = errors.CancellationError;
                            Promise.TimeoutError = errors.TimeoutError;
                            Promise.OperationalError = errors.OperationalError;
                            Promise.RejectionError = errors.OperationalError;
                            Promise.AggregateError = errors.AggregateError;
                            var INTERNAL = function () {
                            };
                            var APPLY = {};
                            var NEXT_FILTER = {};
                            var tryConvertToPromise = _dereq_("./thenables")(Promise, INTERNAL);
                            var PromiseArray =
                                _dereq_("./promise_array")(Promise, INTERNAL,
                                    tryConvertToPromise, apiRejection, Proxyable);
                            var Context = _dereq_("./context")(Promise);
                            /*jshint unused:false*/
                            var createContext = Context.create;
                            var debug = _dereq_("./debuggability")(Promise, Context);
                            var CapturedTrace = debug.CapturedTrace;
                            var PassThroughHandlerContext =
                                _dereq_("./finally")(Promise, tryConvertToPromise, NEXT_FILTER);
                            var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);
                            var nodebackForPromise = _dereq_("./nodeback");
                            var errorObj = util.errorObj;
                            var tryCatch = util.tryCatch;

                            function check(self, executor) {
                                if (self == null || self.constructor !== Promise) {
                                    throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                                }
                                if (typeof executor !== "function") {
                                    throw new TypeError("expecting a function but got " + util.classString(executor));
                                }

                            }

                            function Promise(executor) {
                                if (executor !== INTERNAL) {
                                    check(this, executor);
                                }
                                this._bitField = 0;
                                this._fulfillmentHandler0 = undefined;
                                this._rejectionHandler0 = undefined;
                                this._promise0 = undefined;
                                this._receiver0 = undefined;
                                this._resolveFromExecutor(executor);
                                this._promiseCreated();
                                this._fireEvent("promiseCreated", this);
                            }

                            Promise.prototype.toString = function () {
                                return "[object Promise]";
                            };

                            Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
                                var len = arguments.length;
                                if (len > 1) {
                                    var catchInstances = new Array(len - 1),
                                        j = 0, i;
                                    for (i = 0; i < len - 1; ++i) {
                                        var item = arguments[i];
                                        if (util.isObject(item)) {
                                            catchInstances[j++] = item;
                                        } else {
                                            return apiRejection("Catch statement predicate: " +
                                                "expecting an object but got " + util.classString(item));
                                        }
                                    }
                                    catchInstances.length = j;
                                    fn = arguments[i];
                                    return this.then(undefined, catchFilter(catchInstances, fn, this));
                                }
                                return this.then(undefined, fn);
                            };

                            Promise.prototype.reflect = function () {
                                return this._then(reflectHandler,
                                    reflectHandler, undefined, this, undefined);
                            };

                            Promise.prototype.then = function (didFulfill, didReject) {
                                if (debug.warnings() && arguments.length > 0 &&
                                    typeof didFulfill !== "function" &&
                                    typeof didReject !== "function") {
                                    var msg = ".then() only accepts functions but was passed: " +
                                        util.classString(didFulfill);
                                    if (arguments.length > 1) {
                                        msg += ", " + util.classString(didReject);
                                    }
                                    this._warn(msg);
                                }
                                return this._then(didFulfill, didReject, undefined, undefined, undefined);
                            };

                            Promise.prototype.done = function (didFulfill, didReject) {
                                var promise =
                                    this._then(didFulfill, didReject, undefined, undefined, undefined);
                                promise._setIsFinal();
                            };

                            Promise.prototype.spread = function (fn) {
                                if (typeof fn !== "function") {
                                    return apiRejection("expecting a function but got " + util.classString(fn));
                                }
                                return this.all()._then(fn, undefined, undefined, APPLY, undefined);
                            };

                            Promise.prototype.toJSON = function () {
                                var ret = {
                                    isFulfilled: false,
                                    isRejected: false,
                                    fulfillmentValue: undefined,
                                    rejectionReason: undefined
                                };
                                if (this.isFulfilled()) {
                                    ret.fulfillmentValue = this.value();
                                    ret.isFulfilled = true;
                                } else if (this.isRejected()) {
                                    ret.rejectionReason = this.reason();
                                    ret.isRejected = true;
                                }
                                return ret;
                            };

                            Promise.prototype.all = function () {
                                if (arguments.length > 0) {
                                    this._warn(".all() was passed arguments but it does not take any");
                                }
                                return new PromiseArray(this).promise();
                            };

                            Promise.prototype.error = function (fn) {
                                return this.caught(util.originatesFromRejection, fn);
                            };

                            Promise.getNewLibraryCopy = module.exports;

                            Promise.is = function (val) {
                                return val instanceof Promise;
                            };

                            Promise.fromNode = Promise.fromCallback = function (fn) {
                                var ret = new Promise(INTERNAL);
                                ret._captureStackTrace();
                                var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs
                                    : false;
                                var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
                                if (result === errorObj) {
                                    ret._rejectCallback(result.e, true);
                                }
                                if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
                                return ret;
                            };

                            Promise.all = function (promises) {
                                return new PromiseArray(promises).promise();
                            };

                            Promise.cast = function (obj) {
                                var ret = tryConvertToPromise(obj);
                                if (!(ret instanceof Promise)) {
                                    ret = new Promise(INTERNAL);
                                    ret._captureStackTrace();
                                    ret._setFulfilled();
                                    ret._rejectionHandler0 = obj;
                                }
                                return ret;
                            };

                            Promise.resolve = Promise.fulfilled = Promise.cast;

                            Promise.reject = Promise.rejected = function (reason) {
                                var ret = new Promise(INTERNAL);
                                ret._captureStackTrace();
                                ret._rejectCallback(reason, true);
                                return ret;
                            };

                            Promise.setScheduler = function (fn) {
                                if (typeof fn !== "function") {
                                    throw new TypeError("expecting a function but got " + util.classString(fn));
                                }
                                return async.setScheduler(fn);
                            };

                            Promise.prototype._then = function (
                                didFulfill,
                                didReject,
                                _, receiver,
                                internalData
                            ) {
                                var haveInternalData = internalData !== undefined;
                                var promise = haveInternalData ? internalData : new Promise(INTERNAL);
                                var target = this._target();
                                var bitField = target._bitField;

                                if (!haveInternalData) {
                                    promise._propagateFrom(this, 3);
                                    promise._captureStackTrace();
                                    if (receiver === undefined &&
                                        ((this._bitField & 2097152) !== 0)) {
                                        if (!((bitField & 50397184) === 0)) {
                                            receiver = this._boundValue();
                                        } else {
                                            receiver = target === this ? undefined : this._boundTo;
                                        }
                                    }
                                    this._fireEvent("promiseChained", this, promise);
                                }

                                var domain = getDomain();
                                if (!((bitField & 50397184) === 0)) {
                                    var handler, value, settler = target._settlePromiseCtx;
                                    if (((bitField & 33554432) !== 0)) {
                                        value = target._rejectionHandler0;
                                        handler = didFulfill;
                                    } else if (((bitField & 16777216) !== 0)) {
                                        value = target._fulfillmentHandler0;
                                        handler = didReject;
                                        target._unsetRejectionIsUnhandled();
                                    } else {
                                        settler = target._settlePromiseLateCancellationObserver;
                                        value = new CancellationError("late cancellation observer");
                                        target._attachExtraTrace(value);
                                        handler = didReject;
                                    }

                                    async.invoke(settler, target, {
                                        handler: domain === null ? handler
                                            : (typeof handler === "function" &&
                                                util.domainBind(domain, handler)),
                                        promise: promise,
                                        receiver: receiver,
                                        value: value
                                    });
                                } else {
                                    target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
                                }

                                return promise;
                            };

                            Promise.prototype._length = function () {
                                return this._bitField & 65535;
                            };

                            Promise.prototype._isFateSealed = function () {
                                return (this._bitField & 117506048) !== 0;
                            };

                            Promise.prototype._isFollowing = function () {
                                return (this._bitField & 67108864) === 67108864;
                            };

                            Promise.prototype._setLength = function (len) {
                                this._bitField = (this._bitField & -65536) |
                                    (len & 65535);
                            };

                            Promise.prototype._setFulfilled = function () {
                                this._bitField = this._bitField | 33554432;
                                this._fireEvent("promiseFulfilled", this);
                            };

                            Promise.prototype._setRejected = function () {
                                this._bitField = this._bitField | 16777216;
                                this._fireEvent("promiseRejected", this);
                            };

                            Promise.prototype._setFollowing = function () {
                                this._bitField = this._bitField | 67108864;
                                this._fireEvent("promiseResolved", this);
                            };

                            Promise.prototype._setIsFinal = function () {
                                this._bitField = this._bitField | 4194304;
                            };

                            Promise.prototype._isFinal = function () {
                                return (this._bitField & 4194304) > 0;
                            };

                            Promise.prototype._unsetCancelled = function () {
                                this._bitField = this._bitField & (~65536);
                            };

                            Promise.prototype._setCancelled = function () {
                                this._bitField = this._bitField | 65536;
                                this._fireEvent("promiseCancelled", this);
                            };

                            Promise.prototype._setWillBeCancelled = function () {
                                this._bitField = this._bitField | 8388608;
                            };

                            Promise.prototype._setAsyncGuaranteed = function () {
                                if (async.hasCustomScheduler()) return;
                                this._bitField = this._bitField | 134217728;
                            };

                            Promise.prototype._receiverAt = function (index) {
                                var ret = index === 0 ? this._receiver0 : this[
                                index * 4 - 4 + 3];
                                if (ret === UNDEFINED_BINDING) {
                                    return undefined;
                                } else if (ret === undefined && this._isBound()) {
                                    return this._boundValue();
                                }
                                return ret;
                            };

                            Promise.prototype._promiseAt = function (index) {
                                return this[
                                index * 4 - 4 + 2];
                            };

                            Promise.prototype._fulfillmentHandlerAt = function (index) {
                                return this[
                                index * 4 - 4 + 0];
                            };

                            Promise.prototype._rejectionHandlerAt = function (index) {
                                return this[
                                index * 4 - 4 + 1];
                            };

                            Promise.prototype._boundValue = function () {
                            };

                            Promise.prototype._migrateCallback0 = function (follower) {
                                var bitField = follower._bitField;
                                var fulfill = follower._fulfillmentHandler0;
                                var reject = follower._rejectionHandler0;
                                var promise = follower._promise0;
                                var receiver = follower._receiverAt(0);
                                if (receiver === undefined) receiver = UNDEFINED_BINDING;
                                this._addCallbacks(fulfill, reject, promise, receiver, null);
                            };

                            Promise.prototype._migrateCallbackAt = function (follower, index) {
                                var fulfill = follower._fulfillmentHandlerAt(index);
                                var reject = follower._rejectionHandlerAt(index);
                                var promise = follower._promiseAt(index);
                                var receiver = follower._receiverAt(index);
                                if (receiver === undefined) receiver = UNDEFINED_BINDING;
                                this._addCallbacks(fulfill, reject, promise, receiver, null);
                            };

                            Promise.prototype._addCallbacks = function (
                                fulfill,
                                reject,
                                promise,
                                receiver,
                                domain
                            ) {
                                var index = this._length();

                                if (index >= 65535 - 4) {
                                    index = 0;
                                    this._setLength(0);
                                }

                                if (index === 0) {
                                    this._promise0 = promise;
                                    this._receiver0 = receiver;
                                    if (typeof fulfill === "function") {
                                        this._fulfillmentHandler0 =
                                            domain === null ? fulfill : util.domainBind(domain, fulfill);
                                    }
                                    if (typeof reject === "function") {
                                        this._rejectionHandler0 =
                                            domain === null ? reject : util.domainBind(domain, reject);
                                    }
                                } else {
                                    var base = index * 4 - 4;
                                    this[base + 2] = promise;
                                    this[base + 3] = receiver;
                                    if (typeof fulfill === "function") {
                                        this[base + 0] =
                                            domain === null ? fulfill : util.domainBind(domain, fulfill);
                                    }
                                    if (typeof reject === "function") {
                                        this[base + 1] =
                                            domain === null ? reject : util.domainBind(domain, reject);
                                    }
                                }
                                this._setLength(index + 1);
                                return index;
                            };

                            Promise.prototype._proxy = function (proxyable, arg) {
                                this._addCallbacks(undefined, undefined, arg, proxyable, null);
                            };

                            Promise.prototype._resolveCallback = function (value, shouldBind) {
                                if (((this._bitField & 117506048) !== 0)) return;
                                if (value === this)
                                    return this._rejectCallback(makeSelfResolutionError(), false);
                                var maybePromise = tryConvertToPromise(value, this);
                                if (!(maybePromise instanceof Promise)) return this._fulfill(value);

                                if (shouldBind) this._propagateFrom(maybePromise, 2);

                                var promise = maybePromise._target();

                                if (promise === this) {
                                    this._reject(makeSelfResolutionError());
                                    return;
                                }

                                var bitField = promise._bitField;
                                if (((bitField & 50397184) === 0)) {
                                    var len = this._length();
                                    if (len > 0) promise._migrateCallback0(this);
                                    for (var i = 1; i < len; ++i) {
                                        promise._migrateCallbackAt(this, i);
                                    }
                                    this._setFollowing();
                                    this._setLength(0);
                                    this._setFollowee(promise);
                                } else if (((bitField & 33554432) !== 0)) {
                                    this._fulfill(promise._value());
                                } else if (((bitField & 16777216) !== 0)) {
                                    this._reject(promise._reason());
                                } else {
                                    var reason = new CancellationError("late cancellation observer");
                                    promise._attachExtraTrace(reason);
                                    this._reject(reason);
                                }
                            };

                            Promise.prototype._rejectCallback =
                                function (reason, synchronous, ignoreNonErrorWarnings) {
                                    var trace = util.ensureErrorObject(reason);
                                    var hasStack = trace === reason;
                                    if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
                                        var message = "a promise was rejected with a non-error: " +
                                            util.classString(reason);
                                        this._warn(message, true);
                                    }
                                    this._attachExtraTrace(trace, synchronous ? hasStack : false);
                                    this._reject(reason);
                                };

                            Promise.prototype._resolveFromExecutor = function (executor) {
                                if (executor === INTERNAL) return;
                                var promise = this;
                                this._captureStackTrace();
                                this._pushContext();
                                var synchronous = true;
                                var r = this._execute(executor, function (value) {
                                    promise._resolveCallback(value);
                                }, function (reason) {
                                    promise._rejectCallback(reason, synchronous);
                                });
                                synchronous = false;
                                this._popContext();

                                if (r !== undefined) {
                                    promise._rejectCallback(r, true);
                                }
                            };

                            Promise.prototype._settlePromiseFromHandler = function (
                                handler, receiver, value, promise
                            ) {
                                var bitField = promise._bitField;
                                if (((bitField & 65536) !== 0)) return;
                                promise._pushContext();
                                var x;
                                if (receiver === APPLY) {
                                    if (!value || typeof value.length !== "number") {
                                        x = errorObj;
                                        x.e = new TypeError("cannot .spread() a non-array: " +
                                            util.classString(value));
                                    } else {
                                        x = tryCatch(handler).apply(this._boundValue(), value);
                                    }
                                } else {
                                    x = tryCatch(handler).call(receiver, value);
                                }
                                var promiseCreated = promise._popContext();
                                bitField = promise._bitField;
                                if (((bitField & 65536) !== 0)) return;

                                if (x === NEXT_FILTER) {
                                    promise._reject(value);
                                } else if (x === errorObj) {
                                    promise._rejectCallback(x.e, false);
                                } else {
                                    debug.checkForgottenReturns(x, promiseCreated, "", promise, this);
                                    promise._resolveCallback(x);
                                }
                            };

                            Promise.prototype._target = function () {
                                var ret = this;
                                while (ret._isFollowing()) ret = ret._followee();
                                return ret;
                            };

                            Promise.prototype._followee = function () {
                                return this._rejectionHandler0;
                            };

                            Promise.prototype._setFollowee = function (promise) {
                                this._rejectionHandler0 = promise;
                            };

                            Promise.prototype._settlePromise = function (promise, handler, receiver, value) {
                                var isPromise = promise instanceof Promise;
                                var bitField = this._bitField;
                                var asyncGuaranteed = ((bitField & 134217728) !== 0);
                                if (((bitField & 65536) !== 0)) {
                                    if (isPromise) promise._invokeInternalOnCancel();

                                    if (receiver instanceof PassThroughHandlerContext &&
                                        receiver.isFinallyHandler()) {
                                        receiver.cancelPromise = promise;
                                        if (tryCatch(handler).call(receiver, value) === errorObj) {
                                            promise._reject(errorObj.e);
                                        }
                                    } else if (handler === reflectHandler) {
                                        promise._fulfill(reflectHandler.call(receiver));
                                    } else if (receiver instanceof Proxyable) {
                                        receiver._promiseCancelled(promise);
                                    } else if (isPromise || promise instanceof PromiseArray) {
                                        promise._cancel();
                                    } else {
                                        receiver.cancel();
                                    }
                                } else if (typeof handler === "function") {
                                    if (!isPromise) {
                                        handler.call(receiver, value, promise);
                                    } else {
                                        if (asyncGuaranteed) promise._setAsyncGuaranteed();
                                        this._settlePromiseFromHandler(handler, receiver, value, promise);
                                    }
                                } else if (receiver instanceof Proxyable) {
                                    if (!receiver._isResolved()) {
                                        if (((bitField & 33554432) !== 0)) {
                                            receiver._promiseFulfilled(value, promise);
                                        } else {
                                            receiver._promiseRejected(value, promise);
                                        }
                                    }
                                } else if (isPromise) {
                                    if (asyncGuaranteed) promise._setAsyncGuaranteed();
                                    if (((bitField & 33554432) !== 0)) {
                                        promise._fulfill(value);
                                    } else {
                                        promise._reject(value);
                                    }
                                }
                            };

                            Promise.prototype._settlePromiseLateCancellationObserver = function (ctx) {
                                var handler = ctx.handler;
                                var promise = ctx.promise;
                                var receiver = ctx.receiver;
                                var value = ctx.value;
                                if (typeof handler === "function") {
                                    if (!(promise instanceof Promise)) {
                                        handler.call(receiver, value, promise);
                                    } else {
                                        this._settlePromiseFromHandler(handler, receiver, value, promise);
                                    }
                                } else if (promise instanceof Promise) {
                                    promise._reject(value);
                                }
                            };

                            Promise.prototype._settlePromiseCtx = function (ctx) {
                                this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
                            };

                            Promise.prototype._settlePromise0 = function (handler, value, bitField) {
                                var promise = this._promise0;
                                var receiver = this._receiverAt(0);
                                this._promise0 = undefined;
                                this._receiver0 = undefined;
                                this._settlePromise(promise, handler, receiver, value);
                            };

                            Promise.prototype._clearCallbackDataAtIndex = function (index) {
                                var base = index * 4 - 4;
                                this[base + 2] =
                                    this[base + 3] =
                                        this[base + 0] =
                                            this[base + 1] = undefined;
                            };

                            Promise.prototype._fulfill = function (value) {
                                var bitField = this._bitField;
                                if (((bitField & 117506048) >>> 16)) return;
                                if (value === this) {
                                    var err = makeSelfResolutionError();
                                    this._attachExtraTrace(err);
                                    return this._reject(err);
                                }
                                this._setFulfilled();
                                this._rejectionHandler0 = value;

                                if ((bitField & 65535) > 0) {
                                    if (((bitField & 134217728) !== 0)) {
                                        this._settlePromises();
                                    } else {
                                        async.settlePromises(this);
                                    }
                                }
                            };

                            Promise.prototype._reject = function (reason) {
                                var bitField = this._bitField;
                                if (((bitField & 117506048) >>> 16)) return;
                                this._setRejected();
                                this._fulfillmentHandler0 = reason;

                                if (this._isFinal()) {
                                    return async.fatalError(reason, util.isNode);
                                }

                                if ((bitField & 65535) > 0) {
                                    async.settlePromises(this);
                                } else {
                                    this._ensurePossibleRejectionHandled();
                                }
                            };

                            Promise.prototype._fulfillPromises = function (len, value) {
                                for (var i = 1; i < len; i++) {
                                    var handler = this._fulfillmentHandlerAt(i);
                                    var promise = this._promiseAt(i);
                                    var receiver = this._receiverAt(i);
                                    this._clearCallbackDataAtIndex(i);
                                    this._settlePromise(promise, handler, receiver, value);
                                }
                            };

                            Promise.prototype._rejectPromises = function (len, reason) {
                                for (var i = 1; i < len; i++) {
                                    var handler = this._rejectionHandlerAt(i);
                                    var promise = this._promiseAt(i);
                                    var receiver = this._receiverAt(i);
                                    this._clearCallbackDataAtIndex(i);
                                    this._settlePromise(promise, handler, receiver, reason);
                                }
                            };

                            Promise.prototype._settlePromises = function () {
                                var bitField = this._bitField;
                                var len = (bitField & 65535);

                                if (len > 0) {
                                    if (((bitField & 16842752) !== 0)) {
                                        var reason = this._fulfillmentHandler0;
                                        this._settlePromise0(this._rejectionHandler0, reason, bitField);
                                        this._rejectPromises(len, reason);
                                    } else {
                                        var value = this._rejectionHandler0;
                                        this._settlePromise0(this._fulfillmentHandler0, value, bitField);
                                        this._fulfillPromises(len, value);
                                    }
                                    this._setLength(0);
                                }
                                this._clearCancellationData();
                            };

                            Promise.prototype._settledValue = function () {
                                var bitField = this._bitField;
                                if (((bitField & 33554432) !== 0)) {
                                    return this._rejectionHandler0;
                                } else if (((bitField & 16777216) !== 0)) {
                                    return this._fulfillmentHandler0;
                                }
                            };

                            function deferResolve(v) {
                                this.promise._resolveCallback(v);
                            }

                            function deferReject(v) {
                                this.promise._rejectCallback(v, false);
                            }

                            Promise.defer = Promise.pending = function () {
                                debug.deprecated("Promise.defer", "new Promise");
                                var promise = new Promise(INTERNAL);
                                return {
                                    promise: promise,
                                    resolve: deferResolve,
                                    reject: deferReject
                                };
                            };

                            util.notEnumerableProp(Promise,
                                "_makeSelfResolutionError",
                                makeSelfResolutionError);

                            _dereq_("./method")(Promise, INTERNAL, tryConvertToPromise, apiRejection,
                                debug);
                            _dereq_("./bind")(Promise, INTERNAL, tryConvertToPromise, debug);
                            _dereq_("./cancel")(Promise, PromiseArray, apiRejection, debug);
                            _dereq_("./direct_resolve")(Promise);
                            _dereq_("./synchronous_inspection")(Promise);
                            _dereq_("./join")(
                                Promise, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain);
                            Promise.Promise = Promise;
                            Promise.version = "3.5.1";
                            _dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
                            _dereq_('./call_get.js')(Promise);
                            _dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
                            _dereq_('./timers.js')(Promise, INTERNAL, debug);
                            _dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
                            _dereq_('./nodeify.js')(Promise);
                            _dereq_('./promisify.js')(Promise, INTERNAL);
                            _dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
                            _dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
                            _dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
                            _dereq_('./settle.js')(Promise, PromiseArray, debug);
                            _dereq_('./some.js')(Promise, PromiseArray, apiRejection);
                            _dereq_('./filter.js')(Promise, INTERNAL);
                            _dereq_('./each.js')(Promise, INTERNAL);
                            _dereq_('./any.js')(Promise);

                            util.toFastProperties(Promise);
                            util.toFastProperties(Promise.prototype);

                            function fillTypes(value) {
                                var p = new Promise(INTERNAL);
                                p._fulfillmentHandler0 = value;
                                p._rejectionHandler0 = value;
                                p._promise0 = value;
                                p._receiver0 = value;
                            }

                            // Complete slack tracking, opt out of field-type tracking and
                            // stabilize map
                            fillTypes({a: 1});
                            fillTypes({b: 2});
                            fillTypes({c: 3});
                            fillTypes(1);
                            fillTypes(function () {
                            });
                            fillTypes(undefined);
                            fillTypes(false);
                            fillTypes(new Promise(INTERNAL));
                            debug.setBounds(Async.firstLineError, util.lastLineError);
                            return Promise;

                        };

                    }, {
                        "./any.js": 1,
                        "./async": 2,
                        "./bind": 3,
                        "./call_get.js": 5,
                        "./cancel": 6,
                        "./catch_filter": 7,
                        "./context": 8,
                        "./debuggability": 9,
                        "./direct_resolve": 10,
                        "./each.js": 11,
                        "./errors": 12,
                        "./es5": 13,
                        "./filter.js": 14,
                        "./finally": 15,
                        "./generators.js": 16,
                        "./join": 17,
                        "./map.js": 18,
                        "./method": 19,
                        "./nodeback": 20,
                        "./nodeify.js": 21,
                        "./promise_array": 23,
                        "./promisify.js": 24,
                        "./props.js": 25,
                        "./race.js": 27,
                        "./reduce.js": 28,
                        "./settle.js": 30,
                        "./some.js": 31,
                        "./synchronous_inspection": 32,
                        "./thenables": 33,
                        "./timers.js": 34,
                        "./using.js": 35,
                        "./util": 36
                    }], 23: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise, INTERNAL, tryConvertToPromise,
                                                   apiRejection, Proxyable) {
                            var util = _dereq_("./util");
                            var isArray = util.isArray;

                            function toResolutionValue(val) {
                                switch (val) {
                                    case -2:
                                        return [];
                                    case -3:
                                        return {};
                                    case -6:
                                        return new Map();
                                }
                            }

                            function PromiseArray(values) {
                                var promise = this._promise = new Promise(INTERNAL);
                                if (values instanceof Promise) {
                                    promise._propagateFrom(values, 3);
                                }
                                promise._setOnCancel(this);
                                this._values = values;
                                this._length = 0;
                                this._totalResolved = 0;
                                this._init(undefined, -2);
                            }

                            util.inherits(PromiseArray, Proxyable);

                            PromiseArray.prototype.length = function () {
                                return this._length;
                            };

                            PromiseArray.prototype.promise = function () {
                                return this._promise;
                            };

                            PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
                                var values = tryConvertToPromise(this._values, this._promise);
                                if (values instanceof Promise) {
                                    values = values._target();
                                    var bitField = values._bitField;
                                    ;
                                    this._values = values;

                                    if (((bitField & 50397184) === 0)) {
                                        this._promise._setAsyncGuaranteed();
                                        return values._then(
                                            init,
                                            this._reject,
                                            undefined,
                                            this,
                                            resolveValueIfEmpty
                                        );
                                    } else if (((bitField & 33554432) !== 0)) {
                                        values = values._value();
                                    } else if (((bitField & 16777216) !== 0)) {
                                        return this._reject(values._reason());
                                    } else {
                                        return this._cancel();
                                    }
                                }
                                values = util.asArray(values);
                                if (values === null) {
                                    var err = apiRejection(
                                        "expecting an array or an iterable object but got " + util.classString(values)).reason();
                                    this._promise._rejectCallback(err, false);
                                    return;
                                }

                                if (values.length === 0) {
                                    if (resolveValueIfEmpty === -5) {
                                        this._resolveEmptyArray();
                                    } else {
                                        this._resolve(toResolutionValue(resolveValueIfEmpty));
                                    }
                                    return;
                                }
                                this._iterate(values);
                            };

                            PromiseArray.prototype._iterate = function (values) {
                                var len = this.getActualLength(values.length);
                                this._length = len;
                                this._values = this.shouldCopyValues() ? new Array(len) : this._values;
                                var result = this._promise;
                                var isResolved = false;
                                var bitField = null;
                                for (var i = 0; i < len; ++i) {
                                    var maybePromise = tryConvertToPromise(values[i], result);

                                    if (maybePromise instanceof Promise) {
                                        maybePromise = maybePromise._target();
                                        bitField = maybePromise._bitField;
                                    } else {
                                        bitField = null;
                                    }

                                    if (isResolved) {
                                        if (bitField !== null) {
                                            maybePromise.suppressUnhandledRejections();
                                        }
                                    } else if (bitField !== null) {
                                        if (((bitField & 50397184) === 0)) {
                                            maybePromise._proxy(this, i);
                                            this._values[i] = maybePromise;
                                        } else if (((bitField & 33554432) !== 0)) {
                                            isResolved = this._promiseFulfilled(maybePromise._value(), i);
                                        } else if (((bitField & 16777216) !== 0)) {
                                            isResolved = this._promiseRejected(maybePromise._reason(), i);
                                        } else {
                                            isResolved = this._promiseCancelled(i);
                                        }
                                    } else {
                                        isResolved = this._promiseFulfilled(maybePromise, i);
                                    }
                                }
                                if (!isResolved) result._setAsyncGuaranteed();
                            };

                            PromiseArray.prototype._isResolved = function () {
                                return this._values === null;
                            };

                            PromiseArray.prototype._resolve = function (value) {
                                this._values = null;
                                this._promise._fulfill(value);
                            };

                            PromiseArray.prototype._cancel = function () {
                                if (this._isResolved() || !this._promise._isCancellable()) return;
                                this._values = null;
                                this._promise._cancel();
                            };

                            PromiseArray.prototype._reject = function (reason) {
                                this._values = null;
                                this._promise._rejectCallback(reason, false);
                            };

                            PromiseArray.prototype._promiseFulfilled = function (value, index) {
                                this._values[index] = value;
                                var totalResolved = ++this._totalResolved;
                                if (totalResolved >= this._length) {
                                    this._resolve(this._values);
                                    return true;
                                }
                                return false;
                            };

                            PromiseArray.prototype._promiseCancelled = function () {
                                this._cancel();
                                return true;
                            };

                            PromiseArray.prototype._promiseRejected = function (reason) {
                                this._totalResolved++;
                                this._reject(reason);
                                return true;
                            };

                            PromiseArray.prototype._resultCancelled = function () {
                                if (this._isResolved()) return;
                                var values = this._values;
                                this._cancel();
                                if (values instanceof Promise) {
                                    values.cancel();
                                } else {
                                    for (var i = 0; i < values.length; ++i) {
                                        if (values[i] instanceof Promise) {
                                            values[i].cancel();
                                        }
                                    }
                                }
                            };

                            PromiseArray.prototype.shouldCopyValues = function () {
                                return true;
                            };

                            PromiseArray.prototype.getActualLength = function (len) {
                                return len;
                            };

                            return PromiseArray;
                        };

                    }, {"./util": 36}], 24: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise, INTERNAL) {
                            var THIS = {};
                            var util = _dereq_("./util");
                            var nodebackForPromise = _dereq_("./nodeback");
                            var withAppended = util.withAppended;
                            var maybeWrapAsError = util.maybeWrapAsError;
                            var canEvaluate = util.canEvaluate;
                            var TypeError = _dereq_("./errors").TypeError;
                            var defaultSuffix = "Async";
                            var defaultPromisified = {__isPromisified__: true};
                            var noCopyProps = [
                                "arity", "length",
                                "name",
                                "arguments",
                                "caller",
                                "callee",
                                "prototype",
                                "__isPromisified__"
                            ];
                            var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

                            var defaultFilter = function (name) {
                                return util.isIdentifier(name) &&
                                    name.charAt(0) !== "_" &&
                                    name !== "constructor";
                            };

                            function propsFilter(key) {
                                return !noCopyPropsPattern.test(key);
                            }

                            function isPromisified(fn) {
                                try {
                                    return fn.__isPromisified__ === true;
                                } catch (e) {
                                    return false;
                                }
                            }

                            function hasPromisified(obj, key, suffix) {
                                var val = util.getDataPropertyOrDefault(obj, key + suffix,
                                    defaultPromisified);
                                return val ? isPromisified(val) : false;
                            }

                            function checkValid(ret, suffix, suffixRegexp) {
                                for (var i = 0; i < ret.length; i += 2) {
                                    var key = ret[i];
                                    if (suffixRegexp.test(key)) {
                                        var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
                                        for (var j = 0; j < ret.length; j += 2) {
                                            if (ret[j] === keyWithoutAsyncSuffix) {
                                                throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a"
                                                    .replace("%s", suffix));
                                            }
                                        }
                                    }
                                }
                            }

                            function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
                                var keys = util.inheritedDataKeys(obj);
                                var ret = [];
                                for (var i = 0; i < keys.length; ++i) {
                                    var key = keys[i];
                                    var value = obj[key];
                                    var passesDefaultFilter = filter === defaultFilter
                                        ? true : defaultFilter(key, value, obj);
                                    if (typeof value === "function" &&
                                        !isPromisified(value) &&
                                        !hasPromisified(obj, key, suffix) &&
                                        filter(key, value, obj, passesDefaultFilter)) {
                                        ret.push(key, value);
                                    }
                                }
                                checkValid(ret, suffix, suffixRegexp);
                                return ret;
                            }

                            var escapeIdentRegex = function (str) {
                                return str.replace(/([$])/, "\\$");
                            };

                            var makeNodePromisifiedEval;
                            if (!true) {
                                var switchCaseArgumentOrder = function (likelyArgumentCount) {
                                    var ret = [likelyArgumentCount];
                                    var min = Math.max(0, likelyArgumentCount - 1 - 3);
                                    for (var i = likelyArgumentCount - 1; i >= min; --i) {
                                        ret.push(i);
                                    }
                                    for (var i = likelyArgumentCount + 1; i <= 3; ++i) {
                                        ret.push(i);
                                    }
                                    return ret;
                                };

                                var argumentSequence = function (argumentCount) {
                                    return util.filledRange(argumentCount, "_arg", "");
                                };

                                var parameterDeclaration = function (parameterCount) {
                                    return util.filledRange(
                                        Math.max(parameterCount, 3), "_arg", "");
                                };

                                var parameterCount = function (fn) {
                                    if (typeof fn.length === "number") {
                                        return Math.max(Math.min(fn.length, 1023 + 1), 0);
                                    }
                                    return 0;
                                };

                                makeNodePromisifiedEval =
                                    function (callback, receiver, originalName, fn, _, multiArgs) {
                                        var newParameterCount = Math.max(0, parameterCount(fn) - 1);
                                        var argumentOrder = switchCaseArgumentOrder(newParameterCount);
                                        var shouldProxyThis = typeof callback === "string" || receiver === THIS;

                                        function generateCallForArgumentCount(count) {
                                            var args = argumentSequence(count).join(", ");
                                            var comma = count > 0 ? ", " : "";
                                            var ret;
                                            if (shouldProxyThis) {
                                                ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
                                            } else {
                                                ret = receiver === undefined
                                                    ? "ret = callback({{args}}, nodeback); break;\n"
                                                    : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
                                            }
                                            return ret.replace("{{args}}", args).replace(", ", comma);
                                        }

                                        function generateArgumentSwitchCase() {
                                            var ret = "";
                                            for (var i = 0; i < argumentOrder.length; ++i) {
                                                ret += "case " + argumentOrder[i] + ":" +
                                                    generateCallForArgumentCount(argumentOrder[i]);
                                            }

                                            ret += "                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) {                                  \n\
               args[i] = arguments[i];                                       \n\
            }                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ".replace("[CodeForCall]", (shouldProxyThis
                                                ? "ret = callback.apply(this, args);\n"
                                                : "ret = callback.apply(receiver, args);\n"));
                                            return ret;
                                        }

                                        var getFunctionCode = typeof callback === "string"
                                            ? ("this != null ? this['" + callback + "'] : fn")
                                            : "fn";
                                        var body = "'use strict';                                                \n\
        var ret = function (Parameters) {                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) {                                                    \n\
                [CodeForSwitchCase]                                          \n\
            }                                                                \n\
            if (ret === errorObj) {                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
            }                                                                \n\
            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
            return promise;                                                  \n\
        };                                                                   \n\
        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
        return ret;                                                          \n\
    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
                                            .replace("[GetFunctionCode]", getFunctionCode);
                                        body = body.replace("Parameters", parameterDeclaration(newParameterCount));
                                        return new Function("Promise",
                                            "fn",
                                            "receiver",
                                            "withAppended",
                                            "maybeWrapAsError",
                                            "nodebackForPromise",
                                            "tryCatch",
                                            "errorObj",
                                            "notEnumerableProp",
                                            "INTERNAL",
                                            body)(
                                            Promise,
                                            fn,
                                            receiver,
                                            withAppended,
                                            maybeWrapAsError,
                                            nodebackForPromise,
                                            util.tryCatch,
                                            util.errorObj,
                                            util.notEnumerableProp,
                                            INTERNAL);
                                    };
                            }

                            function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
                                var defaultThis = (function () {
                                    return this;
                                })();
                                var method = callback;
                                if (typeof method === "string") {
                                    callback = fn;
                                }

                                function promisified() {
                                    var _receiver = receiver;
                                    if (receiver === THIS) _receiver = this;
                                    var promise = new Promise(INTERNAL);
                                    promise._captureStackTrace();
                                    var cb = typeof method === "string" && this !== defaultThis
                                        ? this[method] : callback;
                                    var fn = nodebackForPromise(promise, multiArgs);
                                    try {
                                        cb.apply(_receiver, withAppended(arguments, fn));
                                    } catch (e) {
                                        promise._rejectCallback(maybeWrapAsError(e), true, true);
                                    }
                                    if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
                                    return promise;
                                }

                                util.notEnumerableProp(promisified, "__isPromisified__", true);
                                return promisified;
                            }

                            var makeNodePromisified = canEvaluate
                                ? makeNodePromisifiedEval
                                : makeNodePromisifiedClosure;

                            function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
                                var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
                                var methods =
                                    promisifiableMethods(obj, suffix, suffixRegexp, filter);

                                for (var i = 0, len = methods.length; i < len; i += 2) {
                                    var key = methods[i];
                                    var fn = methods[i + 1];
                                    var promisifiedKey = key + suffix;
                                    if (promisifier === makeNodePromisified) {
                                        obj[promisifiedKey] =
                                            makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
                                    } else {
                                        var promisified = promisifier(fn, function () {
                                            return makeNodePromisified(key, THIS, key,
                                                fn, suffix, multiArgs);
                                        });
                                        util.notEnumerableProp(promisified, "__isPromisified__", true);
                                        obj[promisifiedKey] = promisified;
                                    }
                                }
                                util.toFastProperties(obj);
                                return obj;
                            }

                            function promisify(callback, receiver, multiArgs) {
                                return makeNodePromisified(callback, receiver, undefined,
                                    callback, null, multiArgs);
                            }

                            Promise.promisify = function (fn, options) {
                                if (typeof fn !== "function") {
                                    throw new TypeError("expecting a function but got " + util.classString(fn));
                                }
                                if (isPromisified(fn)) {
                                    return fn;
                                }
                                options = Object(options);
                                var receiver = options.context === undefined ? THIS : options.context;
                                var multiArgs = !!options.multiArgs;
                                var ret = promisify(fn, receiver, multiArgs);
                                util.copyDescriptors(fn, ret, propsFilter);
                                return ret;
                            };

                            Promise.promisifyAll = function (target, options) {
                                if (typeof target !== "function" && typeof target !== "object") {
                                    throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                                }
                                options = Object(options);
                                var multiArgs = !!options.multiArgs;
                                var suffix = options.suffix;
                                if (typeof suffix !== "string") suffix = defaultSuffix;
                                var filter = options.filter;
                                if (typeof filter !== "function") filter = defaultFilter;
                                var promisifier = options.promisifier;
                                if (typeof promisifier !== "function") promisifier = makeNodePromisified;

                                if (!util.isIdentifier(suffix)) {
                                    throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                                }

                                var keys = util.inheritedDataKeys(target);
                                for (var i = 0; i < keys.length; ++i) {
                                    var value = target[keys[i]];
                                    if (keys[i] !== "constructor" &&
                                        util.isClass(value)) {
                                        promisifyAll(value.prototype, suffix, filter, promisifier,
                                            multiArgs);
                                        promisifyAll(value, suffix, filter, promisifier, multiArgs);
                                    }
                                }

                                return promisifyAll(target, suffix, filter, promisifier, multiArgs);
                            };
                        };


                    }, {"./errors": 12, "./nodeback": 20, "./util": 36}], 25: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (
                            Promise, PromiseArray, tryConvertToPromise, apiRejection) {
                            var util = _dereq_("./util");
                            var isObject = util.isObject;
                            var es5 = _dereq_("./es5");
                            var Es6Map;
                            if (typeof Map === "function") Es6Map = Map;

                            var mapToEntries = (function () {
                                var index = 0;
                                var size = 0;

                                function extractEntry(value, key) {
                                    this[index] = value;
                                    this[index + size] = key;
                                    index++;
                                }

                                return function mapToEntries(map) {
                                    size = map.size;
                                    index = 0;
                                    var ret = new Array(map.size * 2);
                                    map.forEach(extractEntry, ret);
                                    return ret;
                                };
                            })();

                            var entriesToMap = function (entries) {
                                var ret = new Es6Map();
                                var length = entries.length / 2 | 0;
                                for (var i = 0; i < length; ++i) {
                                    var key = entries[length + i];
                                    var value = entries[i];
                                    ret.set(key, value);
                                }
                                return ret;
                            };

                            function PropertiesPromiseArray(obj) {
                                var isMap = false;
                                var entries;
                                if (Es6Map !== undefined && obj instanceof Es6Map) {
                                    entries = mapToEntries(obj);
                                    isMap = true;
                                } else {
                                    var keys = es5.keys(obj);
                                    var len = keys.length;
                                    entries = new Array(len * 2);
                                    for (var i = 0; i < len; ++i) {
                                        var key = keys[i];
                                        entries[i] = obj[key];
                                        entries[i + len] = key;
                                    }
                                }
                                this.constructor$(entries);
                                this._isMap = isMap;
                                this._init$(undefined, isMap ? -6 : -3);
                            }

                            util.inherits(PropertiesPromiseArray, PromiseArray);

                            PropertiesPromiseArray.prototype._init = function () {
                            };

                            PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
                                this._values[index] = value;
                                var totalResolved = ++this._totalResolved;
                                if (totalResolved >= this._length) {
                                    var val;
                                    if (this._isMap) {
                                        val = entriesToMap(this._values);
                                    } else {
                                        val = {};
                                        var keyOffset = this.length();
                                        for (var i = 0, len = this.length(); i < len; ++i) {
                                            val[this._values[i + keyOffset]] = this._values[i];
                                        }
                                    }
                                    this._resolve(val);
                                    return true;
                                }
                                return false;
                            };

                            PropertiesPromiseArray.prototype.shouldCopyValues = function () {
                                return false;
                            };

                            PropertiesPromiseArray.prototype.getActualLength = function (len) {
                                return len >> 1;
                            };

                            function props(promises) {
                                var ret;
                                var castValue = tryConvertToPromise(promises);

                                if (!isObject(castValue)) {
                                    return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                                } else if (castValue instanceof Promise) {
                                    ret = castValue._then(
                                        Promise.props, undefined, undefined, undefined, undefined);
                                } else {
                                    ret = new PropertiesPromiseArray(castValue).promise();
                                }

                                if (castValue instanceof Promise) {
                                    ret._propagateFrom(castValue, 2);
                                }
                                return ret;
                            }

                            Promise.prototype.props = function () {
                                return props(this);
                            };

                            Promise.props = function (promises) {
                                return props(promises);
                            };
                        };

                    }, {"./es5": 13, "./util": 36}], 26: [function (_dereq_, module, exports) {
                        "use strict";

                        function arrayMove(src, srcIndex, dst, dstIndex, len) {
                            for (var j = 0; j < len; ++j) {
                                dst[j + dstIndex] = src[j + srcIndex];
                                src[j + srcIndex] = void 0;
                            }
                        }

                        function Queue(capacity) {
                            this._capacity = capacity;
                            this._length = 0;
                            this._front = 0;
                        }

                        Queue.prototype._willBeOverCapacity = function (size) {
                            return this._capacity < size;
                        };

                        Queue.prototype._pushOne = function (arg) {
                            var length = this.length();
                            this._checkCapacity(length + 1);
                            var i = (this._front + length) & (this._capacity - 1);
                            this[i] = arg;
                            this._length = length + 1;
                        };

                        Queue.prototype.push = function (fn, receiver, arg) {
                            var length = this.length() + 3;
                            if (this._willBeOverCapacity(length)) {
                                this._pushOne(fn);
                                this._pushOne(receiver);
                                this._pushOne(arg);
                                return;
                            }
                            var j = this._front + length - 3;
                            this._checkCapacity(length);
                            var wrapMask = this._capacity - 1;
                            this[(j + 0) & wrapMask] = fn;
                            this[(j + 1) & wrapMask] = receiver;
                            this[(j + 2) & wrapMask] = arg;
                            this._length = length;
                        };

                        Queue.prototype.shift = function () {
                            var front = this._front,
                                ret = this[front];

                            this[front] = undefined;
                            this._front = (front + 1) & (this._capacity - 1);
                            this._length--;
                            return ret;
                        };

                        Queue.prototype.length = function () {
                            return this._length;
                        };

                        Queue.prototype._checkCapacity = function (size) {
                            if (this._capacity < size) {
                                this._resizeTo(this._capacity << 1);
                            }
                        };

                        Queue.prototype._resizeTo = function (capacity) {
                            var oldCapacity = this._capacity;
                            this._capacity = capacity;
                            var front = this._front;
                            var length = this._length;
                            var moveItemsCount = (front + length) & (oldCapacity - 1);
                            arrayMove(this, 0, this, oldCapacity, moveItemsCount);
                        };

                        module.exports = Queue;

                    }, {}], 27: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (
                            Promise, INTERNAL, tryConvertToPromise, apiRejection) {
                            var util = _dereq_("./util");

                            var raceLater = function (promise) {
                                return promise.then(function (array) {
                                    return race(array, promise);
                                });
                            };

                            function race(promises, parent) {
                                var maybePromise = tryConvertToPromise(promises);

                                if (maybePromise instanceof Promise) {
                                    return raceLater(maybePromise);
                                } else {
                                    promises = util.asArray(promises);
                                    if (promises === null)
                                        return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
                                }

                                var ret = new Promise(INTERNAL);
                                if (parent !== undefined) {
                                    ret._propagateFrom(parent, 3);
                                }
                                var fulfill = ret._fulfill;
                                var reject = ret._reject;
                                for (var i = 0, len = promises.length; i < len; ++i) {
                                    var val = promises[i];

                                    if (val === undefined && !(i in promises)) {
                                        continue;
                                    }

                                    Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
                                }
                                return ret;
                            }

                            Promise.race = function (promises) {
                                return race(promises, undefined);
                            };

                            Promise.prototype.race = function () {
                                return race(this, undefined);
                            };

                        };

                    }, {"./util": 36}], 28: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise,
                                                   PromiseArray,
                                                   apiRejection,
                                                   tryConvertToPromise,
                                                   INTERNAL,
                                                   debug) {
                            var getDomain = Promise._getDomain;
                            var util = _dereq_("./util");
                            var tryCatch = util.tryCatch;

                            function ReductionPromiseArray(promises, fn, initialValue, _each) {
                                this.constructor$(promises);
                                var domain = getDomain();
                                this._fn = domain === null ? fn : util.domainBind(domain, fn);
                                if (initialValue !== undefined) {
                                    initialValue = Promise.resolve(initialValue);
                                    initialValue._attachCancellationCallback(this);
                                }
                                this._initialValue = initialValue;
                                this._currentCancellable = null;
                                if (_each === INTERNAL) {
                                    this._eachValues = Array(this._length);
                                } else if (_each === 0) {
                                    this._eachValues = null;
                                } else {
                                    this._eachValues = undefined;
                                }
                                this._promise._captureStackTrace();
                                this._init$(undefined, -5);
                            }

                            util.inherits(ReductionPromiseArray, PromiseArray);

                            ReductionPromiseArray.prototype._gotAccum = function (accum) {
                                if (this._eachValues !== undefined &&
                                    this._eachValues !== null &&
                                    accum !== INTERNAL) {
                                    this._eachValues.push(accum);
                                }
                            };

                            ReductionPromiseArray.prototype._eachComplete = function (value) {
                                if (this._eachValues !== null) {
                                    this._eachValues.push(value);
                                }
                                return this._eachValues;
                            };

                            ReductionPromiseArray.prototype._init = function () {
                            };

                            ReductionPromiseArray.prototype._resolveEmptyArray = function () {
                                this._resolve(this._eachValues !== undefined ? this._eachValues
                                    : this._initialValue);
                            };

                            ReductionPromiseArray.prototype.shouldCopyValues = function () {
                                return false;
                            };

                            ReductionPromiseArray.prototype._resolve = function (value) {
                                this._promise._resolveCallback(value);
                                this._values = null;
                            };

                            ReductionPromiseArray.prototype._resultCancelled = function (sender) {
                                if (sender === this._initialValue) return this._cancel();
                                if (this._isResolved()) return;
                                this._resultCancelled$();
                                if (this._currentCancellable instanceof Promise) {
                                    this._currentCancellable.cancel();
                                }
                                if (this._initialValue instanceof Promise) {
                                    this._initialValue.cancel();
                                }
                            };

                            ReductionPromiseArray.prototype._iterate = function (values) {
                                this._values = values;
                                var value;
                                var i;
                                var length = values.length;
                                if (this._initialValue !== undefined) {
                                    value = this._initialValue;
                                    i = 0;
                                } else {
                                    value = Promise.resolve(values[0]);
                                    i = 1;
                                }

                                this._currentCancellable = value;

                                if (!value.isRejected()) {
                                    for (; i < length; ++i) {
                                        var ctx = {
                                            accum: null,
                                            value: values[i],
                                            index: i,
                                            length: length,
                                            array: this
                                        };
                                        value = value._then(gotAccum, undefined, undefined, ctx, undefined);
                                    }
                                }

                                if (this._eachValues !== undefined) {
                                    value = value
                                        ._then(this._eachComplete, undefined, undefined, this, undefined);
                                }
                                value._then(completed, completed, undefined, value, this);
                            };

                            Promise.prototype.reduce = function (fn, initialValue) {
                                return reduce(this, fn, initialValue, null);
                            };

                            Promise.reduce = function (promises, fn, initialValue, _each) {
                                return reduce(promises, fn, initialValue, _each);
                            };

                            function completed(valueOrReason, array) {
                                if (this.isFulfilled()) {
                                    array._resolve(valueOrReason);
                                } else {
                                    array._reject(valueOrReason);
                                }
                            }

                            function reduce(promises, fn, initialValue, _each) {
                                if (typeof fn !== "function") {
                                    return apiRejection("expecting a function but got " + util.classString(fn));
                                }
                                var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
                                return array.promise();
                            }

                            function gotAccum(accum) {
                                this.accum = accum;
                                this.array._gotAccum(accum);
                                var value = tryConvertToPromise(this.value, this.array._promise);
                                if (value instanceof Promise) {
                                    this.array._currentCancellable = value;
                                    return value._then(gotValue, undefined, undefined, this, undefined);
                                } else {
                                    return gotValue.call(this, value);
                                }
                            }

                            function gotValue(value) {
                                var array = this.array;
                                var promise = array._promise;
                                var fn = tryCatch(array._fn);
                                promise._pushContext();
                                var ret;
                                if (array._eachValues !== undefined) {
                                    ret = fn.call(promise._boundValue(), value, this.index, this.length);
                                } else {
                                    ret = fn.call(promise._boundValue(),
                                        this.accum, value, this.index, this.length);
                                }
                                if (ret instanceof Promise) {
                                    array._currentCancellable = ret;
                                }
                                var promiseCreated = promise._popContext();
                                debug.checkForgottenReturns(
                                    ret,
                                    promiseCreated,
                                    array._eachValues !== undefined ? "Promise.each" : "Promise.reduce",
                                    promise
                                );
                                return ret;
                            }
                        };

                    }, {"./util": 36}], 29: [function (_dereq_, module, exports) {
                        "use strict";
                        var util = _dereq_("./util");
                        var schedule;
                        var noAsyncScheduler = function () {
                            throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                        };
                        var NativePromise = util.getNativePromise();
                        if (util.isNode && typeof MutationObserver === "undefined") {
                            var GlobalSetImmediate = global.setImmediate;
                            var ProcessNextTick = process.nextTick;
                            schedule = util.isRecentNode
                                ? function (fn) {
                                    GlobalSetImmediate.call(global, fn);
                                }
                                : function (fn) {
                                    ProcessNextTick.call(process, fn);
                                };
                        } else if (typeof NativePromise === "function" &&
                            typeof NativePromise.resolve === "function") {
                            var nativePromise = NativePromise.resolve();
                            schedule = function (fn) {
                                nativePromise.then(fn);
                            };
                        } else if ((typeof MutationObserver !== "undefined") &&
                            !(typeof window !== "undefined" &&
                                window.navigator &&
                                (window.navigator.standalone || window.cordova))) {
                            schedule = (function () {
                                var div = document.createElement("div");
                                var opts = {attributes: true};
                                var toggleScheduled = false;
                                var div2 = document.createElement("div");
                                var o2 = new MutationObserver(function () {
                                    div.classList.toggle("foo");
                                    toggleScheduled = false;
                                });
                                o2.observe(div2, opts);

                                var scheduleToggle = function () {
                                    if (toggleScheduled) return;
                                    toggleScheduled = true;
                                    div2.classList.toggle("foo");
                                };

                                return function schedule(fn) {
                                    var o = new MutationObserver(function () {
                                        o.disconnect();
                                        fn();
                                    });
                                    o.observe(div, opts);
                                    scheduleToggle();
                                };
                            })();
                        } else if (typeof setImmediate !== "undefined") {
                            schedule = function (fn) {
                                setImmediate(fn);
                            };
                        } else if (typeof setTimeout !== "undefined") {
                            schedule = function (fn) {
                                setTimeout(fn, 0);
                            };
                        } else {
                            schedule = noAsyncScheduler;
                        }
                        module.exports = schedule;

                    }, {"./util": 36}], 30: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports =
                            function (Promise, PromiseArray, debug) {
                                var PromiseInspection = Promise.PromiseInspection;
                                var util = _dereq_("./util");

                                function SettledPromiseArray(values) {
                                    this.constructor$(values);
                                }

                                util.inherits(SettledPromiseArray, PromiseArray);

                                SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
                                    this._values[index] = inspection;
                                    var totalResolved = ++this._totalResolved;
                                    if (totalResolved >= this._length) {
                                        this._resolve(this._values);
                                        return true;
                                    }
                                    return false;
                                };

                                SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
                                    var ret = new PromiseInspection();
                                    ret._bitField = 33554432;
                                    ret._settledValueField = value;
                                    return this._promiseResolved(index, ret);
                                };
                                SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
                                    var ret = new PromiseInspection();
                                    ret._bitField = 16777216;
                                    ret._settledValueField = reason;
                                    return this._promiseResolved(index, ret);
                                };

                                Promise.settle = function (promises) {
                                    debug.deprecated(".settle()", ".reflect()");
                                    return new SettledPromiseArray(promises).promise();
                                };

                                Promise.prototype.settle = function () {
                                    return Promise.settle(this);
                                };
                            };

                    }, {"./util": 36}], 31: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports =
                            function (Promise, PromiseArray, apiRejection) {
                                var util = _dereq_("./util");
                                var RangeError = _dereq_("./errors").RangeError;
                                var AggregateError = _dereq_("./errors").AggregateError;
                                var isArray = util.isArray;
                                var CANCELLATION = {};


                                function SomePromiseArray(values) {
                                    this.constructor$(values);
                                    this._howMany = 0;
                                    this._unwrap = false;
                                    this._initialized = false;
                                }

                                util.inherits(SomePromiseArray, PromiseArray);

                                SomePromiseArray.prototype._init = function () {
                                    if (!this._initialized) {
                                        return;
                                    }
                                    if (this._howMany === 0) {
                                        this._resolve([]);
                                        return;
                                    }
                                    this._init$(undefined, -5);
                                    var isArrayResolved = isArray(this._values);
                                    if (!this._isResolved() &&
                                        isArrayResolved &&
                                        this._howMany > this._canPossiblyFulfill()) {
                                        this._reject(this._getRangeError(this.length()));
                                    }
                                };

                                SomePromiseArray.prototype.init = function () {
                                    this._initialized = true;
                                    this._init();
                                };

                                SomePromiseArray.prototype.setUnwrap = function () {
                                    this._unwrap = true;
                                };

                                SomePromiseArray.prototype.howMany = function () {
                                    return this._howMany;
                                };

                                SomePromiseArray.prototype.setHowMany = function (count) {
                                    this._howMany = count;
                                };

                                SomePromiseArray.prototype._promiseFulfilled = function (value) {
                                    this._addFulfilled(value);
                                    if (this._fulfilled() === this.howMany()) {
                                        this._values.length = this.howMany();
                                        if (this.howMany() === 1 && this._unwrap) {
                                            this._resolve(this._values[0]);
                                        } else {
                                            this._resolve(this._values);
                                        }
                                        return true;
                                    }
                                    return false;

                                };
                                SomePromiseArray.prototype._promiseRejected = function (reason) {
                                    this._addRejected(reason);
                                    return this._checkOutcome();
                                };

                                SomePromiseArray.prototype._promiseCancelled = function () {
                                    if (this._values instanceof Promise || this._values == null) {
                                        return this._cancel();
                                    }
                                    this._addRejected(CANCELLATION);
                                    return this._checkOutcome();
                                };

                                SomePromiseArray.prototype._checkOutcome = function () {
                                    if (this.howMany() > this._canPossiblyFulfill()) {
                                        var e = new AggregateError();
                                        for (var i = this.length(); i < this._values.length; ++i) {
                                            if (this._values[i] !== CANCELLATION) {
                                                e.push(this._values[i]);
                                            }
                                        }
                                        if (e.length > 0) {
                                            this._reject(e);
                                        } else {
                                            this._cancel();
                                        }
                                        return true;
                                    }
                                    return false;
                                };

                                SomePromiseArray.prototype._fulfilled = function () {
                                    return this._totalResolved;
                                };

                                SomePromiseArray.prototype._rejected = function () {
                                    return this._values.length - this.length();
                                };

                                SomePromiseArray.prototype._addRejected = function (reason) {
                                    this._values.push(reason);
                                };

                                SomePromiseArray.prototype._addFulfilled = function (value) {
                                    this._values[this._totalResolved++] = value;
                                };

                                SomePromiseArray.prototype._canPossiblyFulfill = function () {
                                    return this.length() - this._rejected();
                                };

                                SomePromiseArray.prototype._getRangeError = function (count) {
                                    var message = "Input array must contain at least " +
                                        this._howMany + " items but contains only " + count + " items";
                                    return new RangeError(message);
                                };

                                SomePromiseArray.prototype._resolveEmptyArray = function () {
                                    this._reject(this._getRangeError(0));
                                };

                                function some(promises, howMany) {
                                    if ((howMany | 0) !== howMany || howMany < 0) {
                                        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                                    }
                                    var ret = new SomePromiseArray(promises);
                                    var promise = ret.promise();
                                    ret.setHowMany(howMany);
                                    ret.init();
                                    return promise;
                                }

                                Promise.some = function (promises, howMany) {
                                    return some(promises, howMany);
                                };

                                Promise.prototype.some = function (howMany) {
                                    return some(this, howMany);
                                };

                                Promise._SomePromiseArray = SomePromiseArray;
                            };

                    }, {"./errors": 12, "./util": 36}], 32: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise) {
                            function PromiseInspection(promise) {
                                if (promise !== undefined) {
                                    promise = promise._target();
                                    this._bitField = promise._bitField;
                                    this._settledValueField = promise._isFateSealed()
                                        ? promise._settledValue() : undefined;
                                } else {
                                    this._bitField = 0;
                                    this._settledValueField = undefined;
                                }
                            }

                            PromiseInspection.prototype._settledValue = function () {
                                return this._settledValueField;
                            };

                            var value = PromiseInspection.prototype.value = function () {
                                if (!this.isFulfilled()) {
                                    throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                                }
                                return this._settledValue();
                            };

                            var reason = PromiseInspection.prototype.error =
                                PromiseInspection.prototype.reason = function () {
                                    if (!this.isRejected()) {
                                        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                                    }
                                    return this._settledValue();
                                };

                            var isFulfilled = PromiseInspection.prototype.isFulfilled = function () {
                                return (this._bitField & 33554432) !== 0;
                            };

                            var isRejected = PromiseInspection.prototype.isRejected = function () {
                                return (this._bitField & 16777216) !== 0;
                            };

                            var isPending = PromiseInspection.prototype.isPending = function () {
                                return (this._bitField & 50397184) === 0;
                            };

                            var isResolved = PromiseInspection.prototype.isResolved = function () {
                                return (this._bitField & 50331648) !== 0;
                            };

                            PromiseInspection.prototype.isCancelled = function () {
                                return (this._bitField & 8454144) !== 0;
                            };

                            Promise.prototype.__isCancelled = function () {
                                return (this._bitField & 65536) === 65536;
                            };

                            Promise.prototype._isCancelled = function () {
                                return this._target().__isCancelled();
                            };

                            Promise.prototype.isCancelled = function () {
                                return (this._target()._bitField & 8454144) !== 0;
                            };

                            Promise.prototype.isPending = function () {
                                return isPending.call(this._target());
                            };

                            Promise.prototype.isRejected = function () {
                                return isRejected.call(this._target());
                            };

                            Promise.prototype.isFulfilled = function () {
                                return isFulfilled.call(this._target());
                            };

                            Promise.prototype.isResolved = function () {
                                return isResolved.call(this._target());
                            };

                            Promise.prototype.value = function () {
                                return value.call(this._target());
                            };

                            Promise.prototype.reason = function () {
                                var target = this._target();
                                target._unsetRejectionIsUnhandled();
                                return reason.call(target);
                            };

                            Promise.prototype._value = function () {
                                return this._settledValue();
                            };

                            Promise.prototype._reason = function () {
                                this._unsetRejectionIsUnhandled();
                                return this._settledValue();
                            };

                            Promise.PromiseInspection = PromiseInspection;
                        };

                    }, {}], 33: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise, INTERNAL) {
                            var util = _dereq_("./util");
                            var errorObj = util.errorObj;
                            var isObject = util.isObject;

                            function tryConvertToPromise(obj, context) {
                                if (isObject(obj)) {
                                    if (obj instanceof Promise) return obj;
                                    var then = getThen(obj);
                                    if (then === errorObj) {
                                        if (context) context._pushContext();
                                        var ret = Promise.reject(then.e);
                                        if (context) context._popContext();
                                        return ret;
                                    } else if (typeof then === "function") {
                                        if (isAnyBluebirdPromise(obj)) {
                                            var ret = new Promise(INTERNAL);
                                            obj._then(
                                                ret._fulfill,
                                                ret._reject,
                                                undefined,
                                                ret,
                                                null
                                            );
                                            return ret;
                                        }
                                        return doThenable(obj, then, context);
                                    }
                                }
                                return obj;
                            }

                            function doGetThen(obj) {
                                return obj.then;
                            }

                            function getThen(obj) {
                                try {
                                    return doGetThen(obj);
                                } catch (e) {
                                    errorObj.e = e;
                                    return errorObj;
                                }
                            }

                            var hasProp = {}.hasOwnProperty;

                            function isAnyBluebirdPromise(obj) {
                                try {
                                    return hasProp.call(obj, "_promise0");
                                } catch (e) {
                                    return false;
                                }
                            }

                            function doThenable(x, then, context) {
                                var promise = new Promise(INTERNAL);
                                var ret = promise;
                                if (context) context._pushContext();
                                promise._captureStackTrace();
                                if (context) context._popContext();
                                var synchronous = true;
                                var result = util.tryCatch(then).call(x, resolve, reject);
                                synchronous = false;

                                if (promise && result === errorObj) {
                                    promise._rejectCallback(result.e, true, true);
                                    promise = null;
                                }

                                function resolve(value) {
                                    if (!promise) return;
                                    promise._resolveCallback(value);
                                    promise = null;
                                }

                                function reject(reason) {
                                    if (!promise) return;
                                    promise._rejectCallback(reason, synchronous, true);
                                    promise = null;
                                }

                                return ret;
                            }

                            return tryConvertToPromise;
                        };

                    }, {"./util": 36}], 34: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise, INTERNAL, debug) {
                            var util = _dereq_("./util");
                            var TimeoutError = Promise.TimeoutError;

                            function HandleWrapper(handle) {
                                this.handle = handle;
                            }

                            HandleWrapper.prototype._resultCancelled = function () {
                                clearTimeout(this.handle);
                            };

                            var afterValue = function (value) {
                                return delay(+this).thenReturn(value);
                            };
                            var delay = Promise.delay = function (ms, value) {
                                var ret;
                                var handle;
                                if (value !== undefined) {
                                    ret = Promise.resolve(value)
                                        ._then(afterValue, null, null, ms, undefined);
                                    if (debug.cancellation() && value instanceof Promise) {
                                        ret._setOnCancel(value);
                                    }
                                } else {
                                    ret = new Promise(INTERNAL);
                                    handle = setTimeout(function () {
                                        ret._fulfill();
                                    }, +ms);
                                    if (debug.cancellation()) {
                                        ret._setOnCancel(new HandleWrapper(handle));
                                    }
                                    ret._captureStackTrace();
                                }
                                ret._setAsyncGuaranteed();
                                return ret;
                            };

                            Promise.prototype.delay = function (ms) {
                                return delay(ms, this);
                            };

                            var afterTimeout = function (promise, message, parent) {
                                var err;
                                if (typeof message !== "string") {
                                    if (message instanceof Error) {
                                        err = message;
                                    } else {
                                        err = new TimeoutError("operation timed out");
                                    }
                                } else {
                                    err = new TimeoutError(message);
                                }
                                util.markAsOriginatingFromRejection(err);
                                promise._attachExtraTrace(err);
                                promise._reject(err);

                                if (parent != null) {
                                    parent.cancel();
                                }
                            };

                            function successClear(value) {
                                clearTimeout(this.handle);
                                return value;
                            }

                            function failureClear(reason) {
                                clearTimeout(this.handle);
                                throw reason;
                            }

                            Promise.prototype.timeout = function (ms, message) {
                                ms = +ms;
                                var ret, parent;

                                var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
                                    if (ret.isPending()) {
                                        afterTimeout(ret, message, parent);
                                    }
                                }, ms));

                                if (debug.cancellation()) {
                                    parent = this.then();
                                    ret = parent._then(successClear, failureClear,
                                        undefined, handleWrapper, undefined);
                                    ret._setOnCancel(handleWrapper);
                                } else {
                                    ret = this._then(successClear, failureClear,
                                        undefined, handleWrapper, undefined);
                                }

                                return ret;
                            };

                        };

                    }, {"./util": 36}], 35: [function (_dereq_, module, exports) {
                        "use strict";
                        module.exports = function (Promise, apiRejection, tryConvertToPromise,
                                                   createContext, INTERNAL, debug) {
                            var util = _dereq_("./util");
                            var TypeError = _dereq_("./errors").TypeError;
                            var inherits = _dereq_("./util").inherits;
                            var errorObj = util.errorObj;
                            var tryCatch = util.tryCatch;
                            var NULL = {};

                            function thrower(e) {
                                setTimeout(function () {
                                    throw e;
                                }, 0);
                            }

                            function castPreservingDisposable(thenable) {
                                var maybePromise = tryConvertToPromise(thenable);
                                if (maybePromise !== thenable &&
                                    typeof thenable._isDisposable === "function" &&
                                    typeof thenable._getDisposer === "function" &&
                                    thenable._isDisposable()) {
                                    maybePromise._setDisposable(thenable._getDisposer());
                                }
                                return maybePromise;
                            }

                            function dispose(resources, inspection) {
                                var i = 0;
                                var len = resources.length;
                                var ret = new Promise(INTERNAL);

                                function iterator() {
                                    if (i >= len) return ret._fulfill();
                                    var maybePromise = castPreservingDisposable(resources[i++]);
                                    if (maybePromise instanceof Promise &&
                                        maybePromise._isDisposable()) {
                                        try {
                                            maybePromise = tryConvertToPromise(
                                                maybePromise._getDisposer().tryDispose(inspection),
                                                resources.promise);
                                        } catch (e) {
                                            return thrower(e);
                                        }
                                        if (maybePromise instanceof Promise) {
                                            return maybePromise._then(iterator, thrower,
                                                null, null, null);
                                        }
                                    }
                                    iterator();
                                }

                                iterator();
                                return ret;
                            }

                            function Disposer(data, promise, context) {
                                this._data = data;
                                this._promise = promise;
                                this._context = context;
                            }

                            Disposer.prototype.data = function () {
                                return this._data;
                            };

                            Disposer.prototype.promise = function () {
                                return this._promise;
                            };

                            Disposer.prototype.resource = function () {
                                if (this.promise().isFulfilled()) {
                                    return this.promise().value();
                                }
                                return NULL;
                            };

                            Disposer.prototype.tryDispose = function (inspection) {
                                var resource = this.resource();
                                var context = this._context;
                                if (context !== undefined) context._pushContext();
                                var ret = resource !== NULL
                                    ? this.doDispose(resource, inspection) : null;
                                if (context !== undefined) context._popContext();
                                this._promise._unsetDisposable();
                                this._data = null;
                                return ret;
                            };

                            Disposer.isDisposer = function (d) {
                                return (d != null &&
                                    typeof d.resource === "function" &&
                                    typeof d.tryDispose === "function");
                            };

                            function FunctionDisposer(fn, promise, context) {
                                this.constructor$(fn, promise, context);
                            }

                            inherits(FunctionDisposer, Disposer);

                            FunctionDisposer.prototype.doDispose = function (resource, inspection) {
                                var fn = this.data();
                                return fn.call(resource, resource, inspection);
                            };

                            function maybeUnwrapDisposer(value) {
                                if (Disposer.isDisposer(value)) {
                                    this.resources[this.index]._setDisposable(value);
                                    return value.promise();
                                }
                                return value;
                            }

                            function ResourceList(length) {
                                this.length = length;
                                this.promise = null;
                                this[length - 1] = null;
                            }

                            ResourceList.prototype._resultCancelled = function () {
                                var len = this.length;
                                for (var i = 0; i < len; ++i) {
                                    var item = this[i];
                                    if (item instanceof Promise) {
                                        item.cancel();
                                    }
                                }
                            };

                            Promise.using = function () {
                                var len = arguments.length;
                                if (len < 2) return apiRejection(
                                    "you must pass at least 2 arguments to Promise.using");
                                var fn = arguments[len - 1];
                                if (typeof fn !== "function") {
                                    return apiRejection("expecting a function but got " + util.classString(fn));
                                }
                                var input;
                                var spreadArgs = true;
                                if (len === 2 && Array.isArray(arguments[0])) {
                                    input = arguments[0];
                                    len = input.length;
                                    spreadArgs = false;
                                } else {
                                    input = arguments;
                                    len--;
                                }
                                var resources = new ResourceList(len);
                                for (var i = 0; i < len; ++i) {
                                    var resource = input[i];
                                    if (Disposer.isDisposer(resource)) {
                                        var disposer = resource;
                                        resource = resource.promise();
                                        resource._setDisposable(disposer);
                                    } else {
                                        var maybePromise = tryConvertToPromise(resource);
                                        if (maybePromise instanceof Promise) {
                                            resource =
                                                maybePromise._then(maybeUnwrapDisposer, null, null, {
                                                    resources: resources,
                                                    index: i
                                                }, undefined);
                                        }
                                    }
                                    resources[i] = resource;
                                }

                                var reflectedResources = new Array(resources.length);
                                for (var i = 0; i < reflectedResources.length; ++i) {
                                    reflectedResources[i] = Promise.resolve(resources[i]).reflect();
                                }

                                var resultPromise = Promise.all(reflectedResources)
                                    .then(function (inspections) {
                                        for (var i = 0; i < inspections.length; ++i) {
                                            var inspection = inspections[i];
                                            if (inspection.isRejected()) {
                                                errorObj.e = inspection.error();
                                                return errorObj;
                                            } else if (!inspection.isFulfilled()) {
                                                resultPromise.cancel();
                                                return;
                                            }
                                            inspections[i] = inspection.value();
                                        }
                                        promise._pushContext();

                                        fn = tryCatch(fn);
                                        var ret = spreadArgs
                                            ? fn.apply(undefined, inspections) : fn(inspections);
                                        var promiseCreated = promise._popContext();
                                        debug.checkForgottenReturns(
                                            ret, promiseCreated, "Promise.using", promise);
                                        return ret;
                                    });

                                var promise = resultPromise.lastly(function () {
                                    var inspection = new Promise.PromiseInspection(resultPromise);
                                    return dispose(resources, inspection);
                                });
                                resources.promise = promise;
                                promise._setOnCancel(resources);
                                return promise;
                            };

                            Promise.prototype._setDisposable = function (disposer) {
                                this._bitField = this._bitField | 131072;
                                this._disposer = disposer;
                            };

                            Promise.prototype._isDisposable = function () {
                                return (this._bitField & 131072) > 0;
                            };

                            Promise.prototype._getDisposer = function () {
                                return this._disposer;
                            };

                            Promise.prototype._unsetDisposable = function () {
                                this._bitField = this._bitField & (~131072);
                                this._disposer = undefined;
                            };

                            Promise.prototype.disposer = function (fn) {
                                if (typeof fn === "function") {
                                    return new FunctionDisposer(fn, this, createContext());
                                }
                                throw new TypeError();
                            };

                        };

                    }, {"./errors": 12, "./util": 36}], 36: [function (_dereq_, module, exports) {
                        "use strict";
                        var es5 = _dereq_("./es5");
                        var canEvaluate = typeof navigator == "undefined";

                        var errorObj = {e: {}};
                        var tryCatchTarget;
                        var globalObject = typeof self !== "undefined" ? self :
                            typeof window !== "undefined" ? window :
                                typeof global !== "undefined" ? global :
                                    this !== undefined ? this : null;

                        function tryCatcher() {
                            try {
                                var target = tryCatchTarget;
                                tryCatchTarget = null;
                                return target.apply(this, arguments);
                            } catch (e) {
                                errorObj.e = e;
                                return errorObj;
                            }
                        }

                        function tryCatch(fn) {
                            tryCatchTarget = fn;
                            return tryCatcher;
                        }

                        var inherits = function (Child, Parent) {
                            var hasProp = {}.hasOwnProperty;

                            function T() {
                                this.constructor = Child;
                                this.constructor$ = Parent;
                                for (var propertyName in Parent.prototype) {
                                    if (hasProp.call(Parent.prototype, propertyName) &&
                                        propertyName.charAt(propertyName.length - 1) !== "$"
                                    ) {
                                        this[propertyName + "$"] = Parent.prototype[propertyName];
                                    }
                                }
                            }

                            T.prototype = Parent.prototype;
                            Child.prototype = new T();
                            return Child.prototype;
                        };


                        function isPrimitive(val) {
                            return val == null || val === true || val === false ||
                                typeof val === "string" || typeof val === "number";

                        }

                        function isObject(value) {
                            return typeof value === "function" ||
                                typeof value === "object" && value !== null;
                        }

                        function maybeWrapAsError(maybeError) {
                            if (!isPrimitive(maybeError)) return maybeError;

                            return new Error(safeToString(maybeError));
                        }

                        function withAppended(target, appendee) {
                            var len = target.length;
                            var ret = new Array(len + 1);
                            var i;
                            for (i = 0; i < len; ++i) {
                                ret[i] = target[i];
                            }
                            ret[i] = appendee;
                            return ret;
                        }

                        function getDataPropertyOrDefault(obj, key, defaultValue) {
                            if (es5.isES5) {
                                var desc = Object.getOwnPropertyDescriptor(obj, key);

                                if (desc != null) {
                                    return desc.get == null && desc.set == null
                                        ? desc.value
                                        : defaultValue;
                                }
                            } else {
                                return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
                            }
                        }

                        function notEnumerableProp(obj, name, value) {
                            if (isPrimitive(obj)) return obj;
                            var descriptor = {
                                value: value,
                                configurable: true,
                                enumerable: false,
                                writable: true
                            };
                            es5.defineProperty(obj, name, descriptor);
                            return obj;
                        }

                        function thrower(r) {
                            throw r;
                        }

                        var inheritedDataKeys = (function () {
                            var excludedPrototypes = [
                                Array.prototype,
                                Object.prototype,
                                Function.prototype
                            ];

                            var isExcludedProto = function (val) {
                                for (var i = 0; i < excludedPrototypes.length; ++i) {
                                    if (excludedPrototypes[i] === val) {
                                        return true;
                                    }
                                }
                                return false;
                            };

                            if (es5.isES5) {
                                var getKeys = Object.getOwnPropertyNames;
                                return function (obj) {
                                    var ret = [];
                                    var visitedKeys = Object.create(null);
                                    while (obj != null && !isExcludedProto(obj)) {
                                        var keys;
                                        try {
                                            keys = getKeys(obj);
                                        } catch (e) {
                                            return ret;
                                        }
                                        for (var i = 0; i < keys.length; ++i) {
                                            var key = keys[i];
                                            if (visitedKeys[key]) continue;
                                            visitedKeys[key] = true;
                                            var desc = Object.getOwnPropertyDescriptor(obj, key);
                                            if (desc != null && desc.get == null && desc.set == null) {
                                                ret.push(key);
                                            }
                                        }
                                        obj = es5.getPrototypeOf(obj);
                                    }
                                    return ret;
                                };
                            } else {
                                var hasProp = {}.hasOwnProperty;
                                return function (obj) {
                                    if (isExcludedProto(obj)) return [];
                                    var ret = [];

                                    /*jshint forin:false */
                                    enumeration: for (var key in obj) {
                                        if (hasProp.call(obj, key)) {
                                            ret.push(key);
                                        } else {
                                            for (var i = 0; i < excludedPrototypes.length; ++i) {
                                                if (hasProp.call(excludedPrototypes[i], key)) {
                                                    continue enumeration;
                                                }
                                            }
                                            ret.push(key);
                                        }
                                    }
                                    return ret;
                                };
                            }

                        })();

                        var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;

                        function isClass(fn) {
                            try {
                                if (typeof fn === "function") {
                                    var keys = es5.names(fn.prototype);

                                    var hasMethods = es5.isES5 && keys.length > 1;
                                    var hasMethodsOtherThanConstructor = keys.length > 0 &&
                                        !(keys.length === 1 && keys[0] === "constructor");
                                    var hasThisAssignmentAndStaticMethods =
                                        thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;

                                    if (hasMethods || hasMethodsOtherThanConstructor ||
                                        hasThisAssignmentAndStaticMethods) {
                                        return true;
                                    }
                                }
                                return false;
                            } catch (e) {
                                return false;
                            }
                        }

                        function toFastProperties(obj) {
                            /*jshint -W027,-W055,-W031*/
                            function FakeConstructor() {
                            }

                            FakeConstructor.prototype = obj;
                            var l = 8;
                            while (l--) new FakeConstructor();
                            return obj;
                            eval(obj);
                        }

                        var rident = /^[a-z$_][a-z$_0-9]*$/i;

                        function isIdentifier(str) {
                            return rident.test(str);
                        }

                        function filledRange(count, prefix, suffix) {
                            var ret = new Array(count);
                            for (var i = 0; i < count; ++i) {
                                ret[i] = prefix + i + suffix;
                            }
                            return ret;
                        }

                        function safeToString(obj) {
                            try {
                                return obj + "";
                            } catch (e) {
                                return "[no string representation]";
                            }
                        }

                        function isError(obj) {
                            return obj instanceof Error ||
                                (obj !== null &&
                                    typeof obj === "object" &&
                                    typeof obj.message === "string" &&
                                    typeof obj.name === "string");
                        }

                        function markAsOriginatingFromRejection(e) {
                            try {
                                notEnumerableProp(e, "isOperational", true);
                            } catch (ignore) {
                            }
                        }

                        function originatesFromRejection(e) {
                            if (e == null) return false;
                            return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
                                e["isOperational"] === true);
                        }

                        function canAttachTrace(obj) {
                            return isError(obj) && es5.propertyIsWritable(obj, "stack");
                        }

                        var ensureErrorObject = (function () {
                            if (!("stack" in new Error())) {
                                return function (value) {
                                    if (canAttachTrace(value)) return value;
                                    try {
                                        throw new Error(safeToString(value));
                                    } catch (err) {
                                        return err;
                                    }
                                };
                            } else {
                                return function (value) {
                                    if (canAttachTrace(value)) return value;
                                    return new Error(safeToString(value));
                                };
                            }
                        })();

                        function classString(obj) {
                            return {}.toString.call(obj);
                        }

                        function copyDescriptors(from, to, filter) {
                            var keys = es5.names(from);
                            for (var i = 0; i < keys.length; ++i) {
                                var key = keys[i];
                                if (filter(key)) {
                                    try {
                                        es5.defineProperty(to, key, es5.getDescriptor(from, key));
                                    } catch (ignore) {
                                    }
                                }
                            }
                        }

                        var asArray = function (v) {
                            if (es5.isArray(v)) {
                                return v;
                            }
                            return null;
                        };

                        if (typeof Symbol !== "undefined" && Symbol.iterator) {
                            var ArrayFrom = typeof Array.from === "function" ? function (v) {
                                return Array.from(v);
                            } : function (v) {
                                var ret = [];
                                var it = v[Symbol.iterator]();
                                var itResult;
                                while (!((itResult = it.next()).done)) {
                                    ret.push(itResult.value);
                                }
                                return ret;
                            };

                            asArray = function (v) {
                                if (es5.isArray(v)) {
                                    return v;
                                } else if (v != null && typeof v[Symbol.iterator] === "function") {
                                    return ArrayFrom(v);
                                }
                                return null;
                            };
                        }

                        var isNode = typeof process !== "undefined" &&
                            classString(process).toLowerCase() === "[object process]";

                        var hasEnvVariables = typeof process !== "undefined" &&
                            typeof process.env !== "undefined";

                        function env(key) {
                            return hasEnvVariables ? process.env[key] : undefined;
                        }

                        function getNativePromise() {
                            if (typeof Promise === "function") {
                                try {
                                    var promise = new Promise(function () {
                                    });
                                    if ({}.toString.call(promise) === "[object Promise]") {
                                        return Promise;
                                    }
                                } catch (e) {
                                }
                            }
                        }

                        function domainBind(self, cb) {
                            return self.bind(cb);
                        }

                        var ret = {
                            isClass: isClass,
                            isIdentifier: isIdentifier,
                            inheritedDataKeys: inheritedDataKeys,
                            getDataPropertyOrDefault: getDataPropertyOrDefault,
                            thrower: thrower,
                            isArray: es5.isArray,
                            asArray: asArray,
                            notEnumerableProp: notEnumerableProp,
                            isPrimitive: isPrimitive,
                            isObject: isObject,
                            isError: isError,
                            canEvaluate: canEvaluate,
                            errorObj: errorObj,
                            tryCatch: tryCatch,
                            inherits: inherits,
                            withAppended: withAppended,
                            maybeWrapAsError: maybeWrapAsError,
                            toFastProperties: toFastProperties,
                            filledRange: filledRange,
                            toString: safeToString,
                            canAttachTrace: canAttachTrace,
                            ensureErrorObject: ensureErrorObject,
                            originatesFromRejection: originatesFromRejection,
                            markAsOriginatingFromRejection: markAsOriginatingFromRejection,
                            classString: classString,
                            copyDescriptors: copyDescriptors,
                            hasDevTools: typeof chrome !== "undefined" && chrome &&
                                typeof chrome.loadTimes === "function",
                            isNode: isNode,
                            hasEnvVariables: hasEnvVariables,
                            env: env,
                            global: globalObject,
                            getNativePromise: getNativePromise,
                            domainBind: domainBind
                        };
                        ret.isRecentNode = ret.isNode && (function () {
                            var version = process.versions.node.split(".").map(Number);
                            return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
                        })();

                        if (ret.isNode) ret.toFastProperties(process);

                        try {
                            throw new Error();
                        } catch (e) {
                            ret.lastLineError = e;
                        }
                        module.exports = ret;

                    }, {"./es5": 13}]
                }, {}, [4])(4)
            });
            ;
            if (typeof window !== 'undefined' && window !== null) {
                window.P = window.Promise;
            } else if (typeof self !== 'undefined' && self !== null) {
                self.P = self.Promise;
            }
        }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {"_process": 691}],
    36: [function (require, module, exports) {
        module.exports = function (it) {
            if (typeof it != 'function') throw TypeError(it + ' is not a function!');
            return it;
        };

    }, {}],
    37: [function (require, module, exports) {
        var cof = require('./_cof');
        module.exports = function (it, msg) {
            if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
            return +it;
        };

    }, {"./_cof": 51}],
    38: [function (require, module, exports) {
// 22.1.3.31 Array.prototype[@@unscopables]
        var UNSCOPABLES = require('./_wks')('unscopables');
        var ArrayProto = Array.prototype;
        if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
        module.exports = function (key) {
            ArrayProto[UNSCOPABLES][key] = true;
        };

    }, {"./_hide": 75, "./_wks": 158}],
    39: [function (require, module, exports) {
        module.exports = function (it, Constructor, name, forbiddenField) {
            if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
                throw TypeError(name + ': incorrect invocation!');
            }
            return it;
        };

    }, {}],
    40: [function (require, module, exports) {
        var isObject = require('./_is-object');
        module.exports = function (it) {
            if (!isObject(it)) throw TypeError(it + ' is not an object!');
            return it;
        };

    }, {"./_is-object": 84}],
    41: [function (require, module, exports) {
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
        'use strict';
        var toObject = require('./_to-object');
        var toAbsoluteIndex = require('./_to-absolute-index');
        var toLength = require('./_to-length');

        module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
            var O = toObject(this);
            var len = toLength(O.length);
            var to = toAbsoluteIndex(target, len);
            var from = toAbsoluteIndex(start, len);
            var end = arguments.length > 2 ? arguments[2] : undefined;
            var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
            var inc = 1;
            if (from < to && to < from + count) {
                inc = -1;
                from += count - 1;
                to += count - 1;
            }
            while (count-- > 0) {
                if (from in O) O[to] = O[from];
                else delete O[to];
                to += inc;
                from += inc;
            }
            return O;
        };

    }, {"./_to-absolute-index": 143, "./_to-length": 147, "./_to-object": 148}],
    42: [function (require, module, exports) {
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
        'use strict';
        var toObject = require('./_to-object');
        var toAbsoluteIndex = require('./_to-absolute-index');
        var toLength = require('./_to-length');
        module.exports = function fill(value /* , start = 0, end = @length */) {
            var O = toObject(this);
            var length = toLength(O.length);
            var aLen = arguments.length;
            var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
            var end = aLen > 2 ? arguments[2] : undefined;
            var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
            while (endPos > index) O[index++] = value;
            return O;
        };

    }, {"./_to-absolute-index": 143, "./_to-length": 147, "./_to-object": 148}],
    43: [function (require, module, exports) {
        var forOf = require('./_for-of');

        module.exports = function (iter, ITERATOR) {
            var result = [];
            forOf(iter, false, result.push, result, ITERATOR);
            return result;
        };

    }, {"./_for-of": 72}],
    44: [function (require, module, exports) {
// false -> Array#indexOf
// true  -> Array#includes
        var toIObject = require('./_to-iobject');
        var toLength = require('./_to-length');
        var toAbsoluteIndex = require('./_to-absolute-index');
        module.exports = function (IS_INCLUDES) {
            return function ($this, el, fromIndex) {
                var O = toIObject($this);
                var length = toLength(O.length);
                var index = toAbsoluteIndex(fromIndex, length);
                var value;
                // Array#includes uses SameValueZero equality algorithm
                // eslint-disable-next-line no-self-compare
                if (IS_INCLUDES && el != el) while (length > index) {
                    value = O[index++];
                    // eslint-disable-next-line no-self-compare
                    if (value != value) return true;
                    // Array#indexOf ignores holes, Array#includes - not
                } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
                    if (O[index] === el) return IS_INCLUDES || index || 0;
                }
                return !IS_INCLUDES && -1;
            };
        };

    }, {"./_to-absolute-index": 143, "./_to-iobject": 146, "./_to-length": 147}],
    45: [function (require, module, exports) {
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
        var ctx = require('./_ctx');
        var IObject = require('./_iobject');
        var toObject = require('./_to-object');
        var toLength = require('./_to-length');
        var asc = require('./_array-species-create');
        module.exports = function (TYPE, $create) {
            var IS_MAP = TYPE == 1;
            var IS_FILTER = TYPE == 2;
            var IS_SOME = TYPE == 3;
            var IS_EVERY = TYPE == 4;
            var IS_FIND_INDEX = TYPE == 6;
            var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
            var create = $create || asc;
            return function ($this, callbackfn, that) {
                var O = toObject($this);
                var self = IObject(O);
                var f = ctx(callbackfn, that, 3);
                var length = toLength(self.length);
                var index = 0;
                var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
                var val, res;
                for (; length > index; index++) if (NO_HOLES || index in self) {
                    val = self[index];
                    res = f(val, index, O);
                    if (TYPE) {
                        if (IS_MAP) result[index] = res;   // map
                        else if (res) switch (TYPE) {
                            case 3:
                                return true;             // some
                            case 5:
                                return val;              // find
                            case 6:
                                return index;            // findIndex
                            case 2:
                                result.push(val);        // filter
                        } else if (IS_EVERY) return false; // every
                    }
                }
                return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
            };
        };

    }, {"./_array-species-create": 48, "./_ctx": 58, "./_iobject": 80, "./_to-length": 147, "./_to-object": 148}],
    46: [function (require, module, exports) {
        var aFunction = require('./_a-function');
        var toObject = require('./_to-object');
        var IObject = require('./_iobject');
        var toLength = require('./_to-length');

        module.exports = function (that, callbackfn, aLen, memo, isRight) {
            aFunction(callbackfn);
            var O = toObject(that);
            var self = IObject(O);
            var length = toLength(O.length);
            var index = isRight ? length - 1 : 0;
            var i = isRight ? -1 : 1;
            if (aLen < 2) for (; ;) {
                if (index in self) {
                    memo = self[index];
                    index += i;
                    break;
                }
                index += i;
                if (isRight ? index < 0 : length <= index) {
                    throw TypeError('Reduce of empty array with no initial value');
                }
            }
            for (; isRight ? index >= 0 : length > index; index += i) if (index in self) {
                memo = callbackfn(memo, self[index], index, O);
            }
            return memo;
        };

    }, {"./_a-function": 36, "./_iobject": 80, "./_to-length": 147, "./_to-object": 148}],
    47: [function (require, module, exports) {
        var isObject = require('./_is-object');
        var isArray = require('./_is-array');
        var SPECIES = require('./_wks')('species');

        module.exports = function (original) {
            var C;
            if (isArray(original)) {
                C = original.constructor;
                // cross-realm fallback
                if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
                if (isObject(C)) {
                    C = C[SPECIES];
                    if (C === null) C = undefined;
                }
            }
            return C === undefined ? Array : C;
        };

    }, {"./_is-array": 82, "./_is-object": 84, "./_wks": 158}],
    48: [function (require, module, exports) {
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
        var speciesConstructor = require('./_array-species-constructor');

        module.exports = function (original, length) {
            return new (speciesConstructor(original))(length);
        };

    }, {"./_array-species-constructor": 47}],
    49: [function (require, module, exports) {
        'use strict';
        var aFunction = require('./_a-function');
        var isObject = require('./_is-object');
        var invoke = require('./_invoke');
        var arraySlice = [].slice;
        var factories = {};

        var construct = function (F, len, args) {
            if (!(len in factories)) {
                for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
                // eslint-disable-next-line no-new-func
                factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
            }
            return factories[len](F, args);
        };

        module.exports = Function.bind || function bind(that /* , ...args */) {
            var fn = aFunction(this);
            var partArgs = arraySlice.call(arguments, 1);
            var bound = function (/* args... */) {
                var args = partArgs.concat(arraySlice.call(arguments));
                return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
            };
            if (isObject(fn.prototype)) bound.prototype = fn.prototype;
            return bound;
        };

    }, {"./_a-function": 36, "./_invoke": 79, "./_is-object": 84}],
    50: [function (require, module, exports) {
// getting tag from 19.1.3.6 Object.prototype.toString()
        var cof = require('./_cof');
        var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
        var ARG = cof(function () {
            return arguments;
        }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
        var tryGet = function (it, key) {
            try {
                return it[key];
            } catch (e) { /* empty */
            }
        };

        module.exports = function (it) {
            var O, T, B;
            return it === undefined ? 'Undefined' : it === null ? 'Null'
                // @@toStringTag case
                : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
                    // builtinTag case
                    : ARG ? cof(O)
                        // ES3 arguments fallback
                        : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
        };

    }, {"./_cof": 51, "./_wks": 158}],
    51: [function (require, module, exports) {
        var toString = {}.toString;

        module.exports = function (it) {
            return toString.call(it).slice(8, -1);
        };

    }, {}],
    52: [function (require, module, exports) {
        'use strict';
        var dP = require('./_object-dp').f;
        var create = require('./_object-create');
        var redefineAll = require('./_redefine-all');
        var ctx = require('./_ctx');
        var anInstance = require('./_an-instance');
        var forOf = require('./_for-of');
        var $iterDefine = require('./_iter-define');
        var step = require('./_iter-step');
        var setSpecies = require('./_set-species');
        var DESCRIPTORS = require('./_descriptors');
        var fastKey = require('./_meta').fastKey;
        var validate = require('./_validate-collection');
        var SIZE = DESCRIPTORS ? '_s' : 'size';

        var getEntry = function (that, key) {
            // fast case
            var index = fastKey(key);
            var entry;
            if (index !== 'F') return that._i[index];
            // frozen object case
            for (entry = that._f; entry; entry = entry.n) {
                if (entry.k == key) return entry;
            }
        };

        module.exports = {
            getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
                var C = wrapper(function (that, iterable) {
                    anInstance(that, C, NAME, '_i');
                    that._t = NAME;         // collection type
                    that._i = create(null); // index
                    that._f = undefined;    // first entry
                    that._l = undefined;    // last entry
                    that[SIZE] = 0;         // size
                    if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                });
                redefineAll(C.prototype, {
                    // 23.1.3.1 Map.prototype.clear()
                    // 23.2.3.2 Set.prototype.clear()
                    clear: function clear() {
                        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
                            entry.r = true;
                            if (entry.p) entry.p = entry.p.n = undefined;
                            delete data[entry.i];
                        }
                        that._f = that._l = undefined;
                        that[SIZE] = 0;
                    },
                    // 23.1.3.3 Map.prototype.delete(key)
                    // 23.2.3.4 Set.prototype.delete(value)
                    'delete': function (key) {
                        var that = validate(this, NAME);
                        var entry = getEntry(that, key);
                        if (entry) {
                            var next = entry.n;
                            var prev = entry.p;
                            delete that._i[entry.i];
                            entry.r = true;
                            if (prev) prev.n = next;
                            if (next) next.p = prev;
                            if (that._f == entry) that._f = next;
                            if (that._l == entry) that._l = prev;
                            that[SIZE]--;
                        }
                        return !!entry;
                    },
                    // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
                    // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
                    forEach: function forEach(callbackfn /* , that = undefined */) {
                        validate(this, NAME);
                        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
                        var entry;
                        while (entry = entry ? entry.n : this._f) {
                            f(entry.v, entry.k, this);
                            // revert to the last existing entry
                            while (entry && entry.r) entry = entry.p;
                        }
                    },
                    // 23.1.3.7 Map.prototype.has(key)
                    // 23.2.3.7 Set.prototype.has(value)
                    has: function has(key) {
                        return !!getEntry(validate(this, NAME), key);
                    }
                });
                if (DESCRIPTORS) dP(C.prototype, 'size', {
                    get: function () {
                        return validate(this, NAME)[SIZE];
                    }
                });
                return C;
            },
            def: function (that, key, value) {
                var entry = getEntry(that, key);
                var prev, index;
                // change existing entry
                if (entry) {
                    entry.v = value;
                    // create new entry
                } else {
                    that._l = entry = {
                        i: index = fastKey(key, true), // <- index
                        k: key,                        // <- key
                        v: value,                      // <- value
                        p: prev = that._l,             // <- previous entry
                        n: undefined,                  // <- next entry
                        r: false                       // <- removed
                    };
                    if (!that._f) that._f = entry;
                    if (prev) prev.n = entry;
                    that[SIZE]++;
                    // add to index
                    if (index !== 'F') that._i[index] = entry;
                }
                return that;
            },
            getEntry: getEntry,
            setStrong: function (C, NAME, IS_MAP) {
                // add .keys, .values, .entries, [@@iterator]
                // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
                $iterDefine(C, NAME, function (iterated, kind) {
                    this._t = validate(iterated, NAME); // target
                    this._k = kind;                     // kind
                    this._l = undefined;                // previous
                }, function () {
                    var that = this;
                    var kind = that._k;
                    var entry = that._l;
                    // revert to the last existing entry
                    while (entry && entry.r) entry = entry.p;
                    // get next entry
                    if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
                        // or finish the iteration
                        that._t = undefined;
                        return step(1);
                    }
                    // return step by kind
                    if (kind == 'keys') return step(0, entry.k);
                    if (kind == 'values') return step(0, entry.v);
                    return step(0, [entry.k, entry.v]);
                }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

                // add [@@species], 23.1.2.2, 23.2.2.2
                setSpecies(NAME);
            }
        };

    }, {
        "./_an-instance": 39,
        "./_ctx": 58,
        "./_descriptors": 62,
        "./_for-of": 72,
        "./_iter-define": 88,
        "./_iter-step": 90,
        "./_meta": 98,
        "./_object-create": 103,
        "./_object-dp": 104,
        "./_redefine-all": 123,
        "./_set-species": 129,
        "./_validate-collection": 155
    }],
    53: [function (require, module, exports) {
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
        var classof = require('./_classof');
        var from = require('./_array-from-iterable');
        module.exports = function (NAME) {
            return function toJSON() {
                if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
                return from(this);
            };
        };

    }, {"./_array-from-iterable": 43, "./_classof": 50}],
    54: [function (require, module, exports) {
        'use strict';
        var redefineAll = require('./_redefine-all');
        var getWeak = require('./_meta').getWeak;
        var anObject = require('./_an-object');
        var isObject = require('./_is-object');
        var anInstance = require('./_an-instance');
        var forOf = require('./_for-of');
        var createArrayMethod = require('./_array-methods');
        var $has = require('./_has');
        var validate = require('./_validate-collection');
        var arrayFind = createArrayMethod(5);
        var arrayFindIndex = createArrayMethod(6);
        var id = 0;

// fallback for uncaught frozen keys
        var uncaughtFrozenStore = function (that) {
            return that._l || (that._l = new UncaughtFrozenStore());
        };
        var UncaughtFrozenStore = function () {
            this.a = [];
        };
        var findUncaughtFrozen = function (store, key) {
            return arrayFind(store.a, function (it) {
                return it[0] === key;
            });
        };
        UncaughtFrozenStore.prototype = {
            get: function (key) {
                var entry = findUncaughtFrozen(this, key);
                if (entry) return entry[1];
            },
            has: function (key) {
                return !!findUncaughtFrozen(this, key);
            },
            set: function (key, value) {
                var entry = findUncaughtFrozen(this, key);
                if (entry) entry[1] = value;
                else this.a.push([key, value]);
            },
            'delete': function (key) {
                var index = arrayFindIndex(this.a, function (it) {
                    return it[0] === key;
                });
                if (~index) this.a.splice(index, 1);
                return !!~index;
            }
        };

        module.exports = {
            getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
                var C = wrapper(function (that, iterable) {
                    anInstance(that, C, NAME, '_i');
                    that._t = NAME;      // collection type
                    that._i = id++;      // collection id
                    that._l = undefined; // leak store for uncaught frozen objects
                    if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                });
                redefineAll(C.prototype, {
                    // 23.3.3.2 WeakMap.prototype.delete(key)
                    // 23.4.3.3 WeakSet.prototype.delete(value)
                    'delete': function (key) {
                        if (!isObject(key)) return false;
                        var data = getWeak(key);
                        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
                        return data && $has(data, this._i) && delete data[this._i];
                    },
                    // 23.3.3.4 WeakMap.prototype.has(key)
                    // 23.4.3.4 WeakSet.prototype.has(value)
                    has: function has(key) {
                        if (!isObject(key)) return false;
                        var data = getWeak(key);
                        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
                        return data && $has(data, this._i);
                    }
                });
                return C;
            },
            def: function (that, key, value) {
                var data = getWeak(anObject(key), true);
                if (data === true) uncaughtFrozenStore(that).set(key, value);
                else data[that._i] = value;
                return that;
            },
            ufstore: uncaughtFrozenStore
        };

    }, {
        "./_an-instance": 39,
        "./_an-object": 40,
        "./_array-methods": 45,
        "./_for-of": 72,
        "./_has": 74,
        "./_is-object": 84,
        "./_meta": 98,
        "./_redefine-all": 123,
        "./_validate-collection": 155
    }],
    55: [function (require, module, exports) {
        'use strict';
        var global = require('./_global');
        var $export = require('./_export');
        var redefine = require('./_redefine');
        var redefineAll = require('./_redefine-all');
        var meta = require('./_meta');
        var forOf = require('./_for-of');
        var anInstance = require('./_an-instance');
        var isObject = require('./_is-object');
        var fails = require('./_fails');
        var $iterDetect = require('./_iter-detect');
        var setToStringTag = require('./_set-to-string-tag');
        var inheritIfRequired = require('./_inherit-if-required');

        module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
            var Base = global[NAME];
            var C = Base;
            var ADDER = IS_MAP ? 'set' : 'add';
            var proto = C && C.prototype;
            var O = {};
            var fixMethod = function (KEY) {
                var fn = proto[KEY];
                redefine(proto, KEY,
                    KEY == 'delete' ? function (a) {
                        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
                    } : KEY == 'has' ? function has(a) {
                        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
                    } : KEY == 'get' ? function get(a) {
                        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
                    } : KEY == 'add' ? function add(a) {
                            fn.call(this, a === 0 ? 0 : a);
                            return this;
                        }
                        : function set(a, b) {
                            fn.call(this, a === 0 ? 0 : a, b);
                            return this;
                        }
                );
            };
            if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
                new C().entries().next();
            }))) {
                // create collection constructor
                C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
                redefineAll(C.prototype, methods);
                meta.NEED = true;
            } else {
                var instance = new C();
                // early implementations not supports chaining
                var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
                // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
                var THROWS_ON_PRIMITIVES = fails(function () {
                    instance.has(1);
                });
                // most early implementations doesn't supports iterables, most modern - not close it correctly
                var ACCEPT_ITERABLES = $iterDetect(function (iter) {
                    new C(iter);
                }); // eslint-disable-line no-new
                // for early implementations -0 and +0 not the same
                var BUGGY_ZERO = !IS_WEAK && fails(function () {
                    // V8 ~ Chromium 42- fails only with 5+ elements
                    var $instance = new C();
                    var index = 5;
                    while (index--) $instance[ADDER](index, index);
                    return !$instance.has(-0);
                });
                if (!ACCEPT_ITERABLES) {
                    C = wrapper(function (target, iterable) {
                        anInstance(target, C, NAME);
                        var that = inheritIfRequired(new Base(), target, C);
                        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                        return that;
                    });
                    C.prototype = proto;
                    proto.constructor = C;
                }
                if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
                    fixMethod('delete');
                    fixMethod('has');
                    IS_MAP && fixMethod('get');
                }
                if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
                // weak collections should not contains .clear method
                if (IS_WEAK && proto.clear) delete proto.clear;
            }

            setToStringTag(C, NAME);

            O[NAME] = C;
            $export($export.G + $export.W + $export.F * (C != Base), O);

            if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

            return C;
        };

    }, {
        "./_an-instance": 39,
        "./_export": 66,
        "./_fails": 68,
        "./_for-of": 72,
        "./_global": 73,
        "./_inherit-if-required": 78,
        "./_is-object": 84,
        "./_iter-detect": 89,
        "./_meta": 98,
        "./_redefine": 124,
        "./_redefine-all": 123,
        "./_set-to-string-tag": 130
    }],
    56: [function (require, module, exports) {
        var core = module.exports = {version: '2.5.3'};
        if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

    }, {}],
    57: [function (require, module, exports) {
        'use strict';
        var $defineProperty = require('./_object-dp');
        var createDesc = require('./_property-desc');

        module.exports = function (object, index, value) {
            if (index in object) $defineProperty.f(object, index, createDesc(0, value));
            else object[index] = value;
        };

    }, {"./_object-dp": 104, "./_property-desc": 122}],
    58: [function (require, module, exports) {
// optional / simple context binding
        var aFunction = require('./_a-function');
        module.exports = function (fn, that, length) {
            aFunction(fn);
            if (that === undefined) return fn;
            switch (length) {
                case 1:
                    return function (a) {
                        return fn.call(that, a);
                    };
                case 2:
                    return function (a, b) {
                        return fn.call(that, a, b);
                    };
                case 3:
                    return function (a, b, c) {
                        return fn.call(that, a, b, c);
                    };
            }
            return function (/* ...args */) {
                return fn.apply(that, arguments);
            };
        };

    }, {"./_a-function": 36}],
    59: [function (require, module, exports) {
        'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
        var fails = require('./_fails');
        var getTime = Date.prototype.getTime;
        var $toISOString = Date.prototype.toISOString;

        var lz = function (num) {
            return num > 9 ? num : '0' + num;
        };

// PhantomJS / old WebKit has a broken implementations
        module.exports = (fails(function () {
            return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
        }) || !fails(function () {
            $toISOString.call(new Date(NaN));
        })) ? function toISOString() {
            if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
            var d = this;
            var y = d.getUTCFullYear();
            var m = d.getUTCMilliseconds();
            var s = y < 0 ? '-' : y > 9999 ? '+' : '';
            return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
                '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
                'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
                ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
        } : $toISOString;

    }, {"./_fails": 68}],
    60: [function (require, module, exports) {
        'use strict';
        var anObject = require('./_an-object');
        var toPrimitive = require('./_to-primitive');
        var NUMBER = 'number';

        module.exports = function (hint) {
            if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
            return toPrimitive(anObject(this), hint != NUMBER);
        };

    }, {"./_an-object": 40, "./_to-primitive": 149}],
    61: [function (require, module, exports) {
// 7.2.1 RequireObjectCoercible(argument)
        module.exports = function (it) {
            if (it == undefined) throw TypeError("Can't call method on  " + it);
            return it;
        };

    }, {}],
    62: [function (require, module, exports) {
// Thank's IE8 for his funny defineProperty
        module.exports = !require('./_fails')(function () {
            return Object.defineProperty({}, 'a', {
                get: function () {
                    return 7;
                }
            }).a != 7;
        });

    }, {"./_fails": 68}],
    63: [function (require, module, exports) {
        var isObject = require('./_is-object');
        var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
        var is = isObject(document) && isObject(document.createElement);
        module.exports = function (it) {
            return is ? document.createElement(it) : {};
        };

    }, {"./_global": 73, "./_is-object": 84}],
    64: [function (require, module, exports) {
// IE 8- don't enum bug keys
        module.exports = (
            'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
        ).split(',');

    }, {}],
    65: [function (require, module, exports) {
// all enumerable object keys, includes symbols
        var getKeys = require('./_object-keys');
        var gOPS = require('./_object-gops');
        var pIE = require('./_object-pie');
        module.exports = function (it) {
            var result = getKeys(it);
            var getSymbols = gOPS.f;
            if (getSymbols) {
                var symbols = getSymbols(it);
                var isEnum = pIE.f;
                var i = 0;
                var key;
                while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
            }
            return result;
        };

    }, {"./_object-gops": 110, "./_object-keys": 113, "./_object-pie": 114}],
    66: [function (require, module, exports) {
        var global = require('./_global');
        var core = require('./_core');
        var hide = require('./_hide');
        var redefine = require('./_redefine');
        var ctx = require('./_ctx');
        var PROTOTYPE = 'prototype';

        var $export = function (type, name, source) {
            var IS_FORCED = type & $export.F;
            var IS_GLOBAL = type & $export.G;
            var IS_STATIC = type & $export.S;
            var IS_PROTO = type & $export.P;
            var IS_BIND = type & $export.B;
            var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
            var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
            var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
            var key, own, out, exp;
            if (IS_GLOBAL) source = name;
            for (key in source) {
                // contains in native
                own = !IS_FORCED && target && target[key] !== undefined;
                // export native or passed
                out = (own ? target : source)[key];
                // bind timers to global for call from export context
                exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
                // extend global
                if (target) redefine(target, key, out, type & $export.U);
                // export
                if (exports[key] != out) hide(exports, key, exp);
                if (IS_PROTO && expProto[key] != out) expProto[key] = out;
            }
        };
        global.core = core;
// type bitmap
        $export.F = 1;   // forced
        $export.G = 2;   // global
        $export.S = 4;   // static
        $export.P = 8;   // proto
        $export.B = 16;  // bind
        $export.W = 32;  // wrap
        $export.U = 64;  // safe
        $export.R = 128; // real proto method for `library`
        module.exports = $export;

    }, {"./_core": 56, "./_ctx": 58, "./_global": 73, "./_hide": 75, "./_redefine": 124}],
    67: [function (require, module, exports) {
        var MATCH = require('./_wks')('match');
        module.exports = function (KEY) {
            var re = /./;
            try {
                '/./'[KEY](re);
            } catch (e) {
                try {
                    re[MATCH] = false;
                    return !'/./'[KEY](re);
                } catch (f) { /* empty */
                }
            }
            return true;
        };

    }, {"./_wks": 158}],
    68: [function (require, module, exports) {
        module.exports = function (exec) {
            try {
                return !!exec();
            } catch (e) {
                return true;
            }
        };

    }, {}],
    69: [function (require, module, exports) {
        'use strict';
        var hide = require('./_hide');
        var redefine = require('./_redefine');
        var fails = require('./_fails');
        var defined = require('./_defined');
        var wks = require('./_wks');

        module.exports = function (KEY, length, exec) {
            var SYMBOL = wks(KEY);
            var fns = exec(defined, SYMBOL, ''[KEY]);
            var strfn = fns[0];
            var rxfn = fns[1];
            if (fails(function () {
                var O = {};
                O[SYMBOL] = function () {
                    return 7;
                };
                return ''[KEY](O) != 7;
            })) {
                redefine(String.prototype, KEY, strfn);
                hide(RegExp.prototype, SYMBOL, length == 2
                    // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
                    // 21.2.5.11 RegExp.prototype[@@split](string, limit)
                    ? function (string, arg) {
                        return rxfn.call(string, this, arg);
                    }
                    // 21.2.5.6 RegExp.prototype[@@match](string)
                    // 21.2.5.9 RegExp.prototype[@@search](string)
                    : function (string) {
                        return rxfn.call(string, this);
                    }
                );
            }
        };

    }, {"./_defined": 61, "./_fails": 68, "./_hide": 75, "./_redefine": 124, "./_wks": 158}],
    70: [function (require, module, exports) {
        'use strict';
// 21.2.5.3 get RegExp.prototype.flags
        var anObject = require('./_an-object');
        module.exports = function () {
            var that = anObject(this);
            var result = '';
            if (that.global) result += 'g';
            if (that.ignoreCase) result += 'i';
            if (that.multiline) result += 'm';
            if (that.unicode) result += 'u';
            if (that.sticky) result += 'y';
            return result;
        };

    }, {"./_an-object": 40}],
    71: [function (require, module, exports) {
        'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
        var isArray = require('./_is-array');
        var isObject = require('./_is-object');
        var toLength = require('./_to-length');
        var ctx = require('./_ctx');
        var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

        function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
            var targetIndex = start;
            var sourceIndex = 0;
            var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
            var element, spreadable;

            while (sourceIndex < sourceLen) {
                if (sourceIndex in source) {
                    element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

                    spreadable = false;
                    if (isObject(element)) {
                        spreadable = element[IS_CONCAT_SPREADABLE];
                        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
                    }

                    if (spreadable && depth > 0) {
                        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
                    } else {
                        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
                        target[targetIndex] = element;
                    }

                    targetIndex++;
                }
                sourceIndex++;
            }
            return targetIndex;
        }

        module.exports = flattenIntoArray;

    }, {"./_ctx": 58, "./_is-array": 82, "./_is-object": 84, "./_to-length": 147, "./_wks": 158}],
    72: [function (require, module, exports) {
        var ctx = require('./_ctx');
        var call = require('./_iter-call');
        var isArrayIter = require('./_is-array-iter');
        var anObject = require('./_an-object');
        var toLength = require('./_to-length');
        var getIterFn = require('./core.get-iterator-method');
        var BREAK = {};
        var RETURN = {};
        var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
            var iterFn = ITERATOR ? function () {
                return iterable;
            } : getIterFn(iterable);
            var f = ctx(fn, that, entries ? 2 : 1);
            var index = 0;
            var length, step, iterator, result;
            if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
            // fast case for arrays with default iterator
            if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
                result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
                if (result === BREAK || result === RETURN) return result;
            } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
                result = call(iterator, f, step.value, entries);
                if (result === BREAK || result === RETURN) return result;
            }
        };
        exports.BREAK = BREAK;
        exports.RETURN = RETURN;

    }, {
        "./_an-object": 40,
        "./_ctx": 58,
        "./_is-array-iter": 81,
        "./_iter-call": 86,
        "./_to-length": 147,
        "./core.get-iterator-method": 159
    }],
    73: [function (require, module, exports) {
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
        var global = module.exports = typeof window != 'undefined' && window.Math == Math
            ? window : typeof self != 'undefined' && self.Math == Math ? self
                // eslint-disable-next-line no-new-func
                : Function('return this')();
        if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

    }, {}],
    74: [function (require, module, exports) {
        var hasOwnProperty = {}.hasOwnProperty;
        module.exports = function (it, key) {
            return hasOwnProperty.call(it, key);
        };

    }, {}],
    75: [function (require, module, exports) {
        var dP = require('./_object-dp');
        var createDesc = require('./_property-desc');
        module.exports = require('./_descriptors') ? function (object, key, value) {
            return dP.f(object, key, createDesc(1, value));
        } : function (object, key, value) {
            object[key] = value;
            return object;
        };

    }, {"./_descriptors": 62, "./_object-dp": 104, "./_property-desc": 122}],
    76: [function (require, module, exports) {
        var document = require('./_global').document;
        module.exports = document && document.documentElement;

    }, {"./_global": 73}],
    77: [function (require, module, exports) {
        module.exports = !require('./_descriptors') && !require('./_fails')(function () {
            return Object.defineProperty(require('./_dom-create')('div'), 'a', {
                get: function () {
                    return 7;
                }
            }).a != 7;
        });

    }, {"./_descriptors": 62, "./_dom-create": 63, "./_fails": 68}],
    78: [function (require, module, exports) {
        var isObject = require('./_is-object');
        var setPrototypeOf = require('./_set-proto').set;
        module.exports = function (that, target, C) {
            var S = target.constructor;
            var P;
            if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
                setPrototypeOf(that, P);
            }
            return that;
        };

    }, {"./_is-object": 84, "./_set-proto": 128}],
    79: [function (require, module, exports) {
// fast apply, http://jsperf.lnkit.com/fast-apply/5
        module.exports = function (fn, args, that) {
            var un = that === undefined;
            switch (args.length) {
                case 0:
                    return un ? fn()
                        : fn.call(that);
                case 1:
                    return un ? fn(args[0])
                        : fn.call(that, args[0]);
                case 2:
                    return un ? fn(args[0], args[1])
                        : fn.call(that, args[0], args[1]);
                case 3:
                    return un ? fn(args[0], args[1], args[2])
                        : fn.call(that, args[0], args[1], args[2]);
                case 4:
                    return un ? fn(args[0], args[1], args[2], args[3])
                        : fn.call(that, args[0], args[1], args[2], args[3]);
            }
            return fn.apply(that, args);
        };

    }, {}],
    80: [function (require, module, exports) {
// fallback for non-array-like ES3 and non-enumerable old V8 strings
        var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
        module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
            return cof(it) == 'String' ? it.split('') : Object(it);
        };

    }, {"./_cof": 51}],
    81: [function (require, module, exports) {
// check on default Array iterator
        var Iterators = require('./_iterators');
        var ITERATOR = require('./_wks')('iterator');
        var ArrayProto = Array.prototype;

        module.exports = function (it) {
            return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
        };

    }, {"./_iterators": 91, "./_wks": 158}],
    82: [function (require, module, exports) {
// 7.2.2 IsArray(argument)
        var cof = require('./_cof');
        module.exports = Array.isArray || function isArray(arg) {
            return cof(arg) == 'Array';
        };

    }, {"./_cof": 51}],
    83: [function (require, module, exports) {
// 20.1.2.3 Number.isInteger(number)
        var isObject = require('./_is-object');
        var floor = Math.floor;
        module.exports = function isInteger(it) {
            return !isObject(it) && isFinite(it) && floor(it) === it;
        };

    }, {"./_is-object": 84}],
    84: [function (require, module, exports) {
        module.exports = function (it) {
            return typeof it === 'object' ? it !== null : typeof it === 'function';
        };

    }, {}],
    85: [function (require, module, exports) {
// 7.2.8 IsRegExp(argument)
        var isObject = require('./_is-object');
        var cof = require('./_cof');
        var MATCH = require('./_wks')('match');
        module.exports = function (it) {
            var isRegExp;
            return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
        };

    }, {"./_cof": 51, "./_is-object": 84, "./_wks": 158}],
    86: [function (require, module, exports) {
// call something on iterator step with safe closing on error
        var anObject = require('./_an-object');
        module.exports = function (iterator, fn, value, entries) {
            try {
                return entries ? fn(anObject(value)[0], value[1]) : fn(value);
                // 7.4.6 IteratorClose(iterator, completion)
            } catch (e) {
                var ret = iterator['return'];
                if (ret !== undefined) anObject(ret.call(iterator));
                throw e;
            }
        };

    }, {"./_an-object": 40}],
    87: [function (require, module, exports) {
        'use strict';
        var create = require('./_object-create');
        var descriptor = require('./_property-desc');
        var setToStringTag = require('./_set-to-string-tag');
        var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
        require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () {
            return this;
        });

        module.exports = function (Constructor, NAME, next) {
            Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
            setToStringTag(Constructor, NAME + ' Iterator');
        };

    }, {"./_hide": 75, "./_object-create": 103, "./_property-desc": 122, "./_set-to-string-tag": 130, "./_wks": 158}],
    88: [function (require, module, exports) {
        'use strict';
        var LIBRARY = require('./_library');
        var $export = require('./_export');
        var redefine = require('./_redefine');
        var hide = require('./_hide');
        var has = require('./_has');
        var Iterators = require('./_iterators');
        var $iterCreate = require('./_iter-create');
        var setToStringTag = require('./_set-to-string-tag');
        var getPrototypeOf = require('./_object-gpo');
        var ITERATOR = require('./_wks')('iterator');
        var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
        var FF_ITERATOR = '@@iterator';
        var KEYS = 'keys';
        var VALUES = 'values';

        var returnThis = function () {
            return this;
        };

        module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
            $iterCreate(Constructor, NAME, next);
            var getMethod = function (kind) {
                if (!BUGGY && kind in proto) return proto[kind];
                switch (kind) {
                    case KEYS:
                        return function keys() {
                            return new Constructor(this, kind);
                        };
                    case VALUES:
                        return function values() {
                            return new Constructor(this, kind);
                        };
                }
                return function entries() {
                    return new Constructor(this, kind);
                };
            };
            var TAG = NAME + ' Iterator';
            var DEF_VALUES = DEFAULT == VALUES;
            var VALUES_BUG = false;
            var proto = Base.prototype;
            var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
            var $default = (!BUGGY && $native) || getMethod(DEFAULT);
            var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
            var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
            var methods, key, IteratorPrototype;
            // Fix native
            if ($anyNative) {
                IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
                if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
                    // Set @@toStringTag to native iterators
                    setToStringTag(IteratorPrototype, TAG, true);
                    // fix for some old engines
                    if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
                }
            }
            // fix Array#{values, @@iterator}.name in V8 / FF
            if (DEF_VALUES && $native && $native.name !== VALUES) {
                VALUES_BUG = true;
                $default = function values() {
                    return $native.call(this);
                };
            }
            // Define iterator
            if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                hide(proto, ITERATOR, $default);
            }
            // Plug for library
            Iterators[NAME] = $default;
            Iterators[TAG] = returnThis;
            if (DEFAULT) {
                methods = {
                    values: DEF_VALUES ? $default : getMethod(VALUES),
                    keys: IS_SET ? $default : getMethod(KEYS),
                    entries: $entries
                };
                if (FORCED) for (key in methods) {
                    if (!(key in proto)) redefine(proto, key, methods[key]);
                } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
            }
            return methods;
        };

    }, {
        "./_export": 66,
        "./_has": 74,
        "./_hide": 75,
        "./_iter-create": 87,
        "./_iterators": 91,
        "./_library": 92,
        "./_object-gpo": 111,
        "./_redefine": 124,
        "./_set-to-string-tag": 130,
        "./_wks": 158
    }],
    89: [function (require, module, exports) {
        var ITERATOR = require('./_wks')('iterator');
        var SAFE_CLOSING = false;

        try {
            var riter = [7][ITERATOR]();
            riter['return'] = function () {
                SAFE_CLOSING = true;
            };
            // eslint-disable-next-line no-throw-literal
            Array.from(riter, function () {
                throw 2;
            });
        } catch (e) { /* empty */
        }

        module.exports = function (exec, skipClosing) {
            if (!skipClosing && !SAFE_CLOSING) return false;
            var safe = false;
            try {
                var arr = [7];
                var iter = arr[ITERATOR]();
                iter.next = function () {
                    return {done: safe = true};
                };
                arr[ITERATOR] = function () {
                    return iter;
                };
                exec(arr);
            } catch (e) { /* empty */
            }
            return safe;
        };

    }, {"./_wks": 158}],
    90: [function (require, module, exports) {
        module.exports = function (done, value) {
            return {value: value, done: !!done};
        };

    }, {}],
    91: [function (require, module, exports) {
        module.exports = {};

    }, {}],
    92: [function (require, module, exports) {
        module.exports = false;

    }, {}],
    93: [function (require, module, exports) {
// 20.2.2.14 Math.expm1(x)
        var $expm1 = Math.expm1;
        module.exports = (!$expm1
            // Old FF bug
            || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
            // Tor Browser bug
            || $expm1(-2e-17) != -2e-17
        ) ? function expm1(x) {
            return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
        } : $expm1;

    }, {}],
    94: [function (require, module, exports) {
// 20.2.2.16 Math.fround(x)
        var sign = require('./_math-sign');
        var pow = Math.pow;
        var EPSILON = pow(2, -52);
        var EPSILON32 = pow(2, -23);
        var MAX32 = pow(2, 127) * (2 - EPSILON32);
        var MIN32 = pow(2, -126);

        var roundTiesToEven = function (n) {
            return n + 1 / EPSILON - 1 / EPSILON;
        };

        module.exports = Math.fround || function fround(x) {
            var $abs = Math.abs(x);
            var $sign = sign(x);
            var a, result;
            if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
            a = (1 + EPSILON32 / EPSILON) * $abs;
            result = a - (a - $abs);
            // eslint-disable-next-line no-self-compare
            if (result > MAX32 || result != result) return $sign * Infinity;
            return $sign * result;
        };

    }, {"./_math-sign": 97}],
    95: [function (require, module, exports) {
// 20.2.2.20 Math.log1p(x)
        module.exports = Math.log1p || function log1p(x) {
            return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
        };

    }, {}],
    96: [function (require, module, exports) {
// https://rwaldron.github.io/proposal-math-extensions/
        module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
            if (
                arguments.length === 0
                // eslint-disable-next-line no-self-compare
                || x != x
                // eslint-disable-next-line no-self-compare
                || inLow != inLow
                // eslint-disable-next-line no-self-compare
                || inHigh != inHigh
                // eslint-disable-next-line no-self-compare
                || outLow != outLow
                // eslint-disable-next-line no-self-compare
                || outHigh != outHigh
            ) return NaN;
            if (x === Infinity || x === -Infinity) return x;
            return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
        };

    }, {}],
    97: [function (require, module, exports) {
// 20.2.2.28 Math.sign(x)
        module.exports = Math.sign || function sign(x) {
            // eslint-disable-next-line no-self-compare
            return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
        };

    }, {}],
    98: [function (require, module, exports) {
        var META = require('./_uid')('meta');
        var isObject = require('./_is-object');
        var has = require('./_has');
        var setDesc = require('./_object-dp').f;
        var id = 0;
        var isExtensible = Object.isExtensible || function () {
            return true;
        };
        var FREEZE = !require('./_fails')(function () {
            return isExtensible(Object.preventExtensions({}));
        });
        var setMeta = function (it) {
            setDesc(it, META, {
                value: {
                    i: 'O' + ++id, // object ID
                    w: {}          // weak collections IDs
                }
            });
        };
        var fastKey = function (it, create) {
            // return primitive with prefix
            if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
            if (!has(it, META)) {
                // can't set metadata to uncaught frozen object
                if (!isExtensible(it)) return 'F';
                // not necessary to add metadata
                if (!create) return 'E';
                // add missing metadata
                setMeta(it);
                // return object ID
            }
            return it[META].i;
        };
        var getWeak = function (it, create) {
            if (!has(it, META)) {
                // can't set metadata to uncaught frozen object
                if (!isExtensible(it)) return true;
                // not necessary to add metadata
                if (!create) return false;
                // add missing metadata
                setMeta(it);
                // return hash weak collections IDs
            }
            return it[META].w;
        };
// add metadata on freeze-family methods calling
        var onFreeze = function (it) {
            if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
            return it;
        };
        var meta = module.exports = {
            KEY: META,
            NEED: false,
            fastKey: fastKey,
            getWeak: getWeak,
            onFreeze: onFreeze
        };

    }, {"./_fails": 68, "./_has": 74, "./_is-object": 84, "./_object-dp": 104, "./_uid": 153}],
    99: [function (require, module, exports) {
        var Map = require('./es6.map');
        var $export = require('./_export');
        var shared = require('./_shared')('metadata');
        var store = shared.store || (shared.store = new (require('./es6.weak-map'))());

        var getOrCreateMetadataMap = function (target, targetKey, create) {
            var targetMetadata = store.get(target);
            if (!targetMetadata) {
                if (!create) return undefined;
                store.set(target, targetMetadata = new Map());
            }
            var keyMetadata = targetMetadata.get(targetKey);
            if (!keyMetadata) {
                if (!create) return undefined;
                targetMetadata.set(targetKey, keyMetadata = new Map());
            }
            return keyMetadata;
        };
        var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
            var metadataMap = getOrCreateMetadataMap(O, P, false);
            return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
        };
        var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
            var metadataMap = getOrCreateMetadataMap(O, P, false);
            return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
        };
        var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
            getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
        };
        var ordinaryOwnMetadataKeys = function (target, targetKey) {
            var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
            var keys = [];
            if (metadataMap) metadataMap.forEach(function (_, key) {
                keys.push(key);
            });
            return keys;
        };
        var toMetaKey = function (it) {
            return it === undefined || typeof it == 'symbol' ? it : String(it);
        };
        var exp = function (O) {
            $export($export.S, 'Reflect', O);
        };

        module.exports = {
            store: store,
            map: getOrCreateMetadataMap,
            has: ordinaryHasOwnMetadata,
            get: ordinaryGetOwnMetadata,
            set: ordinaryDefineOwnMetadata,
            keys: ordinaryOwnMetadataKeys,
            key: toMetaKey,
            exp: exp
        };

    }, {"./_export": 66, "./_shared": 132, "./es6.map": 189, "./es6.weak-map": 295}],
    100: [function (require, module, exports) {
        var global = require('./_global');
        var macrotask = require('./_task').set;
        var Observer = global.MutationObserver || global.WebKitMutationObserver;
        var process = global.process;
        var Promise = global.Promise;
        var isNode = require('./_cof')(process) == 'process';

        module.exports = function () {
            var head, last, notify;

            var flush = function () {
                var parent, fn;
                if (isNode && (parent = process.domain)) parent.exit();
                while (head) {
                    fn = head.fn;
                    head = head.next;
                    try {
                        fn();
                    } catch (e) {
                        if (head) notify();
                        else last = undefined;
                        throw e;
                    }
                }
                last = undefined;
                if (parent) parent.enter();
            };

            // Node.js
            if (isNode) {
                notify = function () {
                    process.nextTick(flush);
                };
                // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
            } else if (Observer && !(global.navigator && global.navigator.standalone)) {
                var toggle = true;
                var node = document.createTextNode('');
                new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
                notify = function () {
                    node.data = toggle = !toggle;
                };
                // environments with maybe non-completely correct, but existent Promise
            } else if (Promise && Promise.resolve) {
                var promise = Promise.resolve();
                notify = function () {
                    promise.then(flush);
                };
                // for other environments - macrotask based on:
                // - setImmediate
                // - MessageChannel
                // - window.postMessag
                // - onreadystatechange
                // - setTimeout
            } else {
                notify = function () {
                    // strange IE + webpack dev server bug - use .call(global)
                    macrotask.call(global, flush);
                };
            }

            return function (fn) {
                var task = {fn: fn, next: undefined};
                if (last) last.next = task;
                if (!head) {
                    head = task;
                    notify();
                }
                last = task;
            };
        };

    }, {"./_cof": 51, "./_global": 73, "./_task": 142}],
    101: [function (require, module, exports) {
        'use strict';
// 25.4.1.5 NewPromiseCapability(C)
        var aFunction = require('./_a-function');

        function PromiseCapability(C) {
            var resolve, reject;
            this.promise = new C(function ($$resolve, $$reject) {
                if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
                resolve = $$resolve;
                reject = $$reject;
            });
            this.resolve = aFunction(resolve);
            this.reject = aFunction(reject);
        }

        module.exports.f = function (C) {
            return new PromiseCapability(C);
        };

    }, {"./_a-function": 36}],
    102: [function (require, module, exports) {
        'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
        var getKeys = require('./_object-keys');
        var gOPS = require('./_object-gops');
        var pIE = require('./_object-pie');
        var toObject = require('./_to-object');
        var IObject = require('./_iobject');
        var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
        module.exports = !$assign || require('./_fails')(function () {
            var A = {};
            var B = {};
            // eslint-disable-next-line no-undef
            var S = Symbol();
            var K = 'abcdefghijklmnopqrst';
            A[S] = 7;
            K.split('').forEach(function (k) {
                B[k] = k;
            });
            return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
        }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
            var T = toObject(target);
            var aLen = arguments.length;
            var index = 1;
            var getSymbols = gOPS.f;
            var isEnum = pIE.f;
            while (aLen > index) {
                var S = IObject(arguments[index++]);
                var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
                var length = keys.length;
                var j = 0;
                var key;
                while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
            }
            return T;
        } : $assign;

    }, {
        "./_fails": 68,
        "./_iobject": 80,
        "./_object-gops": 110,
        "./_object-keys": 113,
        "./_object-pie": 114,
        "./_to-object": 148
    }],
    103: [function (require, module, exports) {
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
        var anObject = require('./_an-object');
        var dPs = require('./_object-dps');
        var enumBugKeys = require('./_enum-bug-keys');
        var IE_PROTO = require('./_shared-key')('IE_PROTO');
        var Empty = function () { /* empty */
        };
        var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
        var createDict = function () {
            // Thrash, waste and sodomy: IE GC bug
            var iframe = require('./_dom-create')('iframe');
            var i = enumBugKeys.length;
            var lt = '<';
            var gt = '>';
            var iframeDocument;
            iframe.style.display = 'none';
            require('./_html').appendChild(iframe);
            iframe.src = 'javascript:'; // eslint-disable-line no-script-url
            // createDict = iframe.contentWindow.Object;
            // html.removeChild(iframe);
            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
            iframeDocument.close();
            createDict = iframeDocument.F;
            while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
            return createDict();
        };

        module.exports = Object.create || function create(O, Properties) {
            var result;
            if (O !== null) {
                Empty[PROTOTYPE] = anObject(O);
                result = new Empty();
                Empty[PROTOTYPE] = null;
                // add "__proto__" for Object.getPrototypeOf polyfill
                result[IE_PROTO] = O;
            } else result = createDict();
            return Properties === undefined ? result : dPs(result, Properties);
        };

    }, {
        "./_an-object": 40,
        "./_dom-create": 63,
        "./_enum-bug-keys": 64,
        "./_html": 76,
        "./_object-dps": 105,
        "./_shared-key": 131
    }],
    104: [function (require, module, exports) {
        var anObject = require('./_an-object');
        var IE8_DOM_DEFINE = require('./_ie8-dom-define');
        var toPrimitive = require('./_to-primitive');
        var dP = Object.defineProperty;

        exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
            anObject(O);
            P = toPrimitive(P, true);
            anObject(Attributes);
            if (IE8_DOM_DEFINE) try {
                return dP(O, P, Attributes);
            } catch (e) { /* empty */
            }
            if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
            if ('value' in Attributes) O[P] = Attributes.value;
            return O;
        };

    }, {"./_an-object": 40, "./_descriptors": 62, "./_ie8-dom-define": 77, "./_to-primitive": 149}],
    105: [function (require, module, exports) {
        var dP = require('./_object-dp');
        var anObject = require('./_an-object');
        var getKeys = require('./_object-keys');

        module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
            anObject(O);
            var keys = getKeys(Properties);
            var length = keys.length;
            var i = 0;
            var P;
            while (length > i) dP.f(O, P = keys[i++], Properties[P]);
            return O;
        };

    }, {"./_an-object": 40, "./_descriptors": 62, "./_object-dp": 104, "./_object-keys": 113}],
    106: [function (require, module, exports) {
        'use strict';
// Forced replacement prototype accessors methods
        module.exports = require('./_library') || !require('./_fails')(function () {
            var K = Math.random();
            // In FF throws only define methods
            // eslint-disable-next-line no-undef, no-useless-call
            __defineSetter__.call(null, K, function () { /* empty */
            });
            delete require('./_global')[K];
        });

    }, {"./_fails": 68, "./_global": 73, "./_library": 92}],
    107: [function (require, module, exports) {
        var pIE = require('./_object-pie');
        var createDesc = require('./_property-desc');
        var toIObject = require('./_to-iobject');
        var toPrimitive = require('./_to-primitive');
        var has = require('./_has');
        var IE8_DOM_DEFINE = require('./_ie8-dom-define');
        var gOPD = Object.getOwnPropertyDescriptor;

        exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
            O = toIObject(O);
            P = toPrimitive(P, true);
            if (IE8_DOM_DEFINE) try {
                return gOPD(O, P);
            } catch (e) { /* empty */
            }
            if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
        };

    }, {
        "./_descriptors": 62,
        "./_has": 74,
        "./_ie8-dom-define": 77,
        "./_object-pie": 114,
        "./_property-desc": 122,
        "./_to-iobject": 146,
        "./_to-primitive": 149
    }],
    108: [function (require, module, exports) {
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
        var toIObject = require('./_to-iobject');
        var gOPN = require('./_object-gopn').f;
        var toString = {}.toString;

        var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
            ? Object.getOwnPropertyNames(window) : [];

        var getWindowNames = function (it) {
            try {
                return gOPN(it);
            } catch (e) {
                return windowNames.slice();
            }
        };

        module.exports.f = function getOwnPropertyNames(it) {
            return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
        };

    }, {"./_object-gopn": 109, "./_to-iobject": 146}],
    109: [function (require, module, exports) {
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
        var $keys = require('./_object-keys-internal');
        var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

        exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
            return $keys(O, hiddenKeys);
        };

    }, {"./_enum-bug-keys": 64, "./_object-keys-internal": 112}],
    110: [function (require, module, exports) {
        exports.f = Object.getOwnPropertySymbols;

    }, {}],
    111: [function (require, module, exports) {
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
        var has = require('./_has');
        var toObject = require('./_to-object');
        var IE_PROTO = require('./_shared-key')('IE_PROTO');
        var ObjectProto = Object.prototype;

        module.exports = Object.getPrototypeOf || function (O) {
            O = toObject(O);
            if (has(O, IE_PROTO)) return O[IE_PROTO];
            if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                return O.constructor.prototype;
            }
            return O instanceof Object ? ObjectProto : null;
        };

    }, {"./_has": 74, "./_shared-key": 131, "./_to-object": 148}],
    112: [function (require, module, exports) {
        var has = require('./_has');
        var toIObject = require('./_to-iobject');
        var arrayIndexOf = require('./_array-includes')(false);
        var IE_PROTO = require('./_shared-key')('IE_PROTO');

        module.exports = function (object, names) {
            var O = toIObject(object);
            var i = 0;
            var result = [];
            var key;
            for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
            // Don't enum bug & hidden keys
            while (names.length > i) if (has(O, key = names[i++])) {
                ~arrayIndexOf(result, key) || result.push(key);
            }
            return result;
        };

    }, {"./_array-includes": 44, "./_has": 74, "./_shared-key": 131, "./_to-iobject": 146}],
    113: [function (require, module, exports) {
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
        var $keys = require('./_object-keys-internal');
        var enumBugKeys = require('./_enum-bug-keys');

        module.exports = Object.keys || function keys(O) {
            return $keys(O, enumBugKeys);
        };

    }, {"./_enum-bug-keys": 64, "./_object-keys-internal": 112}],
    114: [function (require, module, exports) {
        exports.f = {}.propertyIsEnumerable;

    }, {}],
    115: [function (require, module, exports) {
// most Object methods by ES6 should accept primitives
        var $export = require('./_export');
        var core = require('./_core');
        var fails = require('./_fails');
        module.exports = function (KEY, exec) {
            var fn = (core.Object || {})[KEY] || Object[KEY];
            var exp = {};
            exp[KEY] = exec(fn);
            $export($export.S + $export.F * fails(function () {
                fn(1);
            }), 'Object', exp);
        };

    }, {"./_core": 56, "./_export": 66, "./_fails": 68}],
    116: [function (require, module, exports) {
        var getKeys = require('./_object-keys');
        var toIObject = require('./_to-iobject');
        var isEnum = require('./_object-pie').f;
        module.exports = function (isEntries) {
            return function (it) {
                var O = toIObject(it);
                var keys = getKeys(O);
                var length = keys.length;
                var i = 0;
                var result = [];
                var key;
                while (length > i) if (isEnum.call(O, key = keys[i++])) {
                    result.push(isEntries ? [key, O[key]] : O[key]);
                }
                return result;
            };
        };

    }, {"./_object-keys": 113, "./_object-pie": 114, "./_to-iobject": 146}],
    117: [function (require, module, exports) {
// all object keys, includes non-enumerable and symbols
        var gOPN = require('./_object-gopn');
        var gOPS = require('./_object-gops');
        var anObject = require('./_an-object');
        var Reflect = require('./_global').Reflect;
        module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
            var keys = gOPN.f(anObject(it));
            var getSymbols = gOPS.f;
            return getSymbols ? keys.concat(getSymbols(it)) : keys;
        };

    }, {"./_an-object": 40, "./_global": 73, "./_object-gopn": 109, "./_object-gops": 110}],
    118: [function (require, module, exports) {
        var $parseFloat = require('./_global').parseFloat;
        var $trim = require('./_string-trim').trim;

        module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
            var string = $trim(String(str), 3);
            var result = $parseFloat(string);
            return result === 0 && string.charAt(0) == '-' ? -0 : result;
        } : $parseFloat;

    }, {"./_global": 73, "./_string-trim": 140, "./_string-ws": 141}],
    119: [function (require, module, exports) {
        var $parseInt = require('./_global').parseInt;
        var $trim = require('./_string-trim').trim;
        var ws = require('./_string-ws');
        var hex = /^[-+]?0[xX]/;

        module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
            var string = $trim(String(str), 3);
            return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
        } : $parseInt;

    }, {"./_global": 73, "./_string-trim": 140, "./_string-ws": 141}],
    120: [function (require, module, exports) {
        module.exports = function (exec) {
            try {
                return {e: false, v: exec()};
            } catch (e) {
                return {e: true, v: e};
            }
        };

    }, {}],
    121: [function (require, module, exports) {
        var anObject = require('./_an-object');
        var isObject = require('./_is-object');
        var newPromiseCapability = require('./_new-promise-capability');

        module.exports = function (C, x) {
            anObject(C);
            if (isObject(x) && x.constructor === C) return x;
            var promiseCapability = newPromiseCapability.f(C);
            var resolve = promiseCapability.resolve;
            resolve(x);
            return promiseCapability.promise;
        };

    }, {"./_an-object": 40, "./_is-object": 84, "./_new-promise-capability": 101}],
    122: [function (require, module, exports) {
        module.exports = function (bitmap, value) {
            return {
                enumerable: !(bitmap & 1),
                configurable: !(bitmap & 2),
                writable: !(bitmap & 4),
                value: value
            };
        };

    }, {}],
    123: [function (require, module, exports) {
        var redefine = require('./_redefine');
        module.exports = function (target, src, safe) {
            for (var key in src) redefine(target, key, src[key], safe);
            return target;
        };

    }, {"./_redefine": 124}],
    124: [function (require, module, exports) {
        var global = require('./_global');
        var hide = require('./_hide');
        var has = require('./_has');
        var SRC = require('./_uid')('src');
        var TO_STRING = 'toString';
        var $toString = Function[TO_STRING];
        var TPL = ('' + $toString).split(TO_STRING);

        require('./_core').inspectSource = function (it) {
            return $toString.call(it);
        };

        (module.exports = function (O, key, val, safe) {
            var isFunction = typeof val == 'function';
            if (isFunction) has(val, 'name') || hide(val, 'name', key);
            if (O[key] === val) return;
            if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
            if (O === global) {
                O[key] = val;
            } else if (!safe) {
                delete O[key];
                hide(O, key, val);
            } else if (O[key]) {
                O[key] = val;
            } else {
                hide(O, key, val);
            }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
        })(Function.prototype, TO_STRING, function toString() {
            return typeof this == 'function' && this[SRC] || $toString.call(this);
        });

    }, {"./_core": 56, "./_global": 73, "./_has": 74, "./_hide": 75, "./_uid": 153}],
    125: [function (require, module, exports) {
// 7.2.9 SameValue(x, y)
        module.exports = Object.is || function is(x, y) {
            // eslint-disable-next-line no-self-compare
            return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
        };

    }, {}],
    126: [function (require, module, exports) {
        'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
        var $export = require('./_export');
        var aFunction = require('./_a-function');
        var ctx = require('./_ctx');
        var forOf = require('./_for-of');

        module.exports = function (COLLECTION) {
            $export($export.S, COLLECTION, {
                from: function from(source /* , mapFn, thisArg */) {
                    var mapFn = arguments[1];
                    var mapping, A, n, cb;
                    aFunction(this);
                    mapping = mapFn !== undefined;
                    if (mapping) aFunction(mapFn);
                    if (source == undefined) return new this();
                    A = [];
                    if (mapping) {
                        n = 0;
                        cb = ctx(mapFn, arguments[2], 2);
                        forOf(source, false, function (nextItem) {
                            A.push(cb(nextItem, n++));
                        });
                    } else {
                        forOf(source, false, A.push, A);
                    }
                    return new this(A);
                }
            });
        };

    }, {"./_a-function": 36, "./_ctx": 58, "./_export": 66, "./_for-of": 72}],
    127: [function (require, module, exports) {
        'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
        var $export = require('./_export');

        module.exports = function (COLLECTION) {
            $export($export.S, COLLECTION, {
                of: function of() {
                    var length = arguments.length;
                    var A = new Array(length);
                    while (length--) A[length] = arguments[length];
                    return new this(A);
                }
            });
        };

    }, {"./_export": 66}],
    128: [function (require, module, exports) {
// Works with __proto__ only. Old v8 can't work with null proto objects.
        /* eslint-disable no-proto */
        var isObject = require('./_is-object');
        var anObject = require('./_an-object');
        var check = function (O, proto) {
            anObject(O);
            if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
        };
        module.exports = {
            set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
                function (test, buggy, set) {
                    try {
                        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
                        set(test, []);
                        buggy = !(test instanceof Array);
                    } catch (e) {
                        buggy = true;
                    }
                    return function setPrototypeOf(O, proto) {
                        check(O, proto);
                        if (buggy) O.__proto__ = proto;
                        else set(O, proto);
                        return O;
                    };
                }({}, false) : undefined),
            check: check
        };

    }, {"./_an-object": 40, "./_ctx": 58, "./_is-object": 84, "./_object-gopd": 107}],
    129: [function (require, module, exports) {
        'use strict';
        var global = require('./_global');
        var dP = require('./_object-dp');
        var DESCRIPTORS = require('./_descriptors');
        var SPECIES = require('./_wks')('species');

        module.exports = function (KEY) {
            var C = global[KEY];
            if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
                configurable: true,
                get: function () {
                    return this;
                }
            });
        };

    }, {"./_descriptors": 62, "./_global": 73, "./_object-dp": 104, "./_wks": 158}],
    130: [function (require, module, exports) {
        var def = require('./_object-dp').f;
        var has = require('./_has');
        var TAG = require('./_wks')('toStringTag');

        module.exports = function (it, tag, stat) {
            if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {configurable: true, value: tag});
        };

    }, {"./_has": 74, "./_object-dp": 104, "./_wks": 158}],
    131: [function (require, module, exports) {
        var shared = require('./_shared')('keys');
        var uid = require('./_uid');
        module.exports = function (key) {
            return shared[key] || (shared[key] = uid(key));
        };

    }, {"./_shared": 132, "./_uid": 153}],
    132: [function (require, module, exports) {
        var global = require('./_global');
        var SHARED = '__core-js_shared__';
        var store = global[SHARED] || (global[SHARED] = {});
        module.exports = function (key) {
            return store[key] || (store[key] = {});
        };

    }, {"./_global": 73}],
    133: [function (require, module, exports) {
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
        var anObject = require('./_an-object');
        var aFunction = require('./_a-function');
        var SPECIES = require('./_wks')('species');
        module.exports = function (O, D) {
            var C = anObject(O).constructor;
            var S;
            return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
        };

    }, {"./_a-function": 36, "./_an-object": 40, "./_wks": 158}],
    134: [function (require, module, exports) {
        'use strict';
        var fails = require('./_fails');

        module.exports = function (method, arg) {
            return !!method && fails(function () {
                // eslint-disable-next-line no-useless-call
                arg ? method.call(null, function () { /* empty */
                }, 1) : method.call(null);
            });
        };

    }, {"./_fails": 68}],
    135: [function (require, module, exports) {
        var toInteger = require('./_to-integer');
        var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
        module.exports = function (TO_STRING) {
            return function (that, pos) {
                var s = String(defined(that));
                var i = toInteger(pos);
                var l = s.length;
                var a, b;
                if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
                a = s.charCodeAt(i);
                return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
                    ? TO_STRING ? s.charAt(i) : a
                    : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
            };
        };

    }, {"./_defined": 61, "./_to-integer": 145}],
    136: [function (require, module, exports) {
// helper for String#{startsWith, endsWith, includes}
        var isRegExp = require('./_is-regexp');
        var defined = require('./_defined');

        module.exports = function (that, searchString, NAME) {
            if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
            return String(defined(that));
        };

    }, {"./_defined": 61, "./_is-regexp": 85}],
    137: [function (require, module, exports) {
        var $export = require('./_export');
        var fails = require('./_fails');
        var defined = require('./_defined');
        var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
        var createHTML = function (string, tag, attribute, value) {
            var S = String(defined(string));
            var p1 = '<' + tag;
            if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
            return p1 + '>' + S + '</' + tag + '>';
        };
        module.exports = function (NAME, exec) {
            var O = {};
            O[NAME] = exec(createHTML);
            $export($export.P + $export.F * fails(function () {
                var test = ''[NAME]('"');
                return test !== test.toLowerCase() || test.split('"').length > 3;
            }), 'String', O);
        };

    }, {"./_defined": 61, "./_export": 66, "./_fails": 68}],
    138: [function (require, module, exports) {
// https://github.com/tc39/proposal-string-pad-start-end
        var toLength = require('./_to-length');
        var repeat = require('./_string-repeat');
        var defined = require('./_defined');

        module.exports = function (that, maxLength, fillString, left) {
            var S = String(defined(that));
            var stringLength = S.length;
            var fillStr = fillString === undefined ? ' ' : String(fillString);
            var intMaxLength = toLength(maxLength);
            if (intMaxLength <= stringLength || fillStr == '') return S;
            var fillLen = intMaxLength - stringLength;
            var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
            if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
            return left ? stringFiller + S : S + stringFiller;
        };

    }, {"./_defined": 61, "./_string-repeat": 139, "./_to-length": 147}],
    139: [function (require, module, exports) {
        'use strict';
        var toInteger = require('./_to-integer');
        var defined = require('./_defined');

        module.exports = function repeat(count) {
            var str = String(defined(this));
            var res = '';
            var n = toInteger(count);
            if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
            for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
            return res;
        };

    }, {"./_defined": 61, "./_to-integer": 145}],
    140: [function (require, module, exports) {
        var $export = require('./_export');
        var defined = require('./_defined');
        var fails = require('./_fails');
        var spaces = require('./_string-ws');
        var space = '[' + spaces + ']';
        var non = '\u200b\u0085';
        var ltrim = RegExp('^' + space + space + '*');
        var rtrim = RegExp(space + space + '*$');

        var exporter = function (KEY, exec, ALIAS) {
            var exp = {};
            var FORCE = fails(function () {
                return !!spaces[KEY]() || non[KEY]() != non;
            });
            var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
            if (ALIAS) exp[ALIAS] = fn;
            $export($export.P + $export.F * FORCE, 'String', exp);
        };

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
        var trim = exporter.trim = function (string, TYPE) {
            string = String(defined(string));
            if (TYPE & 1) string = string.replace(ltrim, '');
            if (TYPE & 2) string = string.replace(rtrim, '');
            return string;
        };

        module.exports = exporter;

    }, {"./_defined": 61, "./_export": 66, "./_fails": 68, "./_string-ws": 141}],
    141: [function (require, module, exports) {
        module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
            '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

    }, {}],
    142: [function (require, module, exports) {
        var ctx = require('./_ctx');
        var invoke = require('./_invoke');
        var html = require('./_html');
        var cel = require('./_dom-create');
        var global = require('./_global');
        var process = global.process;
        var setTask = global.setImmediate;
        var clearTask = global.clearImmediate;
        var MessageChannel = global.MessageChannel;
        var Dispatch = global.Dispatch;
        var counter = 0;
        var queue = {};
        var ONREADYSTATECHANGE = 'onreadystatechange';
        var defer, channel, port;
        var run = function () {
            var id = +this;
            // eslint-disable-next-line no-prototype-builtins
            if (queue.hasOwnProperty(id)) {
                var fn = queue[id];
                delete queue[id];
                fn();
            }
        };
        var listener = function (event) {
            run.call(event.data);
        };
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
        if (!setTask || !clearTask) {
            setTask = function setImmediate(fn) {
                var args = [];
                var i = 1;
                while (arguments.length > i) args.push(arguments[i++]);
                queue[++counter] = function () {
                    // eslint-disable-next-line no-new-func
                    invoke(typeof fn == 'function' ? fn : Function(fn), args);
                };
                defer(counter);
                return counter;
            };
            clearTask = function clearImmediate(id) {
                delete queue[id];
            };
            // Node.js 0.8-
            if (require('./_cof')(process) == 'process') {
                defer = function (id) {
                    process.nextTick(ctx(run, id, 1));
                };
                // Sphere (JS game engine) Dispatch API
            } else if (Dispatch && Dispatch.now) {
                defer = function (id) {
                    Dispatch.now(ctx(run, id, 1));
                };
                // Browsers with MessageChannel, includes WebWorkers
            } else if (MessageChannel) {
                channel = new MessageChannel();
                port = channel.port2;
                channel.port1.onmessage = listener;
                defer = ctx(port.postMessage, port, 1);
                // Browsers with postMessage, skip WebWorkers
                // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
            } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
                defer = function (id) {
                    global.postMessage(id + '', '*');
                };
                global.addEventListener('message', listener, false);
                // IE8-
            } else if (ONREADYSTATECHANGE in cel('script')) {
                defer = function (id) {
                    html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
                        html.removeChild(this);
                        run.call(id);
                    };
                };
                // Rest old browsers
            } else {
                defer = function (id) {
                    setTimeout(ctx(run, id, 1), 0);
                };
            }
        }
        module.exports = {
            set: setTask,
            clear: clearTask
        };

    }, {"./_cof": 51, "./_ctx": 58, "./_dom-create": 63, "./_global": 73, "./_html": 76, "./_invoke": 79}],
    143: [function (require, module, exports) {
        var toInteger = require('./_to-integer');
        var max = Math.max;
        var min = Math.min;
        module.exports = function (index, length) {
            index = toInteger(index);
            return index < 0 ? max(index + length, 0) : min(index, length);
        };

    }, {"./_to-integer": 145}],
    144: [function (require, module, exports) {
// https://tc39.github.io/ecma262/#sec-toindex
        var toInteger = require('./_to-integer');
        var toLength = require('./_to-length');
        module.exports = function (it) {
            if (it === undefined) return 0;
            var number = toInteger(it);
            var length = toLength(number);
            if (number !== length) throw RangeError('Wrong length!');
            return length;
        };

    }, {"./_to-integer": 145, "./_to-length": 147}],
    145: [function (require, module, exports) {
// 7.1.4 ToInteger
        var ceil = Math.ceil;
        var floor = Math.floor;
        module.exports = function (it) {
            return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
        };

    }, {}],
    146: [function (require, module, exports) {
// to indexed object, toObject with fallback for non-array-like ES3 strings
        var IObject = require('./_iobject');
        var defined = require('./_defined');
        module.exports = function (it) {
            return IObject(defined(it));
        };

    }, {"./_defined": 61, "./_iobject": 80}],
    147: [function (require, module, exports) {
// 7.1.15 ToLength
        var toInteger = require('./_to-integer');
        var min = Math.min;
        module.exports = function (it) {
            return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
        };

    }, {"./_to-integer": 145}],
    148: [function (require, module, exports) {
// 7.1.13 ToObject(argument)
        var defined = require('./_defined');
        module.exports = function (it) {
            return Object(defined(it));
        };

    }, {"./_defined": 61}],
    149: [function (require, module, exports) {
// 7.1.1 ToPrimitive(input [, PreferredType])
        var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
        module.exports = function (it, S) {
            if (!isObject(it)) return it;
            var fn, val;
            if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
            if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
            if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
            throw TypeError("Can't convert object to primitive value");
        };

    }, {"./_is-object": 84}],
    150: [function (require, module, exports) {
        'use strict';
        if (require('./_descriptors')) {
            var LIBRARY = require('./_library');
            var global = require('./_global');
            var fails = require('./_fails');
            var $export = require('./_export');
            var $typed = require('./_typed');
            var $buffer = require('./_typed-buffer');
            var ctx = require('./_ctx');
            var anInstance = require('./_an-instance');
            var propertyDesc = require('./_property-desc');
            var hide = require('./_hide');
            var redefineAll = require('./_redefine-all');
            var toInteger = require('./_to-integer');
            var toLength = require('./_to-length');
            var toIndex = require('./_to-index');
            var toAbsoluteIndex = require('./_to-absolute-index');
            var toPrimitive = require('./_to-primitive');
            var has = require('./_has');
            var classof = require('./_classof');
            var isObject = require('./_is-object');
            var toObject = require('./_to-object');
            var isArrayIter = require('./_is-array-iter');
            var create = require('./_object-create');
            var getPrototypeOf = require('./_object-gpo');
            var gOPN = require('./_object-gopn').f;
            var getIterFn = require('./core.get-iterator-method');
            var uid = require('./_uid');
            var wks = require('./_wks');
            var createArrayMethod = require('./_array-methods');
            var createArrayIncludes = require('./_array-includes');
            var speciesConstructor = require('./_species-constructor');
            var ArrayIterators = require('./es6.array.iterator');
            var Iterators = require('./_iterators');
            var $iterDetect = require('./_iter-detect');
            var setSpecies = require('./_set-species');
            var arrayFill = require('./_array-fill');
            var arrayCopyWithin = require('./_array-copy-within');
            var $DP = require('./_object-dp');
            var $GOPD = require('./_object-gopd');
            var dP = $DP.f;
            var gOPD = $GOPD.f;
            var RangeError = global.RangeError;
            var TypeError = global.TypeError;
            var Uint8Array = global.Uint8Array;
            var ARRAY_BUFFER = 'ArrayBuffer';
            var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
            var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
            var PROTOTYPE = 'prototype';
            var ArrayProto = Array[PROTOTYPE];
            var $ArrayBuffer = $buffer.ArrayBuffer;
            var $DataView = $buffer.DataView;
            var arrayForEach = createArrayMethod(0);
            var arrayFilter = createArrayMethod(2);
            var arraySome = createArrayMethod(3);
            var arrayEvery = createArrayMethod(4);
            var arrayFind = createArrayMethod(5);
            var arrayFindIndex = createArrayMethod(6);
            var arrayIncludes = createArrayIncludes(true);
            var arrayIndexOf = createArrayIncludes(false);
            var arrayValues = ArrayIterators.values;
            var arrayKeys = ArrayIterators.keys;
            var arrayEntries = ArrayIterators.entries;
            var arrayLastIndexOf = ArrayProto.lastIndexOf;
            var arrayReduce = ArrayProto.reduce;
            var arrayReduceRight = ArrayProto.reduceRight;
            var arrayJoin = ArrayProto.join;
            var arraySort = ArrayProto.sort;
            var arraySlice = ArrayProto.slice;
            var arrayToString = ArrayProto.toString;
            var arrayToLocaleString = ArrayProto.toLocaleString;
            var ITERATOR = wks('iterator');
            var TAG = wks('toStringTag');
            var TYPED_CONSTRUCTOR = uid('typed_constructor');
            var DEF_CONSTRUCTOR = uid('def_constructor');
            var ALL_CONSTRUCTORS = $typed.CONSTR;
            var TYPED_ARRAY = $typed.TYPED;
            var VIEW = $typed.VIEW;
            var WRONG_LENGTH = 'Wrong length!';

            var $map = createArrayMethod(1, function (O, length) {
                return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
            });

            var LITTLE_ENDIAN = fails(function () {
                // eslint-disable-next-line no-undef
                return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
            });

            var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
                new Uint8Array(1).set({});
            });

            var toOffset = function (it, BYTES) {
                var offset = toInteger(it);
                if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
                return offset;
            };

            var validate = function (it) {
                if (isObject(it) && TYPED_ARRAY in it) return it;
                throw TypeError(it + ' is not a typed array!');
            };

            var allocate = function (C, length) {
                if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
                    throw TypeError('It is not a typed array constructor!');
                }
                return new C(length);
            };

            var speciesFromList = function (O, list) {
                return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
            };

            var fromList = function (C, list) {
                var index = 0;
                var length = list.length;
                var result = allocate(C, length);
                while (length > index) result[index] = list[index++];
                return result;
            };

            var addGetter = function (it, key, internal) {
                dP(it, key, {
                    get: function () {
                        return this._d[internal];
                    }
                });
            };

            var $from = function from(source /* , mapfn, thisArg */) {
                var O = toObject(source);
                var aLen = arguments.length;
                var mapfn = aLen > 1 ? arguments[1] : undefined;
                var mapping = mapfn !== undefined;
                var iterFn = getIterFn(O);
                var i, length, values, result, step, iterator;
                if (iterFn != undefined && !isArrayIter(iterFn)) {
                    for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
                        values.push(step.value);
                    }
                    O = values;
                }
                if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
                for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
                    result[i] = mapping ? mapfn(O[i], i) : O[i];
                }
                return result;
            };

            var $of = function of(/* ...items */) {
                var index = 0;
                var length = arguments.length;
                var result = allocate(this, length);
                while (length > index) result[index] = arguments[index++];
                return result;
            };

            // iOS Safari 6.x fails here
            var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
                arrayToLocaleString.call(new Uint8Array(1));
            });

            var $toLocaleString = function toLocaleString() {
                return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
            };

            var proto = {
                copyWithin: function copyWithin(target, start /* , end */) {
                    return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
                },
                every: function every(callbackfn /* , thisArg */) {
                    return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                },
                fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
                    return arrayFill.apply(validate(this), arguments);
                },
                filter: function filter(callbackfn /* , thisArg */) {
                    return speciesFromList(this, arrayFilter(validate(this), callbackfn,
                        arguments.length > 1 ? arguments[1] : undefined));
                },
                find: function find(predicate /* , thisArg */) {
                    return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
                },
                findIndex: function findIndex(predicate /* , thisArg */) {
                    return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
                },
                forEach: function forEach(callbackfn /* , thisArg */) {
                    arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                },
                indexOf: function indexOf(searchElement /* , fromIndex */) {
                    return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
                },
                includes: function includes(searchElement /* , fromIndex */) {
                    return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
                },
                join: function join(separator) { // eslint-disable-line no-unused-vars
                    return arrayJoin.apply(validate(this), arguments);
                },
                lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
                    return arrayLastIndexOf.apply(validate(this), arguments);
                },
                map: function map(mapfn /* , thisArg */) {
                    return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
                },
                reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
                    return arrayReduce.apply(validate(this), arguments);
                },
                reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
                    return arrayReduceRight.apply(validate(this), arguments);
                },
                reverse: function reverse() {
                    var that = this;
                    var length = validate(that).length;
                    var middle = Math.floor(length / 2);
                    var index = 0;
                    var value;
                    while (index < middle) {
                        value = that[index];
                        that[index++] = that[--length];
                        that[length] = value;
                    }
                    return that;
                },
                some: function some(callbackfn /* , thisArg */) {
                    return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                },
                sort: function sort(comparefn) {
                    return arraySort.call(validate(this), comparefn);
                },
                subarray: function subarray(begin, end) {
                    var O = validate(this);
                    var length = O.length;
                    var $begin = toAbsoluteIndex(begin, length);
                    return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
                        O.buffer,
                        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
                        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
                    );
                }
            };

            var $slice = function slice(start, end) {
                return speciesFromList(this, arraySlice.call(validate(this), start, end));
            };

            var $set = function set(arrayLike /* , offset */) {
                validate(this);
                var offset = toOffset(arguments[1], 1);
                var length = this.length;
                var src = toObject(arrayLike);
                var len = toLength(src.length);
                var index = 0;
                if (len + offset > length) throw RangeError(WRONG_LENGTH);
                while (index < len) this[offset + index] = src[index++];
            };

            var $iterators = {
                entries: function entries() {
                    return arrayEntries.call(validate(this));
                },
                keys: function keys() {
                    return arrayKeys.call(validate(this));
                },
                values: function values() {
                    return arrayValues.call(validate(this));
                }
            };

            var isTAIndex = function (target, key) {
                return isObject(target)
                    && target[TYPED_ARRAY]
                    && typeof key != 'symbol'
                    && key in target
                    && String(+key) == String(key);
            };
            var $getDesc = function getOwnPropertyDescriptor(target, key) {
                return isTAIndex(target, key = toPrimitive(key, true))
                    ? propertyDesc(2, target[key])
                    : gOPD(target, key);
            };
            var $setDesc = function defineProperty(target, key, desc) {
                if (isTAIndex(target, key = toPrimitive(key, true))
                    && isObject(desc)
                    && has(desc, 'value')
                    && !has(desc, 'get')
                    && !has(desc, 'set')
                    // TODO: add validation descriptor w/o calling accessors
                    && !desc.configurable
                    && (!has(desc, 'writable') || desc.writable)
                    && (!has(desc, 'enumerable') || desc.enumerable)
                ) {
                    target[key] = desc.value;
                    return target;
                }
                return dP(target, key, desc);
            };

            if (!ALL_CONSTRUCTORS) {
                $GOPD.f = $getDesc;
                $DP.f = $setDesc;
            }

            $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
                getOwnPropertyDescriptor: $getDesc,
                defineProperty: $setDesc
            });

            if (fails(function () {
                arrayToString.call({});
            })) {
                arrayToString = arrayToLocaleString = function toString() {
                    return arrayJoin.call(this);
                };
            }

            var $TypedArrayPrototype$ = redefineAll({}, proto);
            redefineAll($TypedArrayPrototype$, $iterators);
            hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
            redefineAll($TypedArrayPrototype$, {
                slice: $slice,
                set: $set,
                constructor: function () { /* noop */
                },
                toString: arrayToString,
                toLocaleString: $toLocaleString
            });
            addGetter($TypedArrayPrototype$, 'buffer', 'b');
            addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
            addGetter($TypedArrayPrototype$, 'byteLength', 'l');
            addGetter($TypedArrayPrototype$, 'length', 'e');
            dP($TypedArrayPrototype$, TAG, {
                get: function () {
                    return this[TYPED_ARRAY];
                }
            });

            // eslint-disable-next-line max-statements
            module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
                CLAMPED = !!CLAMPED;
                var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
                var GETTER = 'get' + KEY;
                var SETTER = 'set' + KEY;
                var TypedArray = global[NAME];
                var Base = TypedArray || {};
                var TAC = TypedArray && getPrototypeOf(TypedArray);
                var FORCED = !TypedArray || !$typed.ABV;
                var O = {};
                var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
                var getter = function (that, index) {
                    var data = that._d;
                    return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
                };
                var setter = function (that, index, value) {
                    var data = that._d;
                    if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
                    data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
                };
                var addElement = function (that, index) {
                    dP(that, index, {
                        get: function () {
                            return getter(this, index);
                        },
                        set: function (value) {
                            return setter(this, index, value);
                        },
                        enumerable: true
                    });
                };
                if (FORCED) {
                    TypedArray = wrapper(function (that, data, $offset, $length) {
                        anInstance(that, TypedArray, NAME, '_d');
                        var index = 0;
                        var offset = 0;
                        var buffer, byteLength, length, klass;
                        if (!isObject(data)) {
                            length = toIndex(data);
                            byteLength = length * BYTES;
                            buffer = new $ArrayBuffer(byteLength);
                        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                            buffer = data;
                            offset = toOffset($offset, BYTES);
                            var $len = data.byteLength;
                            if ($length === undefined) {
                                if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                                byteLength = $len - offset;
                                if (byteLength < 0) throw RangeError(WRONG_LENGTH);
                            } else {
                                byteLength = toLength($length) * BYTES;
                                if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
                            }
                            length = byteLength / BYTES;
                        } else if (TYPED_ARRAY in data) {
                            return fromList(TypedArray, data);
                        } else {
                            return $from.call(TypedArray, data);
                        }
                        hide(that, '_d', {
                            b: buffer,
                            o: offset,
                            l: byteLength,
                            e: length,
                            v: new $DataView(buffer)
                        });
                        while (index < length) addElement(that, index++);
                    });
                    TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
                    hide(TypedArrayPrototype, 'constructor', TypedArray);
                } else if (!fails(function () {
                    TypedArray(1);
                }) || !fails(function () {
                    new TypedArray(-1); // eslint-disable-line no-new
                }) || !$iterDetect(function (iter) {
                    new TypedArray(); // eslint-disable-line no-new
                    new TypedArray(null); // eslint-disable-line no-new
                    new TypedArray(1.5); // eslint-disable-line no-new
                    new TypedArray(iter); // eslint-disable-line no-new
                }, true)) {
                    TypedArray = wrapper(function (that, data, $offset, $length) {
                        anInstance(that, TypedArray, NAME);
                        var klass;
                        // `ws` module bug, temporarily remove validation length for Uint8Array
                        // https://github.com/websockets/ws/pull/645
                        if (!isObject(data)) return new Base(toIndex(data));
                        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                            return $length !== undefined
                                ? new Base(data, toOffset($offset, BYTES), $length)
                                : $offset !== undefined
                                    ? new Base(data, toOffset($offset, BYTES))
                                    : new Base(data);
                        }
                        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
                        return $from.call(TypedArray, data);
                    });
                    arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
                        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
                    });
                    TypedArray[PROTOTYPE] = TypedArrayPrototype;
                    if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
                }
                var $nativeIterator = TypedArrayPrototype[ITERATOR];
                var CORRECT_ITER_NAME = !!$nativeIterator
                    && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
                var $iterator = $iterators.values;
                hide(TypedArray, TYPED_CONSTRUCTOR, true);
                hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
                hide(TypedArrayPrototype, VIEW, true);
                hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

                if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
                    dP(TypedArrayPrototype, TAG, {
                        get: function () {
                            return NAME;
                        }
                    });
                }

                O[NAME] = TypedArray;

                $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

                $export($export.S, NAME, {
                    BYTES_PER_ELEMENT: BYTES
                });

                $export($export.S + $export.F * fails(function () {
                    Base.of.call(TypedArray, 1);
                }), NAME, {
                    from: $from,
                    of: $of
                });

                if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

                $export($export.P, NAME, proto);

                setSpecies(NAME);

                $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

                $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

                if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

                $export($export.P + $export.F * fails(function () {
                    new TypedArray(1).slice();
                }), NAME, {slice: $slice});

                $export($export.P + $export.F * (fails(function () {
                    return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
                }) || !fails(function () {
                    TypedArrayPrototype.toLocaleString.call([1, 2]);
                })), NAME, {toLocaleString: $toLocaleString});

                Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
                if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
            };
        } else module.exports = function () { /* empty */
        };

    }, {
        "./_an-instance": 39,
        "./_array-copy-within": 41,
        "./_array-fill": 42,
        "./_array-includes": 44,
        "./_array-methods": 45,
        "./_classof": 50,
        "./_ctx": 58,
        "./_descriptors": 62,
        "./_export": 66,
        "./_fails": 68,
        "./_global": 73,
        "./_has": 74,
        "./_hide": 75,
        "./_is-array-iter": 81,
        "./_is-object": 84,
        "./_iter-detect": 89,
        "./_iterators": 91,
        "./_library": 92,
        "./_object-create": 103,
        "./_object-dp": 104,
        "./_object-gopd": 107,
        "./_object-gopn": 109,
        "./_object-gpo": 111,
        "./_property-desc": 122,
        "./_redefine-all": 123,
        "./_set-species": 129,
        "./_species-constructor": 133,
        "./_to-absolute-index": 143,
        "./_to-index": 144,
        "./_to-integer": 145,
        "./_to-length": 147,
        "./_to-object": 148,
        "./_to-primitive": 149,
        "./_typed": 152,
        "./_typed-buffer": 151,
        "./_uid": 153,
        "./_wks": 158,
        "./core.get-iterator-method": 159,
        "./es6.array.iterator": 170
    }],
    151: [function (require, module, exports) {
        'use strict';
        var global = require('./_global');
        var DESCRIPTORS = require('./_descriptors');
        var LIBRARY = require('./_library');
        var $typed = require('./_typed');
        var hide = require('./_hide');
        var redefineAll = require('./_redefine-all');
        var fails = require('./_fails');
        var anInstance = require('./_an-instance');
        var toInteger = require('./_to-integer');
        var toLength = require('./_to-length');
        var toIndex = require('./_to-index');
        var gOPN = require('./_object-gopn').f;
        var dP = require('./_object-dp').f;
        var arrayFill = require('./_array-fill');
        var setToStringTag = require('./_set-to-string-tag');
        var ARRAY_BUFFER = 'ArrayBuffer';
        var DATA_VIEW = 'DataView';
        var PROTOTYPE = 'prototype';
        var WRONG_LENGTH = 'Wrong length!';
        var WRONG_INDEX = 'Wrong index!';
        var $ArrayBuffer = global[ARRAY_BUFFER];
        var $DataView = global[DATA_VIEW];
        var Math = global.Math;
        var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
        var Infinity = global.Infinity;
        var BaseBuffer = $ArrayBuffer;
        var abs = Math.abs;
        var pow = Math.pow;
        var floor = Math.floor;
        var log = Math.log;
        var LN2 = Math.LN2;
        var BUFFER = 'buffer';
        var BYTE_LENGTH = 'byteLength';
        var BYTE_OFFSET = 'byteOffset';
        var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
        var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
        var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
        function packIEEE754(value, mLen, nBytes) {
            var buffer = new Array(nBytes);
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
            var i = 0;
            var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
            var e, m, c;
            value = abs(value);
            // eslint-disable-next-line no-self-compare
            if (value != value || value === Infinity) {
                // eslint-disable-next-line no-self-compare
                m = value != value ? 1 : 0;
                e = eMax;
            } else {
                e = floor(log(value) / LN2);
                if (value * (c = pow(2, -e)) < 1) {
                    e--;
                    c *= 2;
                }
                if (e + eBias >= 1) {
                    value += rt / c;
                } else {
                    value += rt * pow(2, 1 - eBias);
                }
                if (value * c >= 2) {
                    e++;
                    c /= 2;
                }
                if (e + eBias >= eMax) {
                    m = 0;
                    e = eMax;
                } else if (e + eBias >= 1) {
                    m = (value * c - 1) * pow(2, mLen);
                    e = e + eBias;
                } else {
                    m = value * pow(2, eBias - 1) * pow(2, mLen);
                    e = 0;
                }
            }
            for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) ;
            e = e << mLen | m;
            eLen += mLen;
            for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) ;
            buffer[--i] |= s * 128;
            return buffer;
        }

        function unpackIEEE754(buffer, mLen, nBytes) {
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = eLen - 7;
            var i = nBytes - 1;
            var s = buffer[i--];
            var e = s & 127;
            var m;
            s >>= 7;
            for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) ;
            m = e & (1 << -nBits) - 1;
            e >>= -nBits;
            nBits += mLen;
            for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) ;
            if (e === 0) {
                e = 1 - eBias;
            } else if (e === eMax) {
                return m ? NaN : s ? -Infinity : Infinity;
            } else {
                m = m + pow(2, mLen);
                e = e - eBias;
            }
            return (s ? -1 : 1) * m * pow(2, e - mLen);
        }

        function unpackI32(bytes) {
            return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
        }

        function packI8(it) {
            return [it & 0xff];
        }

        function packI16(it) {
            return [it & 0xff, it >> 8 & 0xff];
        }

        function packI32(it) {
            return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
        }

        function packF64(it) {
            return packIEEE754(it, 52, 8);
        }

        function packF32(it) {
            return packIEEE754(it, 23, 4);
        }

        function addGetter(C, key, internal) {
            dP(C[PROTOTYPE], key, {
                get: function () {
                    return this[internal];
                }
            });
        }

        function get(view, bytes, index, isLittleEndian) {
            var numIndex = +index;
            var intIndex = toIndex(numIndex);
            if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
            var store = view[$BUFFER]._b;
            var start = intIndex + view[$OFFSET];
            var pack = store.slice(start, start + bytes);
            return isLittleEndian ? pack : pack.reverse();
        }

        function set(view, bytes, index, conversion, value, isLittleEndian) {
            var numIndex = +index;
            var intIndex = toIndex(numIndex);
            if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
            var store = view[$BUFFER]._b;
            var start = intIndex + view[$OFFSET];
            var pack = conversion(+value);
            for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
        }

        if (!$typed.ABV) {
            $ArrayBuffer = function ArrayBuffer(length) {
                anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
                var byteLength = toIndex(length);
                this._b = arrayFill.call(new Array(byteLength), 0);
                this[$LENGTH] = byteLength;
            };

            $DataView = function DataView(buffer, byteOffset, byteLength) {
                anInstance(this, $DataView, DATA_VIEW);
                anInstance(buffer, $ArrayBuffer, DATA_VIEW);
                var bufferLength = buffer[$LENGTH];
                var offset = toInteger(byteOffset);
                if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
                byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
                if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
                this[$BUFFER] = buffer;
                this[$OFFSET] = offset;
                this[$LENGTH] = byteLength;
            };

            if (DESCRIPTORS) {
                addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
                addGetter($DataView, BUFFER, '_b');
                addGetter($DataView, BYTE_LENGTH, '_l');
                addGetter($DataView, BYTE_OFFSET, '_o');
            }

            redefineAll($DataView[PROTOTYPE], {
                getInt8: function getInt8(byteOffset) {
                    return get(this, 1, byteOffset)[0] << 24 >> 24;
                },
                getUint8: function getUint8(byteOffset) {
                    return get(this, 1, byteOffset)[0];
                },
                getInt16: function getInt16(byteOffset /* , littleEndian */) {
                    var bytes = get(this, 2, byteOffset, arguments[1]);
                    return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
                },
                getUint16: function getUint16(byteOffset /* , littleEndian */) {
                    var bytes = get(this, 2, byteOffset, arguments[1]);
                    return bytes[1] << 8 | bytes[0];
                },
                getInt32: function getInt32(byteOffset /* , littleEndian */) {
                    return unpackI32(get(this, 4, byteOffset, arguments[1]));
                },
                getUint32: function getUint32(byteOffset /* , littleEndian */) {
                    return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
                },
                getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
                    return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
                },
                getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
                    return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
                },
                setInt8: function setInt8(byteOffset, value) {
                    set(this, 1, byteOffset, packI8, value);
                },
                setUint8: function setUint8(byteOffset, value) {
                    set(this, 1, byteOffset, packI8, value);
                },
                setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
                    set(this, 2, byteOffset, packI16, value, arguments[2]);
                },
                setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
                    set(this, 2, byteOffset, packI16, value, arguments[2]);
                },
                setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
                    set(this, 4, byteOffset, packI32, value, arguments[2]);
                },
                setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
                    set(this, 4, byteOffset, packI32, value, arguments[2]);
                },
                setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
                    set(this, 4, byteOffset, packF32, value, arguments[2]);
                },
                setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
                    set(this, 8, byteOffset, packF64, value, arguments[2]);
                }
            });
        } else {
            if (!fails(function () {
                $ArrayBuffer(1);
            }) || !fails(function () {
                new $ArrayBuffer(-1); // eslint-disable-line no-new
            }) || fails(function () {
                new $ArrayBuffer(); // eslint-disable-line no-new
                new $ArrayBuffer(1.5); // eslint-disable-line no-new
                new $ArrayBuffer(NaN); // eslint-disable-line no-new
                return $ArrayBuffer.name != ARRAY_BUFFER;
            })) {
                $ArrayBuffer = function ArrayBuffer(length) {
                    anInstance(this, $ArrayBuffer);
                    return new BaseBuffer(toIndex(length));
                };
                var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
                for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
                    if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
                }
                if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
            }
            // iOS Safari 7.x bug
            var view = new $DataView(new $ArrayBuffer(2));
            var $setInt8 = $DataView[PROTOTYPE].setInt8;
            view.setInt8(0, 2147483648);
            view.setInt8(1, 2147483649);
            if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
                setInt8: function setInt8(byteOffset, value) {
                    $setInt8.call(this, byteOffset, value << 24 >> 24);
                },
                setUint8: function setUint8(byteOffset, value) {
                    $setInt8.call(this, byteOffset, value << 24 >> 24);
                }
            }, true);
        }
        setToStringTag($ArrayBuffer, ARRAY_BUFFER);
        setToStringTag($DataView, DATA_VIEW);
        hide($DataView[PROTOTYPE], $typed.VIEW, true);
        exports[ARRAY_BUFFER] = $ArrayBuffer;
        exports[DATA_VIEW] = $DataView;

    }, {
        "./_an-instance": 39,
        "./_array-fill": 42,
        "./_descriptors": 62,
        "./_fails": 68,
        "./_global": 73,
        "./_hide": 75,
        "./_library": 92,
        "./_object-dp": 104,
        "./_object-gopn": 109,
        "./_redefine-all": 123,
        "./_set-to-string-tag": 130,
        "./_to-index": 144,
        "./_to-integer": 145,
        "./_to-length": 147,
        "./_typed": 152
    }],
    152: [function (require, module, exports) {
        var global = require('./_global');
        var hide = require('./_hide');
        var uid = require('./_uid');
        var TYPED = uid('typed_array');
        var VIEW = uid('view');
        var ABV = !!(global.ArrayBuffer && global.DataView);
        var CONSTR = ABV;
        var i = 0;
        var l = 9;
        var Typed;

        var TypedArrayConstructors = (
            'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
        ).split(',');

        while (i < l) {
            if (Typed = global[TypedArrayConstructors[i++]]) {
                hide(Typed.prototype, TYPED, true);
                hide(Typed.prototype, VIEW, true);
            } else CONSTR = false;
        }

        module.exports = {
            ABV: ABV,
            CONSTR: CONSTR,
            TYPED: TYPED,
            VIEW: VIEW
        };

    }, {"./_global": 73, "./_hide": 75, "./_uid": 153}],
    153: [function (require, module, exports) {
        var id = 0;
        var px = Math.random();
        module.exports = function (key) {
            return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
        };

    }, {}],
    154: [function (require, module, exports) {
        var global = require('./_global');
        var navigator = global.navigator;

        module.exports = navigator && navigator.userAgent || '';

    }, {"./_global": 73}],
    155: [function (require, module, exports) {
        var isObject = require('./_is-object');
        module.exports = function (it, TYPE) {
            if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
            return it;
        };

    }, {"./_is-object": 84}],
    156: [function (require, module, exports) {
        var global = require('./_global');
        var core = require('./_core');
        var LIBRARY = require('./_library');
        var wksExt = require('./_wks-ext');
        var defineProperty = require('./_object-dp').f;
        module.exports = function (name) {
            var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
            if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {value: wksExt.f(name)});
        };

    }, {"./_core": 56, "./_global": 73, "./_library": 92, "./_object-dp": 104, "./_wks-ext": 157}],
    157: [function (require, module, exports) {
        exports.f = require('./_wks');

    }, {"./_wks": 158}],
    158: [function (require, module, exports) {
        var store = require('./_shared')('wks');
        var uid = require('./_uid');
        var Symbol = require('./_global').Symbol;
        var USE_SYMBOL = typeof Symbol == 'function';

        var $exports = module.exports = function (name) {
            return store[name] || (store[name] =
                USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
        };

        $exports.store = store;

    }, {"./_global": 73, "./_shared": 132, "./_uid": 153}],
    159: [function (require, module, exports) {
        var classof = require('./_classof');
        var ITERATOR = require('./_wks')('iterator');
        var Iterators = require('./_iterators');
        module.exports = require('./_core').getIteratorMethod = function (it) {
            if (it != undefined) return it[ITERATOR]
                || it['@@iterator']
                || Iterators[classof(it)];
        };

    }, {"./_classof": 50, "./_core": 56, "./_iterators": 91, "./_wks": 158}],
    160: [function (require, module, exports) {
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
        var $export = require('./_export');

        $export($export.P, 'Array', {copyWithin: require('./_array-copy-within')});

        require('./_add-to-unscopables')('copyWithin');

    }, {"./_add-to-unscopables": 38, "./_array-copy-within": 41, "./_export": 66}],
    161: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var $every = require('./_array-methods')(4);

        $export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
            // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
            every: function every(callbackfn /* , thisArg */) {
                return $every(this, callbackfn, arguments[1]);
            }
        });

    }, {"./_array-methods": 45, "./_export": 66, "./_strict-method": 134}],
    162: [function (require, module, exports) {
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
        var $export = require('./_export');

        $export($export.P, 'Array', {fill: require('./_array-fill')});

        require('./_add-to-unscopables')('fill');

    }, {"./_add-to-unscopables": 38, "./_array-fill": 42, "./_export": 66}],
    163: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var $filter = require('./_array-methods')(2);

        $export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
            // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
            filter: function filter(callbackfn /* , thisArg */) {
                return $filter(this, callbackfn, arguments[1]);
            }
        });

    }, {"./_array-methods": 45, "./_export": 66, "./_strict-method": 134}],
    164: [function (require, module, exports) {
        'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
        var $export = require('./_export');
        var $find = require('./_array-methods')(6);
        var KEY = 'findIndex';
        var forced = true;
// Shouldn't skip holes
        if (KEY in []) Array(1)[KEY](function () {
            forced = false;
        });
        $export($export.P + $export.F * forced, 'Array', {
            findIndex: function findIndex(callbackfn /* , that = undefined */) {
                return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
            }
        });
        require('./_add-to-unscopables')(KEY);

    }, {"./_add-to-unscopables": 38, "./_array-methods": 45, "./_export": 66}],
    165: [function (require, module, exports) {
        'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
        var $export = require('./_export');
        var $find = require('./_array-methods')(5);
        var KEY = 'find';
        var forced = true;
// Shouldn't skip holes
        if (KEY in []) Array(1)[KEY](function () {
            forced = false;
        });
        $export($export.P + $export.F * forced, 'Array', {
            find: function find(callbackfn /* , that = undefined */) {
                return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
            }
        });
        require('./_add-to-unscopables')(KEY);

    }, {"./_add-to-unscopables": 38, "./_array-methods": 45, "./_export": 66}],
    166: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var $forEach = require('./_array-methods')(0);
        var STRICT = require('./_strict-method')([].forEach, true);

        $export($export.P + $export.F * !STRICT, 'Array', {
            // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
            forEach: function forEach(callbackfn /* , thisArg */) {
                return $forEach(this, callbackfn, arguments[1]);
            }
        });

    }, {"./_array-methods": 45, "./_export": 66, "./_strict-method": 134}],
    167: [function (require, module, exports) {
        'use strict';
        var ctx = require('./_ctx');
        var $export = require('./_export');
        var toObject = require('./_to-object');
        var call = require('./_iter-call');
        var isArrayIter = require('./_is-array-iter');
        var toLength = require('./_to-length');
        var createProperty = require('./_create-property');
        var getIterFn = require('./core.get-iterator-method');

        $export($export.S + $export.F * !require('./_iter-detect')(function (iter) {
            Array.from(iter);
        }), 'Array', {
            // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
            from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
                var O = toObject(arrayLike);
                var C = typeof this == 'function' ? this : Array;
                var aLen = arguments.length;
                var mapfn = aLen > 1 ? arguments[1] : undefined;
                var mapping = mapfn !== undefined;
                var index = 0;
                var iterFn = getIterFn(O);
                var length, result, step, iterator;
                if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
                // if object isn't iterable or it's array with default iterator - use simple case
                if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                    for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
                        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
                    }
                } else {
                    length = toLength(O.length);
                    for (result = new C(length); length > index; index++) {
                        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
                    }
                }
                result.length = index;
                return result;
            }
        });

    }, {
        "./_create-property": 57,
        "./_ctx": 58,
        "./_export": 66,
        "./_is-array-iter": 81,
        "./_iter-call": 86,
        "./_iter-detect": 89,
        "./_to-length": 147,
        "./_to-object": 148,
        "./core.get-iterator-method": 159
    }],
    168: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var $indexOf = require('./_array-includes')(false);
        var $native = [].indexOf;
        var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

        $export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
            // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
            indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
                return NEGATIVE_ZERO
                    // convert -0 to +0
                    ? $native.apply(this, arguments) || 0
                    : $indexOf(this, searchElement, arguments[1]);
            }
        });

    }, {"./_array-includes": 44, "./_export": 66, "./_strict-method": 134}],
    169: [function (require, module, exports) {
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
        var $export = require('./_export');

        $export($export.S, 'Array', {isArray: require('./_is-array')});

    }, {"./_export": 66, "./_is-array": 82}],
    170: [function (require, module, exports) {
        'use strict';
        var addToUnscopables = require('./_add-to-unscopables');
        var step = require('./_iter-step');
        var Iterators = require('./_iterators');
        var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
        module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
            this._t = toIObject(iterated); // target
            this._i = 0;                   // next index
            this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
        }, function () {
            var O = this._t;
            var kind = this._k;
            var index = this._i++;
            if (!O || index >= O.length) {
                this._t = undefined;
                return step(1);
            }
            if (kind == 'keys') return step(0, index);
            if (kind == 'values') return step(0, O[index]);
            return step(0, [index, O[index]]);
        }, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
        Iterators.Arguments = Iterators.Array;

        addToUnscopables('keys');
        addToUnscopables('values');
        addToUnscopables('entries');

    }, {
        "./_add-to-unscopables": 38,
        "./_iter-define": 88,
        "./_iter-step": 90,
        "./_iterators": 91,
        "./_to-iobject": 146
    }],
    171: [function (require, module, exports) {
        'use strict';
// 22.1.3.13 Array.prototype.join(separator)
        var $export = require('./_export');
        var toIObject = require('./_to-iobject');
        var arrayJoin = [].join;

// fallback for not array-like strings
        $export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
            join: function join(separator) {
                return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
            }
        });

    }, {"./_export": 66, "./_iobject": 80, "./_strict-method": 134, "./_to-iobject": 146}],
    172: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var toIObject = require('./_to-iobject');
        var toInteger = require('./_to-integer');
        var toLength = require('./_to-length');
        var $native = [].lastIndexOf;
        var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

        $export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
            // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
            lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
                // convert -0 to +0
                if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
                var O = toIObject(this);
                var length = toLength(O.length);
                var index = length - 1;
                if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
                if (index < 0) index = length + index;
                for (; index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
                return -1;
            }
        });

    }, {"./_export": 66, "./_strict-method": 134, "./_to-integer": 145, "./_to-iobject": 146, "./_to-length": 147}],
    173: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var $map = require('./_array-methods')(1);

        $export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
            // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
            map: function map(callbackfn /* , thisArg */) {
                return $map(this, callbackfn, arguments[1]);
            }
        });

    }, {"./_array-methods": 45, "./_export": 66, "./_strict-method": 134}],
    174: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
        $export($export.S + $export.F * require('./_fails')(function () {
            function F() { /* empty */
            }

            return !(Array.of.call(F) instanceof F);
        }), 'Array', {
            // 22.1.2.3 Array.of( ...items)
            of: function of(/* ...args */) {
                var index = 0;
                var aLen = arguments.length;
                var result = new (typeof this == 'function' ? this : Array)(aLen);
                while (aLen > index) createProperty(result, index, arguments[index++]);
                result.length = aLen;
                return result;
            }
        });

    }, {"./_create-property": 57, "./_export": 66, "./_fails": 68}],
    175: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var $reduce = require('./_array-reduce');

        $export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
            // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
            reduceRight: function reduceRight(callbackfn /* , initialValue */) {
                return $reduce(this, callbackfn, arguments.length, arguments[1], true);
            }
        });

    }, {"./_array-reduce": 46, "./_export": 66, "./_strict-method": 134}],
    176: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var $reduce = require('./_array-reduce');

        $export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
            // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
            reduce: function reduce(callbackfn /* , initialValue */) {
                return $reduce(this, callbackfn, arguments.length, arguments[1], false);
            }
        });

    }, {"./_array-reduce": 46, "./_export": 66, "./_strict-method": 134}],
    177: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var html = require('./_html');
        var cof = require('./_cof');
        var toAbsoluteIndex = require('./_to-absolute-index');
        var toLength = require('./_to-length');
        var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
        $export($export.P + $export.F * require('./_fails')(function () {
            if (html) arraySlice.call(html);
        }), 'Array', {
            slice: function slice(begin, end) {
                var len = toLength(this.length);
                var klass = cof(this);
                end = end === undefined ? len : end;
                if (klass == 'Array') return arraySlice.call(this, begin, end);
                var start = toAbsoluteIndex(begin, len);
                var upTo = toAbsoluteIndex(end, len);
                var size = toLength(upTo - start);
                var cloned = new Array(size);
                var i = 0;
                for (; i < size; i++) cloned[i] = klass == 'String'
                    ? this.charAt(start + i)
                    : this[start + i];
                return cloned;
            }
        });

    }, {
        "./_cof": 51,
        "./_export": 66,
        "./_fails": 68,
        "./_html": 76,
        "./_to-absolute-index": 143,
        "./_to-length": 147
    }],
    178: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var $some = require('./_array-methods')(3);

        $export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
            // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
            some: function some(callbackfn /* , thisArg */) {
                return $some(this, callbackfn, arguments[1]);
            }
        });

    }, {"./_array-methods": 45, "./_export": 66, "./_strict-method": 134}],
    179: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var aFunction = require('./_a-function');
        var toObject = require('./_to-object');
        var fails = require('./_fails');
        var $sort = [].sort;
        var test = [1, 2, 3];

        $export($export.P + $export.F * (fails(function () {
            // IE8-
            test.sort(undefined);
        }) || !fails(function () {
            // V8 bug
            test.sort(null);
            // Old WebKit
        }) || !require('./_strict-method')($sort)), 'Array', {
            // 22.1.3.25 Array.prototype.sort(comparefn)
            sort: function sort(comparefn) {
                return comparefn === undefined
                    ? $sort.call(toObject(this))
                    : $sort.call(toObject(this), aFunction(comparefn));
            }
        });

    }, {"./_a-function": 36, "./_export": 66, "./_fails": 68, "./_strict-method": 134, "./_to-object": 148}],
    180: [function (require, module, exports) {
        require('./_set-species')('Array');

    }, {"./_set-species": 129}],
    181: [function (require, module, exports) {
// 20.3.3.1 / 15.9.4.4 Date.now()
        var $export = require('./_export');

        $export($export.S, 'Date', {
            now: function () {
                return new Date().getTime();
            }
        });

    }, {"./_export": 66}],
    182: [function (require, module, exports) {
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
        var $export = require('./_export');
        var toISOString = require('./_date-to-iso-string');

// PhantomJS / old WebKit has a broken implementations
        $export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
            toISOString: toISOString
        });

    }, {"./_date-to-iso-string": 59, "./_export": 66}],
    183: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var toObject = require('./_to-object');
        var toPrimitive = require('./_to-primitive');

        $export($export.P + $export.F * require('./_fails')(function () {
            return new Date(NaN).toJSON() !== null
                || Date.prototype.toJSON.call({
                    toISOString: function () {
                        return 1;
                    }
                }) !== 1;
        }), 'Date', {
            // eslint-disable-next-line no-unused-vars
            toJSON: function toJSON(key) {
                var O = toObject(this);
                var pv = toPrimitive(O);
                return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
            }
        });

    }, {"./_export": 66, "./_fails": 68, "./_to-object": 148, "./_to-primitive": 149}],
    184: [function (require, module, exports) {
        var TO_PRIMITIVE = require('./_wks')('toPrimitive');
        var proto = Date.prototype;

        if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

    }, {"./_date-to-primitive": 60, "./_hide": 75, "./_wks": 158}],
    185: [function (require, module, exports) {
        var DateProto = Date.prototype;
        var INVALID_DATE = 'Invalid Date';
        var TO_STRING = 'toString';
        var $toString = DateProto[TO_STRING];
        var getTime = DateProto.getTime;
        if (new Date(NaN) + '' != INVALID_DATE) {
            require('./_redefine')(DateProto, TO_STRING, function toString() {
                var value = getTime.call(this);
                // eslint-disable-next-line no-self-compare
                return value === value ? $toString.call(this) : INVALID_DATE;
            });
        }

    }, {"./_redefine": 124}],
    186: [function (require, module, exports) {
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
        var $export = require('./_export');

        $export($export.P, 'Function', {bind: require('./_bind')});

    }, {"./_bind": 49, "./_export": 66}],
    187: [function (require, module, exports) {
        'use strict';
        var isObject = require('./_is-object');
        var getPrototypeOf = require('./_object-gpo');
        var HAS_INSTANCE = require('./_wks')('hasInstance');
        var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
        if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {
            value: function (O) {
                if (typeof this != 'function' || !isObject(O)) return false;
                if (!isObject(this.prototype)) return O instanceof this;
                // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
                while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
                return false;
            }
        });

    }, {"./_is-object": 84, "./_object-dp": 104, "./_object-gpo": 111, "./_wks": 158}],
    188: [function (require, module, exports) {
        var dP = require('./_object-dp').f;
        var FProto = Function.prototype;
        var nameRE = /^\s*function ([^ (]*)/;
        var NAME = 'name';

// 19.2.4.2 name
        NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
            configurable: true,
            get: function () {
                try {
                    return ('' + this).match(nameRE)[1];
                } catch (e) {
                    return '';
                }
            }
        });

    }, {"./_descriptors": 62, "./_object-dp": 104}],
    189: [function (require, module, exports) {
        'use strict';
        var strong = require('./_collection-strong');
        var validate = require('./_validate-collection');
        var MAP = 'Map';

// 23.1 Map Objects
        module.exports = require('./_collection')(MAP, function (get) {
            return function Map() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
            };
        }, {
            // 23.1.3.6 Map.prototype.get(key)
            get: function get(key) {
                var entry = strong.getEntry(validate(this, MAP), key);
                return entry && entry.v;
            },
            // 23.1.3.9 Map.prototype.set(key, value)
            set: function set(key, value) {
                return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
            }
        }, strong, true);

    }, {"./_collection": 55, "./_collection-strong": 52, "./_validate-collection": 155}],
    190: [function (require, module, exports) {
// 20.2.2.3 Math.acosh(x)
        var $export = require('./_export');
        var log1p = require('./_math-log1p');
        var sqrt = Math.sqrt;
        var $acosh = Math.acosh;

        $export($export.S + $export.F * !($acosh
            // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
            && Math.floor($acosh(Number.MAX_VALUE)) == 710
            // Tor Browser bug: Math.acosh(Infinity) -> NaN
            && $acosh(Infinity) == Infinity
        ), 'Math', {
            acosh: function acosh(x) {
                return (x = +x) < 1 ? NaN : x > 94906265.62425156
                    ? Math.log(x) + Math.LN2
                    : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
            }
        });

    }, {"./_export": 66, "./_math-log1p": 95}],
    191: [function (require, module, exports) {
// 20.2.2.5 Math.asinh(x)
        var $export = require('./_export');
        var $asinh = Math.asinh;

        function asinh(x) {
            return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
        }

// Tor Browser bug: Math.asinh(0) -> -0
        $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});

    }, {"./_export": 66}],
    192: [function (require, module, exports) {
// 20.2.2.7 Math.atanh(x)
        var $export = require('./_export');
        var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
        $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
            atanh: function atanh(x) {
                return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
            }
        });

    }, {"./_export": 66}],
    193: [function (require, module, exports) {
// 20.2.2.9 Math.cbrt(x)
        var $export = require('./_export');
        var sign = require('./_math-sign');

        $export($export.S, 'Math', {
            cbrt: function cbrt(x) {
                return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
            }
        });

    }, {"./_export": 66, "./_math-sign": 97}],
    194: [function (require, module, exports) {
// 20.2.2.11 Math.clz32(x)
        var $export = require('./_export');

        $export($export.S, 'Math', {
            clz32: function clz32(x) {
                return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
            }
        });

    }, {"./_export": 66}],
    195: [function (require, module, exports) {
// 20.2.2.12 Math.cosh(x)
        var $export = require('./_export');
        var exp = Math.exp;

        $export($export.S, 'Math', {
            cosh: function cosh(x) {
                return (exp(x = +x) + exp(-x)) / 2;
            }
        });

    }, {"./_export": 66}],
    196: [function (require, module, exports) {
// 20.2.2.14 Math.expm1(x)
        var $export = require('./_export');
        var $expm1 = require('./_math-expm1');

        $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});

    }, {"./_export": 66, "./_math-expm1": 93}],
    197: [function (require, module, exports) {
// 20.2.2.16 Math.fround(x)
        var $export = require('./_export');

        $export($export.S, 'Math', {fround: require('./_math-fround')});

    }, {"./_export": 66, "./_math-fround": 94}],
    198: [function (require, module, exports) {
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
        var $export = require('./_export');
        var abs = Math.abs;

        $export($export.S, 'Math', {
            hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
                var sum = 0;
                var i = 0;
                var aLen = arguments.length;
                var larg = 0;
                var arg, div;
                while (i < aLen) {
                    arg = abs(arguments[i++]);
                    if (larg < arg) {
                        div = larg / arg;
                        sum = sum * div * div + 1;
                        larg = arg;
                    } else if (arg > 0) {
                        div = arg / larg;
                        sum += div * div;
                    } else sum += arg;
                }
                return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
            }
        });

    }, {"./_export": 66}],
    199: [function (require, module, exports) {
// 20.2.2.18 Math.imul(x, y)
        var $export = require('./_export');
        var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
        $export($export.S + $export.F * require('./_fails')(function () {
            return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
        }), 'Math', {
            imul: function imul(x, y) {
                var UINT16 = 0xffff;
                var xn = +x;
                var yn = +y;
                var xl = UINT16 & xn;
                var yl = UINT16 & yn;
                return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
            }
        });

    }, {"./_export": 66, "./_fails": 68}],
    200: [function (require, module, exports) {
// 20.2.2.21 Math.log10(x)
        var $export = require('./_export');

        $export($export.S, 'Math', {
            log10: function log10(x) {
                return Math.log(x) * Math.LOG10E;
            }
        });

    }, {"./_export": 66}],
    201: [function (require, module, exports) {
// 20.2.2.20 Math.log1p(x)
        var $export = require('./_export');

        $export($export.S, 'Math', {log1p: require('./_math-log1p')});

    }, {"./_export": 66, "./_math-log1p": 95}],
    202: [function (require, module, exports) {
// 20.2.2.22 Math.log2(x)
        var $export = require('./_export');

        $export($export.S, 'Math', {
            log2: function log2(x) {
                return Math.log(x) / Math.LN2;
            }
        });

    }, {"./_export": 66}],
    203: [function (require, module, exports) {
// 20.2.2.28 Math.sign(x)
        var $export = require('./_export');

        $export($export.S, 'Math', {sign: require('./_math-sign')});

    }, {"./_export": 66, "./_math-sign": 97}],
    204: [function (require, module, exports) {
// 20.2.2.30 Math.sinh(x)
        var $export = require('./_export');
        var expm1 = require('./_math-expm1');
        var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
        $export($export.S + $export.F * require('./_fails')(function () {
            return !Math.sinh(-2e-17) != -2e-17;
        }), 'Math', {
            sinh: function sinh(x) {
                return Math.abs(x = +x) < 1
                    ? (expm1(x) - expm1(-x)) / 2
                    : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
            }
        });

    }, {"./_export": 66, "./_fails": 68, "./_math-expm1": 93}],
    205: [function (require, module, exports) {
// 20.2.2.33 Math.tanh(x)
        var $export = require('./_export');
        var expm1 = require('./_math-expm1');
        var exp = Math.exp;

        $export($export.S, 'Math', {
            tanh: function tanh(x) {
                var a = expm1(x = +x);
                var b = expm1(-x);
                return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
            }
        });

    }, {"./_export": 66, "./_math-expm1": 93}],
    206: [function (require, module, exports) {
// 20.2.2.34 Math.trunc(x)
        var $export = require('./_export');

        $export($export.S, 'Math', {
            trunc: function trunc(it) {
                return (it > 0 ? Math.floor : Math.ceil)(it);
            }
        });

    }, {"./_export": 66}],
    207: [function (require, module, exports) {
        'use strict';
        var global = require('./_global');
        var has = require('./_has');
        var cof = require('./_cof');
        var inheritIfRequired = require('./_inherit-if-required');
        var toPrimitive = require('./_to-primitive');
        var fails = require('./_fails');
        var gOPN = require('./_object-gopn').f;
        var gOPD = require('./_object-gopd').f;
        var dP = require('./_object-dp').f;
        var $trim = require('./_string-trim').trim;
        var NUMBER = 'Number';
        var $Number = global[NUMBER];
        var Base = $Number;
        var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
        var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
        var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
        var toNumber = function (argument) {
            var it = toPrimitive(argument, false);
            if (typeof it == 'string' && it.length > 2) {
                it = TRIM ? it.trim() : $trim(it, 3);
                var first = it.charCodeAt(0);
                var third, radix, maxCode;
                if (first === 43 || first === 45) {
                    third = it.charCodeAt(2);
                    if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
                } else if (first === 48) {
                    switch (it.charCodeAt(1)) {
                        case 66:
                        case 98:
                            radix = 2;
                            maxCode = 49;
                            break; // fast equal /^0b[01]+$/i
                        case 79:
                        case 111:
                            radix = 8;
                            maxCode = 55;
                            break; // fast equal /^0o[0-7]+$/i
                        default:
                            return +it;
                    }
                    for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
                        code = digits.charCodeAt(i);
                        // parseInt parses a string to a first unavailable symbol
                        // but ToNumber should return NaN if a string contains unavailable symbols
                        if (code < 48 || code > maxCode) return NaN;
                    }
                    return parseInt(digits, radix);
                }
            }
            return +it;
        };

        if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
            $Number = function Number(value) {
                var it = arguments.length < 1 ? 0 : value;
                var that = this;
                return that instanceof $Number
                // check on 1..constructor(foo) case
                && (BROKEN_COF ? fails(function () {
                    proto.valueOf.call(that);
                }) : cof(that) != NUMBER)
                    ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
            };
            for (var keys = require('./_descriptors') ? gOPN(Base) : (
                // ES3:
                'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
                // ES6 (in case, if modules with ES6 Number statics required before):
                'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
                'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
            ).split(','), j = 0, key; keys.length > j; j++) {
                if (has(Base, key = keys[j]) && !has($Number, key)) {
                    dP($Number, key, gOPD(Base, key));
                }
            }
            $Number.prototype = proto;
            proto.constructor = $Number;
            require('./_redefine')(global, NUMBER, $Number);
        }

    }, {
        "./_cof": 51,
        "./_descriptors": 62,
        "./_fails": 68,
        "./_global": 73,
        "./_has": 74,
        "./_inherit-if-required": 78,
        "./_object-create": 103,
        "./_object-dp": 104,
        "./_object-gopd": 107,
        "./_object-gopn": 109,
        "./_redefine": 124,
        "./_string-trim": 140,
        "./_to-primitive": 149
    }],
    208: [function (require, module, exports) {
// 20.1.2.1 Number.EPSILON
        var $export = require('./_export');

        $export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});

    }, {"./_export": 66}],
    209: [function (require, module, exports) {
// 20.1.2.2 Number.isFinite(number)
        var $export = require('./_export');
        var _isFinite = require('./_global').isFinite;

        $export($export.S, 'Number', {
            isFinite: function isFinite(it) {
                return typeof it == 'number' && _isFinite(it);
            }
        });

    }, {"./_export": 66, "./_global": 73}],
    210: [function (require, module, exports) {
// 20.1.2.3 Number.isInteger(number)
        var $export = require('./_export');

        $export($export.S, 'Number', {isInteger: require('./_is-integer')});

    }, {"./_export": 66, "./_is-integer": 83}],
    211: [function (require, module, exports) {
// 20.1.2.4 Number.isNaN(number)
        var $export = require('./_export');

        $export($export.S, 'Number', {
            isNaN: function isNaN(number) {
                // eslint-disable-next-line no-self-compare
                return number != number;
            }
        });

    }, {"./_export": 66}],
    212: [function (require, module, exports) {
// 20.1.2.5 Number.isSafeInteger(number)
        var $export = require('./_export');
        var isInteger = require('./_is-integer');
        var abs = Math.abs;

        $export($export.S, 'Number', {
            isSafeInteger: function isSafeInteger(number) {
                return isInteger(number) && abs(number) <= 0x1fffffffffffff;
            }
        });

    }, {"./_export": 66, "./_is-integer": 83}],
    213: [function (require, module, exports) {
// 20.1.2.6 Number.MAX_SAFE_INTEGER
        var $export = require('./_export');

        $export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

    }, {"./_export": 66}],
    214: [function (require, module, exports) {
// 20.1.2.10 Number.MIN_SAFE_INTEGER
        var $export = require('./_export');

        $export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});

    }, {"./_export": 66}],
    215: [function (require, module, exports) {
        var $export = require('./_export');
        var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
        $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});

    }, {"./_export": 66, "./_parse-float": 118}],
    216: [function (require, module, exports) {
        var $export = require('./_export');
        var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
        $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});

    }, {"./_export": 66, "./_parse-int": 119}],
    217: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var toInteger = require('./_to-integer');
        var aNumberValue = require('./_a-number-value');
        var repeat = require('./_string-repeat');
        var $toFixed = 1.0.toFixed;
        var floor = Math.floor;
        var data = [0, 0, 0, 0, 0, 0];
        var ERROR = 'Number.toFixed: incorrect invocation!';
        var ZERO = '0';

        var multiply = function (n, c) {
            var i = -1;
            var c2 = c;
            while (++i < 6) {
                c2 += n * data[i];
                data[i] = c2 % 1e7;
                c2 = floor(c2 / 1e7);
            }
        };
        var divide = function (n) {
            var i = 6;
            var c = 0;
            while (--i >= 0) {
                c += data[i];
                data[i] = floor(c / n);
                c = (c % n) * 1e7;
            }
        };
        var numToString = function () {
            var i = 6;
            var s = '';
            while (--i >= 0) {
                if (s !== '' || i === 0 || data[i] !== 0) {
                    var t = String(data[i]);
                    s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
                }
            }
            return s;
        };
        var pow = function (x, n, acc) {
            return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
        };
        var log = function (x) {
            var n = 0;
            var x2 = x;
            while (x2 >= 4096) {
                n += 12;
                x2 /= 4096;
            }
            while (x2 >= 2) {
                n += 1;
                x2 /= 2;
            }
            return n;
        };

        $export($export.P + $export.F * (!!$toFixed && (
            0.00008.toFixed(3) !== '0.000' ||
            0.9.toFixed(0) !== '1' ||
            1.255.toFixed(2) !== '1.25' ||
            1000000000000000128.0.toFixed(0) !== '1000000000000000128'
        ) || !require('./_fails')(function () {
            // V8 ~ Android 4.3-
            $toFixed.call({});
        })), 'Number', {
            toFixed: function toFixed(fractionDigits) {
                var x = aNumberValue(this, ERROR);
                var f = toInteger(fractionDigits);
                var s = '';
                var m = ZERO;
                var e, z, j, k;
                if (f < 0 || f > 20) throw RangeError(ERROR);
                // eslint-disable-next-line no-self-compare
                if (x != x) return 'NaN';
                if (x <= -1e21 || x >= 1e21) return String(x);
                if (x < 0) {
                    s = '-';
                    x = -x;
                }
                if (x > 1e-21) {
                    e = log(x * pow(2, 69, 1)) - 69;
                    z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
                    z *= 0x10000000000000;
                    e = 52 - e;
                    if (e > 0) {
                        multiply(0, z);
                        j = f;
                        while (j >= 7) {
                            multiply(1e7, 0);
                            j -= 7;
                        }
                        multiply(pow(10, j, 1), 0);
                        j = e - 1;
                        while (j >= 23) {
                            divide(1 << 23);
                            j -= 23;
                        }
                        divide(1 << j);
                        multiply(1, 1);
                        divide(2);
                        m = numToString();
                    } else {
                        multiply(0, z);
                        multiply(1 << -e, 0);
                        m = numToString() + repeat.call(ZERO, f);
                    }
                }
                if (f > 0) {
                    k = m.length;
                    m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
                } else {
                    m = s + m;
                }
                return m;
            }
        });

    }, {"./_a-number-value": 37, "./_export": 66, "./_fails": 68, "./_string-repeat": 139, "./_to-integer": 145}],
    218: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var $fails = require('./_fails');
        var aNumberValue = require('./_a-number-value');
        var $toPrecision = 1.0.toPrecision;

        $export($export.P + $export.F * ($fails(function () {
            // IE7-
            return $toPrecision.call(1, undefined) !== '1';
        }) || !$fails(function () {
            // V8 ~ Android 4.3-
            $toPrecision.call({});
        })), 'Number', {
            toPrecision: function toPrecision(precision) {
                var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
                return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
            }
        });

    }, {"./_a-number-value": 37, "./_export": 66, "./_fails": 68}],
    219: [function (require, module, exports) {
// 19.1.3.1 Object.assign(target, source)
        var $export = require('./_export');

        $export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});

    }, {"./_export": 66, "./_object-assign": 102}],
    220: [function (require, module, exports) {
        var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
        $export($export.S, 'Object', {create: require('./_object-create')});

    }, {"./_export": 66, "./_object-create": 103}],
    221: [function (require, module, exports) {
        var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
        $export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperties: require('./_object-dps')});

    }, {"./_descriptors": 62, "./_export": 66, "./_object-dps": 105}],
    222: [function (require, module, exports) {
        var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
        $export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});

    }, {"./_descriptors": 62, "./_export": 66, "./_object-dp": 104}],
    223: [function (require, module, exports) {
// 19.1.2.5 Object.freeze(O)
        var isObject = require('./_is-object');
        var meta = require('./_meta').onFreeze;

        require('./_object-sap')('freeze', function ($freeze) {
            return function freeze(it) {
                return $freeze && isObject(it) ? $freeze(meta(it)) : it;
            };
        });

    }, {"./_is-object": 84, "./_meta": 98, "./_object-sap": 115}],
    224: [function (require, module, exports) {
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
        var toIObject = require('./_to-iobject');
        var $getOwnPropertyDescriptor = require('./_object-gopd').f;

        require('./_object-sap')('getOwnPropertyDescriptor', function () {
            return function getOwnPropertyDescriptor(it, key) {
                return $getOwnPropertyDescriptor(toIObject(it), key);
            };
        });

    }, {"./_object-gopd": 107, "./_object-sap": 115, "./_to-iobject": 146}],
    225: [function (require, module, exports) {
// 19.1.2.7 Object.getOwnPropertyNames(O)
        require('./_object-sap')('getOwnPropertyNames', function () {
            return require('./_object-gopn-ext').f;
        });

    }, {"./_object-gopn-ext": 108, "./_object-sap": 115}],
    226: [function (require, module, exports) {
// 19.1.2.9 Object.getPrototypeOf(O)
        var toObject = require('./_to-object');
        var $getPrototypeOf = require('./_object-gpo');

        require('./_object-sap')('getPrototypeOf', function () {
            return function getPrototypeOf(it) {
                return $getPrototypeOf(toObject(it));
            };
        });

    }, {"./_object-gpo": 111, "./_object-sap": 115, "./_to-object": 148}],
    227: [function (require, module, exports) {
// 19.1.2.11 Object.isExtensible(O)
        var isObject = require('./_is-object');

        require('./_object-sap')('isExtensible', function ($isExtensible) {
            return function isExtensible(it) {
                return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
            };
        });

    }, {"./_is-object": 84, "./_object-sap": 115}],
    228: [function (require, module, exports) {
// 19.1.2.12 Object.isFrozen(O)
        var isObject = require('./_is-object');

        require('./_object-sap')('isFrozen', function ($isFrozen) {
            return function isFrozen(it) {
                return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
            };
        });

    }, {"./_is-object": 84, "./_object-sap": 115}],
    229: [function (require, module, exports) {
// 19.1.2.13 Object.isSealed(O)
        var isObject = require('./_is-object');

        require('./_object-sap')('isSealed', function ($isSealed) {
            return function isSealed(it) {
                return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
            };
        });

    }, {"./_is-object": 84, "./_object-sap": 115}],
    230: [function (require, module, exports) {
// 19.1.3.10 Object.is(value1, value2)
        var $export = require('./_export');
        $export($export.S, 'Object', {is: require('./_same-value')});

    }, {"./_export": 66, "./_same-value": 125}],
    231: [function (require, module, exports) {
// 19.1.2.14 Object.keys(O)
        var toObject = require('./_to-object');
        var $keys = require('./_object-keys');

        require('./_object-sap')('keys', function () {
            return function keys(it) {
                return $keys(toObject(it));
            };
        });

    }, {"./_object-keys": 113, "./_object-sap": 115, "./_to-object": 148}],
    232: [function (require, module, exports) {
// 19.1.2.15 Object.preventExtensions(O)
        var isObject = require('./_is-object');
        var meta = require('./_meta').onFreeze;

        require('./_object-sap')('preventExtensions', function ($preventExtensions) {
            return function preventExtensions(it) {
                return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
            };
        });

    }, {"./_is-object": 84, "./_meta": 98, "./_object-sap": 115}],
    233: [function (require, module, exports) {
// 19.1.2.17 Object.seal(O)
        var isObject = require('./_is-object');
        var meta = require('./_meta').onFreeze;

        require('./_object-sap')('seal', function ($seal) {
            return function seal(it) {
                return $seal && isObject(it) ? $seal(meta(it)) : it;
            };
        });

    }, {"./_is-object": 84, "./_meta": 98, "./_object-sap": 115}],
    234: [function (require, module, exports) {
// 19.1.3.19 Object.setPrototypeOf(O, proto)
        var $export = require('./_export');
        $export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});

    }, {"./_export": 66, "./_set-proto": 128}],
    235: [function (require, module, exports) {
        'use strict';
// 19.1.3.6 Object.prototype.toString()
        var classof = require('./_classof');
        var test = {};
        test[require('./_wks')('toStringTag')] = 'z';
        if (test + '' != '[object z]') {
            require('./_redefine')(Object.prototype, 'toString', function toString() {
                return '[object ' + classof(this) + ']';
            }, true);
        }

    }, {"./_classof": 50, "./_redefine": 124, "./_wks": 158}],
    236: [function (require, module, exports) {
        var $export = require('./_export');
        var $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
        $export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});

    }, {"./_export": 66, "./_parse-float": 118}],
    237: [function (require, module, exports) {
        var $export = require('./_export');
        var $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
        $export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});

    }, {"./_export": 66, "./_parse-int": 119}],
    238: [function (require, module, exports) {
        'use strict';
        var LIBRARY = require('./_library');
        var global = require('./_global');
        var ctx = require('./_ctx');
        var classof = require('./_classof');
        var $export = require('./_export');
        var isObject = require('./_is-object');
        var aFunction = require('./_a-function');
        var anInstance = require('./_an-instance');
        var forOf = require('./_for-of');
        var speciesConstructor = require('./_species-constructor');
        var task = require('./_task').set;
        var microtask = require('./_microtask')();
        var newPromiseCapabilityModule = require('./_new-promise-capability');
        var perform = require('./_perform');
        var promiseResolve = require('./_promise-resolve');
        var PROMISE = 'Promise';
        var TypeError = global.TypeError;
        var process = global.process;
        var $Promise = global[PROMISE];
        var isNode = classof(process) == 'process';
        var empty = function () { /* empty */
        };
        var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
        var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

        var USE_NATIVE = !!function () {
            try {
                // correct subclassing with @@species support
                var promise = $Promise.resolve(1);
                var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
                    exec(empty, empty);
                };
                // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
                return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
            } catch (e) { /* empty */
            }
        }();

// helpers
        var isThenable = function (it) {
            var then;
            return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
        };
        var notify = function (promise, isReject) {
            if (promise._n) return;
            promise._n = true;
            var chain = promise._c;
            microtask(function () {
                var value = promise._v;
                var ok = promise._s == 1;
                var i = 0;
                var run = function (reaction) {
                    var handler = ok ? reaction.ok : reaction.fail;
                    var resolve = reaction.resolve;
                    var reject = reaction.reject;
                    var domain = reaction.domain;
                    var result, then;
                    try {
                        if (handler) {
                            if (!ok) {
                                if (promise._h == 2) onHandleUnhandled(promise);
                                promise._h = 1;
                            }
                            if (handler === true) result = value;
                            else {
                                if (domain) domain.enter();
                                result = handler(value);
                                if (domain) domain.exit();
                            }
                            if (result === reaction.promise) {
                                reject(TypeError('Promise-chain cycle'));
                            } else if (then = isThenable(result)) {
                                then.call(result, resolve, reject);
                            } else resolve(result);
                        } else reject(value);
                    } catch (e) {
                        reject(e);
                    }
                };
                while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
                promise._c = [];
                promise._n = false;
                if (isReject && !promise._h) onUnhandled(promise);
            });
        };
        var onUnhandled = function (promise) {
            task.call(global, function () {
                var value = promise._v;
                var unhandled = isUnhandled(promise);
                var result, handler, console;
                if (unhandled) {
                    result = perform(function () {
                        if (isNode) {
                            process.emit('unhandledRejection', value, promise);
                        } else if (handler = global.onunhandledrejection) {
                            handler({promise: promise, reason: value});
                        } else if ((console = global.console) && console.error) {
                            console.error('Unhandled promise rejection', value);
                        }
                    });
                    // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
                    promise._h = isNode || isUnhandled(promise) ? 2 : 1;
                }
                promise._a = undefined;
                if (unhandled && result.e) throw result.v;
            });
        };
        var isUnhandled = function (promise) {
            return promise._h !== 1 && (promise._a || promise._c).length === 0;
        };
        var onHandleUnhandled = function (promise) {
            task.call(global, function () {
                var handler;
                if (isNode) {
                    process.emit('rejectionHandled', promise);
                } else if (handler = global.onrejectionhandled) {
                    handler({promise: promise, reason: promise._v});
                }
            });
        };
        var $reject = function (value) {
            var promise = this;
            if (promise._d) return;
            promise._d = true;
            promise = promise._w || promise; // unwrap
            promise._v = value;
            promise._s = 2;
            if (!promise._a) promise._a = promise._c.slice();
            notify(promise, true);
        };
        var $resolve = function (value) {
            var promise = this;
            var then;
            if (promise._d) return;
            promise._d = true;
            promise = promise._w || promise; // unwrap
            try {
                if (promise === value) throw TypeError("Promise can't be resolved itself");
                if (then = isThenable(value)) {
                    microtask(function () {
                        var wrapper = {_w: promise, _d: false}; // wrap
                        try {
                            then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
                        } catch (e) {
                            $reject.call(wrapper, e);
                        }
                    });
                } else {
                    promise._v = value;
                    promise._s = 1;
                    notify(promise, false);
                }
            } catch (e) {
                $reject.call({_w: promise, _d: false}, e); // wrap
            }
        };

// constructor polyfill
        if (!USE_NATIVE) {
            // 25.4.3.1 Promise(executor)
            $Promise = function Promise(executor) {
                anInstance(this, $Promise, PROMISE, '_h');
                aFunction(executor);
                Internal.call(this);
                try {
                    executor(ctx($resolve, this, 1), ctx($reject, this, 1));
                } catch (err) {
                    $reject.call(this, err);
                }
            };
            // eslint-disable-next-line no-unused-vars
            Internal = function Promise(executor) {
                this._c = [];             // <- awaiting reactions
                this._a = undefined;      // <- checked in isUnhandled reactions
                this._s = 0;              // <- state
                this._d = false;          // <- done
                this._v = undefined;      // <- value
                this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
                this._n = false;          // <- notify
            };
            Internal.prototype = require('./_redefine-all')($Promise.prototype, {
                // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
                then: function then(onFulfilled, onRejected) {
                    var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
                    reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
                    reaction.fail = typeof onRejected == 'function' && onRejected;
                    reaction.domain = isNode ? process.domain : undefined;
                    this._c.push(reaction);
                    if (this._a) this._a.push(reaction);
                    if (this._s) notify(this, false);
                    return reaction.promise;
                },
                // 25.4.5.1 Promise.prototype.catch(onRejected)
                'catch': function (onRejected) {
                    return this.then(undefined, onRejected);
                }
            });
            OwnPromiseCapability = function () {
                var promise = new Internal();
                this.promise = promise;
                this.resolve = ctx($resolve, promise, 1);
                this.reject = ctx($reject, promise, 1);
            };
            newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
                return C === $Promise || C === Wrapper
                    ? new OwnPromiseCapability(C)
                    : newGenericPromiseCapability(C);
            };
        }

        $export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
        require('./_set-to-string-tag')($Promise, PROMISE);
        require('./_set-species')(PROMISE);
        Wrapper = require('./_core')[PROMISE];

// statics
        $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
            // 25.4.4.5 Promise.reject(r)
            reject: function reject(r) {
                var capability = newPromiseCapability(this);
                var $$reject = capability.reject;
                $$reject(r);
                return capability.promise;
            }
        });
        $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
            // 25.4.4.6 Promise.resolve(x)
            resolve: function resolve(x) {
                return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
            }
        });
        $export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
            $Promise.all(iter)['catch'](empty);
        })), PROMISE, {
            // 25.4.4.1 Promise.all(iterable)
            all: function all(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var resolve = capability.resolve;
                var reject = capability.reject;
                var result = perform(function () {
                    var values = [];
                    var index = 0;
                    var remaining = 1;
                    forOf(iterable, false, function (promise) {
                        var $index = index++;
                        var alreadyCalled = false;
                        values.push(undefined);
                        remaining++;
                        C.resolve(promise).then(function (value) {
                            if (alreadyCalled) return;
                            alreadyCalled = true;
                            values[$index] = value;
                            --remaining || resolve(values);
                        }, reject);
                    });
                    --remaining || resolve(values);
                });
                if (result.e) reject(result.v);
                return capability.promise;
            },
            // 25.4.4.4 Promise.race(iterable)
            race: function race(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var reject = capability.reject;
                var result = perform(function () {
                    forOf(iterable, false, function (promise) {
                        C.resolve(promise).then(capability.resolve, reject);
                    });
                });
                if (result.e) reject(result.v);
                return capability.promise;
            }
        });

    }, {
        "./_a-function": 36,
        "./_an-instance": 39,
        "./_classof": 50,
        "./_core": 56,
        "./_ctx": 58,
        "./_export": 66,
        "./_for-of": 72,
        "./_global": 73,
        "./_is-object": 84,
        "./_iter-detect": 89,
        "./_library": 92,
        "./_microtask": 100,
        "./_new-promise-capability": 101,
        "./_perform": 120,
        "./_promise-resolve": 121,
        "./_redefine-all": 123,
        "./_set-species": 129,
        "./_set-to-string-tag": 130,
        "./_species-constructor": 133,
        "./_task": 142,
        "./_wks": 158
    }],
    239: [function (require, module, exports) {
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
        var $export = require('./_export');
        var aFunction = require('./_a-function');
        var anObject = require('./_an-object');
        var rApply = (require('./_global').Reflect || {}).apply;
        var fApply = Function.apply;
// MS Edge argumentsList argument is optional
        $export($export.S + $export.F * !require('./_fails')(function () {
            rApply(function () { /* empty */
            });
        }), 'Reflect', {
            apply: function apply(target, thisArgument, argumentsList) {
                var T = aFunction(target);
                var L = anObject(argumentsList);
                return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
            }
        });

    }, {"./_a-function": 36, "./_an-object": 40, "./_export": 66, "./_fails": 68, "./_global": 73}],
    240: [function (require, module, exports) {
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
        var $export = require('./_export');
        var create = require('./_object-create');
        var aFunction = require('./_a-function');
        var anObject = require('./_an-object');
        var isObject = require('./_is-object');
        var fails = require('./_fails');
        var bind = require('./_bind');
        var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
        var NEW_TARGET_BUG = fails(function () {
            function F() { /* empty */
            }

            return !(rConstruct(function () { /* empty */
            }, [], F) instanceof F);
        });
        var ARGS_BUG = !fails(function () {
            rConstruct(function () { /* empty */
            });
        });

        $export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
            construct: function construct(Target, args /* , newTarget */) {
                aFunction(Target);
                anObject(args);
                var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
                if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
                if (Target == newTarget) {
                    // w/o altered newTarget, optimization for 0-4 arguments
                    switch (args.length) {
                        case 0:
                            return new Target();
                        case 1:
                            return new Target(args[0]);
                        case 2:
                            return new Target(args[0], args[1]);
                        case 3:
                            return new Target(args[0], args[1], args[2]);
                        case 4:
                            return new Target(args[0], args[1], args[2], args[3]);
                    }
                    // w/o altered newTarget, lot of arguments case
                    var $args = [null];
                    $args.push.apply($args, args);
                    return new (bind.apply(Target, $args))();
                }
                // with altered newTarget, not support built-in constructors
                var proto = newTarget.prototype;
                var instance = create(isObject(proto) ? proto : Object.prototype);
                var result = Function.apply.call(Target, instance, args);
                return isObject(result) ? result : instance;
            }
        });

    }, {
        "./_a-function": 36,
        "./_an-object": 40,
        "./_bind": 49,
        "./_export": 66,
        "./_fails": 68,
        "./_global": 73,
        "./_is-object": 84,
        "./_object-create": 103
    }],
    241: [function (require, module, exports) {
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
        var dP = require('./_object-dp');
        var $export = require('./_export');
        var anObject = require('./_an-object');
        var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
        $export($export.S + $export.F * require('./_fails')(function () {
            // eslint-disable-next-line no-undef
            Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
        }), 'Reflect', {
            defineProperty: function defineProperty(target, propertyKey, attributes) {
                anObject(target);
                propertyKey = toPrimitive(propertyKey, true);
                anObject(attributes);
                try {
                    dP.f(target, propertyKey, attributes);
                    return true;
                } catch (e) {
                    return false;
                }
            }
        });

    }, {"./_an-object": 40, "./_export": 66, "./_fails": 68, "./_object-dp": 104, "./_to-primitive": 149}],
    242: [function (require, module, exports) {
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
        var $export = require('./_export');
        var gOPD = require('./_object-gopd').f;
        var anObject = require('./_an-object');

        $export($export.S, 'Reflect', {
            deleteProperty: function deleteProperty(target, propertyKey) {
                var desc = gOPD(anObject(target), propertyKey);
                return desc && !desc.configurable ? false : delete target[propertyKey];
            }
        });

    }, {"./_an-object": 40, "./_export": 66, "./_object-gopd": 107}],
    243: [function (require, module, exports) {
        'use strict';
// 26.1.5 Reflect.enumerate(target)
        var $export = require('./_export');
        var anObject = require('./_an-object');
        var Enumerate = function (iterated) {
            this._t = anObject(iterated); // target
            this._i = 0;                  // next index
            var keys = this._k = [];      // keys
            var key;
            for (key in iterated) keys.push(key);
        };
        require('./_iter-create')(Enumerate, 'Object', function () {
            var that = this;
            var keys = that._k;
            var key;
            do {
                if (that._i >= keys.length) return {value: undefined, done: true};
            } while (!((key = keys[that._i++]) in that._t));
            return {value: key, done: false};
        });

        $export($export.S, 'Reflect', {
            enumerate: function enumerate(target) {
                return new Enumerate(target);
            }
        });

    }, {"./_an-object": 40, "./_export": 66, "./_iter-create": 87}],
    244: [function (require, module, exports) {
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
        var gOPD = require('./_object-gopd');
        var $export = require('./_export');
        var anObject = require('./_an-object');

        $export($export.S, 'Reflect', {
            getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
                return gOPD.f(anObject(target), propertyKey);
            }
        });

    }, {"./_an-object": 40, "./_export": 66, "./_object-gopd": 107}],
    245: [function (require, module, exports) {
// 26.1.8 Reflect.getPrototypeOf(target)
        var $export = require('./_export');
        var getProto = require('./_object-gpo');
        var anObject = require('./_an-object');

        $export($export.S, 'Reflect', {
            getPrototypeOf: function getPrototypeOf(target) {
                return getProto(anObject(target));
            }
        });

    }, {"./_an-object": 40, "./_export": 66, "./_object-gpo": 111}],
    246: [function (require, module, exports) {
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
        var gOPD = require('./_object-gopd');
        var getPrototypeOf = require('./_object-gpo');
        var has = require('./_has');
        var $export = require('./_export');
        var isObject = require('./_is-object');
        var anObject = require('./_an-object');

        function get(target, propertyKey /* , receiver */) {
            var receiver = arguments.length < 3 ? target : arguments[2];
            var desc, proto;
            if (anObject(target) === receiver) return target[propertyKey];
            if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
                ? desc.value
                : desc.get !== undefined
                    ? desc.get.call(receiver)
                    : undefined;
            if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
        }

        $export($export.S, 'Reflect', {get: get});

    }, {
        "./_an-object": 40,
        "./_export": 66,
        "./_has": 74,
        "./_is-object": 84,
        "./_object-gopd": 107,
        "./_object-gpo": 111
    }],
    247: [function (require, module, exports) {
// 26.1.9 Reflect.has(target, propertyKey)
        var $export = require('./_export');

        $export($export.S, 'Reflect', {
            has: function has(target, propertyKey) {
                return propertyKey in target;
            }
        });

    }, {"./_export": 66}],
    248: [function (require, module, exports) {
// 26.1.10 Reflect.isExtensible(target)
        var $export = require('./_export');
        var anObject = require('./_an-object');
        var $isExtensible = Object.isExtensible;

        $export($export.S, 'Reflect', {
            isExtensible: function isExtensible(target) {
                anObject(target);
                return $isExtensible ? $isExtensible(target) : true;
            }
        });

    }, {"./_an-object": 40, "./_export": 66}],
    249: [function (require, module, exports) {
// 26.1.11 Reflect.ownKeys(target)
        var $export = require('./_export');

        $export($export.S, 'Reflect', {ownKeys: require('./_own-keys')});

    }, {"./_export": 66, "./_own-keys": 117}],
    250: [function (require, module, exports) {
// 26.1.12 Reflect.preventExtensions(target)
        var $export = require('./_export');
        var anObject = require('./_an-object');
        var $preventExtensions = Object.preventExtensions;

        $export($export.S, 'Reflect', {
            preventExtensions: function preventExtensions(target) {
                anObject(target);
                try {
                    if ($preventExtensions) $preventExtensions(target);
                    return true;
                } catch (e) {
                    return false;
                }
            }
        });

    }, {"./_an-object": 40, "./_export": 66}],
    251: [function (require, module, exports) {
// 26.1.14 Reflect.setPrototypeOf(target, proto)
        var $export = require('./_export');
        var setProto = require('./_set-proto');

        if (setProto) $export($export.S, 'Reflect', {
            setPrototypeOf: function setPrototypeOf(target, proto) {
                setProto.check(target, proto);
                try {
                    setProto.set(target, proto);
                    return true;
                } catch (e) {
                    return false;
                }
            }
        });

    }, {"./_export": 66, "./_set-proto": 128}],
    252: [function (require, module, exports) {
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
        var dP = require('./_object-dp');
        var gOPD = require('./_object-gopd');
        var getPrototypeOf = require('./_object-gpo');
        var has = require('./_has');
        var $export = require('./_export');
        var createDesc = require('./_property-desc');
        var anObject = require('./_an-object');
        var isObject = require('./_is-object');

        function set(target, propertyKey, V /* , receiver */) {
            var receiver = arguments.length < 4 ? target : arguments[3];
            var ownDesc = gOPD.f(anObject(target), propertyKey);
            var existingDescriptor, proto;
            if (!ownDesc) {
                if (isObject(proto = getPrototypeOf(target))) {
                    return set(proto, propertyKey, V, receiver);
                }
                ownDesc = createDesc(0);
            }
            if (has(ownDesc, 'value')) {
                if (ownDesc.writable === false || !isObject(receiver)) return false;
                existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
                existingDescriptor.value = V;
                dP.f(receiver, propertyKey, existingDescriptor);
                return true;
            }
            return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
        }

        $export($export.S, 'Reflect', {set: set});

    }, {
        "./_an-object": 40,
        "./_export": 66,
        "./_has": 74,
        "./_is-object": 84,
        "./_object-dp": 104,
        "./_object-gopd": 107,
        "./_object-gpo": 111,
        "./_property-desc": 122
    }],
    253: [function (require, module, exports) {
        var global = require('./_global');
        var inheritIfRequired = require('./_inherit-if-required');
        var dP = require('./_object-dp').f;
        var gOPN = require('./_object-gopn').f;
        var isRegExp = require('./_is-regexp');
        var $flags = require('./_flags');
        var $RegExp = global.RegExp;
        var Base = $RegExp;
        var proto = $RegExp.prototype;
        var re1 = /a/g;
        var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
        var CORRECT_NEW = new $RegExp(re1) !== re1;

        if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
            re2[require('./_wks')('match')] = false;
            // RegExp constructor can alter flags and IsRegExp works correct with @@match
            return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
        }))) {
            $RegExp = function RegExp(p, f) {
                var tiRE = this instanceof $RegExp;
                var piRE = isRegExp(p);
                var fiU = f === undefined;
                return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
                    : inheritIfRequired(CORRECT_NEW
                        ? new Base(piRE && !fiU ? p.source : p, f)
                        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
                        , tiRE ? this : proto, $RegExp);
            };
            var proxy = function (key) {
                key in $RegExp || dP($RegExp, key, {
                    configurable: true,
                    get: function () {
                        return Base[key];
                    },
                    set: function (it) {
                        Base[key] = it;
                    }
                });
            };
            for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
            proto.constructor = $RegExp;
            $RegExp.prototype = proto;
            require('./_redefine')(global, 'RegExp', $RegExp);
        }

        require('./_set-species')('RegExp');

    }, {
        "./_descriptors": 62,
        "./_fails": 68,
        "./_flags": 70,
        "./_global": 73,
        "./_inherit-if-required": 78,
        "./_is-regexp": 85,
        "./_object-dp": 104,
        "./_object-gopn": 109,
        "./_redefine": 124,
        "./_set-species": 129,
        "./_wks": 158
    }],
    254: [function (require, module, exports) {
// 21.2.5.3 get RegExp.prototype.flags()
        if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
            configurable: true,
            get: require('./_flags')
        });

    }, {"./_descriptors": 62, "./_flags": 70, "./_object-dp": 104}],
    255: [function (require, module, exports) {
// @@match logic
        require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {
            // 21.1.3.11 String.prototype.match(regexp)
            return [function match(regexp) {
                'use strict';
                var O = defined(this);
                var fn = regexp == undefined ? undefined : regexp[MATCH];
                return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
            }, $match];
        });

    }, {"./_fix-re-wks": 69}],
    256: [function (require, module, exports) {
// @@replace logic
        require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {
            // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
            return [function replace(searchValue, replaceValue) {
                'use strict';
                var O = defined(this);
                var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
                return fn !== undefined
                    ? fn.call(searchValue, O, replaceValue)
                    : $replace.call(String(O), searchValue, replaceValue);
            }, $replace];
        });

    }, {"./_fix-re-wks": 69}],
    257: [function (require, module, exports) {
// @@search logic
        require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {
            // 21.1.3.15 String.prototype.search(regexp)
            return [function search(regexp) {
                'use strict';
                var O = defined(this);
                var fn = regexp == undefined ? undefined : regexp[SEARCH];
                return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
            }, $search];
        });

    }, {"./_fix-re-wks": 69}],
    258: [function (require, module, exports) {
// @@split logic
        require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {
            'use strict';
            var isRegExp = require('./_is-regexp');
            var _split = $split;
            var $push = [].push;
            var $SPLIT = 'split';
            var LENGTH = 'length';
            var LAST_INDEX = 'lastIndex';
            if (
                'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
                'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
                'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
                '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
                '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
                ''[$SPLIT](/.?/)[LENGTH]
            ) {
                var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
                // based on es5-shim implementation, need to rework it
                $split = function (separator, limit) {
                    var string = String(this);
                    if (separator === undefined && limit === 0) return [];
                    // If `separator` is not a regex, use native split
                    if (!isRegExp(separator)) return _split.call(string, separator, limit);
                    var output = [];
                    var flags = (separator.ignoreCase ? 'i' : '') +
                        (separator.multiline ? 'm' : '') +
                        (separator.unicode ? 'u' : '') +
                        (separator.sticky ? 'y' : '');
                    var lastLastIndex = 0;
                    var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
                    // Make `global` and avoid `lastIndex` issues by working with a copy
                    var separatorCopy = new RegExp(separator.source, flags + 'g');
                    var separator2, match, lastIndex, lastLength, i;
                    // Doesn't need flags gy, but they don't hurt
                    if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
                    while (match = separatorCopy.exec(string)) {
                        // `separatorCopy.lastIndex` is not reliable cross-browser
                        lastIndex = match.index + match[0][LENGTH];
                        if (lastIndex > lastLastIndex) {
                            output.push(string.slice(lastLastIndex, match.index));
                            // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
                            // eslint-disable-next-line no-loop-func
                            if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
                                for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
                            });
                            if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
                            lastLength = match[0][LENGTH];
                            lastLastIndex = lastIndex;
                            if (output[LENGTH] >= splitLimit) break;
                        }
                        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
                    }
                    if (lastLastIndex === string[LENGTH]) {
                        if (lastLength || !separatorCopy.test('')) output.push('');
                    } else output.push(string.slice(lastLastIndex));
                    return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
                };
                // Chakra, V8
            } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
                $split = function (separator, limit) {
                    return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
                };
            }
            // 21.1.3.17 String.prototype.split(separator, limit)
            return [function split(separator, limit) {
                var O = defined(this);
                var fn = separator == undefined ? undefined : separator[SPLIT];
                return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
            }, $split];
        });

    }, {"./_fix-re-wks": 69, "./_is-regexp": 85}],
    259: [function (require, module, exports) {
        'use strict';
        require('./es6.regexp.flags');
        var anObject = require('./_an-object');
        var $flags = require('./_flags');
        var DESCRIPTORS = require('./_descriptors');
        var TO_STRING = 'toString';
        var $toString = /./[TO_STRING];

        var define = function (fn) {
            require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
        };

// 21.2.5.14 RegExp.prototype.toString()
        if (require('./_fails')(function () {
            return $toString.call({source: 'a', flags: 'b'}) != '/a/b';
        })) {
            define(function toString() {
                var R = anObject(this);
                return '/'.concat(R.source, '/',
                    'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
            });
// FF44- RegExp#toString has a wrong name
        } else if ($toString.name != TO_STRING) {
            define(function toString() {
                return $toString.call(this);
            });
        }

    }, {
        "./_an-object": 40,
        "./_descriptors": 62,
        "./_fails": 68,
        "./_flags": 70,
        "./_redefine": 124,
        "./es6.regexp.flags": 254
    }],
    260: [function (require, module, exports) {
        'use strict';
        var strong = require('./_collection-strong');
        var validate = require('./_validate-collection');
        var SET = 'Set';

// 23.2 Set Objects
        module.exports = require('./_collection')(SET, function (get) {
            return function Set() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
            };
        }, {
            // 23.2.3.1 Set.prototype.add(value)
            add: function add(value) {
                return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
            }
        }, strong);

    }, {"./_collection": 55, "./_collection-strong": 52, "./_validate-collection": 155}],
    261: [function (require, module, exports) {
        'use strict';
// B.2.3.2 String.prototype.anchor(name)
        require('./_string-html')('anchor', function (createHTML) {
            return function anchor(name) {
                return createHTML(this, 'a', 'name', name);
            };
        });

    }, {"./_string-html": 137}],
    262: [function (require, module, exports) {
        'use strict';
// B.2.3.3 String.prototype.big()
        require('./_string-html')('big', function (createHTML) {
            return function big() {
                return createHTML(this, 'big', '', '');
            };
        });

    }, {"./_string-html": 137}],
    263: [function (require, module, exports) {
        'use strict';
// B.2.3.4 String.prototype.blink()
        require('./_string-html')('blink', function (createHTML) {
            return function blink() {
                return createHTML(this, 'blink', '', '');
            };
        });

    }, {"./_string-html": 137}],
    264: [function (require, module, exports) {
        'use strict';
// B.2.3.5 String.prototype.bold()
        require('./_string-html')('bold', function (createHTML) {
            return function bold() {
                return createHTML(this, 'b', '', '');
            };
        });

    }, {"./_string-html": 137}],
    265: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var $at = require('./_string-at')(false);
        $export($export.P, 'String', {
            // 21.1.3.3 String.prototype.codePointAt(pos)
            codePointAt: function codePointAt(pos) {
                return $at(this, pos);
            }
        });

    }, {"./_export": 66, "./_string-at": 135}],
    266: [function (require, module, exports) {
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
        'use strict';
        var $export = require('./_export');
        var toLength = require('./_to-length');
        var context = require('./_string-context');
        var ENDS_WITH = 'endsWith';
        var $endsWith = ''[ENDS_WITH];

        $export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
            endsWith: function endsWith(searchString /* , endPosition = @length */) {
                var that = context(this, searchString, ENDS_WITH);
                var endPosition = arguments.length > 1 ? arguments[1] : undefined;
                var len = toLength(that.length);
                var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
                var search = String(searchString);
                return $endsWith
                    ? $endsWith.call(that, search, end)
                    : that.slice(end - search.length, end) === search;
            }
        });

    }, {"./_export": 66, "./_fails-is-regexp": 67, "./_string-context": 136, "./_to-length": 147}],
    267: [function (require, module, exports) {
        'use strict';
// B.2.3.6 String.prototype.fixed()
        require('./_string-html')('fixed', function (createHTML) {
            return function fixed() {
                return createHTML(this, 'tt', '', '');
            };
        });

    }, {"./_string-html": 137}],
    268: [function (require, module, exports) {
        'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
        require('./_string-html')('fontcolor', function (createHTML) {
            return function fontcolor(color) {
                return createHTML(this, 'font', 'color', color);
            };
        });

    }, {"./_string-html": 137}],
    269: [function (require, module, exports) {
        'use strict';
// B.2.3.8 String.prototype.fontsize(size)
        require('./_string-html')('fontsize', function (createHTML) {
            return function fontsize(size) {
                return createHTML(this, 'font', 'size', size);
            };
        });

    }, {"./_string-html": 137}],
    270: [function (require, module, exports) {
        var $export = require('./_export');
        var toAbsoluteIndex = require('./_to-absolute-index');
        var fromCharCode = String.fromCharCode;
        var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
        $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
            // 21.1.2.2 String.fromCodePoint(...codePoints)
            fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
                var res = [];
                var aLen = arguments.length;
                var i = 0;
                var code;
                while (aLen > i) {
                    code = +arguments[i++];
                    if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
                    res.push(code < 0x10000
                        ? fromCharCode(code)
                        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
                    );
                }
                return res.join('');
            }
        });

    }, {"./_export": 66, "./_to-absolute-index": 143}],
    271: [function (require, module, exports) {
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
        'use strict';
        var $export = require('./_export');
        var context = require('./_string-context');
        var INCLUDES = 'includes';

        $export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
            includes: function includes(searchString /* , position = 0 */) {
                return !!~context(this, searchString, INCLUDES)
                    .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
            }
        });

    }, {"./_export": 66, "./_fails-is-regexp": 67, "./_string-context": 136}],
    272: [function (require, module, exports) {
        'use strict';
// B.2.3.9 String.prototype.italics()
        require('./_string-html')('italics', function (createHTML) {
            return function italics() {
                return createHTML(this, 'i', '', '');
            };
        });

    }, {"./_string-html": 137}],
    273: [function (require, module, exports) {
        'use strict';
        var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
        require('./_iter-define')(String, 'String', function (iterated) {
            this._t = String(iterated); // target
            this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
        }, function () {
            var O = this._t;
            var index = this._i;
            var point;
            if (index >= O.length) return {value: undefined, done: true};
            point = $at(O, index);
            this._i += point.length;
            return {value: point, done: false};
        });

    }, {"./_iter-define": 88, "./_string-at": 135}],
    274: [function (require, module, exports) {
        'use strict';
// B.2.3.10 String.prototype.link(url)
        require('./_string-html')('link', function (createHTML) {
            return function link(url) {
                return createHTML(this, 'a', 'href', url);
            };
        });

    }, {"./_string-html": 137}],
    275: [function (require, module, exports) {
        var $export = require('./_export');
        var toIObject = require('./_to-iobject');
        var toLength = require('./_to-length');

        $export($export.S, 'String', {
            // 21.1.2.4 String.raw(callSite, ...substitutions)
            raw: function raw(callSite) {
                var tpl = toIObject(callSite.raw);
                var len = toLength(tpl.length);
                var aLen = arguments.length;
                var res = [];
                var i = 0;
                while (len > i) {
                    res.push(String(tpl[i++]));
                    if (i < aLen) res.push(String(arguments[i]));
                }
                return res.join('');
            }
        });

    }, {"./_export": 66, "./_to-iobject": 146, "./_to-length": 147}],
    276: [function (require, module, exports) {
        var $export = require('./_export');

        $export($export.P, 'String', {
            // 21.1.3.13 String.prototype.repeat(count)
            repeat: require('./_string-repeat')
        });

    }, {"./_export": 66, "./_string-repeat": 139}],
    277: [function (require, module, exports) {
        'use strict';
// B.2.3.11 String.prototype.small()
        require('./_string-html')('small', function (createHTML) {
            return function small() {
                return createHTML(this, 'small', '', '');
            };
        });

    }, {"./_string-html": 137}],
    278: [function (require, module, exports) {
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
        'use strict';
        var $export = require('./_export');
        var toLength = require('./_to-length');
        var context = require('./_string-context');
        var STARTS_WITH = 'startsWith';
        var $startsWith = ''[STARTS_WITH];

        $export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
            startsWith: function startsWith(searchString /* , position = 0 */) {
                var that = context(this, searchString, STARTS_WITH);
                var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
                var search = String(searchString);
                return $startsWith
                    ? $startsWith.call(that, search, index)
                    : that.slice(index, index + search.length) === search;
            }
        });

    }, {"./_export": 66, "./_fails-is-regexp": 67, "./_string-context": 136, "./_to-length": 147}],
    279: [function (require, module, exports) {
        'use strict';
// B.2.3.12 String.prototype.strike()
        require('./_string-html')('strike', function (createHTML) {
            return function strike() {
                return createHTML(this, 'strike', '', '');
            };
        });

    }, {"./_string-html": 137}],
    280: [function (require, module, exports) {
        'use strict';
// B.2.3.13 String.prototype.sub()
        require('./_string-html')('sub', function (createHTML) {
            return function sub() {
                return createHTML(this, 'sub', '', '');
            };
        });

    }, {"./_string-html": 137}],
    281: [function (require, module, exports) {
        'use strict';
// B.2.3.14 String.prototype.sup()
        require('./_string-html')('sup', function (createHTML) {
            return function sup() {
                return createHTML(this, 'sup', '', '');
            };
        });

    }, {"./_string-html": 137}],
    282: [function (require, module, exports) {
        'use strict';
// 21.1.3.25 String.prototype.trim()
        require('./_string-trim')('trim', function ($trim) {
            return function trim() {
                return $trim(this, 3);
            };
        });

    }, {"./_string-trim": 140}],
    283: [function (require, module, exports) {
        'use strict';
// ECMAScript 6 symbols shim
        var global = require('./_global');
        var has = require('./_has');
        var DESCRIPTORS = require('./_descriptors');
        var $export = require('./_export');
        var redefine = require('./_redefine');
        var META = require('./_meta').KEY;
        var $fails = require('./_fails');
        var shared = require('./_shared');
        var setToStringTag = require('./_set-to-string-tag');
        var uid = require('./_uid');
        var wks = require('./_wks');
        var wksExt = require('./_wks-ext');
        var wksDefine = require('./_wks-define');
        var enumKeys = require('./_enum-keys');
        var isArray = require('./_is-array');
        var anObject = require('./_an-object');
        var isObject = require('./_is-object');
        var toIObject = require('./_to-iobject');
        var toPrimitive = require('./_to-primitive');
        var createDesc = require('./_property-desc');
        var _create = require('./_object-create');
        var gOPNExt = require('./_object-gopn-ext');
        var $GOPD = require('./_object-gopd');
        var $DP = require('./_object-dp');
        var $keys = require('./_object-keys');
        var gOPD = $GOPD.f;
        var dP = $DP.f;
        var gOPN = gOPNExt.f;
        var $Symbol = global.Symbol;
        var $JSON = global.JSON;
        var _stringify = $JSON && $JSON.stringify;
        var PROTOTYPE = 'prototype';
        var HIDDEN = wks('_hidden');
        var TO_PRIMITIVE = wks('toPrimitive');
        var isEnum = {}.propertyIsEnumerable;
        var SymbolRegistry = shared('symbol-registry');
        var AllSymbols = shared('symbols');
        var OPSymbols = shared('op-symbols');
        var ObjectProto = Object[PROTOTYPE];
        var USE_NATIVE = typeof $Symbol == 'function';
        var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
        var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
        var setSymbolDesc = DESCRIPTORS && $fails(function () {
            return _create(dP({}, 'a', {
                get: function () {
                    return dP(this, 'a', {value: 7}).a;
                }
            })).a != 7;
        }) ? function (it, key, D) {
            var protoDesc = gOPD(ObjectProto, key);
            if (protoDesc) delete ObjectProto[key];
            dP(it, key, D);
            if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
        } : dP;

        var wrap = function (tag) {
            var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
            sym._k = tag;
            return sym;
        };

        var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
            return typeof it == 'symbol';
        } : function (it) {
            return it instanceof $Symbol;
        };

        var $defineProperty = function defineProperty(it, key, D) {
            if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
            anObject(it);
            key = toPrimitive(key, true);
            anObject(D);
            if (has(AllSymbols, key)) {
                if (!D.enumerable) {
                    if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
                    it[HIDDEN][key] = true;
                } else {
                    if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
                    D = _create(D, {enumerable: createDesc(0, false)});
                }
                return setSymbolDesc(it, key, D);
            }
            return dP(it, key, D);
        };
        var $defineProperties = function defineProperties(it, P) {
            anObject(it);
            var keys = enumKeys(P = toIObject(P));
            var i = 0;
            var l = keys.length;
            var key;
            while (l > i) $defineProperty(it, key = keys[i++], P[key]);
            return it;
        };
        var $create = function create(it, P) {
            return P === undefined ? _create(it) : $defineProperties(_create(it), P);
        };
        var $propertyIsEnumerable = function propertyIsEnumerable(key) {
            var E = isEnum.call(this, key = toPrimitive(key, true));
            if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
            return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
        };
        var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
            it = toIObject(it);
            key = toPrimitive(key, true);
            if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
            var D = gOPD(it, key);
            if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
            return D;
        };
        var $getOwnPropertyNames = function getOwnPropertyNames(it) {
            var names = gOPN(toIObject(it));
            var result = [];
            var i = 0;
            var key;
            while (names.length > i) {
                if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
            }
            return result;
        };
        var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
            var IS_OP = it === ObjectProto;
            var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
            var result = [];
            var i = 0;
            var key;
            while (names.length > i) {
                if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
            }
            return result;
        };

// 19.4.1.1 Symbol([description])
        if (!USE_NATIVE) {
            $Symbol = function Symbol() {
                if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
                var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
                var $set = function (value) {
                    if (this === ObjectProto) $set.call(OPSymbols, value);
                    if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                    setSymbolDesc(this, tag, createDesc(1, value));
                };
                if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
                return wrap(tag);
            };
            redefine($Symbol[PROTOTYPE], 'toString', function toString() {
                return this._k;
            });

            $GOPD.f = $getOwnPropertyDescriptor;
            $DP.f = $defineProperty;
            require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
            require('./_object-pie').f = $propertyIsEnumerable;
            require('./_object-gops').f = $getOwnPropertySymbols;

            if (DESCRIPTORS && !require('./_library')) {
                redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
            }

            wksExt.f = function (name) {
                return wrap(wks(name));
            };
        }

        $export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

        for (var es6Symbols = (
            // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
            'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
        ).split(','), j = 0; es6Symbols.length > j;) wks(es6Symbols[j++]);

        for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

        $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
            // 19.4.2.1 Symbol.for(key)
            'for': function (key) {
                return has(SymbolRegistry, key += '')
                    ? SymbolRegistry[key]
                    : SymbolRegistry[key] = $Symbol(key);
            },
            // 19.4.2.5 Symbol.keyFor(sym)
            keyFor: function keyFor(sym) {
                if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
                for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
            },
            useSetter: function () {
                setter = true;
            },
            useSimple: function () {
                setter = false;
            }
        });

        $export($export.S + $export.F * !USE_NATIVE, 'Object', {
            // 19.1.2.2 Object.create(O [, Properties])
            create: $create,
            // 19.1.2.4 Object.defineProperty(O, P, Attributes)
            defineProperty: $defineProperty,
            // 19.1.2.3 Object.defineProperties(O, Properties)
            defineProperties: $defineProperties,
            // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
            getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
            // 19.1.2.7 Object.getOwnPropertyNames(O)
            getOwnPropertyNames: $getOwnPropertyNames,
            // 19.1.2.8 Object.getOwnPropertySymbols(O)
            getOwnPropertySymbols: $getOwnPropertySymbols
        });

// 24.3.2 JSON.stringify(value [, replacer [, space]])
        $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
            var S = $Symbol();
            // MS Edge converts symbol values to JSON as {}
            // WebKit converts symbol values to JSON as null
            // V8 throws on boxed symbols
            return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
        })), 'JSON', {
            stringify: function stringify(it) {
                var args = [it];
                var i = 1;
                var replacer, $replacer;
                while (arguments.length > i) args.push(arguments[i++]);
                $replacer = replacer = args[1];
                if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
                if (!isArray(replacer)) replacer = function (key, value) {
                    if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
                    if (!isSymbol(value)) return value;
                };
                args[1] = replacer;
                return _stringify.apply($JSON, args);
            }
        });

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
        $Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
        setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
        setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
        setToStringTag(global.JSON, 'JSON', true);

    }, {
        "./_an-object": 40,
        "./_descriptors": 62,
        "./_enum-keys": 65,
        "./_export": 66,
        "./_fails": 68,
        "./_global": 73,
        "./_has": 74,
        "./_hide": 75,
        "./_is-array": 82,
        "./_is-object": 84,
        "./_library": 92,
        "./_meta": 98,
        "./_object-create": 103,
        "./_object-dp": 104,
        "./_object-gopd": 107,
        "./_object-gopn": 109,
        "./_object-gopn-ext": 108,
        "./_object-gops": 110,
        "./_object-keys": 113,
        "./_object-pie": 114,
        "./_property-desc": 122,
        "./_redefine": 124,
        "./_set-to-string-tag": 130,
        "./_shared": 132,
        "./_to-iobject": 146,
        "./_to-primitive": 149,
        "./_uid": 153,
        "./_wks": 158,
        "./_wks-define": 156,
        "./_wks-ext": 157
    }],
    284: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var $typed = require('./_typed');
        var buffer = require('./_typed-buffer');
        var anObject = require('./_an-object');
        var toAbsoluteIndex = require('./_to-absolute-index');
        var toLength = require('./_to-length');
        var isObject = require('./_is-object');
        var ArrayBuffer = require('./_global').ArrayBuffer;
        var speciesConstructor = require('./_species-constructor');
        var $ArrayBuffer = buffer.ArrayBuffer;
        var $DataView = buffer.DataView;
        var $isView = $typed.ABV && ArrayBuffer.isView;
        var $slice = $ArrayBuffer.prototype.slice;
        var VIEW = $typed.VIEW;
        var ARRAY_BUFFER = 'ArrayBuffer';

        $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

        $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
            // 24.1.3.1 ArrayBuffer.isView(arg)
            isView: function isView(it) {
                return $isView && $isView(it) || isObject(it) && VIEW in it;
            }
        });

        $export($export.P + $export.U + $export.F * require('./_fails')(function () {
            return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
        }), ARRAY_BUFFER, {
            // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
            slice: function slice(start, end) {
                if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
                var len = anObject(this).byteLength;
                var first = toAbsoluteIndex(start, len);
                var final = toAbsoluteIndex(end === undefined ? len : end, len);
                var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));
                var viewS = new $DataView(this);
                var viewT = new $DataView(result);
                var index = 0;
                while (first < final) {
                    viewT.setUint8(index++, viewS.getUint8(first++));
                }
                return result;
            }
        });

        require('./_set-species')(ARRAY_BUFFER);

    }, {
        "./_an-object": 40,
        "./_export": 66,
        "./_fails": 68,
        "./_global": 73,
        "./_is-object": 84,
        "./_set-species": 129,
        "./_species-constructor": 133,
        "./_to-absolute-index": 143,
        "./_to-length": 147,
        "./_typed": 152,
        "./_typed-buffer": 151
    }],
    285: [function (require, module, exports) {
        var $export = require('./_export');
        $export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
            DataView: require('./_typed-buffer').DataView
        });

    }, {"./_export": 66, "./_typed": 152, "./_typed-buffer": 151}],
    286: [function (require, module, exports) {
        require('./_typed-array')('Float32', 4, function (init) {
            return function Float32Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
            };
        });

    }, {"./_typed-array": 150}],
    287: [function (require, module, exports) {
        require('./_typed-array')('Float64', 8, function (init) {
            return function Float64Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
            };
        });

    }, {"./_typed-array": 150}],
    288: [function (require, module, exports) {
        require('./_typed-array')('Int16', 2, function (init) {
            return function Int16Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
            };
        });

    }, {"./_typed-array": 150}],
    289: [function (require, module, exports) {
        require('./_typed-array')('Int32', 4, function (init) {
            return function Int32Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
            };
        });

    }, {"./_typed-array": 150}],
    290: [function (require, module, exports) {
        require('./_typed-array')('Int8', 1, function (init) {
            return function Int8Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
            };
        });

    }, {"./_typed-array": 150}],
    291: [function (require, module, exports) {
        require('./_typed-array')('Uint16', 2, function (init) {
            return function Uint16Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
            };
        });

    }, {"./_typed-array": 150}],
    292: [function (require, module, exports) {
        require('./_typed-array')('Uint32', 4, function (init) {
            return function Uint32Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
            };
        });

    }, {"./_typed-array": 150}],
    293: [function (require, module, exports) {
        require('./_typed-array')('Uint8', 1, function (init) {
            return function Uint8Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
            };
        });

    }, {"./_typed-array": 150}],
    294: [function (require, module, exports) {
        require('./_typed-array')('Uint8', 1, function (init) {
            return function Uint8ClampedArray(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
            };
        }, true);

    }, {"./_typed-array": 150}],
    295: [function (require, module, exports) {
        'use strict';
        var each = require('./_array-methods')(0);
        var redefine = require('./_redefine');
        var meta = require('./_meta');
        var assign = require('./_object-assign');
        var weak = require('./_collection-weak');
        var isObject = require('./_is-object');
        var fails = require('./_fails');
        var validate = require('./_validate-collection');
        var WEAK_MAP = 'WeakMap';
        var getWeak = meta.getWeak;
        var isExtensible = Object.isExtensible;
        var uncaughtFrozenStore = weak.ufstore;
        var tmp = {};
        var InternalMap;

        var wrapper = function (get) {
            return function WeakMap() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
            };
        };

        var methods = {
            // 23.3.3.3 WeakMap.prototype.get(key)
            get: function get(key) {
                if (isObject(key)) {
                    var data = getWeak(key);
                    if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
                    return data ? data[this._i] : undefined;
                }
            },
            // 23.3.3.5 WeakMap.prototype.set(key, value)
            set: function set(key, value) {
                return weak.def(validate(this, WEAK_MAP), key, value);
            }
        };

// 23.3 WeakMap Objects
        var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
        if (fails(function () {
            return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7;
        })) {
            InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
            assign(InternalMap.prototype, methods);
            meta.NEED = true;
            each(['delete', 'has', 'get', 'set'], function (key) {
                var proto = $WeakMap.prototype;
                var method = proto[key];
                redefine(proto, key, function (a, b) {
                    // store frozen objects on internal weakmap shim
                    if (isObject(a) && !isExtensible(a)) {
                        if (!this._f) this._f = new InternalMap();
                        var result = this._f[key](a, b);
                        return key == 'set' ? this : result;
                        // store all the rest on native weakmap
                    }
                    return method.call(this, a, b);
                });
            });
        }

    }, {
        "./_array-methods": 45,
        "./_collection": 55,
        "./_collection-weak": 54,
        "./_fails": 68,
        "./_is-object": 84,
        "./_meta": 98,
        "./_object-assign": 102,
        "./_redefine": 124,
        "./_validate-collection": 155
    }],
    296: [function (require, module, exports) {
        'use strict';
        var weak = require('./_collection-weak');
        var validate = require('./_validate-collection');
        var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
        require('./_collection')(WEAK_SET, function (get) {
            return function WeakSet() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
            };
        }, {
            // 23.4.3.1 WeakSet.prototype.add(value)
            add: function add(value) {
                return weak.def(validate(this, WEAK_SET), value, true);
            }
        }, weak, false, true);

    }, {"./_collection": 55, "./_collection-weak": 54, "./_validate-collection": 155}],
    297: [function (require, module, exports) {
        'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
        var $export = require('./_export');
        var flattenIntoArray = require('./_flatten-into-array');
        var toObject = require('./_to-object');
        var toLength = require('./_to-length');
        var aFunction = require('./_a-function');
        var arraySpeciesCreate = require('./_array-species-create');

        $export($export.P, 'Array', {
            flatMap: function flatMap(callbackfn /* , thisArg */) {
                var O = toObject(this);
                var sourceLen, A;
                aFunction(callbackfn);
                sourceLen = toLength(O.length);
                A = arraySpeciesCreate(O, 0);
                flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
                return A;
            }
        });

        require('./_add-to-unscopables')('flatMap');

    }, {
        "./_a-function": 36,
        "./_add-to-unscopables": 38,
        "./_array-species-create": 48,
        "./_export": 66,
        "./_flatten-into-array": 71,
        "./_to-length": 147,
        "./_to-object": 148
    }],
    298: [function (require, module, exports) {
        'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
        var $export = require('./_export');
        var flattenIntoArray = require('./_flatten-into-array');
        var toObject = require('./_to-object');
        var toLength = require('./_to-length');
        var toInteger = require('./_to-integer');
        var arraySpeciesCreate = require('./_array-species-create');

        $export($export.P, 'Array', {
            flatten: function flatten(/* depthArg = 1 */) {
                var depthArg = arguments[0];
                var O = toObject(this);
                var sourceLen = toLength(O.length);
                var A = arraySpeciesCreate(O, 0);
                flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
                return A;
            }
        });

        require('./_add-to-unscopables')('flatten');

    }, {
        "./_add-to-unscopables": 38,
        "./_array-species-create": 48,
        "./_export": 66,
        "./_flatten-into-array": 71,
        "./_to-integer": 145,
        "./_to-length": 147,
        "./_to-object": 148
    }],
    299: [function (require, module, exports) {
        'use strict';
// https://github.com/tc39/Array.prototype.includes
        var $export = require('./_export');
        var $includes = require('./_array-includes')(true);

        $export($export.P, 'Array', {
            includes: function includes(el /* , fromIndex = 0 */) {
                return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
            }
        });

        require('./_add-to-unscopables')('includes');

    }, {"./_add-to-unscopables": 38, "./_array-includes": 44, "./_export": 66}],
    300: [function (require, module, exports) {
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
        var $export = require('./_export');
        var microtask = require('./_microtask')();
        var process = require('./_global').process;
        var isNode = require('./_cof')(process) == 'process';

        $export($export.G, {
            asap: function asap(fn) {
                var domain = isNode && process.domain;
                microtask(domain ? domain.bind(fn) : fn);
            }
        });

    }, {"./_cof": 51, "./_export": 66, "./_global": 73, "./_microtask": 100}],
    301: [function (require, module, exports) {
// https://github.com/ljharb/proposal-is-error
        var $export = require('./_export');
        var cof = require('./_cof');

        $export($export.S, 'Error', {
            isError: function isError(it) {
                return cof(it) === 'Error';
            }
        });

    }, {"./_cof": 51, "./_export": 66}],
    302: [function (require, module, exports) {
// https://github.com/tc39/proposal-global
        var $export = require('./_export');

        $export($export.G, {global: require('./_global')});

    }, {"./_export": 66, "./_global": 73}],
    303: [function (require, module, exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
        require('./_set-collection-from')('Map');

    }, {"./_set-collection-from": 126}],
    304: [function (require, module, exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
        require('./_set-collection-of')('Map');

    }, {"./_set-collection-of": 127}],
    305: [function (require, module, exports) {
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
        var $export = require('./_export');

        $export($export.P + $export.R, 'Map', {toJSON: require('./_collection-to-json')('Map')});

    }, {"./_collection-to-json": 53, "./_export": 66}],
    306: [function (require, module, exports) {
// https://rwaldron.github.io/proposal-math-extensions/
        var $export = require('./_export');

        $export($export.S, 'Math', {
            clamp: function clamp(x, lower, upper) {
                return Math.min(upper, Math.max(lower, x));
            }
        });

    }, {"./_export": 66}],
    307: [function (require, module, exports) {
// https://rwaldron.github.io/proposal-math-extensions/
        var $export = require('./_export');

        $export($export.S, 'Math', {DEG_PER_RAD: Math.PI / 180});

    }, {"./_export": 66}],
    308: [function (require, module, exports) {
// https://rwaldron.github.io/proposal-math-extensions/
        var $export = require('./_export');
        var RAD_PER_DEG = 180 / Math.PI;

        $export($export.S, 'Math', {
            degrees: function degrees(radians) {
                return radians * RAD_PER_DEG;
            }
        });

    }, {"./_export": 66}],
    309: [function (require, module, exports) {
// https://rwaldron.github.io/proposal-math-extensions/
        var $export = require('./_export');
        var scale = require('./_math-scale');
        var fround = require('./_math-fround');

        $export($export.S, 'Math', {
            fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
                return fround(scale(x, inLow, inHigh, outLow, outHigh));
            }
        });

    }, {"./_export": 66, "./_math-fround": 94, "./_math-scale": 96}],
    310: [function (require, module, exports) {
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
        var $export = require('./_export');

        $export($export.S, 'Math', {
            iaddh: function iaddh(x0, x1, y0, y1) {
                var $x0 = x0 >>> 0;
                var $x1 = x1 >>> 0;
                var $y0 = y0 >>> 0;
                return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
            }
        });

    }, {"./_export": 66}],
    311: [function (require, module, exports) {
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
        var $export = require('./_export');

        $export($export.S, 'Math', {
            imulh: function imulh(u, v) {
                var UINT16 = 0xffff;
                var $u = +u;
                var $v = +v;
                var u0 = $u & UINT16;
                var v0 = $v & UINT16;
                var u1 = $u >> 16;
                var v1 = $v >> 16;
                var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
                return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
            }
        });

    }, {"./_export": 66}],
    312: [function (require, module, exports) {
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
        var $export = require('./_export');

        $export($export.S, 'Math', {
            isubh: function isubh(x0, x1, y0, y1) {
                var $x0 = x0 >>> 0;
                var $x1 = x1 >>> 0;
                var $y0 = y0 >>> 0;
                return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
            }
        });

    }, {"./_export": 66}],
    313: [function (require, module, exports) {
// https://rwaldron.github.io/proposal-math-extensions/
        var $export = require('./_export');

        $export($export.S, 'Math', {RAD_PER_DEG: 180 / Math.PI});

    }, {"./_export": 66}],
    314: [function (require, module, exports) {
// https://rwaldron.github.io/proposal-math-extensions/
        var $export = require('./_export');
        var DEG_PER_RAD = Math.PI / 180;

        $export($export.S, 'Math', {
            radians: function radians(degrees) {
                return degrees * DEG_PER_RAD;
            }
        });

    }, {"./_export": 66}],
    315: [function (require, module, exports) {
// https://rwaldron.github.io/proposal-math-extensions/
        var $export = require('./_export');

        $export($export.S, 'Math', {scale: require('./_math-scale')});

    }, {"./_export": 66, "./_math-scale": 96}],
    316: [function (require, module, exports) {
// http://jfbastien.github.io/papers/Math.signbit.html
        var $export = require('./_export');

        $export($export.S, 'Math', {
            signbit: function signbit(x) {
                // eslint-disable-next-line no-self-compare
                return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
            }
        });

    }, {"./_export": 66}],
    317: [function (require, module, exports) {
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
        var $export = require('./_export');

        $export($export.S, 'Math', {
            umulh: function umulh(u, v) {
                var UINT16 = 0xffff;
                var $u = +u;
                var $v = +v;
                var u0 = $u & UINT16;
                var v0 = $v & UINT16;
                var u1 = $u >>> 16;
                var v1 = $v >>> 16;
                var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
                return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
            }
        });

    }, {"./_export": 66}],
    318: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var toObject = require('./_to-object');
        var aFunction = require('./_a-function');
        var $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
        require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
            __defineGetter__: function __defineGetter__(P, getter) {
                $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
            }
        });

    }, {
        "./_a-function": 36,
        "./_descriptors": 62,
        "./_export": 66,
        "./_object-dp": 104,
        "./_object-forced-pam": 106,
        "./_to-object": 148
    }],
    319: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var toObject = require('./_to-object');
        var aFunction = require('./_a-function');
        var $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
        require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
            __defineSetter__: function __defineSetter__(P, setter) {
                $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
            }
        });

    }, {
        "./_a-function": 36,
        "./_descriptors": 62,
        "./_export": 66,
        "./_object-dp": 104,
        "./_object-forced-pam": 106,
        "./_to-object": 148
    }],
    320: [function (require, module, exports) {
// https://github.com/tc39/proposal-object-values-entries
        var $export = require('./_export');
        var $entries = require('./_object-to-array')(true);

        $export($export.S, 'Object', {
            entries: function entries(it) {
                return $entries(it);
            }
        });

    }, {"./_export": 66, "./_object-to-array": 116}],
    321: [function (require, module, exports) {
// https://github.com/tc39/proposal-object-getownpropertydescriptors
        var $export = require('./_export');
        var ownKeys = require('./_own-keys');
        var toIObject = require('./_to-iobject');
        var gOPD = require('./_object-gopd');
        var createProperty = require('./_create-property');

        $export($export.S, 'Object', {
            getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
                var O = toIObject(object);
                var getDesc = gOPD.f;
                var keys = ownKeys(O);
                var result = {};
                var i = 0;
                var key, desc;
                while (keys.length > i) {
                    desc = getDesc(O, key = keys[i++]);
                    if (desc !== undefined) createProperty(result, key, desc);
                }
                return result;
            }
        });

    }, {"./_create-property": 57, "./_export": 66, "./_object-gopd": 107, "./_own-keys": 117, "./_to-iobject": 146}],
    322: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var toObject = require('./_to-object');
        var toPrimitive = require('./_to-primitive');
        var getPrototypeOf = require('./_object-gpo');
        var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
        require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
            __lookupGetter__: function __lookupGetter__(P) {
                var O = toObject(this);
                var K = toPrimitive(P, true);
                var D;
                do {
                    if (D = getOwnPropertyDescriptor(O, K)) return D.get;
                } while (O = getPrototypeOf(O));
            }
        });

    }, {
        "./_descriptors": 62,
        "./_export": 66,
        "./_object-forced-pam": 106,
        "./_object-gopd": 107,
        "./_object-gpo": 111,
        "./_to-object": 148,
        "./_to-primitive": 149
    }],
    323: [function (require, module, exports) {
        'use strict';
        var $export = require('./_export');
        var toObject = require('./_to-object');
        var toPrimitive = require('./_to-primitive');
        var getPrototypeOf = require('./_object-gpo');
        var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
        require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
            __lookupSetter__: function __lookupSetter__(P) {
                var O = toObject(this);
                var K = toPrimitive(P, true);
                var D;
                do {
                    if (D = getOwnPropertyDescriptor(O, K)) return D.set;
                } while (O = getPrototypeOf(O));
            }
        });

    }, {
        "./_descriptors": 62,
        "./_export": 66,
        "./_object-forced-pam": 106,
        "./_object-gopd": 107,
        "./_object-gpo": 111,
        "./_to-object": 148,
        "./_to-primitive": 149
    }],
    324: [function (require, module, exports) {
// https://github.com/tc39/proposal-object-values-entries
        var $export = require('./_export');
        var $values = require('./_object-to-array')(false);

        $export($export.S, 'Object', {
            values: function values(it) {
                return $values(it);
            }
        });

    }, {"./_export": 66, "./_object-to-array": 116}],
    325: [function (require, module, exports) {
        'use strict';
// https://github.com/zenparsing/es-observable
        var $export = require('./_export');
        var global = require('./_global');
        var core = require('./_core');
        var microtask = require('./_microtask')();
        var OBSERVABLE = require('./_wks')('observable');
        var aFunction = require('./_a-function');
        var anObject = require('./_an-object');
        var anInstance = require('./_an-instance');
        var redefineAll = require('./_redefine-all');
        var hide = require('./_hide');
        var forOf = require('./_for-of');
        var RETURN = forOf.RETURN;

        var getMethod = function (fn) {
            return fn == null ? undefined : aFunction(fn);
        };

        var cleanupSubscription = function (subscription) {
            var cleanup = subscription._c;
            if (cleanup) {
                subscription._c = undefined;
                cleanup();
            }
        };

        var subscriptionClosed = function (subscription) {
            return subscription._o === undefined;
        };

        var closeSubscription = function (subscription) {
            if (!subscriptionClosed(subscription)) {
                subscription._o = undefined;
                cleanupSubscription(subscription);
            }
        };

        var Subscription = function (observer, subscriber) {
            anObject(observer);
            this._c = undefined;
            this._o = observer;
            observer = new SubscriptionObserver(this);
            try {
                var cleanup = subscriber(observer);
                var subscription = cleanup;
                if (cleanup != null) {
                    if (typeof cleanup.unsubscribe === 'function') cleanup = function () {
                        subscription.unsubscribe();
                    };
                    else aFunction(cleanup);
                    this._c = cleanup;
                }
            } catch (e) {
                observer.error(e);
                return;
            }
            if (subscriptionClosed(this)) cleanupSubscription(this);
        };

        Subscription.prototype = redefineAll({}, {
            unsubscribe: function unsubscribe() {
                closeSubscription(this);
            }
        });

        var SubscriptionObserver = function (subscription) {
            this._s = subscription;
        };

        SubscriptionObserver.prototype = redefineAll({}, {
            next: function next(value) {
                var subscription = this._s;
                if (!subscriptionClosed(subscription)) {
                    var observer = subscription._o;
                    try {
                        var m = getMethod(observer.next);
                        if (m) return m.call(observer, value);
                    } catch (e) {
                        try {
                            closeSubscription(subscription);
                        } finally {
                            throw e;
                        }
                    }
                }
            },
            error: function error(value) {
                var subscription = this._s;
                if (subscriptionClosed(subscription)) throw value;
                var observer = subscription._o;
                subscription._o = undefined;
                try {
                    var m = getMethod(observer.error);
                    if (!m) throw value;
                    value = m.call(observer, value);
                } catch (e) {
                    try {
                        cleanupSubscription(subscription);
                    } finally {
                        throw e;
                    }
                }
                cleanupSubscription(subscription);
                return value;
            },
            complete: function complete(value) {
                var subscription = this._s;
                if (!subscriptionClosed(subscription)) {
                    var observer = subscription._o;
                    subscription._o = undefined;
                    try {
                        var m = getMethod(observer.complete);
                        value = m ? m.call(observer, value) : undefined;
                    } catch (e) {
                        try {
                            cleanupSubscription(subscription);
                        } finally {
                            throw e;
                        }
                    }
                    cleanupSubscription(subscription);
                    return value;
                }
            }
        });

        var $Observable = function Observable(subscriber) {
            anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
        };

        redefineAll($Observable.prototype, {
            subscribe: function subscribe(observer) {
                return new Subscription(observer, this._f);
            },
            forEach: function forEach(fn) {
                var that = this;
                return new (core.Promise || global.Promise)(function (resolve, reject) {
                    aFunction(fn);
                    var subscription = that.subscribe({
                        next: function (value) {
                            try {
                                return fn(value);
                            } catch (e) {
                                reject(e);
                                subscription.unsubscribe();
                            }
                        },
                        error: reject,
                        complete: resolve
                    });
                });
            }
        });

        redefineAll($Observable, {
            from: function from(x) {
                var C = typeof this === 'function' ? this : $Observable;
                var method = getMethod(anObject(x)[OBSERVABLE]);
                if (method) {
                    var observable = anObject(method.call(x));
                    return observable.constructor === C ? observable : new C(function (observer) {
                        return observable.subscribe(observer);
                    });
                }
                return new C(function (observer) {
                    var done = false;
                    microtask(function () {
                        if (!done) {
                            try {
                                if (forOf(x, false, function (it) {
                                    observer.next(it);
                                    if (done) return RETURN;
                                }) === RETURN) return;
                            } catch (e) {
                                if (done) throw e;
                                observer.error(e);
                                return;
                            }
                            observer.complete();
                        }
                    });
                    return function () {
                        done = true;
                    };
                });
            },
            of: function of() {
                for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
                return new (typeof this === 'function' ? this : $Observable)(function (observer) {
                    var done = false;
                    microtask(function () {
                        if (!done) {
                            for (var j = 0; j < items.length; ++j) {
                                observer.next(items[j]);
                                if (done) return;
                            }
                            observer.complete();
                        }
                    });
                    return function () {
                        done = true;
                    };
                });
            }
        });

        hide($Observable.prototype, OBSERVABLE, function () {
            return this;
        });

        $export($export.G, {Observable: $Observable});

        require('./_set-species')('Observable');

    }, {
        "./_a-function": 36,
        "./_an-instance": 39,
        "./_an-object": 40,
        "./_core": 56,
        "./_export": 66,
        "./_for-of": 72,
        "./_global": 73,
        "./_hide": 75,
        "./_microtask": 100,
        "./_redefine-all": 123,
        "./_set-species": 129,
        "./_wks": 158
    }],
    326: [function (require, module, exports) {
// https://github.com/tc39/proposal-promise-finally
        'use strict';
        var $export = require('./_export');
        var core = require('./_core');
        var global = require('./_global');
        var speciesConstructor = require('./_species-constructor');
        var promiseResolve = require('./_promise-resolve');

        $export($export.P + $export.R, 'Promise', {
            'finally': function (onFinally) {
                var C = speciesConstructor(this, core.Promise || global.Promise);
                var isFunction = typeof onFinally == 'function';
                return this.then(
                    isFunction ? function (x) {
                        return promiseResolve(C, onFinally()).then(function () {
                            return x;
                        });
                    } : onFinally,
                    isFunction ? function (e) {
                        return promiseResolve(C, onFinally()).then(function () {
                            throw e;
                        });
                    } : onFinally
                );
            }
        });

    }, {"./_core": 56, "./_export": 66, "./_global": 73, "./_promise-resolve": 121, "./_species-constructor": 133}],
    327: [function (require, module, exports) {
        'use strict';
// https://github.com/tc39/proposal-promise-try
        var $export = require('./_export');
        var newPromiseCapability = require('./_new-promise-capability');
        var perform = require('./_perform');

        $export($export.S, 'Promise', {
            'try': function (callbackfn) {
                var promiseCapability = newPromiseCapability.f(this);
                var result = perform(callbackfn);
                (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
                return promiseCapability.promise;
            }
        });

    }, {"./_export": 66, "./_new-promise-capability": 101, "./_perform": 120}],
    328: [function (require, module, exports) {
        var metadata = require('./_metadata');
        var anObject = require('./_an-object');
        var toMetaKey = metadata.key;
        var ordinaryDefineOwnMetadata = metadata.set;

        metadata.exp({
            defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
                ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
            }
        });

    }, {"./_an-object": 40, "./_metadata": 99}],
    329: [function (require, module, exports) {
        var metadata = require('./_metadata');
        var anObject = require('./_an-object');
        var toMetaKey = metadata.key;
        var getOrCreateMetadataMap = metadata.map;
        var store = metadata.store;

        metadata.exp({
            deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
                var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
                var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
                if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
                if (metadataMap.size) return true;
                var targetMetadata = store.get(target);
                targetMetadata['delete'](targetKey);
                return !!targetMetadata.size || store['delete'](target);
            }
        });

    }, {"./_an-object": 40, "./_metadata": 99}],
    330: [function (require, module, exports) {
        var Set = require('./es6.set');
        var from = require('./_array-from-iterable');
        var metadata = require('./_metadata');
        var anObject = require('./_an-object');
        var getPrototypeOf = require('./_object-gpo');
        var ordinaryOwnMetadataKeys = metadata.keys;
        var toMetaKey = metadata.key;

        var ordinaryMetadataKeys = function (O, P) {
            var oKeys = ordinaryOwnMetadataKeys(O, P);
            var parent = getPrototypeOf(O);
            if (parent === null) return oKeys;
            var pKeys = ordinaryMetadataKeys(parent, P);
            return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
        };

        metadata.exp({
            getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
                return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
            }
        });

    }, {"./_an-object": 40, "./_array-from-iterable": 43, "./_metadata": 99, "./_object-gpo": 111, "./es6.set": 260}],
    331: [function (require, module, exports) {
        var metadata = require('./_metadata');
        var anObject = require('./_an-object');
        var getPrototypeOf = require('./_object-gpo');
        var ordinaryHasOwnMetadata = metadata.has;
        var ordinaryGetOwnMetadata = metadata.get;
        var toMetaKey = metadata.key;

        var ordinaryGetMetadata = function (MetadataKey, O, P) {
            var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
            var parent = getPrototypeOf(O);
            return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
        };

        metadata.exp({
            getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
                return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
            }
        });

    }, {"./_an-object": 40, "./_metadata": 99, "./_object-gpo": 111}],
    332: [function (require, module, exports) {
        var metadata = require('./_metadata');
        var anObject = require('./_an-object');
        var ordinaryOwnMetadataKeys = metadata.keys;
        var toMetaKey = metadata.key;

        metadata.exp({
            getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
                return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
            }
        });

    }, {"./_an-object": 40, "./_metadata": 99}],
    333: [function (require, module, exports) {
        var metadata = require('./_metadata');
        var anObject = require('./_an-object');
        var ordinaryGetOwnMetadata = metadata.get;
        var toMetaKey = metadata.key;

        metadata.exp({
            getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
                return ordinaryGetOwnMetadata(metadataKey, anObject(target)
                    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
            }
        });

    }, {"./_an-object": 40, "./_metadata": 99}],
    334: [function (require, module, exports) {
        var metadata = require('./_metadata');
        var anObject = require('./_an-object');
        var getPrototypeOf = require('./_object-gpo');
        var ordinaryHasOwnMetadata = metadata.has;
        var toMetaKey = metadata.key;

        var ordinaryHasMetadata = function (MetadataKey, O, P) {
            var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn) return true;
            var parent = getPrototypeOf(O);
            return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
        };

        metadata.exp({
            hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
                return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
            }
        });

    }, {"./_an-object": 40, "./_metadata": 99, "./_object-gpo": 111}],
    335: [function (require, module, exports) {
        var metadata = require('./_metadata');
        var anObject = require('./_an-object');
        var ordinaryHasOwnMetadata = metadata.has;
        var toMetaKey = metadata.key;

        metadata.exp({
            hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
                return ordinaryHasOwnMetadata(metadataKey, anObject(target)
                    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
            }
        });

    }, {"./_an-object": 40, "./_metadata": 99}],
    336: [function (require, module, exports) {
        var $metadata = require('./_metadata');
        var anObject = require('./_an-object');
        var aFunction = require('./_a-function');
        var toMetaKey = $metadata.key;
        var ordinaryDefineOwnMetadata = $metadata.set;

        $metadata.exp({
            metadata: function metadata(metadataKey, metadataValue) {
                return function decorator(target, targetKey) {
                    ordinaryDefineOwnMetadata(
                        metadataKey, metadataValue,
                        (targetKey !== undefined ? anObject : aFunction)(target),
                        toMetaKey(targetKey)
                    );
                };
            }
        });

    }, {"./_a-function": 36, "./_an-object": 40, "./_metadata": 99}],
    337: [function (require, module, exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
        require('./_set-collection-from')('Set');

    }, {"./_set-collection-from": 126}],
    338: [function (require, module, exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
        require('./_set-collection-of')('Set');

    }, {"./_set-collection-of": 127}],
    339: [function (require, module, exports) {
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
        var $export = require('./_export');

        $export($export.P + $export.R, 'Set', {toJSON: require('./_collection-to-json')('Set')});

    }, {"./_collection-to-json": 53, "./_export": 66}],
    340: [function (require, module, exports) {
        'use strict';
// https://github.com/mathiasbynens/String.prototype.at
        var $export = require('./_export');
        var $at = require('./_string-at')(true);

        $export($export.P, 'String', {
            at: function at(pos) {
                return $at(this, pos);
            }
        });

    }, {"./_export": 66, "./_string-at": 135}],
    341: [function (require, module, exports) {
        'use strict';
// https://tc39.github.io/String.prototype.matchAll/
        var $export = require('./_export');
        var defined = require('./_defined');
        var toLength = require('./_to-length');
        var isRegExp = require('./_is-regexp');
        var getFlags = require('./_flags');
        var RegExpProto = RegExp.prototype;

        var $RegExpStringIterator = function (regexp, string) {
            this._r = regexp;
            this._s = string;
        };

        require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {
            var match = this._r.exec(this._s);
            return {value: match, done: match === null};
        });

        $export($export.P, 'String', {
            matchAll: function matchAll(regexp) {
                defined(this);
                if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
                var S = String(this);
                var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
                var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
                rx.lastIndex = toLength(regexp.lastIndex);
                return new $RegExpStringIterator(rx, S);
            }
        });

    }, {
        "./_defined": 61,
        "./_export": 66,
        "./_flags": 70,
        "./_is-regexp": 85,
        "./_iter-create": 87,
        "./_to-length": 147
    }],
    342: [function (require, module, exports) {
        'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
        var $export = require('./_export');
        var $pad = require('./_string-pad');
        var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
        $export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
            padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
                return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
            }
        });

    }, {"./_export": 66, "./_string-pad": 138, "./_user-agent": 154}],
    343: [function (require, module, exports) {
        'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
        var $export = require('./_export');
        var $pad = require('./_string-pad');
        var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
        $export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
            padStart: function padStart(maxLength /* , fillString = ' ' */) {
                return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
            }
        });

    }, {"./_export": 66, "./_string-pad": 138, "./_user-agent": 154}],
    344: [function (require, module, exports) {
        'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
        require('./_string-trim')('trimLeft', function ($trim) {
            return function trimLeft() {
                return $trim(this, 1);
            };
        }, 'trimStart');

    }, {"./_string-trim": 140}],
    345: [function (require, module, exports) {
        'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
        require('./_string-trim')('trimRight', function ($trim) {
            return function trimRight() {
                return $trim(this, 2);
            };
        }, 'trimEnd');

    }, {"./_string-trim": 140}],
    346: [function (require, module, exports) {
        require('./_wks-define')('asyncIterator');

    }, {"./_wks-define": 156}],
    347: [function (require, module, exports) {
        require('./_wks-define')('observable');

    }, {"./_wks-define": 156}],
    348: [function (require, module, exports) {
// https://github.com/tc39/proposal-global
        var $export = require('./_export');

        $export($export.S, 'System', {global: require('./_global')});

    }, {"./_export": 66, "./_global": 73}],
    349: [function (require, module, exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
        require('./_set-collection-from')('WeakMap');

    }, {"./_set-collection-from": 126}],
    350: [function (require, module, exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
        require('./_set-collection-of')('WeakMap');

    }, {"./_set-collection-of": 127}],
    351: [function (require, module, exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
        require('./_set-collection-from')('WeakSet');

    }, {"./_set-collection-from": 126}],
    352: [function (require, module, exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
        require('./_set-collection-of')('WeakSet');

    }, {"./_set-collection-of": 127}],
    353: [function (require, module, exports) {
        var $iterators = require('./es6.array.iterator');
        var getKeys = require('./_object-keys');
        var redefine = require('./_redefine');
        var global = require('./_global');
        var hide = require('./_hide');
        var Iterators = require('./_iterators');
        var wks = require('./_wks');
        var ITERATOR = wks('iterator');
        var TO_STRING_TAG = wks('toStringTag');
        var ArrayValues = Iterators.Array;

        var DOMIterables = {
            CSSRuleList: true, // TODO: Not spec compliant, should be false.
            CSSStyleDeclaration: false,
            CSSValueList: false,
            ClientRectList: false,
            DOMRectList: false,
            DOMStringList: false,
            DOMTokenList: true,
            DataTransferItemList: false,
            FileList: false,
            HTMLAllCollection: false,
            HTMLCollection: false,
            HTMLFormElement: false,
            HTMLSelectElement: false,
            MediaList: true, // TODO: Not spec compliant, should be false.
            MimeTypeArray: false,
            NamedNodeMap: false,
            NodeList: true,
            PaintRequestList: false,
            Plugin: false,
            PluginArray: false,
            SVGLengthList: false,
            SVGNumberList: false,
            SVGPathSegList: false,
            SVGPointList: false,
            SVGStringList: false,
            SVGTransformList: false,
            SourceBufferList: false,
            StyleSheetList: true, // TODO: Not spec compliant, should be false.
            TextTrackCueList: false,
            TextTrackList: false,
            TouchList: false
        };

        for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
            var NAME = collections[i];
            var explicit = DOMIterables[NAME];
            var Collection = global[NAME];
            var proto = Collection && Collection.prototype;
            var key;
            if (proto) {
                if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
                if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
                Iterators[NAME] = ArrayValues;
                if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
            }
        }

    }, {
        "./_global": 73,
        "./_hide": 75,
        "./_iterators": 91,
        "./_object-keys": 113,
        "./_redefine": 124,
        "./_wks": 158,
        "./es6.array.iterator": 170
    }],
    354: [function (require, module, exports) {
        var $export = require('./_export');
        var $task = require('./_task');
        $export($export.G + $export.B, {
            setImmediate: $task.set,
            clearImmediate: $task.clear
        });

    }, {"./_export": 66, "./_task": 142}],
    355: [function (require, module, exports) {
// ie9- setTimeout & setInterval additional parameters fix
        var global = require('./_global');
        var $export = require('./_export');
        var userAgent = require('./_user-agent');
        var slice = [].slice;
        var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
        var wrap = function (set) {
            return function (fn, time /* , ...args */) {
                var boundArgs = arguments.length > 2;
                var args = boundArgs ? slice.call(arguments, 2) : false;
                return set(boundArgs ? function () {
                    // eslint-disable-next-line no-new-func
                    (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
                } : fn, time);
            };
        };
        $export($export.G + $export.B + $export.F * MSIE, {
            setTimeout: wrap(global.setTimeout),
            setInterval: wrap(global.setInterval)
        });

    }, {"./_export": 66, "./_global": 73, "./_user-agent": 154}],
    356: [function (require, module, exports) {
        require('./modules/es6.symbol');
        require('./modules/es6.object.create');
        require('./modules/es6.object.define-property');
        require('./modules/es6.object.define-properties');
        require('./modules/es6.object.get-own-property-descriptor');
        require('./modules/es6.object.get-prototype-of');
        require('./modules/es6.object.keys');
        require('./modules/es6.object.get-own-property-names');
        require('./modules/es6.object.freeze');
        require('./modules/es6.object.seal');
        require('./modules/es6.object.prevent-extensions');
        require('./modules/es6.object.is-frozen');
        require('./modules/es6.object.is-sealed');
        require('./modules/es6.object.is-extensible');
        require('./modules/es6.object.assign');
        require('./modules/es6.object.is');
        require('./modules/es6.object.set-prototype-of');
        require('./modules/es6.object.to-string');
        require('./modules/es6.function.bind');
        require('./modules/es6.function.name');
        require('./modules/es6.function.has-instance');
        require('./modules/es6.parse-int');
        require('./modules/es6.parse-float');
        require('./modules/es6.number.constructor');
        require('./modules/es6.number.to-fixed');
        require('./modules/es6.number.to-precision');
        require('./modules/es6.number.epsilon');
        require('./modules/es6.number.is-finite');
        require('./modules/es6.number.is-integer');
        require('./modules/es6.number.is-nan');
        require('./modules/es6.number.is-safe-integer');
        require('./modules/es6.number.max-safe-integer');
        require('./modules/es6.number.min-safe-integer');
        require('./modules/es6.number.parse-float');
        require('./modules/es6.number.parse-int');
        require('./modules/es6.math.acosh');
        require('./modules/es6.math.asinh');
        require('./modules/es6.math.atanh');
        require('./modules/es6.math.cbrt');
        require('./modules/es6.math.clz32');
        require('./modules/es6.math.cosh');
        require('./modules/es6.math.expm1');
        require('./modules/es6.math.fround');
        require('./modules/es6.math.hypot');
        require('./modules/es6.math.imul');
        require('./modules/es6.math.log10');
        require('./modules/es6.math.log1p');
        require('./modules/es6.math.log2');
        require('./modules/es6.math.sign');
        require('./modules/es6.math.sinh');
        require('./modules/es6.math.tanh');
        require('./modules/es6.math.trunc');
        require('./modules/es6.string.from-code-point');
        require('./modules/es6.string.raw');
        require('./modules/es6.string.trim');
        require('./modules/es6.string.iterator');
        require('./modules/es6.string.code-point-at');
        require('./modules/es6.string.ends-with');
        require('./modules/es6.string.includes');
        require('./modules/es6.string.repeat');
        require('./modules/es6.string.starts-with');
        require('./modules/es6.string.anchor');
        require('./modules/es6.string.big');
        require('./modules/es6.string.blink');
        require('./modules/es6.string.bold');
        require('./modules/es6.string.fixed');
        require('./modules/es6.string.fontcolor');
        require('./modules/es6.string.fontsize');
        require('./modules/es6.string.italics');
        require('./modules/es6.string.link');
        require('./modules/es6.string.small');
        require('./modules/es6.string.strike');
        require('./modules/es6.string.sub');
        require('./modules/es6.string.sup');
        require('./modules/es6.date.now');
        require('./modules/es6.date.to-json');
        require('./modules/es6.date.to-iso-string');
        require('./modules/es6.date.to-string');
        require('./modules/es6.date.to-primitive');
        require('./modules/es6.array.is-array');
        require('./modules/es6.array.from');
        require('./modules/es6.array.of');
        require('./modules/es6.array.join');
        require('./modules/es6.array.slice');
        require('./modules/es6.array.sort');
        require('./modules/es6.array.for-each');
        require('./modules/es6.array.map');
        require('./modules/es6.array.filter');
        require('./modules/es6.array.some');
        require('./modules/es6.array.every');
        require('./modules/es6.array.reduce');
        require('./modules/es6.array.reduce-right');
        require('./modules/es6.array.index-of');
        require('./modules/es6.array.last-index-of');
        require('./modules/es6.array.copy-within');
        require('./modules/es6.array.fill');
        require('./modules/es6.array.find');
        require('./modules/es6.array.find-index');
        require('./modules/es6.array.species');
        require('./modules/es6.array.iterator');
        require('./modules/es6.regexp.constructor');
        require('./modules/es6.regexp.to-string');
        require('./modules/es6.regexp.flags');
        require('./modules/es6.regexp.match');
        require('./modules/es6.regexp.replace');
        require('./modules/es6.regexp.search');
        require('./modules/es6.regexp.split');
        require('./modules/es6.promise');
        require('./modules/es6.map');
        require('./modules/es6.set');
        require('./modules/es6.weak-map');
        require('./modules/es6.weak-set');
        require('./modules/es6.typed.array-buffer');
        require('./modules/es6.typed.data-view');
        require('./modules/es6.typed.int8-array');
        require('./modules/es6.typed.uint8-array');
        require('./modules/es6.typed.uint8-clamped-array');
        require('./modules/es6.typed.int16-array');
        require('./modules/es6.typed.uint16-array');
        require('./modules/es6.typed.int32-array');
        require('./modules/es6.typed.uint32-array');
        require('./modules/es6.typed.float32-array');
        require('./modules/es6.typed.float64-array');
        require('./modules/es6.reflect.apply');
        require('./modules/es6.reflect.construct');
        require('./modules/es6.reflect.define-property');
        require('./modules/es6.reflect.delete-property');
        require('./modules/es6.reflect.enumerate');
        require('./modules/es6.reflect.get');
        require('./modules/es6.reflect.get-own-property-descriptor');
        require('./modules/es6.reflect.get-prototype-of');
        require('./modules/es6.reflect.has');
        require('./modules/es6.reflect.is-extensible');
        require('./modules/es6.reflect.own-keys');
        require('./modules/es6.reflect.prevent-extensions');
        require('./modules/es6.reflect.set');
        require('./modules/es6.reflect.set-prototype-of');
        require('./modules/es7.array.includes');
        require('./modules/es7.array.flat-map');
        require('./modules/es7.array.flatten');
        require('./modules/es7.string.at');
        require('./modules/es7.string.pad-start');
        require('./modules/es7.string.pad-end');
        require('./modules/es7.string.trim-left');
        require('./modules/es7.string.trim-right');
        require('./modules/es7.string.match-all');
        require('./modules/es7.symbol.async-iterator');
        require('./modules/es7.symbol.observable');
        require('./modules/es7.object.get-own-property-descriptors');
        require('./modules/es7.object.values');
        require('./modules/es7.object.entries');
        require('./modules/es7.object.define-getter');
        require('./modules/es7.object.define-setter');
        require('./modules/es7.object.lookup-getter');
        require('./modules/es7.object.lookup-setter');
        require('./modules/es7.map.to-json');
        require('./modules/es7.set.to-json');
        require('./modules/es7.map.of');
        require('./modules/es7.set.of');
        require('./modules/es7.weak-map.of');
        require('./modules/es7.weak-set.of');
        require('./modules/es7.map.from');
        require('./modules/es7.set.from');
        require('./modules/es7.weak-map.from');
        require('./modules/es7.weak-set.from');
        require('./modules/es7.global');
        require('./modules/es7.system.global');
        require('./modules/es7.error.is-error');
        require('./modules/es7.math.clamp');
        require('./modules/es7.math.deg-per-rad');
        require('./modules/es7.math.degrees');
        require('./modules/es7.math.fscale');
        require('./modules/es7.math.iaddh');
        require('./modules/es7.math.isubh');
        require('./modules/es7.math.imulh');
        require('./modules/es7.math.rad-per-deg');
        require('./modules/es7.math.radians');
        require('./modules/es7.math.scale');
        require('./modules/es7.math.umulh');
        require('./modules/es7.math.signbit');
        require('./modules/es7.promise.finally');
        require('./modules/es7.promise.try');
        require('./modules/es7.reflect.define-metadata');
        require('./modules/es7.reflect.delete-metadata');
        require('./modules/es7.reflect.get-metadata');
        require('./modules/es7.reflect.get-metadata-keys');
        require('./modules/es7.reflect.get-own-metadata');
        require('./modules/es7.reflect.get-own-metadata-keys');
        require('./modules/es7.reflect.has-metadata');
        require('./modules/es7.reflect.has-own-metadata');
        require('./modules/es7.reflect.metadata');
        require('./modules/es7.asap');
        require('./modules/es7.observable');
        require('./modules/web.timers');
        require('./modules/web.immediate');
        require('./modules/web.dom.iterable');
        module.exports = require('./modules/_core');

    }, {
        "./modules/_core": 56,
        "./modules/es6.array.copy-within": 160,
        "./modules/es6.array.every": 161,
        "./modules/es6.array.fill": 162,
        "./modules/es6.array.filter": 163,
        "./modules/es6.array.find": 165,
        "./modules/es6.array.find-index": 164,
        "./modules/es6.array.for-each": 166,
        "./modules/es6.array.from": 167,
        "./modules/es6.array.index-of": 168,
        "./modules/es6.array.is-array": 169,
        "./modules/es6.array.iterator": 170,
        "./modules/es6.array.join": 171,
        "./modules/es6.array.last-index-of": 172,
        "./modules/es6.array.map": 173,
        "./modules/es6.array.of": 174,
        "./modules/es6.array.reduce": 176,
        "./modules/es6.array.reduce-right": 175,
        "./modules/es6.array.slice": 177,
        "./modules/es6.array.some": 178,
        "./modules/es6.array.sort": 179,
        "./modules/es6.array.species": 180,
        "./modules/es6.date.now": 181,
        "./modules/es6.date.to-iso-string": 182,
        "./modules/es6.date.to-json": 183,
        "./modules/es6.date.to-primitive": 184,
        "./modules/es6.date.to-string": 185,
        "./modules/es6.function.bind": 186,
        "./modules/es6.function.has-instance": 187,
        "./modules/es6.function.name": 188,
        "./modules/es6.map": 189,
        "./modules/es6.math.acosh": 190,
        "./modules/es6.math.asinh": 191,
        "./modules/es6.math.atanh": 192,
        "./modules/es6.math.cbrt": 193,
        "./modules/es6.math.clz32": 194,
        "./modules/es6.math.cosh": 195,
        "./modules/es6.math.expm1": 196,
        "./modules/es6.math.fround": 197,
        "./modules/es6.math.hypot": 198,
        "./modules/es6.math.imul": 199,
        "./modules/es6.math.log10": 200,
        "./modules/es6.math.log1p": 201,
        "./modules/es6.math.log2": 202,
        "./modules/es6.math.sign": 203,
        "./modules/es6.math.sinh": 204,
        "./modules/es6.math.tanh": 205,
        "./modules/es6.math.trunc": 206,
        "./modules/es6.number.constructor": 207,
        "./modules/es6.number.epsilon": 208,
        "./modules/es6.number.is-finite": 209,
        "./modules/es6.number.is-integer": 210,
        "./modules/es6.number.is-nan": 211,
        "./modules/es6.number.is-safe-integer": 212,
        "./modules/es6.number.max-safe-integer": 213,
        "./modules/es6.number.min-safe-integer": 214,
        "./modules/es6.number.parse-float": 215,
        "./modules/es6.number.parse-int": 216,
        "./modules/es6.number.to-fixed": 217,
        "./modules/es6.number.to-precision": 218,
        "./modules/es6.object.assign": 219,
        "./modules/es6.object.create": 220,
        "./modules/es6.object.define-properties": 221,
        "./modules/es6.object.define-property": 222,
        "./modules/es6.object.freeze": 223,
        "./modules/es6.object.get-own-property-descriptor": 224,
        "./modules/es6.object.get-own-property-names": 225,
        "./modules/es6.object.get-prototype-of": 226,
        "./modules/es6.object.is": 230,
        "./modules/es6.object.is-extensible": 227,
        "./modules/es6.object.is-frozen": 228,
        "./modules/es6.object.is-sealed": 229,
        "./modules/es6.object.keys": 231,
        "./modules/es6.object.prevent-extensions": 232,
        "./modules/es6.object.seal": 233,
        "./modules/es6.object.set-prototype-of": 234,
        "./modules/es6.object.to-string": 235,
        "./modules/es6.parse-float": 236,
        "./modules/es6.parse-int": 237,
        "./modules/es6.promise": 238,
        "./modules/es6.reflect.apply": 239,
        "./modules/es6.reflect.construct": 240,
        "./modules/es6.reflect.define-property": 241,
        "./modules/es6.reflect.delete-property": 242,
        "./modules/es6.reflect.enumerate": 243,
        "./modules/es6.reflect.get": 246,
        "./modules/es6.reflect.get-own-property-descriptor": 244,
        "./modules/es6.reflect.get-prototype-of": 245,
        "./modules/es6.reflect.has": 247,
        "./modules/es6.reflect.is-extensible": 248,
        "./modules/es6.reflect.own-keys": 249,
        "./modules/es6.reflect.prevent-extensions": 250,
        "./modules/es6.reflect.set": 252,
        "./modules/es6.reflect.set-prototype-of": 251,
        "./modules/es6.regexp.constructor": 253,
        "./modules/es6.regexp.flags": 254,
        "./modules/es6.regexp.match": 255,
        "./modules/es6.regexp.replace": 256,
        "./modules/es6.regexp.search": 257,
        "./modules/es6.regexp.split": 258,
        "./modules/es6.regexp.to-string": 259,
        "./modules/es6.set": 260,
        "./modules/es6.string.anchor": 261,
        "./modules/es6.string.big": 262,
        "./modules/es6.string.blink": 263,
        "./modules/es6.string.bold": 264,
        "./modules/es6.string.code-point-at": 265,
        "./modules/es6.string.ends-with": 266,
        "./modules/es6.string.fixed": 267,
        "./modules/es6.string.fontcolor": 268,
        "./modules/es6.string.fontsize": 269,
        "./modules/es6.string.from-code-point": 270,
        "./modules/es6.string.includes": 271,
        "./modules/es6.string.italics": 272,
        "./modules/es6.string.iterator": 273,
        "./modules/es6.string.link": 274,
        "./modules/es6.string.raw": 275,
        "./modules/es6.string.repeat": 276,
        "./modules/es6.string.small": 277,
        "./modules/es6.string.starts-with": 278,
        "./modules/es6.string.strike": 279,
        "./modules/es6.string.sub": 280,
        "./modules/es6.string.sup": 281,
        "./modules/es6.string.trim": 282,
        "./modules/es6.symbol": 283,
        "./modules/es6.typed.array-buffer": 284,
        "./modules/es6.typed.data-view": 285,
        "./modules/es6.typed.float32-array": 286,
        "./modules/es6.typed.float64-array": 287,
        "./modules/es6.typed.int16-array": 288,
        "./modules/es6.typed.int32-array": 289,
        "./modules/es6.typed.int8-array": 290,
        "./modules/es6.typed.uint16-array": 291,
        "./modules/es6.typed.uint32-array": 292,
        "./modules/es6.typed.uint8-array": 293,
        "./modules/es6.typed.uint8-clamped-array": 294,
        "./modules/es6.weak-map": 295,
        "./modules/es6.weak-set": 296,
        "./modules/es7.array.flat-map": 297,
        "./modules/es7.array.flatten": 298,
        "./modules/es7.array.includes": 299,
        "./modules/es7.asap": 300,
        "./modules/es7.error.is-error": 301,
        "./modules/es7.global": 302,
        "./modules/es7.map.from": 303,
        "./modules/es7.map.of": 304,
        "./modules/es7.map.to-json": 305,
        "./modules/es7.math.clamp": 306,
        "./modules/es7.math.deg-per-rad": 307,
        "./modules/es7.math.degrees": 308,
        "./modules/es7.math.fscale": 309,
        "./modules/es7.math.iaddh": 310,
        "./modules/es7.math.imulh": 311,
        "./modules/es7.math.isubh": 312,
        "./modules/es7.math.rad-per-deg": 313,
        "./modules/es7.math.radians": 314,
        "./modules/es7.math.scale": 315,
        "./modules/es7.math.signbit": 316,
        "./modules/es7.math.umulh": 317,
        "./modules/es7.object.define-getter": 318,
        "./modules/es7.object.define-setter": 319,
        "./modules/es7.object.entries": 320,
        "./modules/es7.object.get-own-property-descriptors": 321,
        "./modules/es7.object.lookup-getter": 322,
        "./modules/es7.object.lookup-setter": 323,
        "./modules/es7.object.values": 324,
        "./modules/es7.observable": 325,
        "./modules/es7.promise.finally": 326,
        "./modules/es7.promise.try": 327,
        "./modules/es7.reflect.define-metadata": 328,
        "./modules/es7.reflect.delete-metadata": 329,
        "./modules/es7.reflect.get-metadata": 331,
        "./modules/es7.reflect.get-metadata-keys": 330,
        "./modules/es7.reflect.get-own-metadata": 333,
        "./modules/es7.reflect.get-own-metadata-keys": 332,
        "./modules/es7.reflect.has-metadata": 334,
        "./modules/es7.reflect.has-own-metadata": 335,
        "./modules/es7.reflect.metadata": 336,
        "./modules/es7.set.from": 337,
        "./modules/es7.set.of": 338,
        "./modules/es7.set.to-json": 339,
        "./modules/es7.string.at": 340,
        "./modules/es7.string.match-all": 341,
        "./modules/es7.string.pad-end": 342,
        "./modules/es7.string.pad-start": 343,
        "./modules/es7.string.trim-left": 344,
        "./modules/es7.string.trim-right": 345,
        "./modules/es7.symbol.async-iterator": 346,
        "./modules/es7.symbol.observable": 347,
        "./modules/es7.system.global": 348,
        "./modules/es7.weak-map.from": 349,
        "./modules/es7.weak-map.of": 350,
        "./modules/es7.weak-set.from": 351,
        "./modules/es7.weak-set.of": 352,
        "./modules/web.dom.iterable": 353,
        "./modules/web.immediate": 354,
        "./modules/web.timers": 355
    }],
    357: [function (require, module, exports) {
        "use strict"

        var createThunk = require("./lib/thunk.js")

        function Procedure() {
            this.argTypes = []
            this.shimArgs = []
            this.arrayArgs = []
            this.arrayBlockIndices = []
            this.scalarArgs = []
            this.offsetArgs = []
            this.offsetArgIndex = []
            this.indexArgs = []
            this.shapeArgs = []
            this.funcName = ""
            this.pre = null
            this.body = null
            this.post = null
            this.debug = false
        }

        function compileCwise(user_args) {
            //Create procedure
            var proc = new Procedure()

            //Parse blocks
            proc.pre = user_args.pre
            proc.body = user_args.body
            proc.post = user_args.post

            //Parse arguments
            var proc_args = user_args.args.slice(0)
            proc.argTypes = proc_args
            for (var i = 0; i < proc_args.length; ++i) {
                var arg_type = proc_args[i]
                if (arg_type === "array" || (typeof arg_type === "object" && arg_type.blockIndices)) {
                    proc.argTypes[i] = "array"
                    proc.arrayArgs.push(i)
                    proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0)
                    proc.shimArgs.push("array" + i)
                    if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {
                        throw new Error("cwise: pre() block may not reference array args")
                    }
                    if (i < proc.post.args.length && proc.post.args[i].count > 0) {
                        throw new Error("cwise: post() block may not reference array args")
                    }
                } else if (arg_type === "scalar") {
                    proc.scalarArgs.push(i)
                    proc.shimArgs.push("scalar" + i)
                } else if (arg_type === "index") {
                    proc.indexArgs.push(i)
                    if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {
                        throw new Error("cwise: pre() block may not reference array index")
                    }
                    if (i < proc.body.args.length && proc.body.args[i].lvalue) {
                        throw new Error("cwise: body() block may not write to array index")
                    }
                    if (i < proc.post.args.length && proc.post.args[i].count > 0) {
                        throw new Error("cwise: post() block may not reference array index")
                    }
                } else if (arg_type === "shape") {
                    proc.shapeArgs.push(i)
                    if (i < proc.pre.args.length && proc.pre.args[i].lvalue) {
                        throw new Error("cwise: pre() block may not write to array shape")
                    }
                    if (i < proc.body.args.length && proc.body.args[i].lvalue) {
                        throw new Error("cwise: body() block may not write to array shape")
                    }
                    if (i < proc.post.args.length && proc.post.args[i].lvalue) {
                        throw new Error("cwise: post() block may not write to array shape")
                    }
                } else if (typeof arg_type === "object" && arg_type.offset) {
                    proc.argTypes[i] = "offset"
                    proc.offsetArgs.push({array: arg_type.array, offset: arg_type.offset})
                    proc.offsetArgIndex.push(i)
                } else {
                    throw new Error("cwise: Unknown argument type " + proc_args[i])
                }
            }

            //Make sure at least one array argument was specified
            if (proc.arrayArgs.length <= 0) {
                throw new Error("cwise: No array arguments specified")
            }

            //Make sure arguments are correct
            if (proc.pre.args.length > proc_args.length) {
                throw new Error("cwise: Too many arguments in pre() block")
            }
            if (proc.body.args.length > proc_args.length) {
                throw new Error("cwise: Too many arguments in body() block")
            }
            if (proc.post.args.length > proc_args.length) {
                throw new Error("cwise: Too many arguments in post() block")
            }

            //Check debug flag
            proc.debug = !!user_args.printCode || !!user_args.debug

            //Retrieve name
            proc.funcName = user_args.funcName || "cwise"

            //Read in block size
            proc.blockSize = user_args.blockSize || 64

            return createThunk(proc)
        }

        module.exports = compileCwise

    }, {"./lib/thunk.js": 359}],
    358: [function (require, module, exports) {
        "use strict"

        var uniq = require("uniq")

// This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)
// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of "pointers" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.
        function innerFill(order, proc, body) {
            var dimension = order.length
                , nargs = proc.arrayArgs.length
                , has_index = proc.indexArgs.length > 0
                , code = []
                , vars = []
                , idx = 0, pidx = 0, i, j
            for (i = 0; i < dimension; ++i) { // Iteration variables
                vars.push(["i", i, "=0"].join(""))
            }
            //Compute scan deltas
            for (j = 0; j < nargs; ++j) {
                for (i = 0; i < dimension; ++i) {
                    pidx = idx
                    idx = order[i]
                    if (i === 0) { // The innermost/fastest dimension's delta is simply its stride
                        vars.push(["d", j, "s", i, "=t", j, "p", idx].join(""))
                    } else { // For other dimensions the delta is basically the stride minus something which essentially "rewinds" the previous (more inner) dimension
                        vars.push(["d", j, "s", i, "=(t", j, "p", idx, "-s", pidx, "*t", j, "p", pidx, ")"].join(""))
                    }
                }
            }
            if (vars.length > 0) {
                code.push("var " + vars.join(","))
            }
            //Scan loop
            for (i = dimension - 1; i >= 0; --i) { // Start at largest stride and work your way inwards
                idx = order[i]
                code.push(["for(i", i, "=0;i", i, "<s", idx, ";++i", i, "){"].join(""))
            }
            //Push body of inner loop
            code.push(body)
            //Advance scan pointers
            for (i = 0; i < dimension; ++i) {
                pidx = idx
                idx = order[i]
                for (j = 0; j < nargs; ++j) {
                    code.push(["p", j, "+=d", j, "s", i].join(""))
                }
                if (has_index) {
                    if (i > 0) {
                        code.push(["index[", pidx, "]-=s", pidx].join(""))
                    }
                    code.push(["++index[", idx, "]"].join(""))
                }
                code.push("}")
            }
            return code.join("\n")
        }

// Generate "outer" loops that loop over blocks of data, applying "inner" loops to the blocks by manipulating the local variables in such a way that the inner loop only "sees" the current block.
// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.
//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and "shape" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.
        function outerFill(matched, order, proc, body) {
            var dimension = order.length
                , nargs = proc.arrayArgs.length
                , blockSize = proc.blockSize
                , has_index = proc.indexArgs.length > 0
                , code = []
            for (var i = 0; i < nargs; ++i) {
                code.push(["var offset", i, "=p", i].join(""))
            }
            //Generate loops for unmatched dimensions
            // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)
            // TODO: It would be nice if the order in which these loops are placed would also be somehow "optimal" (at the very least we should check that it really doesn't hurt us if they're not).
            for (var i = matched; i < dimension; ++i) {
                code.push(["for(var j" + i + "=SS[", order[i], "]|0;j", i, ">0;){"].join("")) // Iterate back to front
                code.push(["if(j", i, "<", blockSize, "){"].join("")) // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).
                code.push(["s", order[i], "=j", i].join(""))
                code.push(["j", i, "=0"].join(""))
                code.push(["}else{s", order[i], "=", blockSize].join(""))
                code.push(["j", i, "-=", blockSize, "}"].join(""))
                if (has_index) {
                    code.push(["index[", order[i], "]=j", i].join(""))
                }
            }
            for (var i = 0; i < nargs; ++i) {
                var indexStr = ["offset" + i]
                for (var j = matched; j < dimension; ++j) {
                    indexStr.push(["j", j, "*t", i, "p", order[j]].join(""))
                }
                code.push(["p", i, "=(", indexStr.join("+"), ")"].join(""))
            }
            code.push(innerFill(order, proc, body))
            for (var i = matched; i < dimension; ++i) {
                code.push("}")
            }
            return code.join("\n")
        }

//Count the number of compatible inner orders
// This is the length of the longest common prefix of the arrays in orders.
// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.
// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.
        function countMatches(orders) {
            var matched = 0, dimension = orders[0].length
            while (matched < dimension) {
                for (var j = 1; j < orders.length; ++j) {
                    if (orders[j][matched] !== orders[0][matched]) {
                        return matched
                    }
                }
                ++matched
            }
            return matched
        }

//Processes a block according to the given data types
// Replaces variable names by different ones, either "local" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.
        function processBlock(block, proc, dtypes) {
            var code = block.body
            var pre = []
            var post = []
            for (var i = 0; i < block.args.length; ++i) {
                var carg = block.args[i]
                if (carg.count <= 0) {
                    continue
                }
                var re = new RegExp(carg.name, "g")
                var ptrStr = ""
                var arrNum = proc.arrayArgs.indexOf(i)
                switch (proc.argTypes[i]) {
                    case "offset":
                        var offArgIndex = proc.offsetArgIndex.indexOf(i)
                        var offArg = proc.offsetArgs[offArgIndex]
                        arrNum = offArg.array
                        ptrStr = "+q" + offArgIndex // Adds offset to the "pointer" in the array
                    case "array":
                        ptrStr = "p" + arrNum + ptrStr
                        var localStr = "l" + i
                        var arrStr = "a" + arrNum
                        if (proc.arrayBlockIndices[arrNum] === 0) { // Argument to body is just a single value from this array
                            if (carg.count === 1) { // Argument/array used only once(?)
                                if (dtypes[arrNum] === "generic") {
                                    if (carg.lvalue) {
                                        pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join("")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)
                                        code = code.replace(re, localStr)
                                        post.push([arrStr, ".set(", ptrStr, ",", localStr, ")"].join(""))
                                    } else {
                                        code = code.replace(re, [arrStr, ".get(", ptrStr, ")"].join(""))
                                    }
                                } else {
                                    code = code.replace(re, [arrStr, "[", ptrStr, "]"].join(""))
                                }
                            } else if (dtypes[arrNum] === "generic") {
                                pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join("")) // TODO: Could we optimize by checking for carg.rvalue?
                                code = code.replace(re, localStr)
                                if (carg.lvalue) {
                                    post.push([arrStr, ".set(", ptrStr, ",", localStr, ")"].join(""))
                                }
                            } else {
                                pre.push(["var ", localStr, "=", arrStr, "[", ptrStr, "]"].join("")) // TODO: Could we optimize by checking for carg.rvalue?
                                code = code.replace(re, localStr)
                                if (carg.lvalue) {
                                    post.push([arrStr, "[", ptrStr, "]=", localStr].join(""))
                                }
                            }
                        } else { // Argument to body is a "block"
                            var reStrArr = [carg.name], ptrStrArr = [ptrStr]
                            for (var j = 0; j < Math.abs(proc.arrayBlockIndices[arrNum]); j++) {
                                reStrArr.push("\\s*\\[([^\\]]+)\\]")
                                ptrStrArr.push("$" + (j + 1) + "*t" + arrNum + "b" + j) // Matched index times stride
                            }
                            re = new RegExp(reStrArr.join(""), "g")
                            ptrStr = ptrStrArr.join("+")
                            if (dtypes[arrNum] === "generic") {
                                /*if(carg.lvalue) {
              pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join("")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)
              code = code.replace(re, localStr)
              post.push([arrStr, ".set(", ptrStr, ",", localStr,")"].join(""))
            } else {
              code = code.replace(re, [arrStr, ".get(", ptrStr, ")"].join(""))
            }*/
                                throw new Error("cwise: Generic arrays not supported in combination with blocks!")
                            } else {
                                // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.
                                code = code.replace(re, [arrStr, "[", ptrStr, "]"].join(""))
                            }
                        }
                        break
                    case "scalar":
                        code = code.replace(re, "Y" + proc.scalarArgs.indexOf(i))
                        break
                    case "index":
                        code = code.replace(re, "index")
                        break
                    case "shape":
                        code = code.replace(re, "shape")
                        break
                }
            }
            return [pre.join("\n"), code, post.join("\n")].join("\n").trim()
        }

        function typeSummary(dtypes) {
            var summary = new Array(dtypes.length)
            var allEqual = true
            for (var i = 0; i < dtypes.length; ++i) {
                var t = dtypes[i]
                var digits = t.match(/\d+/)
                if (!digits) {
                    digits = ""
                } else {
                    digits = digits[0]
                }
                if (t.charAt(0) === 0) {
                    summary[i] = "u" + t.charAt(1) + digits
                } else {
                    summary[i] = t.charAt(0) + digits
                }
                if (i > 0) {
                    allEqual = allEqual && summary[i] === summary[i - 1]
                }
            }
            if (allEqual) {
                return summary[0]
            }
            return summary.join("")
        }

//Generates a cwise operator
        function generateCWiseOp(proc, typesig) {

            //Compute dimension
            // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.
            var dimension = (typesig[1].length - Math.abs(proc.arrayBlockIndices[0])) | 0
            var orders = new Array(proc.arrayArgs.length)
            var dtypes = new Array(proc.arrayArgs.length)
            for (var i = 0; i < proc.arrayArgs.length; ++i) {
                dtypes[i] = typesig[2 * i]
                orders[i] = typesig[2 * i + 1]
            }

            //Determine where block and loop indices start and end
            var blockBegin = [], blockEnd = [] // These indices are exposed as blocks
            var loopBegin = [], loopEnd = [] // These indices are iterated over
            var loopOrders = [] // orders restricted to the loop indices
            for (var i = 0; i < proc.arrayArgs.length; ++i) {
                if (proc.arrayBlockIndices[i] < 0) {
                    loopBegin.push(0)
                    loopEnd.push(dimension)
                    blockBegin.push(dimension)
                    blockEnd.push(dimension + proc.arrayBlockIndices[i])
                } else {
                    loopBegin.push(proc.arrayBlockIndices[i]) // Non-negative
                    loopEnd.push(proc.arrayBlockIndices[i] + dimension)
                    blockBegin.push(0)
                    blockEnd.push(proc.arrayBlockIndices[i])
                }
                var newOrder = []
                for (var j = 0; j < orders[i].length; j++) {
                    if (loopBegin[i] <= orders[i][j] && orders[i][j] < loopEnd[i]) {
                        newOrder.push(orders[i][j] - loopBegin[i]) // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.
                    }
                }
                loopOrders.push(newOrder)
            }

            //First create arguments for procedure
            var arglist = ["SS"] // SS is the overall shape over which we iterate
            var code = ["'use strict'"]
            var vars = []

            for (var j = 0; j < dimension; ++j) {
                vars.push(["s", j, "=SS[", j, "]"].join("")) // The limits for each dimension.
            }
            for (var i = 0; i < proc.arrayArgs.length; ++i) {
                arglist.push("a" + i) // Actual data array
                arglist.push("t" + i) // Strides
                arglist.push("p" + i) // Offset in the array at which the data starts (also used for iterating over the data)

                for (var j = 0; j < dimension; ++j) { // Unpack the strides into vars for looping
                    vars.push(["t", i, "p", j, "=t", i, "[", loopBegin[i] + j, "]"].join(""))
                }

                for (var j = 0; j < Math.abs(proc.arrayBlockIndices[i]); ++j) { // Unpack the strides into vars for block iteration
                    vars.push(["t", i, "b", j, "=t", i, "[", blockBegin[i] + j, "]"].join(""))
                }
            }
            for (var i = 0; i < proc.scalarArgs.length; ++i) {
                arglist.push("Y" + i)
            }
            if (proc.shapeArgs.length > 0) {
                vars.push("shape=SS.slice(0)") // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)
            }
            if (proc.indexArgs.length > 0) {
                // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.
                var zeros = new Array(dimension)
                for (var i = 0; i < dimension; ++i) {
                    zeros[i] = "0"
                }
                vars.push(["index=[", zeros.join(","), "]"].join(""))
            }
            for (var i = 0; i < proc.offsetArgs.length; ++i) { // Offset arguments used for stencil operations
                var off_arg = proc.offsetArgs[i]
                var init_string = []
                for (var j = 0; j < off_arg.offset.length; ++j) {
                    if (off_arg.offset[j] === 0) {
                        continue
                    } else if (off_arg.offset[j] === 1) {
                        init_string.push(["t", off_arg.array, "p", j].join(""))
                    } else {
                        init_string.push([off_arg.offset[j], "*t", off_arg.array, "p", j].join(""))
                    }
                }
                if (init_string.length === 0) {
                    vars.push("q" + i + "=0")
                } else {
                    vars.push(["q", i, "=", init_string.join("+")].join(""))
                }
            }

            //Prepare this variables
            var thisVars = uniq([].concat(proc.pre.thisVars)
                .concat(proc.body.thisVars)
                .concat(proc.post.thisVars))
            vars = vars.concat(thisVars)
            if (vars.length > 0) {
                code.push("var " + vars.join(","))
            }
            for (var i = 0; i < proc.arrayArgs.length; ++i) {
                code.push("p" + i + "|=0")
            }

            //Inline prelude
            if (proc.pre.body.length > 3) {
                code.push(processBlock(proc.pre, proc, dtypes))
            }

            //Process body
            var body = processBlock(proc.body, proc, dtypes)
            var matched = countMatches(loopOrders)
            if (matched < dimension) {
                code.push(outerFill(matched, loopOrders[0], proc, body)) // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.
            } else {
                code.push(innerFill(loopOrders[0], proc, body))
            }

            //Inline epilog
            if (proc.post.body.length > 3) {
                code.push(processBlock(proc.post, proc, dtypes))
            }

            if (proc.debug) {
                console.log("-----Generated cwise routine for ", typesig, ":\n" + code.join("\n") + "\n----------")
            }

            var loopName = [(proc.funcName || "unnamed"), "_cwise_loop_", orders[0].join("s"), "m", matched, typeSummary(dtypes)].join("")
            var f = new Function(["function ", loopName, "(", arglist.join(","), "){", code.join("\n"), "} return ", loopName].join(""))
            return f()
        }

        module.exports = generateCWiseOp

    }, {"uniq": 685}],
    359: [function (require, module, exports) {
        "use strict"

// The function below is called when constructing a cwise function object, and does the following:
// A function object is constructed which accepts as argument a compilation function and returns another function.
// It is this other function that is eventually returned by createThunk, and this function is the one that actually
// checks whether a certain pattern of arguments has already been used before and compiles new loops as needed.
// The compilation passed to the first function object is used for compiling new functions.
// Once this function object is created, it is called with compile as argument, where the first argument of compile
// is bound to "proc" (essentially containing a preprocessed version of the user arguments to cwise).
// So createThunk roughly works like this:
// function createThunk(proc) {
//   var thunk = function(compileBound) {
//     var CACHED = {}
//     return function(arrays and scalars) {
//       if (dtype and order of arrays in CACHED) {
//         var func = CACHED[dtype and order of arrays]
//       } else {
//         var func = CACHED[dtype and order of arrays] = compileBound(dtype and order of arrays)
//       }
//       return func(arrays and scalars)
//     }
//   }
//   return thunk(compile.bind1(proc))
// }

        var compile = require("./compile.js")

        function createThunk(proc) {
            var code = ["'use strict'", "var CACHED={}"]
            var vars = []
            var thunkName = proc.funcName + "_cwise_thunk"

            //Build thunk
            code.push(["return function ", thunkName, "(", proc.shimArgs.join(","), "){"].join(""))
            var typesig = []
            var string_typesig = []
            var proc_args = [["array", proc.arrayArgs[0], ".shape.slice(", // Slice shape so that we only retain the shape over which we iterate (which gets passed to the cwise operator as SS).
                Math.max(0, proc.arrayBlockIndices[0]), proc.arrayBlockIndices[0] < 0 ? ("," + proc.arrayBlockIndices[0] + ")") : ")"].join("")]
            var shapeLengthConditions = [], shapeConditions = []
            // Process array arguments
            for (var i = 0; i < proc.arrayArgs.length; ++i) {
                var j = proc.arrayArgs[i]
                vars.push(["t", j, "=array", j, ".dtype,",
                    "r", j, "=array", j, ".order"].join(""))
                typesig.push("t" + j)
                typesig.push("r" + j)
                string_typesig.push("t" + j)
                string_typesig.push("r" + j + ".join()")
                proc_args.push("array" + j + ".data")
                proc_args.push("array" + j + ".stride")
                proc_args.push("array" + j + ".offset|0")
                if (i > 0) { // Gather conditions to check for shape equality (ignoring block indices)
                    shapeLengthConditions.push("array" + proc.arrayArgs[0] + ".shape.length===array" + j + ".shape.length+" + (Math.abs(proc.arrayBlockIndices[0]) - Math.abs(proc.arrayBlockIndices[i])))
                    shapeConditions.push("array" + proc.arrayArgs[0] + ".shape[shapeIndex+" + Math.max(0, proc.arrayBlockIndices[0]) + "]===array" + j + ".shape[shapeIndex+" + Math.max(0, proc.arrayBlockIndices[i]) + "]")
                }
            }
            // Check for shape equality
            if (proc.arrayArgs.length > 1) {
                code.push("if (!(" + shapeLengthConditions.join(" && ") + ")) throw new Error('cwise: Arrays do not all have the same dimensionality!')")
                code.push("for(var shapeIndex=array" + proc.arrayArgs[0] + ".shape.length-" + Math.abs(proc.arrayBlockIndices[0]) + "; shapeIndex-->0;) {")
                code.push("if (!(" + shapeConditions.join(" && ") + ")) throw new Error('cwise: Arrays do not all have the same shape!')")
                code.push("}")
            }
            // Process scalar arguments
            for (var i = 0; i < proc.scalarArgs.length; ++i) {
                proc_args.push("scalar" + proc.scalarArgs[i])
            }
            // Check for cached function (and if not present, generate it)
            vars.push(["type=[", string_typesig.join(","), "].join()"].join(""))
            vars.push("proc=CACHED[type]")
            code.push("var " + vars.join(","))

            code.push(["if(!proc){",
                "CACHED[type]=proc=compile([", typesig.join(","), "])}",
                "return proc(", proc_args.join(","), ")}"].join(""))

            if (proc.debug) {
                console.log("-----Generated thunk:\n" + code.join("\n") + "\n----------")
            }

            //Compile thunk
            var thunk = new Function("compile", code.join("\n"))
            return thunk(compile.bind(undefined, proc))
        }

        module.exports = createThunk

    }, {"./compile.js": 358}],
    360: [function (require, module, exports) {
        (function (global) {
            "use strict"

            var esprima = require("esprima")
            var uniq = require("uniq")

            var PREFIX_COUNTER = 0

            function CompiledArgument(name, lvalue, rvalue) {
                this.name = name
                this.lvalue = lvalue
                this.rvalue = rvalue
                this.count = 0
            }

            function CompiledRoutine(body, args, thisVars, localVars) {
                this.body = body
                this.args = args
                this.thisVars = thisVars
                this.localVars = localVars
            }

            function isGlobal(identifier) {
                if (identifier === "eval") {
                    throw new Error("cwise-parser: eval() not allowed")
                }
                if (typeof window !== "undefined") {
                    return identifier in window
                } else if (typeof global !== "undefined") {
                    return identifier in global
                } else if (typeof self !== "undefined") {
                    return identifier in self
                } else {
                    return false
                }
            }

            function getArgNames(ast) {
                var params = ast.body[0].expression.callee.params
                var names = new Array(params.length)
                for (var i = 0; i < params.length; ++i) {
                    names[i] = params[i].name
                }
                return names
            }

            function preprocess(func) {
                var src = ["(", func, ")()"].join("")
                var ast = esprima.parse(src, {range: true})

                //Compute new prefix
                var prefix = "_inline_" + (PREFIX_COUNTER++) + "_"

                //Parse out arguments
                var argNames = getArgNames(ast)
                var compiledArgs = new Array(argNames.length)
                for (var i = 0; i < argNames.length; ++i) {
                    compiledArgs[i] = new CompiledArgument([prefix, "arg", i, "_"].join(""), false, false)
                }

                //Create temporary data structure for source rewriting
                var exploded = new Array(src.length)
                for (var i = 0, n = src.length; i < n; ++i) {
                    exploded[i] = src.charAt(i)
                }

                //Local variables
                var localVars = []
                var thisVars = []
                var computedThis = false

                //Retrieves a local variable
                function createLocal(id) {
                    var nstr = prefix + id.replace(/\_/g, "__")
                    localVars.push(nstr)
                    return nstr
                }

                //Creates a this variable
                function createThisVar(id) {
                    var nstr = "this_" + id.replace(/\_/g, "__")
                    thisVars.push(nstr)
                    return nstr
                }

                //Rewrites an ast node
                function rewrite(node, nstr) {
                    var lo = node.range[0], hi = node.range[1]
                    for (var i = lo + 1; i < hi; ++i) {
                        exploded[i] = ""
                    }
                    exploded[lo] = nstr
                }

                //Remove any underscores
                function escapeString(str) {
                    return "'" + (str.replace(/\_/g, "\\_").replace(/\'/g, "\'")) + "'"
                }

                //Returns the source of an identifier
                function source(node) {
                    return exploded.slice(node.range[0], node.range[1]).join("")
                }

                //Computes the usage of a node
                var LVALUE = 1
                var RVALUE = 2

                function getUsage(node) {
                    if (node.parent.type === "AssignmentExpression") {
                        if (node.parent.left === node) {
                            if (node.parent.operator === "=") {
                                return LVALUE
                            }
                            return LVALUE | RVALUE
                        }
                    }
                    if (node.parent.type === "UpdateExpression") {
                        return LVALUE | RVALUE
                    }
                    return RVALUE
                }

                //Handle visiting a node
                (function visit(node, parent) {
                    node.parent = parent
                    if (node.type === "MemberExpression") {
                        //Handle member expression
                        if (node.computed) {
                            visit(node.object, node)
                            visit(node.property, node)
                        } else if (node.object.type === "ThisExpression") {
                            rewrite(node, createThisVar(node.property.name))
                        } else {
                            visit(node.object, node)
                        }
                    } else if (node.type === "ThisExpression") {
                        throw new Error("cwise-parser: Computed this is not allowed")
                    } else if (node.type === "Identifier") {
                        //Handle identifier
                        var name = node.name
                        var argNo = argNames.indexOf(name)
                        if (argNo >= 0) {
                            var carg = compiledArgs[argNo]
                            var usage = getUsage(node)
                            if (usage & LVALUE) {
                                carg.lvalue = true
                            }
                            if (usage & RVALUE) {
                                carg.rvalue = true
                            }
                            ++carg.count
                            rewrite(node, carg.name)
                        } else if (isGlobal(name)) {
                            //Don't rewrite globals
                        } else {
                            rewrite(node, createLocal(name))
                        }
                    } else if (node.type === "Literal") {
                        if (typeof node.value === "string") {
                            rewrite(node, escapeString(node.value))
                        }
                    } else if (node.type === "WithStatement") {
                        throw new Error("cwise-parser: with() statements not allowed")
                    } else {
                        //Visit all children
                        var keys = Object.keys(node)
                        for (var i = 0, n = keys.length; i < n; ++i) {
                            if (keys[i] === "parent") {
                                continue
                            }
                            var value = node[keys[i]]
                            if (value) {
                                if (value instanceof Array) {
                                    for (var j = 0; j < value.length; ++j) {
                                        if (value[j] && typeof value[j].type === "string") {
                                            visit(value[j], node)
                                        }
                                    }
                                } else if (typeof value.type === "string") {
                                    visit(value, node)
                                }
                            }
                        }
                    }
                })(ast.body[0].expression.callee.body, undefined)

                //Remove duplicate variables
                uniq(localVars)
                uniq(thisVars)

                //Return body
                var routine = new CompiledRoutine(source(ast.body[0].expression.callee.body), compiledArgs, thisVars, localVars)
                return routine
            }

            module.exports = preprocess
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {"esprima": 364, "uniq": 685}],
    361: [function (require, module, exports) {
        "use strict"

        var parse = require("cwise-parser")
        var compile = require("cwise-compiler")

        var REQUIRED_FIELDS = ["args", "body"]
        var OPTIONAL_FIELDS = ["pre", "post", "printCode", "funcName", "blockSize"]

        function createCWise(user_args) {
            //Check parameters
            for (var id in user_args) {
                if (REQUIRED_FIELDS.indexOf(id) < 0 &&
                    OPTIONAL_FIELDS.indexOf(id) < 0) {
                    console.warn("cwise: Unknown argument '" + id + "' passed to expression compiler")
                }
            }
            for (var i = 0; i < REQUIRED_FIELDS.length; ++i) {
                if (!user_args[REQUIRED_FIELDS[i]]) {
                    throw new Error("cwise: Missing argument: " + REQUIRED_FIELDS[i])
                }
            }

            //Parse blocks
            return compile({
                args: user_args.args,
                pre: parse(user_args.pre || function () {
                }),
                body: parse(user_args.body),
                post: parse(user_args.post || function () {
                }),
                debug: !!user_args.printCode,
                funcName: user_args.funcName || user_args.body.name || "cwise",
                blockSize: user_args.blockSize || 64
            })
        }

        module.exports = createCWise

    }, {"cwise-compiler": 357, "cwise-parser": 360}],
    362: [function (require, module, exports) {
        module.exports = require("cwise-compiler")
    }, {"cwise-compiler": 357}],
    363: [function (require, module, exports) {
        "use strict"

        function dupe_array(count, value, i) {
            var c = count[i] | 0
            if (c <= 0) {
                return []
            }
            var result = new Array(c), j
            if (i === count.length - 1) {
                for (j = 0; j < c; ++j) {
                    result[j] = value
                }
            } else {
                for (j = 0; j < c; ++j) {
                    result[j] = dupe_array(count, value, i + 1)
                }
            }
            return result
        }

        function dupe_number(count, value) {
            var result, i
            result = new Array(count)
            for (i = 0; i < count; ++i) {
                result[i] = value
            }
            return result
        }

        function dupe(count, value) {
            if (typeof value === "undefined") {
                value = 0
            }
            switch (typeof count) {
                case "number":
                    if (count > 0) {
                        return dupe_number(count | 0, value)
                    }
                    break
                case "object":
                    if (typeof (count.length) === "number") {
                        return dupe_array(count, value, 0)
                    }
                    break
            }
            return []
        }

        module.exports = dupe
    }, {}],
    364: [function (require, module, exports) {
        /*
  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

        /*jslint bitwise:true plusplus:true */
        /*global esprima:true, define:true, exports:true, window: true,
throwErrorTolerant: true,
throwError: true, generateStatement: true, peek: true,
parseAssignmentExpression: true, parseBlock: true, parseExpression: true,
parseFunctionDeclaration: true, parseFunctionExpression: true,
parseFunctionSourceElements: true, parseVariableIdentifier: true,
parseLeftHandSideExpression: true,
parseUnaryExpression: true,
parseStatement: true, parseSourceElement: true */

        (function (root, factory) {
            'use strict';

            // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
            // Rhino, and plain browser loading.

            /* istanbul ignore next */
            if (typeof define === 'function' && define.amd) {
                define(['exports'], factory);
            } else if (typeof exports !== 'undefined') {
                factory(exports);
            } else {
                factory((root.esprima = {}));
            }
        }(this, function (exports) {
            'use strict';

            var Token,
                TokenName,
                FnExprTokens,
                Syntax,
                PropertyKind,
                Messages,
                Regex,
                SyntaxTreeDelegate,
                source,
                strict,
                index,
                lineNumber,
                lineStart,
                length,
                delegate,
                lookahead,
                state,
                extra;

            Token = {
                BooleanLiteral: 1,
                EOF: 2,
                Identifier: 3,
                Keyword: 4,
                NullLiteral: 5,
                NumericLiteral: 6,
                Punctuator: 7,
                StringLiteral: 8,
                RegularExpression: 9
            };

            TokenName = {};
            TokenName[Token.BooleanLiteral] = 'Boolean';
            TokenName[Token.EOF] = '<end>';
            TokenName[Token.Identifier] = 'Identifier';
            TokenName[Token.Keyword] = 'Keyword';
            TokenName[Token.NullLiteral] = 'Null';
            TokenName[Token.NumericLiteral] = 'Numeric';
            TokenName[Token.Punctuator] = 'Punctuator';
            TokenName[Token.StringLiteral] = 'String';
            TokenName[Token.RegularExpression] = 'RegularExpression';

            // A function following one of those tokens is an expression.
            FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
                'return', 'case', 'delete', 'throw', 'void',
                // assignment operators
                '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',
                '&=', '|=', '^=', ',',
                // binary/unary operators
                '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
                '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
                '<=', '<', '>', '!=', '!=='];

            Syntax = {
                AssignmentExpression: 'AssignmentExpression',
                ArrayExpression: 'ArrayExpression',
                BlockStatement: 'BlockStatement',
                BinaryExpression: 'BinaryExpression',
                BreakStatement: 'BreakStatement',
                CallExpression: 'CallExpression',
                CatchClause: 'CatchClause',
                ConditionalExpression: 'ConditionalExpression',
                ContinueStatement: 'ContinueStatement',
                DoWhileStatement: 'DoWhileStatement',
                DebuggerStatement: 'DebuggerStatement',
                EmptyStatement: 'EmptyStatement',
                ExpressionStatement: 'ExpressionStatement',
                ForStatement: 'ForStatement',
                ForInStatement: 'ForInStatement',
                FunctionDeclaration: 'FunctionDeclaration',
                FunctionExpression: 'FunctionExpression',
                Identifier: 'Identifier',
                IfStatement: 'IfStatement',
                Literal: 'Literal',
                LabeledStatement: 'LabeledStatement',
                LogicalExpression: 'LogicalExpression',
                MemberExpression: 'MemberExpression',
                NewExpression: 'NewExpression',
                ObjectExpression: 'ObjectExpression',
                Program: 'Program',
                Property: 'Property',
                ReturnStatement: 'ReturnStatement',
                SequenceExpression: 'SequenceExpression',
                SwitchStatement: 'SwitchStatement',
                SwitchCase: 'SwitchCase',
                ThisExpression: 'ThisExpression',
                ThrowStatement: 'ThrowStatement',
                TryStatement: 'TryStatement',
                UnaryExpression: 'UnaryExpression',
                UpdateExpression: 'UpdateExpression',
                VariableDeclaration: 'VariableDeclaration',
                VariableDeclarator: 'VariableDeclarator',
                WhileStatement: 'WhileStatement',
                WithStatement: 'WithStatement'
            };

            PropertyKind = {
                Data: 1,
                Get: 2,
                Set: 4
            };

            // Error messages should be identical to V8.
            Messages = {
                UnexpectedToken: 'Unexpected token %0',
                UnexpectedNumber: 'Unexpected number',
                UnexpectedString: 'Unexpected string',
                UnexpectedIdentifier: 'Unexpected identifier',
                UnexpectedReserved: 'Unexpected reserved word',
                UnexpectedEOS: 'Unexpected end of input',
                NewlineAfterThrow: 'Illegal newline after throw',
                InvalidRegExp: 'Invalid regular expression',
                UnterminatedRegExp: 'Invalid regular expression: missing /',
                InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
                InvalidLHSInForIn: 'Invalid left-hand side in for-in',
                MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
                NoCatchOrFinally: 'Missing catch or finally after try',
                UnknownLabel: 'Undefined label \'%0\'',
                Redeclaration: '%0 \'%1\' has already been declared',
                IllegalContinue: 'Illegal continue statement',
                IllegalBreak: 'Illegal break statement',
                IllegalReturn: 'Illegal return statement',
                StrictModeWith: 'Strict mode code may not include a with statement',
                StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
                StrictVarName: 'Variable name may not be eval or arguments in strict mode',
                StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
                StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
                StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
                StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
                StrictDelete: 'Delete of an unqualified identifier in strict mode.',
                StrictDuplicateProperty: 'Duplicate data property in object literal not allowed in strict mode',
                AccessorDataProperty: 'Object literal may not have data and accessor property with the same name',
                AccessorGetSet: 'Object literal may not have multiple get/set accessors with the same name',
                StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
                StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
                StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
                StrictReservedWord: 'Use of future reserved word in strict mode'
            };

            // See also tools/generate-unicode-regex.py.
            Regex = {
                NonAsciiIdentifierStart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]'),
                NonAsciiIdentifierPart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]')
            };

            // Ensure the condition is true, otherwise throw an error.
            // This is only to have a better contract semantic, i.e. another safety net
            // to catch a logic error. The condition shall be fulfilled in normal case.
            // Do NOT use this to enforce a certain condition on any user input.

            function assert(condition, message) {
                /* istanbul ignore if */
                if (!condition) {
                    throw new Error('ASSERT: ' + message);
                }
            }

            function isDecimalDigit(ch) {
                return (ch >= 48 && ch <= 57);   // 0..9
            }

            function isHexDigit(ch) {
                return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
            }

            function isOctalDigit(ch) {
                return '01234567'.indexOf(ch) >= 0;
            }


            // 7.2 White Space

            function isWhiteSpace(ch) {
                return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
                    (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
            }

            // 7.3 Line Terminators

            function isLineTerminator(ch) {
                return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
            }

            // 7.6 Identifier Names and Identifiers

            function isIdentifierStart(ch) {
                return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
                    (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
                    (ch >= 0x61 && ch <= 0x7A) ||         // a..z
                    (ch === 0x5C) ||                      // \ (backslash)
                    ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));
            }

            function isIdentifierPart(ch) {
                return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
                    (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
                    (ch >= 0x61 && ch <= 0x7A) ||         // a..z
                    (ch >= 0x30 && ch <= 0x39) ||         // 0..9
                    (ch === 0x5C) ||                      // \ (backslash)
                    ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
            }

            // 7.6.1.2 Future Reserved Words

            function isFutureReservedWord(id) {
                switch (id) {
                    case 'class':
                    case 'enum':
                    case 'export':
                    case 'extends':
                    case 'import':
                    case 'super':
                        return true;
                    default:
                        return false;
                }
            }

            function isStrictModeReservedWord(id) {
                switch (id) {
                    case 'implements':
                    case 'interface':
                    case 'package':
                    case 'private':
                    case 'protected':
                    case 'public':
                    case 'static':
                    case 'yield':
                    case 'let':
                        return true;
                    default:
                        return false;
                }
            }

            function isRestrictedWord(id) {
                return id === 'eval' || id === 'arguments';
            }

            // 7.6.1.1 Keywords

            function isKeyword(id) {
                if (strict && isStrictModeReservedWord(id)) {
                    return true;
                }

                // 'const' is specialized as Keyword in V8.
                // 'yield' and 'let' are for compatiblity with SpiderMonkey and ES.next.
                // Some others are from future reserved words.

                switch (id.length) {
                    case 2:
                        return (id === 'if') || (id === 'in') || (id === 'do');
                    case 3:
                        return (id === 'var') || (id === 'for') || (id === 'new') ||
                            (id === 'try') || (id === 'let');
                    case 4:
                        return (id === 'this') || (id === 'else') || (id === 'case') ||
                            (id === 'void') || (id === 'with') || (id === 'enum');
                    case 5:
                        return (id === 'while') || (id === 'break') || (id === 'catch') ||
                            (id === 'throw') || (id === 'const') || (id === 'yield') ||
                            (id === 'class') || (id === 'super');
                    case 6:
                        return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                            (id === 'switch') || (id === 'export') || (id === 'import');
                    case 7:
                        return (id === 'default') || (id === 'finally') || (id === 'extends');
                    case 8:
                        return (id === 'function') || (id === 'continue') || (id === 'debugger');
                    case 10:
                        return (id === 'instanceof');
                    default:
                        return false;
                }
            }

            // 7.4 Comments

            function addComment(type, value, start, end, loc) {
                var comment, attacher;

                assert(typeof start === 'number', 'Comment must have valid position');

                // Because the way the actual token is scanned, often the comments
                // (if any) are skipped twice during the lexical analysis.
                // Thus, we need to skip adding a comment if the comment array already
                // handled it.
                if (state.lastCommentStart >= start) {
                    return;
                }
                state.lastCommentStart = start;

                comment = {
                    type: type,
                    value: value
                };
                if (extra.range) {
                    comment.range = [start, end];
                }
                if (extra.loc) {
                    comment.loc = loc;
                }
                extra.comments.push(comment);
                if (extra.attachComment) {
                    extra.leadingComments.push(comment);
                    extra.trailingComments.push(comment);
                }
            }

            function skipSingleLineComment(offset) {
                var start, loc, ch, comment;

                start = index - offset;
                loc = {
                    start: {
                        line: lineNumber,
                        column: index - lineStart - offset
                    }
                };

                while (index < length) {
                    ch = source.charCodeAt(index);
                    ++index;
                    if (isLineTerminator(ch)) {
                        if (extra.comments) {
                            comment = source.slice(start + offset, index - 1);
                            loc.end = {
                                line: lineNumber,
                                column: index - lineStart - 1
                            };
                            addComment('Line', comment, start, index - 1, loc);
                        }
                        if (ch === 13 && source.charCodeAt(index) === 10) {
                            ++index;
                        }
                        ++lineNumber;
                        lineStart = index;
                        return;
                    }
                }

                if (extra.comments) {
                    comment = source.slice(start + offset, index);
                    loc.end = {
                        line: lineNumber,
                        column: index - lineStart
                    };
                    addComment('Line', comment, start, index, loc);
                }
            }

            function skipMultiLineComment() {
                var start, loc, ch, comment;

                if (extra.comments) {
                    start = index - 2;
                    loc = {
                        start: {
                            line: lineNumber,
                            column: index - lineStart - 2
                        }
                    };
                }

                while (index < length) {
                    ch = source.charCodeAt(index);
                    if (isLineTerminator(ch)) {
                        if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {
                            ++index;
                        }
                        ++lineNumber;
                        ++index;
                        lineStart = index;
                        if (index >= length) {
                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                        }
                    } else if (ch === 0x2A) {
                        // Block comment ends with '*/'.
                        if (source.charCodeAt(index + 1) === 0x2F) {
                            ++index;
                            ++index;
                            if (extra.comments) {
                                comment = source.slice(start + 2, index - 2);
                                loc.end = {
                                    line: lineNumber,
                                    column: index - lineStart
                                };
                                addComment('Block', comment, start, index, loc);
                            }
                            return;
                        }
                        ++index;
                    } else {
                        ++index;
                    }
                }

                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }

            function skipComment() {
                var ch, start;

                start = (index === 0);
                while (index < length) {
                    ch = source.charCodeAt(index);

                    if (isWhiteSpace(ch)) {
                        ++index;
                    } else if (isLineTerminator(ch)) {
                        ++index;
                        if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {
                            ++index;
                        }
                        ++lineNumber;
                        lineStart = index;
                        start = true;
                    } else if (ch === 0x2F) { // U+002F is '/'
                        ch = source.charCodeAt(index + 1);
                        if (ch === 0x2F) {
                            ++index;
                            ++index;
                            skipSingleLineComment(2);
                            start = true;
                        } else if (ch === 0x2A) {  // U+002A is '*'
                            ++index;
                            ++index;
                            skipMultiLineComment();
                        } else {
                            break;
                        }
                    } else if (start && ch === 0x2D) { // U+002D is '-'
                        // U+003E is '>'
                        if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {
                            // '-->' is a single-line comment
                            index += 3;
                            skipSingleLineComment(3);
                        } else {
                            break;
                        }
                    } else if (ch === 0x3C) { // U+003C is '<'
                        if (source.slice(index + 1, index + 4) === '!--') {
                            ++index; // `<`
                            ++index; // `!`
                            ++index; // `-`
                            ++index; // `-`
                            skipSingleLineComment(4);
                        } else {
                            break;
                        }
                    } else {
                        break;
                    }
                }
            }

            function scanHexEscape(prefix) {
                var i, len, ch, code = 0;

                len = (prefix === 'u') ? 4 : 2;
                for (i = 0; i < len; ++i) {
                    if (index < length && isHexDigit(source[index])) {
                        ch = source[index++];
                        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
                    } else {
                        return '';
                    }
                }
                return String.fromCharCode(code);
            }

            function getEscapedIdentifier() {
                var ch, id;

                ch = source.charCodeAt(index++);
                id = String.fromCharCode(ch);

                // '\u' (U+005C, U+0075) denotes an escaped character.
                if (ch === 0x5C) {
                    if (source.charCodeAt(index) !== 0x75) {
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }
                    ++index;
                    ch = scanHexEscape('u');
                    if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }
                    id = ch;
                }

                while (index < length) {
                    ch = source.charCodeAt(index);
                    if (!isIdentifierPart(ch)) {
                        break;
                    }
                    ++index;
                    id += String.fromCharCode(ch);

                    // '\u' (U+005C, U+0075) denotes an escaped character.
                    if (ch === 0x5C) {
                        id = id.substr(0, id.length - 1);
                        if (source.charCodeAt(index) !== 0x75) {
                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                        }
                        ++index;
                        ch = scanHexEscape('u');
                        if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                        }
                        id += ch;
                    }
                }

                return id;
            }

            function getIdentifier() {
                var start, ch;

                start = index++;
                while (index < length) {
                    ch = source.charCodeAt(index);
                    if (ch === 0x5C) {
                        // Blackslash (U+005C) marks Unicode escape sequence.
                        index = start;
                        return getEscapedIdentifier();
                    }
                    if (isIdentifierPart(ch)) {
                        ++index;
                    } else {
                        break;
                    }
                }

                return source.slice(start, index);
            }

            function scanIdentifier() {
                var start, id, type;

                start = index;

                // Backslash (U+005C) starts an escaped character.
                id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();

                // There is no keyword or literal with only one character.
                // Thus, it must be an identifier.
                if (id.length === 1) {
                    type = Token.Identifier;
                } else if (isKeyword(id)) {
                    type = Token.Keyword;
                } else if (id === 'null') {
                    type = Token.NullLiteral;
                } else if (id === 'true' || id === 'false') {
                    type = Token.BooleanLiteral;
                } else {
                    type = Token.Identifier;
                }

                return {
                    type: type,
                    value: id,
                    lineNumber: lineNumber,
                    lineStart: lineStart,
                    start: start,
                    end: index
                };
            }


            // 7.7 Punctuators

            function scanPunctuator() {
                var start = index,
                    code = source.charCodeAt(index),
                    code2,
                    ch1 = source[index],
                    ch2,
                    ch3,
                    ch4;

                switch (code) {

                    // Check for most common single-character punctuators.
                    case 0x2E:  // . dot
                    case 0x28:  // ( open bracket
                    case 0x29:  // ) close bracket
                    case 0x3B:  // ; semicolon
                    case 0x2C:  // , comma
                    case 0x7B:  // { open curly brace
                    case 0x7D:  // } close curly brace
                    case 0x5B:  // [
                    case 0x5D:  // ]
                    case 0x3A:  // :
                    case 0x3F:  // ?
                    case 0x7E:  // ~
                        ++index;
                        if (extra.tokenize) {
                            if (code === 0x28) {
                                extra.openParenToken = extra.tokens.length;
                            } else if (code === 0x7B) {
                                extra.openCurlyToken = extra.tokens.length;
                            }
                        }
                        return {
                            type: Token.Punctuator,
                            value: String.fromCharCode(code),
                            lineNumber: lineNumber,
                            lineStart: lineStart,
                            start: start,
                            end: index
                        };

                    default:
                        code2 = source.charCodeAt(index + 1);

                        // '=' (U+003D) marks an assignment or comparison operator.
                        if (code2 === 0x3D) {
                            switch (code) {
                                case 0x2B:  // +
                                case 0x2D:  // -
                                case 0x2F:  // /
                                case 0x3C:  // <
                                case 0x3E:  // >
                                case 0x5E:  // ^
                                case 0x7C:  // |
                                case 0x25:  // %
                                case 0x26:  // &
                                case 0x2A:  // *
                                    index += 2;
                                    return {
                                        type: Token.Punctuator,
                                        value: String.fromCharCode(code) + String.fromCharCode(code2),
                                        lineNumber: lineNumber,
                                        lineStart: lineStart,
                                        start: start,
                                        end: index
                                    };

                                case 0x21: // !
                                case 0x3D: // =
                                    index += 2;

                                    // !== and ===
                                    if (source.charCodeAt(index) === 0x3D) {
                                        ++index;
                                    }
                                    return {
                                        type: Token.Punctuator,
                                        value: source.slice(start, index),
                                        lineNumber: lineNumber,
                                        lineStart: lineStart,
                                        start: start,
                                        end: index
                                    };
                            }
                        }
                }

                // 4-character punctuator: >>>=

                ch4 = source.substr(index, 4);

                if (ch4 === '>>>=') {
                    index += 4;
                    return {
                        type: Token.Punctuator,
                        value: ch4,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }

                // 3-character punctuators: === !== >>> <<= >>=

                ch3 = ch4.substr(0, 3);

                if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
                    index += 3;
                    return {
                        type: Token.Punctuator,
                        value: ch3,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }

                // Other 2-character punctuators: ++ -- << >> && ||
                ch2 = ch3.substr(0, 2);

                if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {
                    index += 2;
                    return {
                        type: Token.Punctuator,
                        value: ch2,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }

                // 1-character punctuators: < > = ! + - * % & | ^ /
                if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
                    ++index;
                    return {
                        type: Token.Punctuator,
                        value: ch1,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }

                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }

            // 7.8.3 Numeric Literals

            function scanHexLiteral(start) {
                var number = '';

                while (index < length) {
                    if (!isHexDigit(source[index])) {
                        break;
                    }
                    number += source[index++];
                }

                if (number.length === 0) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }

                if (isIdentifierStart(source.charCodeAt(index))) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }

                return {
                    type: Token.NumericLiteral,
                    value: parseInt('0x' + number, 16),
                    lineNumber: lineNumber,
                    lineStart: lineStart,
                    start: start,
                    end: index
                };
            }

            function scanOctalLiteral(start) {
                var number = '0' + source[index++];
                while (index < length) {
                    if (!isOctalDigit(source[index])) {
                        break;
                    }
                    number += source[index++];
                }

                if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }

                return {
                    type: Token.NumericLiteral,
                    value: parseInt(number, 8),
                    octal: true,
                    lineNumber: lineNumber,
                    lineStart: lineStart,
                    start: start,
                    end: index
                };
            }

            function isImplicitOctalLiteral() {
                var i, ch;

                // Implicit octal, unless there is a non-octal digit.
                // (Annex B.1.1 on Numeric Literals)
                for (i = index + 1; i < length; ++i) {
                    ch = source[i];
                    if (ch === '8' || ch === '9') {
                        return false;
                    }
                    if (!isOctalDigit(ch)) {
                        return true;
                    }
                }

                return true;
            }

            function scanNumericLiteral() {
                var number, start, ch;

                ch = source[index];
                assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
                    'Numeric literal must start with a decimal digit or a decimal point');

                start = index;
                number = '';
                if (ch !== '.') {
                    number = source[index++];
                    ch = source[index];

                    // Hex number starts with '0x'.
                    // Octal number starts with '0'.
                    if (number === '0') {
                        if (ch === 'x' || ch === 'X') {
                            ++index;
                            return scanHexLiteral(start);
                        }
                        if (isOctalDigit(ch)) {
                            if (isImplicitOctalLiteral()) {
                                return scanOctalLiteral(start);
                            }
                        }
                    }

                    while (isDecimalDigit(source.charCodeAt(index))) {
                        number += source[index++];
                    }
                    ch = source[index];
                }

                if (ch === '.') {
                    number += source[index++];
                    while (isDecimalDigit(source.charCodeAt(index))) {
                        number += source[index++];
                    }
                    ch = source[index];
                }

                if (ch === 'e' || ch === 'E') {
                    number += source[index++];

                    ch = source[index];
                    if (ch === '+' || ch === '-') {
                        number += source[index++];
                    }
                    if (isDecimalDigit(source.charCodeAt(index))) {
                        while (isDecimalDigit(source.charCodeAt(index))) {
                            number += source[index++];
                        }
                    } else {
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }
                }

                if (isIdentifierStart(source.charCodeAt(index))) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }

                return {
                    type: Token.NumericLiteral,
                    value: parseFloat(number),
                    lineNumber: lineNumber,
                    lineStart: lineStart,
                    start: start,
                    end: index
                };
            }

            // 7.8.4 String Literals

            function scanStringLiteral() {
                var str = '', quote, start, ch, code, unescaped, restore, octal = false, startLineNumber,
                    startLineStart;
                startLineNumber = lineNumber;
                startLineStart = lineStart;

                quote = source[index];
                assert((quote === '\'' || quote === '"'),
                    'String literal must starts with a quote');

                start = index;
                ++index;

                while (index < length) {
                    ch = source[index++];

                    if (ch === quote) {
                        quote = '';
                        break;
                    } else if (ch === '\\') {
                        ch = source[index++];
                        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
                            switch (ch) {
                                case 'u':
                                case 'x':
                                    restore = index;
                                    unescaped = scanHexEscape(ch);
                                    if (unescaped) {
                                        str += unescaped;
                                    } else {
                                        index = restore;
                                        str += ch;
                                    }
                                    break;
                                case 'n':
                                    str += '\n';
                                    break;
                                case 'r':
                                    str += '\r';
                                    break;
                                case 't':
                                    str += '\t';
                                    break;
                                case 'b':
                                    str += '\b';
                                    break;
                                case 'f':
                                    str += '\f';
                                    break;
                                case 'v':
                                    str += '\x0B';
                                    break;

                                default:
                                    if (isOctalDigit(ch)) {
                                        code = '01234567'.indexOf(ch);

                                        // \0 is not octal escape sequence
                                        if (code !== 0) {
                                            octal = true;
                                        }

                                        if (index < length && isOctalDigit(source[index])) {
                                            octal = true;
                                            code = code * 8 + '01234567'.indexOf(source[index++]);

                                            // 3 digits are only allowed when string starts
                                            // with 0, 1, 2, 3
                                            if ('0123'.indexOf(ch) >= 0 &&
                                                index < length &&
                                                isOctalDigit(source[index])) {
                                                code = code * 8 + '01234567'.indexOf(source[index++]);
                                            }
                                        }
                                        str += String.fromCharCode(code);
                                    } else {
                                        str += ch;
                                    }
                                    break;
                            }
                        } else {
                            ++lineNumber;
                            if (ch === '\r' && source[index] === '\n') {
                                ++index;
                            }
                            lineStart = index;
                        }
                    } else if (isLineTerminator(ch.charCodeAt(0))) {
                        break;
                    } else {
                        str += ch;
                    }
                }

                if (quote !== '') {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }

                return {
                    type: Token.StringLiteral,
                    value: str,
                    octal: octal,
                    startLineNumber: startLineNumber,
                    startLineStart: startLineStart,
                    lineNumber: lineNumber,
                    lineStart: lineStart,
                    start: start,
                    end: index
                };
            }

            function testRegExp(pattern, flags) {
                var value;
                try {
                    value = new RegExp(pattern, flags);
                } catch (e) {
                    throwError({}, Messages.InvalidRegExp);
                }
                return value;
            }

            function scanRegExpBody() {
                var ch, str, classMarker, terminated, body;

                ch = source[index];
                assert(ch === '/', 'Regular expression literal must start with a slash');
                str = source[index++];

                classMarker = false;
                terminated = false;
                while (index < length) {
                    ch = source[index++];
                    str += ch;
                    if (ch === '\\') {
                        ch = source[index++];
                        // ECMA-262 7.8.5
                        if (isLineTerminator(ch.charCodeAt(0))) {
                            throwError({}, Messages.UnterminatedRegExp);
                        }
                        str += ch;
                    } else if (isLineTerminator(ch.charCodeAt(0))) {
                        throwError({}, Messages.UnterminatedRegExp);
                    } else if (classMarker) {
                        if (ch === ']') {
                            classMarker = false;
                        }
                    } else {
                        if (ch === '/') {
                            terminated = true;
                            break;
                        } else if (ch === '[') {
                            classMarker = true;
                        }
                    }
                }

                if (!terminated) {
                    throwError({}, Messages.UnterminatedRegExp);
                }

                // Exclude leading and trailing slash.
                body = str.substr(1, str.length - 2);
                return {
                    value: body,
                    literal: str
                };
            }

            function scanRegExpFlags() {
                var ch, str, flags, restore;

                str = '';
                flags = '';
                while (index < length) {
                    ch = source[index];
                    if (!isIdentifierPart(ch.charCodeAt(0))) {
                        break;
                    }

                    ++index;
                    if (ch === '\\' && index < length) {
                        ch = source[index];
                        if (ch === 'u') {
                            ++index;
                            restore = index;
                            ch = scanHexEscape('u');
                            if (ch) {
                                flags += ch;
                                for (str += '\\u'; restore < index; ++restore) {
                                    str += source[restore];
                                }
                            } else {
                                index = restore;
                                flags += 'u';
                                str += '\\u';
                            }
                            throwErrorTolerant({}, Messages.UnexpectedToken, 'ILLEGAL');
                        } else {
                            str += '\\';
                            throwErrorTolerant({}, Messages.UnexpectedToken, 'ILLEGAL');
                        }
                    } else {
                        flags += ch;
                        str += ch;
                    }
                }

                return {
                    value: flags,
                    literal: str
                };
            }

            function scanRegExp() {
                var start, body, flags, pattern, value;

                lookahead = null;
                skipComment();
                start = index;

                body = scanRegExpBody();
                flags = scanRegExpFlags();
                value = testRegExp(body.value, flags.value);

                if (extra.tokenize) {
                    return {
                        type: Token.RegularExpression,
                        value: value,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }

                return {
                    literal: body.literal + flags.literal,
                    value: value,
                    start: start,
                    end: index
                };
            }

            function collectRegex() {
                var pos, loc, regex, token;

                skipComment();

                pos = index;
                loc = {
                    start: {
                        line: lineNumber,
                        column: index - lineStart
                    }
                };

                regex = scanRegExp();
                loc.end = {
                    line: lineNumber,
                    column: index - lineStart
                };

                /* istanbul ignore next */
                if (!extra.tokenize) {
                    // Pop the previous token, which is likely '/' or '/='
                    if (extra.tokens.length > 0) {
                        token = extra.tokens[extra.tokens.length - 1];
                        if (token.range[0] === pos && token.type === 'Punctuator') {
                            if (token.value === '/' || token.value === '/=') {
                                extra.tokens.pop();
                            }
                        }
                    }

                    extra.tokens.push({
                        type: 'RegularExpression',
                        value: regex.literal,
                        range: [pos, index],
                        loc: loc
                    });
                }

                return regex;
            }

            function isIdentifierName(token) {
                return token.type === Token.Identifier ||
                    token.type === Token.Keyword ||
                    token.type === Token.BooleanLiteral ||
                    token.type === Token.NullLiteral;
            }

            function advanceSlash() {
                var prevToken,
                    checkToken;
                // Using the following algorithm:
                // https://github.com/mozilla/sweet.js/wiki/design
                prevToken = extra.tokens[extra.tokens.length - 1];
                if (!prevToken) {
                    // Nothing before that: it cannot be a division.
                    return collectRegex();
                }
                if (prevToken.type === 'Punctuator') {
                    if (prevToken.value === ']') {
                        return scanPunctuator();
                    }
                    if (prevToken.value === ')') {
                        checkToken = extra.tokens[extra.openParenToken - 1];
                        if (checkToken &&
                            checkToken.type === 'Keyword' &&
                            (checkToken.value === 'if' ||
                                checkToken.value === 'while' ||
                                checkToken.value === 'for' ||
                                checkToken.value === 'with')) {
                            return collectRegex();
                        }
                        return scanPunctuator();
                    }
                    if (prevToken.value === '}') {
                        // Dividing a function by anything makes little sense,
                        // but we have to check for that.
                        if (extra.tokens[extra.openCurlyToken - 3] &&
                            extra.tokens[extra.openCurlyToken - 3].type === 'Keyword') {
                            // Anonymous function.
                            checkToken = extra.tokens[extra.openCurlyToken - 4];
                            if (!checkToken) {
                                return scanPunctuator();
                            }
                        } else if (extra.tokens[extra.openCurlyToken - 4] &&
                            extra.tokens[extra.openCurlyToken - 4].type === 'Keyword') {
                            // Named function.
                            checkToken = extra.tokens[extra.openCurlyToken - 5];
                            if (!checkToken) {
                                return collectRegex();
                            }
                        } else {
                            return scanPunctuator();
                        }
                        // checkToken determines whether the function is
                        // a declaration or an expression.
                        if (FnExprTokens.indexOf(checkToken.value) >= 0) {
                            // It is an expression.
                            return scanPunctuator();
                        }
                        // It is a declaration.
                        return collectRegex();
                    }
                    return collectRegex();
                }
                if (prevToken.type === 'Keyword' && prevToken.value !== 'this') {
                    return collectRegex();
                }
                return scanPunctuator();
            }

            function advance() {
                var ch;

                skipComment();

                if (index >= length) {
                    return {
                        type: Token.EOF,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: index,
                        end: index
                    };
                }

                ch = source.charCodeAt(index);

                if (isIdentifierStart(ch)) {
                    return scanIdentifier();
                }

                // Very common: ( and ) and ;
                if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {
                    return scanPunctuator();
                }

                // String literal starts with single quote (U+0027) or double quote (U+0022).
                if (ch === 0x27 || ch === 0x22) {
                    return scanStringLiteral();
                }


                // Dot (.) U+002E can also start a floating-point number, hence the need
                // to check the next character.
                if (ch === 0x2E) {
                    if (isDecimalDigit(source.charCodeAt(index + 1))) {
                        return scanNumericLiteral();
                    }
                    return scanPunctuator();
                }

                if (isDecimalDigit(ch)) {
                    return scanNumericLiteral();
                }

                // Slash (/) U+002F can also start a regex.
                if (extra.tokenize && ch === 0x2F) {
                    return advanceSlash();
                }

                return scanPunctuator();
            }

            function collectToken() {
                var loc, token, range, value;

                skipComment();
                loc = {
                    start: {
                        line: lineNumber,
                        column: index - lineStart
                    }
                };

                token = advance();
                loc.end = {
                    line: lineNumber,
                    column: index - lineStart
                };

                if (token.type !== Token.EOF) {
                    value = source.slice(token.start, token.end);
                    extra.tokens.push({
                        type: TokenName[token.type],
                        value: value,
                        range: [token.start, token.end],
                        loc: loc
                    });
                }

                return token;
            }

            function lex() {
                var token;

                token = lookahead;
                index = token.end;
                lineNumber = token.lineNumber;
                lineStart = token.lineStart;

                lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();

                index = token.end;
                lineNumber = token.lineNumber;
                lineStart = token.lineStart;

                return token;
            }

            function peek() {
                var pos, line, start;

                pos = index;
                line = lineNumber;
                start = lineStart;
                lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
                index = pos;
                lineNumber = line;
                lineStart = start;
            }

            function Position(line, column) {
                this.line = line;
                this.column = column;
            }

            function SourceLocation(startLine, startColumn, line, column) {
                this.start = new Position(startLine, startColumn);
                this.end = new Position(line, column);
            }

            SyntaxTreeDelegate = {

                name: 'SyntaxTree',

                processComment: function (node) {
                    var lastChild, trailingComments;

                    if (node.type === Syntax.Program) {
                        if (node.body.length > 0) {
                            return;
                        }
                    }

                    if (extra.trailingComments.length > 0) {
                        if (extra.trailingComments[0].range[0] >= node.range[1]) {
                            trailingComments = extra.trailingComments;
                            extra.trailingComments = [];
                        } else {
                            extra.trailingComments.length = 0;
                        }
                    } else {
                        if (extra.bottomRightStack.length > 0 &&
                            extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments &&
                            extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments[0].range[0] >= node.range[1]) {
                            trailingComments = extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;
                            delete extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;
                        }
                    }

                    // Eating the stack.
                    while (extra.bottomRightStack.length > 0 && extra.bottomRightStack[extra.bottomRightStack.length - 1].range[0] >= node.range[0]) {
                        lastChild = extra.bottomRightStack.pop();
                    }

                    if (lastChild) {
                        if (lastChild.leadingComments && lastChild.leadingComments[lastChild.leadingComments.length - 1].range[1] <= node.range[0]) {
                            node.leadingComments = lastChild.leadingComments;
                            delete lastChild.leadingComments;
                        }
                    } else if (extra.leadingComments.length > 0 && extra.leadingComments[extra.leadingComments.length - 1].range[1] <= node.range[0]) {
                        node.leadingComments = extra.leadingComments;
                        extra.leadingComments = [];
                    }


                    if (trailingComments) {
                        node.trailingComments = trailingComments;
                    }

                    extra.bottomRightStack.push(node);
                },

                markEnd: function (node, startToken) {
                    if (extra.range) {
                        node.range = [startToken.start, index];
                    }
                    if (extra.loc) {
                        node.loc = new SourceLocation(
                            startToken.startLineNumber === undefined ? startToken.lineNumber : startToken.startLineNumber,
                            startToken.start - (startToken.startLineStart === undefined ? startToken.lineStart : startToken.startLineStart),
                            lineNumber,
                            index - lineStart
                        );
                        this.postProcess(node);
                    }

                    if (extra.attachComment) {
                        this.processComment(node);
                    }
                    return node;
                },

                postProcess: function (node) {
                    if (extra.source) {
                        node.loc.source = extra.source;
                    }
                    return node;
                },

                createArrayExpression: function (elements) {
                    return {
                        type: Syntax.ArrayExpression,
                        elements: elements
                    };
                },

                createAssignmentExpression: function (operator, left, right) {
                    return {
                        type: Syntax.AssignmentExpression,
                        operator: operator,
                        left: left,
                        right: right
                    };
                },

                createBinaryExpression: function (operator, left, right) {
                    var type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression :
                        Syntax.BinaryExpression;
                    return {
                        type: type,
                        operator: operator,
                        left: left,
                        right: right
                    };
                },

                createBlockStatement: function (body) {
                    return {
                        type: Syntax.BlockStatement,
                        body: body
                    };
                },

                createBreakStatement: function (label) {
                    return {
                        type: Syntax.BreakStatement,
                        label: label
                    };
                },

                createCallExpression: function (callee, args) {
                    return {
                        type: Syntax.CallExpression,
                        callee: callee,
                        'arguments': args
                    };
                },

                createCatchClause: function (param, body) {
                    return {
                        type: Syntax.CatchClause,
                        param: param,
                        body: body
                    };
                },

                createConditionalExpression: function (test, consequent, alternate) {
                    return {
                        type: Syntax.ConditionalExpression,
                        test: test,
                        consequent: consequent,
                        alternate: alternate
                    };
                },

                createContinueStatement: function (label) {
                    return {
                        type: Syntax.ContinueStatement,
                        label: label
                    };
                },

                createDebuggerStatement: function () {
                    return {
                        type: Syntax.DebuggerStatement
                    };
                },

                createDoWhileStatement: function (body, test) {
                    return {
                        type: Syntax.DoWhileStatement,
                        body: body,
                        test: test
                    };
                },

                createEmptyStatement: function () {
                    return {
                        type: Syntax.EmptyStatement
                    };
                },

                createExpressionStatement: function (expression) {
                    return {
                        type: Syntax.ExpressionStatement,
                        expression: expression
                    };
                },

                createForStatement: function (init, test, update, body) {
                    return {
                        type: Syntax.ForStatement,
                        init: init,
                        test: test,
                        update: update,
                        body: body
                    };
                },

                createForInStatement: function (left, right, body) {
                    return {
                        type: Syntax.ForInStatement,
                        left: left,
                        right: right,
                        body: body,
                        each: false
                    };
                },

                createFunctionDeclaration: function (id, params, defaults, body) {
                    return {
                        type: Syntax.FunctionDeclaration,
                        id: id,
                        params: params,
                        defaults: defaults,
                        body: body,
                        rest: null,
                        generator: false,
                        expression: false
                    };
                },

                createFunctionExpression: function (id, params, defaults, body) {
                    return {
                        type: Syntax.FunctionExpression,
                        id: id,
                        params: params,
                        defaults: defaults,
                        body: body,
                        rest: null,
                        generator: false,
                        expression: false
                    };
                },

                createIdentifier: function (name) {
                    return {
                        type: Syntax.Identifier,
                        name: name
                    };
                },

                createIfStatement: function (test, consequent, alternate) {
                    return {
                        type: Syntax.IfStatement,
                        test: test,
                        consequent: consequent,
                        alternate: alternate
                    };
                },

                createLabeledStatement: function (label, body) {
                    return {
                        type: Syntax.LabeledStatement,
                        label: label,
                        body: body
                    };
                },

                createLiteral: function (token) {
                    return {
                        type: Syntax.Literal,
                        value: token.value,
                        raw: source.slice(token.start, token.end)
                    };
                },

                createMemberExpression: function (accessor, object, property) {
                    return {
                        type: Syntax.MemberExpression,
                        computed: accessor === '[',
                        object: object,
                        property: property
                    };
                },

                createNewExpression: function (callee, args) {
                    return {
                        type: Syntax.NewExpression,
                        callee: callee,
                        'arguments': args
                    };
                },

                createObjectExpression: function (properties) {
                    return {
                        type: Syntax.ObjectExpression,
                        properties: properties
                    };
                },

                createPostfixExpression: function (operator, argument) {
                    return {
                        type: Syntax.UpdateExpression,
                        operator: operator,
                        argument: argument,
                        prefix: false
                    };
                },

                createProgram: function (body) {
                    return {
                        type: Syntax.Program,
                        body: body
                    };
                },

                createProperty: function (kind, key, value) {
                    return {
                        type: Syntax.Property,
                        key: key,
                        value: value,
                        kind: kind
                    };
                },

                createReturnStatement: function (argument) {
                    return {
                        type: Syntax.ReturnStatement,
                        argument: argument
                    };
                },

                createSequenceExpression: function (expressions) {
                    return {
                        type: Syntax.SequenceExpression,
                        expressions: expressions
                    };
                },

                createSwitchCase: function (test, consequent) {
                    return {
                        type: Syntax.SwitchCase,
                        test: test,
                        consequent: consequent
                    };
                },

                createSwitchStatement: function (discriminant, cases) {
                    return {
                        type: Syntax.SwitchStatement,
                        discriminant: discriminant,
                        cases: cases
                    };
                },

                createThisExpression: function () {
                    return {
                        type: Syntax.ThisExpression
                    };
                },

                createThrowStatement: function (argument) {
                    return {
                        type: Syntax.ThrowStatement,
                        argument: argument
                    };
                },

                createTryStatement: function (block, guardedHandlers, handlers, finalizer) {
                    return {
                        type: Syntax.TryStatement,
                        block: block,
                        guardedHandlers: guardedHandlers,
                        handlers: handlers,
                        finalizer: finalizer
                    };
                },

                createUnaryExpression: function (operator, argument) {
                    if (operator === '++' || operator === '--') {
                        return {
                            type: Syntax.UpdateExpression,
                            operator: operator,
                            argument: argument,
                            prefix: true
                        };
                    }
                    return {
                        type: Syntax.UnaryExpression,
                        operator: operator,
                        argument: argument,
                        prefix: true
                    };
                },

                createVariableDeclaration: function (declarations, kind) {
                    return {
                        type: Syntax.VariableDeclaration,
                        declarations: declarations,
                        kind: kind
                    };
                },

                createVariableDeclarator: function (id, init) {
                    return {
                        type: Syntax.VariableDeclarator,
                        id: id,
                        init: init
                    };
                },

                createWhileStatement: function (test, body) {
                    return {
                        type: Syntax.WhileStatement,
                        test: test,
                        body: body
                    };
                },

                createWithStatement: function (object, body) {
                    return {
                        type: Syntax.WithStatement,
                        object: object,
                        body: body
                    };
                }
            };

            // Return true if there is a line terminator before the next token.

            function peekLineTerminator() {
                var pos, line, start, found;

                pos = index;
                line = lineNumber;
                start = lineStart;
                skipComment();
                found = lineNumber !== line;
                index = pos;
                lineNumber = line;
                lineStart = start;

                return found;
            }

            // Throw an exception

            function throwError(token, messageFormat) {
                var error,
                    args = Array.prototype.slice.call(arguments, 2),
                    msg = messageFormat.replace(
                        /%(\d)/g,
                        function (whole, index) {
                            assert(index < args.length, 'Message reference must be in range');
                            return args[index];
                        }
                    );

                if (typeof token.lineNumber === 'number') {
                    error = new Error('Line ' + token.lineNumber + ': ' + msg);
                    error.index = token.start;
                    error.lineNumber = token.lineNumber;
                    error.column = token.start - lineStart + 1;
                } else {
                    error = new Error('Line ' + lineNumber + ': ' + msg);
                    error.index = index;
                    error.lineNumber = lineNumber;
                    error.column = index - lineStart + 1;
                }

                error.description = msg;
                throw error;
            }

            function throwErrorTolerant() {
                try {
                    throwError.apply(null, arguments);
                } catch (e) {
                    if (extra.errors) {
                        extra.errors.push(e);
                    } else {
                        throw e;
                    }
                }
            }


            // Throw an exception because of the token.

            function throwUnexpected(token) {
                if (token.type === Token.EOF) {
                    throwError(token, Messages.UnexpectedEOS);
                }

                if (token.type === Token.NumericLiteral) {
                    throwError(token, Messages.UnexpectedNumber);
                }

                if (token.type === Token.StringLiteral) {
                    throwError(token, Messages.UnexpectedString);
                }

                if (token.type === Token.Identifier) {
                    throwError(token, Messages.UnexpectedIdentifier);
                }

                if (token.type === Token.Keyword) {
                    if (isFutureReservedWord(token.value)) {
                        throwError(token, Messages.UnexpectedReserved);
                    } else if (strict && isStrictModeReservedWord(token.value)) {
                        throwErrorTolerant(token, Messages.StrictReservedWord);
                        return;
                    }
                    throwError(token, Messages.UnexpectedToken, token.value);
                }

                // BooleanLiteral, NullLiteral, or Punctuator.
                throwError(token, Messages.UnexpectedToken, token.value);
            }

            // Expect the next token to match the specified punctuator.
            // If not, an exception will be thrown.

            function expect(value) {
                var token = lex();
                if (token.type !== Token.Punctuator || token.value !== value) {
                    throwUnexpected(token);
                }
            }

            // Expect the next token to match the specified keyword.
            // If not, an exception will be thrown.

            function expectKeyword(keyword) {
                var token = lex();
                if (token.type !== Token.Keyword || token.value !== keyword) {
                    throwUnexpected(token);
                }
            }

            // Return true if the next token matches the specified punctuator.

            function match(value) {
                return lookahead.type === Token.Punctuator && lookahead.value === value;
            }

            // Return true if the next token matches the specified keyword

            function matchKeyword(keyword) {
                return lookahead.type === Token.Keyword && lookahead.value === keyword;
            }

            // Return true if the next token is an assignment operator

            function matchAssign() {
                var op;

                if (lookahead.type !== Token.Punctuator) {
                    return false;
                }
                op = lookahead.value;
                return op === '=' ||
                    op === '*=' ||
                    op === '/=' ||
                    op === '%=' ||
                    op === '+=' ||
                    op === '-=' ||
                    op === '<<=' ||
                    op === '>>=' ||
                    op === '>>>=' ||
                    op === '&=' ||
                    op === '^=' ||
                    op === '|=';
            }

            function consumeSemicolon() {
                var line, oldIndex = index, oldLineNumber = lineNumber,
                    oldLineStart = lineStart, oldLookahead = lookahead;

                // Catch the very common case first: immediately a semicolon (U+003B).
                if (source.charCodeAt(index) === 0x3B || match(';')) {
                    lex();
                    return;
                }

                line = lineNumber;
                skipComment();
                if (lineNumber !== line) {
                    index = oldIndex;
                    lineNumber = oldLineNumber;
                    lineStart = oldLineStart;
                    lookahead = oldLookahead;
                    return;
                }

                if (lookahead.type !== Token.EOF && !match('}')) {
                    throwUnexpected(lookahead);
                }
            }

            // Return true if provided expression is LeftHandSideExpression

            function isLeftHandSide(expr) {
                return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;
            }

            // 11.1.4 Array Initialiser

            function parseArrayInitialiser() {
                var elements = [], startToken;

                startToken = lookahead;
                expect('[');

                while (!match(']')) {
                    if (match(',')) {
                        lex();
                        elements.push(null);
                    } else {
                        elements.push(parseAssignmentExpression());

                        if (!match(']')) {
                            expect(',');
                        }
                    }
                }

                lex();

                return delegate.markEnd(delegate.createArrayExpression(elements), startToken);
            }

            // 11.1.5 Object Initialiser

            function parsePropertyFunction(param, first) {
                var previousStrict, body, startToken;

                previousStrict = strict;
                startToken = lookahead;
                body = parseFunctionSourceElements();
                if (first && strict && isRestrictedWord(param[0].name)) {
                    throwErrorTolerant(first, Messages.StrictParamName);
                }
                strict = previousStrict;
                return delegate.markEnd(delegate.createFunctionExpression(null, param, [], body), startToken);
            }

            function parseObjectPropertyKey() {
                var token, startToken;

                startToken = lookahead;
                token = lex();

                // Note: This function is called only from parseObjectProperty(), where
                // EOF and Punctuator tokens are already filtered out.

                if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
                    if (strict && token.octal) {
                        throwErrorTolerant(token, Messages.StrictOctalLiteral);
                    }
                    return delegate.markEnd(delegate.createLiteral(token), startToken);
                }

                return delegate.markEnd(delegate.createIdentifier(token.value), startToken);
            }

            function parseObjectProperty() {
                var token, key, id, value, param, startToken;

                token = lookahead;
                startToken = lookahead;

                if (token.type === Token.Identifier) {

                    id = parseObjectPropertyKey();

                    // Property Assignment: Getter and Setter.

                    if (token.value === 'get' && !match(':')) {
                        key = parseObjectPropertyKey();
                        expect('(');
                        expect(')');
                        value = parsePropertyFunction([]);
                        return delegate.markEnd(delegate.createProperty('get', key, value), startToken);
                    }
                    if (token.value === 'set' && !match(':')) {
                        key = parseObjectPropertyKey();
                        expect('(');
                        token = lookahead;
                        if (token.type !== Token.Identifier) {
                            expect(')');
                            throwErrorTolerant(token, Messages.UnexpectedToken, token.value);
                            value = parsePropertyFunction([]);
                        } else {
                            param = [parseVariableIdentifier()];
                            expect(')');
                            value = parsePropertyFunction(param, token);
                        }
                        return delegate.markEnd(delegate.createProperty('set', key, value), startToken);
                    }
                    expect(':');
                    value = parseAssignmentExpression();
                    return delegate.markEnd(delegate.createProperty('init', id, value), startToken);
                }
                if (token.type === Token.EOF || token.type === Token.Punctuator) {
                    throwUnexpected(token);
                } else {
                    key = parseObjectPropertyKey();
                    expect(':');
                    value = parseAssignmentExpression();
                    return delegate.markEnd(delegate.createProperty('init', key, value), startToken);
                }
            }

            function parseObjectInitialiser() {
                var properties = [], property, name, key, kind, map = {}, toString = String, startToken;

                startToken = lookahead;

                expect('{');

                while (!match('}')) {
                    property = parseObjectProperty();

                    if (property.key.type === Syntax.Identifier) {
                        name = property.key.name;
                    } else {
                        name = toString(property.key.value);
                    }
                    kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;

                    key = '$' + name;
                    if (Object.prototype.hasOwnProperty.call(map, key)) {
                        if (map[key] === PropertyKind.Data) {
                            if (strict && kind === PropertyKind.Data) {
                                throwErrorTolerant({}, Messages.StrictDuplicateProperty);
                            } else if (kind !== PropertyKind.Data) {
                                throwErrorTolerant({}, Messages.AccessorDataProperty);
                            }
                        } else {
                            if (kind === PropertyKind.Data) {
                                throwErrorTolerant({}, Messages.AccessorDataProperty);
                            } else if (map[key] & kind) {
                                throwErrorTolerant({}, Messages.AccessorGetSet);
                            }
                        }
                        map[key] |= kind;
                    } else {
                        map[key] = kind;
                    }

                    properties.push(property);

                    if (!match('}')) {
                        expect(',');
                    }
                }

                expect('}');

                return delegate.markEnd(delegate.createObjectExpression(properties), startToken);
            }

            // 11.1.6 The Grouping Operator

            function parseGroupExpression() {
                var expr;

                expect('(');

                expr = parseExpression();

                expect(')');

                return expr;
            }


            // 11.1 Primary Expressions

            function parsePrimaryExpression() {
                var type, token, expr, startToken;

                if (match('(')) {
                    return parseGroupExpression();
                }

                if (match('[')) {
                    return parseArrayInitialiser();
                }

                if (match('{')) {
                    return parseObjectInitialiser();
                }

                type = lookahead.type;
                startToken = lookahead;

                if (type === Token.Identifier) {
                    expr = delegate.createIdentifier(lex().value);
                } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
                    if (strict && lookahead.octal) {
                        throwErrorTolerant(lookahead, Messages.StrictOctalLiteral);
                    }
                    expr = delegate.createLiteral(lex());
                } else if (type === Token.Keyword) {
                    if (matchKeyword('function')) {
                        return parseFunctionExpression();
                    }
                    if (matchKeyword('this')) {
                        lex();
                        expr = delegate.createThisExpression();
                    } else {
                        throwUnexpected(lex());
                    }
                } else if (type === Token.BooleanLiteral) {
                    token = lex();
                    token.value = (token.value === 'true');
                    expr = delegate.createLiteral(token);
                } else if (type === Token.NullLiteral) {
                    token = lex();
                    token.value = null;
                    expr = delegate.createLiteral(token);
                } else if (match('/') || match('/=')) {
                    if (typeof extra.tokens !== 'undefined') {
                        expr = delegate.createLiteral(collectRegex());
                    } else {
                        expr = delegate.createLiteral(scanRegExp());
                    }
                    peek();
                } else {
                    throwUnexpected(lex());
                }

                return delegate.markEnd(expr, startToken);
            }

            // 11.2 Left-Hand-Side Expressions

            function parseArguments() {
                var args = [];

                expect('(');

                if (!match(')')) {
                    while (index < length) {
                        args.push(parseAssignmentExpression());
                        if (match(')')) {
                            break;
                        }
                        expect(',');
                    }
                }

                expect(')');

                return args;
            }

            function parseNonComputedProperty() {
                var token, startToken;

                startToken = lookahead;
                token = lex();

                if (!isIdentifierName(token)) {
                    throwUnexpected(token);
                }

                return delegate.markEnd(delegate.createIdentifier(token.value), startToken);
            }

            function parseNonComputedMember() {
                expect('.');

                return parseNonComputedProperty();
            }

            function parseComputedMember() {
                var expr;

                expect('[');

                expr = parseExpression();

                expect(']');

                return expr;
            }

            function parseNewExpression() {
                var callee, args, startToken;

                startToken = lookahead;
                expectKeyword('new');
                callee = parseLeftHandSideExpression();
                args = match('(') ? parseArguments() : [];

                return delegate.markEnd(delegate.createNewExpression(callee, args), startToken);
            }

            function parseLeftHandSideExpressionAllowCall() {
                var expr, args, property, startToken, previousAllowIn = state.allowIn;

                startToken = lookahead;
                state.allowIn = true;
                expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();

                for (; ;) {
                    if (match('.')) {
                        property = parseNonComputedMember();
                        expr = delegate.createMemberExpression('.', expr, property);
                    } else if (match('(')) {
                        args = parseArguments();
                        expr = delegate.createCallExpression(expr, args);
                    } else if (match('[')) {
                        property = parseComputedMember();
                        expr = delegate.createMemberExpression('[', expr, property);
                    } else {
                        break;
                    }
                    delegate.markEnd(expr, startToken);
                }
                state.allowIn = previousAllowIn;

                return expr;
            }

            function parseLeftHandSideExpression() {
                var expr, property, startToken;
                assert(state.allowIn, 'callee of new expression always allow in keyword.');

                startToken = lookahead;

                expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();

                while (match('.') || match('[')) {
                    if (match('[')) {
                        property = parseComputedMember();
                        expr = delegate.createMemberExpression('[', expr, property);
                    } else {
                        property = parseNonComputedMember();
                        expr = delegate.createMemberExpression('.', expr, property);
                    }
                    delegate.markEnd(expr, startToken);
                }
                return expr;
            }

            // 11.3 Postfix Expressions

            function parsePostfixExpression() {
                var expr, token, startToken = lookahead;

                expr = parseLeftHandSideExpressionAllowCall();

                if (lookahead.type === Token.Punctuator) {
                    if ((match('++') || match('--')) && !peekLineTerminator()) {
                        // 11.3.1, 11.3.2
                        if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                            throwErrorTolerant({}, Messages.StrictLHSPostfix);
                        }

                        if (!isLeftHandSide(expr)) {
                            throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
                        }

                        token = lex();
                        expr = delegate.markEnd(delegate.createPostfixExpression(token.value, expr), startToken);
                    }
                }

                return expr;
            }

            // 11.4 Unary Operators

            function parseUnaryExpression() {
                var token, expr, startToken;

                if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
                    expr = parsePostfixExpression();
                } else if (match('++') || match('--')) {
                    startToken = lookahead;
                    token = lex();
                    expr = parseUnaryExpression();
                    // 11.4.4, 11.4.5
                    if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                        throwErrorTolerant({}, Messages.StrictLHSPrefix);
                    }

                    if (!isLeftHandSide(expr)) {
                        throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
                    }

                    expr = delegate.createUnaryExpression(token.value, expr);
                    expr = delegate.markEnd(expr, startToken);
                } else if (match('+') || match('-') || match('~') || match('!')) {
                    startToken = lookahead;
                    token = lex();
                    expr = parseUnaryExpression();
                    expr = delegate.createUnaryExpression(token.value, expr);
                    expr = delegate.markEnd(expr, startToken);
                } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
                    startToken = lookahead;
                    token = lex();
                    expr = parseUnaryExpression();
                    expr = delegate.createUnaryExpression(token.value, expr);
                    expr = delegate.markEnd(expr, startToken);
                    if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
                        throwErrorTolerant({}, Messages.StrictDelete);
                    }
                } else {
                    expr = parsePostfixExpression();
                }

                return expr;
            }

            function binaryPrecedence(token, allowIn) {
                var prec = 0;

                if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
                    return 0;
                }

                switch (token.value) {
                    case '||':
                        prec = 1;
                        break;

                    case '&&':
                        prec = 2;
                        break;

                    case '|':
                        prec = 3;
                        break;

                    case '^':
                        prec = 4;
                        break;

                    case '&':
                        prec = 5;
                        break;

                    case '==':
                    case '!=':
                    case '===':
                    case '!==':
                        prec = 6;
                        break;

                    case '<':
                    case '>':
                    case '<=':
                    case '>=':
                    case 'instanceof':
                        prec = 7;
                        break;

                    case 'in':
                        prec = allowIn ? 7 : 0;
                        break;

                    case '<<':
                    case '>>':
                    case '>>>':
                        prec = 8;
                        break;

                    case '+':
                    case '-':
                        prec = 9;
                        break;

                    case '*':
                    case '/':
                    case '%':
                        prec = 11;
                        break;

                    default:
                        break;
                }

                return prec;
            }

            // 11.5 Multiplicative Operators
            // 11.6 Additive Operators
            // 11.7 Bitwise Shift Operators
            // 11.8 Relational Operators
            // 11.9 Equality Operators
            // 11.10 Binary Bitwise Operators
            // 11.11 Binary Logical Operators

            function parseBinaryExpression() {
                var marker, markers, expr, token, prec, stack, right, operator, left, i;

                marker = lookahead;
                left = parseUnaryExpression();

                token = lookahead;
                prec = binaryPrecedence(token, state.allowIn);
                if (prec === 0) {
                    return left;
                }
                token.prec = prec;
                lex();

                markers = [marker, lookahead];
                right = parseUnaryExpression();

                stack = [left, token, right];

                while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {

                    // Reduce: make a binary expression from the three topmost entries.
                    while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
                        right = stack.pop();
                        operator = stack.pop().value;
                        left = stack.pop();
                        expr = delegate.createBinaryExpression(operator, left, right);
                        markers.pop();
                        marker = markers[markers.length - 1];
                        delegate.markEnd(expr, marker);
                        stack.push(expr);
                    }

                    // Shift.
                    token = lex();
                    token.prec = prec;
                    stack.push(token);
                    markers.push(lookahead);
                    expr = parseUnaryExpression();
                    stack.push(expr);
                }

                // Final reduce to clean-up the stack.
                i = stack.length - 1;
                expr = stack[i];
                markers.pop();
                while (i > 1) {
                    expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
                    i -= 2;
                    marker = markers.pop();
                    delegate.markEnd(expr, marker);
                }

                return expr;
            }


            // 11.12 Conditional Operator

            function parseConditionalExpression() {
                var expr, previousAllowIn, consequent, alternate, startToken;

                startToken = lookahead;

                expr = parseBinaryExpression();

                if (match('?')) {
                    lex();
                    previousAllowIn = state.allowIn;
                    state.allowIn = true;
                    consequent = parseAssignmentExpression();
                    state.allowIn = previousAllowIn;
                    expect(':');
                    alternate = parseAssignmentExpression();

                    expr = delegate.createConditionalExpression(expr, consequent, alternate);
                    delegate.markEnd(expr, startToken);
                }

                return expr;
            }

            // 11.13 Assignment Operators

            function parseAssignmentExpression() {
                var token, left, right, node, startToken;

                token = lookahead;
                startToken = lookahead;

                node = left = parseConditionalExpression();

                if (matchAssign()) {
                    // LeftHandSideExpression
                    if (!isLeftHandSide(left)) {
                        throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
                    }

                    // 11.13.1
                    if (strict && left.type === Syntax.Identifier && isRestrictedWord(left.name)) {
                        throwErrorTolerant(token, Messages.StrictLHSAssignment);
                    }

                    token = lex();
                    right = parseAssignmentExpression();
                    node = delegate.markEnd(delegate.createAssignmentExpression(token.value, left, right), startToken);
                }

                return node;
            }

            // 11.14 Comma Operator

            function parseExpression() {
                var expr, startToken = lookahead;

                expr = parseAssignmentExpression();

                if (match(',')) {
                    expr = delegate.createSequenceExpression([expr]);

                    while (index < length) {
                        if (!match(',')) {
                            break;
                        }
                        lex();
                        expr.expressions.push(parseAssignmentExpression());
                    }

                    delegate.markEnd(expr, startToken);
                }

                return expr;
            }

            // 12.1 Block

            function parseStatementList() {
                var list = [],
                    statement;

                while (index < length) {
                    if (match('}')) {
                        break;
                    }
                    statement = parseSourceElement();
                    if (typeof statement === 'undefined') {
                        break;
                    }
                    list.push(statement);
                }

                return list;
            }

            function parseBlock() {
                var block, startToken;

                startToken = lookahead;
                expect('{');

                block = parseStatementList();

                expect('}');

                return delegate.markEnd(delegate.createBlockStatement(block), startToken);
            }

            // 12.2 Variable Statement

            function parseVariableIdentifier() {
                var token, startToken;

                startToken = lookahead;
                token = lex();

                if (token.type !== Token.Identifier) {
                    throwUnexpected(token);
                }

                return delegate.markEnd(delegate.createIdentifier(token.value), startToken);
            }

            function parseVariableDeclaration(kind) {
                var init = null, id, startToken;

                startToken = lookahead;
                id = parseVariableIdentifier();

                // 12.2.1
                if (strict && isRestrictedWord(id.name)) {
                    throwErrorTolerant({}, Messages.StrictVarName);
                }

                if (kind === 'const') {
                    expect('=');
                    init = parseAssignmentExpression();
                } else if (match('=')) {
                    lex();
                    init = parseAssignmentExpression();
                }

                return delegate.markEnd(delegate.createVariableDeclarator(id, init), startToken);
            }

            function parseVariableDeclarationList(kind) {
                var list = [];

                do {
                    list.push(parseVariableDeclaration(kind));
                    if (!match(',')) {
                        break;
                    }
                    lex();
                } while (index < length);

                return list;
            }

            function parseVariableStatement() {
                var declarations;

                expectKeyword('var');

                declarations = parseVariableDeclarationList();

                consumeSemicolon();

                return delegate.createVariableDeclaration(declarations, 'var');
            }

            // kind may be `const` or `let`
            // Both are experimental and not in the specification yet.
            // see http://wiki.ecmascript.org/doku.php?id=harmony:const
            // and http://wiki.ecmascript.org/doku.php?id=harmony:let
            function parseConstLetDeclaration(kind) {
                var declarations, startToken;

                startToken = lookahead;

                expectKeyword(kind);

                declarations = parseVariableDeclarationList(kind);

                consumeSemicolon();

                return delegate.markEnd(delegate.createVariableDeclaration(declarations, kind), startToken);
            }

            // 12.3 Empty Statement

            function parseEmptyStatement() {
                expect(';');
                return delegate.createEmptyStatement();
            }

            // 12.4 Expression Statement

            function parseExpressionStatement() {
                var expr = parseExpression();
                consumeSemicolon();
                return delegate.createExpressionStatement(expr);
            }

            // 12.5 If statement

            function parseIfStatement() {
                var test, consequent, alternate;

                expectKeyword('if');

                expect('(');

                test = parseExpression();

                expect(')');

                consequent = parseStatement();

                if (matchKeyword('else')) {
                    lex();
                    alternate = parseStatement();
                } else {
                    alternate = null;
                }

                return delegate.createIfStatement(test, consequent, alternate);
            }

            // 12.6 Iteration Statements

            function parseDoWhileStatement() {
                var body, test, oldInIteration;

                expectKeyword('do');

                oldInIteration = state.inIteration;
                state.inIteration = true;

                body = parseStatement();

                state.inIteration = oldInIteration;

                expectKeyword('while');

                expect('(');

                test = parseExpression();

                expect(')');

                if (match(';')) {
                    lex();
                }

                return delegate.createDoWhileStatement(body, test);
            }

            function parseWhileStatement() {
                var test, body, oldInIteration;

                expectKeyword('while');

                expect('(');

                test = parseExpression();

                expect(')');

                oldInIteration = state.inIteration;
                state.inIteration = true;

                body = parseStatement();

                state.inIteration = oldInIteration;

                return delegate.createWhileStatement(test, body);
            }

            function parseForVariableDeclaration() {
                var token, declarations, startToken;

                startToken = lookahead;
                token = lex();
                declarations = parseVariableDeclarationList();

                return delegate.markEnd(delegate.createVariableDeclaration(declarations, token.value), startToken);
            }

            function parseForStatement() {
                var init, test, update, left, right, body, oldInIteration, previousAllowIn = state.allowIn;

                init = test = update = null;

                expectKeyword('for');

                expect('(');

                if (match(';')) {
                    lex();
                } else {
                    if (matchKeyword('var') || matchKeyword('let')) {
                        state.allowIn = false;
                        init = parseForVariableDeclaration();
                        state.allowIn = previousAllowIn;

                        if (init.declarations.length === 1 && matchKeyword('in')) {
                            lex();
                            left = init;
                            right = parseExpression();
                            init = null;
                        }
                    } else {
                        state.allowIn = false;
                        init = parseExpression();
                        state.allowIn = previousAllowIn;

                        if (matchKeyword('in')) {
                            // LeftHandSideExpression
                            if (!isLeftHandSide(init)) {
                                throwErrorTolerant({}, Messages.InvalidLHSInForIn);
                            }

                            lex();
                            left = init;
                            right = parseExpression();
                            init = null;
                        }
                    }

                    if (typeof left === 'undefined') {
                        expect(';');
                    }
                }

                if (typeof left === 'undefined') {

                    if (!match(';')) {
                        test = parseExpression();
                    }
                    expect(';');

                    if (!match(')')) {
                        update = parseExpression();
                    }
                }

                expect(')');

                oldInIteration = state.inIteration;
                state.inIteration = true;

                body = parseStatement();

                state.inIteration = oldInIteration;

                return (typeof left === 'undefined') ?
                    delegate.createForStatement(init, test, update, body) :
                    delegate.createForInStatement(left, right, body);
            }

            // 12.7 The continue statement

            function parseContinueStatement() {
                var label = null, key;

                expectKeyword('continue');

                // Optimize the most common form: 'continue;'.
                if (source.charCodeAt(index) === 0x3B) {
                    lex();

                    if (!state.inIteration) {
                        throwError({}, Messages.IllegalContinue);
                    }

                    return delegate.createContinueStatement(null);
                }

                if (peekLineTerminator()) {
                    if (!state.inIteration) {
                        throwError({}, Messages.IllegalContinue);
                    }

                    return delegate.createContinueStatement(null);
                }

                if (lookahead.type === Token.Identifier) {
                    label = parseVariableIdentifier();

                    key = '$' + label.name;
                    if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                        throwError({}, Messages.UnknownLabel, label.name);
                    }
                }

                consumeSemicolon();

                if (label === null && !state.inIteration) {
                    throwError({}, Messages.IllegalContinue);
                }

                return delegate.createContinueStatement(label);
            }

            // 12.8 The break statement

            function parseBreakStatement() {
                var label = null, key;

                expectKeyword('break');

                // Catch the very common case first: immediately a semicolon (U+003B).
                if (source.charCodeAt(index) === 0x3B) {
                    lex();

                    if (!(state.inIteration || state.inSwitch)) {
                        throwError({}, Messages.IllegalBreak);
                    }

                    return delegate.createBreakStatement(null);
                }

                if (peekLineTerminator()) {
                    if (!(state.inIteration || state.inSwitch)) {
                        throwError({}, Messages.IllegalBreak);
                    }

                    return delegate.createBreakStatement(null);
                }

                if (lookahead.type === Token.Identifier) {
                    label = parseVariableIdentifier();

                    key = '$' + label.name;
                    if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                        throwError({}, Messages.UnknownLabel, label.name);
                    }
                }

                consumeSemicolon();

                if (label === null && !(state.inIteration || state.inSwitch)) {
                    throwError({}, Messages.IllegalBreak);
                }

                return delegate.createBreakStatement(label);
            }

            // 12.9 The return statement

            function parseReturnStatement() {
                var argument = null;

                expectKeyword('return');

                if (!state.inFunctionBody) {
                    throwErrorTolerant({}, Messages.IllegalReturn);
                }

                // 'return' followed by a space and an identifier is very common.
                if (source.charCodeAt(index) === 0x20) {
                    if (isIdentifierStart(source.charCodeAt(index + 1))) {
                        argument = parseExpression();
                        consumeSemicolon();
                        return delegate.createReturnStatement(argument);
                    }
                }

                if (peekLineTerminator()) {
                    return delegate.createReturnStatement(null);
                }

                if (!match(';')) {
                    if (!match('}') && lookahead.type !== Token.EOF) {
                        argument = parseExpression();
                    }
                }

                consumeSemicolon();

                return delegate.createReturnStatement(argument);
            }

            // 12.10 The with statement

            function parseWithStatement() {
                var object, body;

                if (strict) {
                    // TODO(ikarienator): Should we update the test cases instead?
                    skipComment();
                    throwErrorTolerant({}, Messages.StrictModeWith);
                }

                expectKeyword('with');

                expect('(');

                object = parseExpression();

                expect(')');

                body = parseStatement();

                return delegate.createWithStatement(object, body);
            }

            // 12.10 The swith statement

            function parseSwitchCase() {
                var test, consequent = [], statement, startToken;

                startToken = lookahead;
                if (matchKeyword('default')) {
                    lex();
                    test = null;
                } else {
                    expectKeyword('case');
                    test = parseExpression();
                }
                expect(':');

                while (index < length) {
                    if (match('}') || matchKeyword('default') || matchKeyword('case')) {
                        break;
                    }
                    statement = parseStatement();
                    consequent.push(statement);
                }

                return delegate.markEnd(delegate.createSwitchCase(test, consequent), startToken);
            }

            function parseSwitchStatement() {
                var discriminant, cases, clause, oldInSwitch, defaultFound;

                expectKeyword('switch');

                expect('(');

                discriminant = parseExpression();

                expect(')');

                expect('{');

                cases = [];

                if (match('}')) {
                    lex();
                    return delegate.createSwitchStatement(discriminant, cases);
                }

                oldInSwitch = state.inSwitch;
                state.inSwitch = true;
                defaultFound = false;

                while (index < length) {
                    if (match('}')) {
                        break;
                    }
                    clause = parseSwitchCase();
                    if (clause.test === null) {
                        if (defaultFound) {
                            throwError({}, Messages.MultipleDefaultsInSwitch);
                        }
                        defaultFound = true;
                    }
                    cases.push(clause);
                }

                state.inSwitch = oldInSwitch;

                expect('}');

                return delegate.createSwitchStatement(discriminant, cases);
            }

            // 12.13 The throw statement

            function parseThrowStatement() {
                var argument;

                expectKeyword('throw');

                if (peekLineTerminator()) {
                    throwError({}, Messages.NewlineAfterThrow);
                }

                argument = parseExpression();

                consumeSemicolon();

                return delegate.createThrowStatement(argument);
            }

            // 12.14 The try statement

            function parseCatchClause() {
                var param, body, startToken;

                startToken = lookahead;
                expectKeyword('catch');

                expect('(');
                if (match(')')) {
                    throwUnexpected(lookahead);
                }

                param = parseVariableIdentifier();
                // 12.14.1
                if (strict && isRestrictedWord(param.name)) {
                    throwErrorTolerant({}, Messages.StrictCatchVariable);
                }

                expect(')');
                body = parseBlock();
                return delegate.markEnd(delegate.createCatchClause(param, body), startToken);
            }

            function parseTryStatement() {
                var block, handlers = [], finalizer = null;

                expectKeyword('try');

                block = parseBlock();

                if (matchKeyword('catch')) {
                    handlers.push(parseCatchClause());
                }

                if (matchKeyword('finally')) {
                    lex();
                    finalizer = parseBlock();
                }

                if (handlers.length === 0 && !finalizer) {
                    throwError({}, Messages.NoCatchOrFinally);
                }

                return delegate.createTryStatement(block, [], handlers, finalizer);
            }

            // 12.15 The debugger statement

            function parseDebuggerStatement() {
                expectKeyword('debugger');

                consumeSemicolon();

                return delegate.createDebuggerStatement();
            }

            // 12 Statements

            function parseStatement() {
                var type = lookahead.type,
                    expr,
                    labeledBody,
                    key,
                    startToken;

                if (type === Token.EOF) {
                    throwUnexpected(lookahead);
                }

                if (type === Token.Punctuator && lookahead.value === '{') {
                    return parseBlock();
                }

                startToken = lookahead;

                if (type === Token.Punctuator) {
                    switch (lookahead.value) {
                        case ';':
                            return delegate.markEnd(parseEmptyStatement(), startToken);
                        case '(':
                            return delegate.markEnd(parseExpressionStatement(), startToken);
                        default:
                            break;
                    }
                }

                if (type === Token.Keyword) {
                    switch (lookahead.value) {
                        case 'break':
                            return delegate.markEnd(parseBreakStatement(), startToken);
                        case 'continue':
                            return delegate.markEnd(parseContinueStatement(), startToken);
                        case 'debugger':
                            return delegate.markEnd(parseDebuggerStatement(), startToken);
                        case 'do':
                            return delegate.markEnd(parseDoWhileStatement(), startToken);
                        case 'for':
                            return delegate.markEnd(parseForStatement(), startToken);
                        case 'function':
                            return delegate.markEnd(parseFunctionDeclaration(), startToken);
                        case 'if':
                            return delegate.markEnd(parseIfStatement(), startToken);
                        case 'return':
                            return delegate.markEnd(parseReturnStatement(), startToken);
                        case 'switch':
                            return delegate.markEnd(parseSwitchStatement(), startToken);
                        case 'throw':
                            return delegate.markEnd(parseThrowStatement(), startToken);
                        case 'try':
                            return delegate.markEnd(parseTryStatement(), startToken);
                        case 'var':
                            return delegate.markEnd(parseVariableStatement(), startToken);
                        case 'while':
                            return delegate.markEnd(parseWhileStatement(), startToken);
                        case 'with':
                            return delegate.markEnd(parseWithStatement(), startToken);
                        default:
                            break;
                    }
                }

                expr = parseExpression();

                // 12.12 Labelled Statements
                if ((expr.type === Syntax.Identifier) && match(':')) {
                    lex();

                    key = '$' + expr.name;
                    if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                        throwError({}, Messages.Redeclaration, 'Label', expr.name);
                    }

                    state.labelSet[key] = true;
                    labeledBody = parseStatement();
                    delete state.labelSet[key];
                    return delegate.markEnd(delegate.createLabeledStatement(expr, labeledBody), startToken);
                }

                consumeSemicolon();

                return delegate.markEnd(delegate.createExpressionStatement(expr), startToken);
            }

            // 13 Function Definition

            function parseFunctionSourceElements() {
                var sourceElement, sourceElements = [], token, directive, firstRestricted,
                    oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, startToken;

                startToken = lookahead;
                expect('{');

                while (index < length) {
                    if (lookahead.type !== Token.StringLiteral) {
                        break;
                    }
                    token = lookahead;

                    sourceElement = parseSourceElement();
                    sourceElements.push(sourceElement);
                    if (sourceElement.expression.type !== Syntax.Literal) {
                        // this is not directive
                        break;
                    }
                    directive = source.slice(token.start + 1, token.end - 1);
                    if (directive === 'use strict') {
                        strict = true;
                        if (firstRestricted) {
                            throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
                        }
                    } else {
                        if (!firstRestricted && token.octal) {
                            firstRestricted = token;
                        }
                    }
                }

                oldLabelSet = state.labelSet;
                oldInIteration = state.inIteration;
                oldInSwitch = state.inSwitch;
                oldInFunctionBody = state.inFunctionBody;

                state.labelSet = {};
                state.inIteration = false;
                state.inSwitch = false;
                state.inFunctionBody = true;

                while (index < length) {
                    if (match('}')) {
                        break;
                    }
                    sourceElement = parseSourceElement();
                    if (typeof sourceElement === 'undefined') {
                        break;
                    }
                    sourceElements.push(sourceElement);
                }

                expect('}');

                state.labelSet = oldLabelSet;
                state.inIteration = oldInIteration;
                state.inSwitch = oldInSwitch;
                state.inFunctionBody = oldInFunctionBody;

                return delegate.markEnd(delegate.createBlockStatement(sourceElements), startToken);
            }

            function parseParams(firstRestricted) {
                var param, params = [], token, stricted, paramSet, key, message;
                expect('(');

                if (!match(')')) {
                    paramSet = {};
                    while (index < length) {
                        token = lookahead;
                        param = parseVariableIdentifier();
                        key = '$' + token.value;
                        if (strict) {
                            if (isRestrictedWord(token.value)) {
                                stricted = token;
                                message = Messages.StrictParamName;
                            }
                            if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
                                stricted = token;
                                message = Messages.StrictParamDupe;
                            }
                        } else if (!firstRestricted) {
                            if (isRestrictedWord(token.value)) {
                                firstRestricted = token;
                                message = Messages.StrictParamName;
                            } else if (isStrictModeReservedWord(token.value)) {
                                firstRestricted = token;
                                message = Messages.StrictReservedWord;
                            } else if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
                                firstRestricted = token;
                                message = Messages.StrictParamDupe;
                            }
                        }
                        params.push(param);
                        paramSet[key] = true;
                        if (match(')')) {
                            break;
                        }
                        expect(',');
                    }
                }

                expect(')');

                return {
                    params: params,
                    stricted: stricted,
                    firstRestricted: firstRestricted,
                    message: message
                };
            }

            function parseFunctionDeclaration() {
                var id, params = [], body, token, stricted, tmp, firstRestricted, message, previousStrict, startToken;

                startToken = lookahead;

                expectKeyword('function');
                token = lookahead;
                id = parseVariableIdentifier();
                if (strict) {
                    if (isRestrictedWord(token.value)) {
                        throwErrorTolerant(token, Messages.StrictFunctionName);
                    }
                } else {
                    if (isRestrictedWord(token.value)) {
                        firstRestricted = token;
                        message = Messages.StrictFunctionName;
                    } else if (isStrictModeReservedWord(token.value)) {
                        firstRestricted = token;
                        message = Messages.StrictReservedWord;
                    }
                }

                tmp = parseParams(firstRestricted);
                params = tmp.params;
                stricted = tmp.stricted;
                firstRestricted = tmp.firstRestricted;
                if (tmp.message) {
                    message = tmp.message;
                }

                previousStrict = strict;
                body = parseFunctionSourceElements();
                if (strict && firstRestricted) {
                    throwError(firstRestricted, message);
                }
                if (strict && stricted) {
                    throwErrorTolerant(stricted, message);
                }
                strict = previousStrict;

                return delegate.markEnd(delegate.createFunctionDeclaration(id, params, [], body), startToken);
            }

            function parseFunctionExpression() {
                var token, id = null, stricted, firstRestricted, message, tmp, params = [], body, previousStrict,
                    startToken;

                startToken = lookahead;
                expectKeyword('function');

                if (!match('(')) {
                    token = lookahead;
                    id = parseVariableIdentifier();
                    if (strict) {
                        if (isRestrictedWord(token.value)) {
                            throwErrorTolerant(token, Messages.StrictFunctionName);
                        }
                    } else {
                        if (isRestrictedWord(token.value)) {
                            firstRestricted = token;
                            message = Messages.StrictFunctionName;
                        } else if (isStrictModeReservedWord(token.value)) {
                            firstRestricted = token;
                            message = Messages.StrictReservedWord;
                        }
                    }
                }

                tmp = parseParams(firstRestricted);
                params = tmp.params;
                stricted = tmp.stricted;
                firstRestricted = tmp.firstRestricted;
                if (tmp.message) {
                    message = tmp.message;
                }

                previousStrict = strict;
                body = parseFunctionSourceElements();
                if (strict && firstRestricted) {
                    throwError(firstRestricted, message);
                }
                if (strict && stricted) {
                    throwErrorTolerant(stricted, message);
                }
                strict = previousStrict;

                return delegate.markEnd(delegate.createFunctionExpression(id, params, [], body), startToken);
            }

            // 14 Program

            function parseSourceElement() {
                if (lookahead.type === Token.Keyword) {
                    switch (lookahead.value) {
                        case 'const':
                        case 'let':
                            return parseConstLetDeclaration(lookahead.value);
                        case 'function':
                            return parseFunctionDeclaration();
                        default:
                            return parseStatement();
                    }
                }

                if (lookahead.type !== Token.EOF) {
                    return parseStatement();
                }
            }

            function parseSourceElements() {
                var sourceElement, sourceElements = [], token, directive, firstRestricted;

                while (index < length) {
                    token = lookahead;
                    if (token.type !== Token.StringLiteral) {
                        break;
                    }

                    sourceElement = parseSourceElement();
                    sourceElements.push(sourceElement);
                    if (sourceElement.expression.type !== Syntax.Literal) {
                        // this is not directive
                        break;
                    }
                    directive = source.slice(token.start + 1, token.end - 1);
                    if (directive === 'use strict') {
                        strict = true;
                        if (firstRestricted) {
                            throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
                        }
                    } else {
                        if (!firstRestricted && token.octal) {
                            firstRestricted = token;
                        }
                    }
                }

                while (index < length) {
                    sourceElement = parseSourceElement();
                    /* istanbul ignore if */
                    if (typeof sourceElement === 'undefined') {
                        break;
                    }
                    sourceElements.push(sourceElement);
                }
                return sourceElements;
            }

            function parseProgram() {
                var body, startToken;

                skipComment();
                peek();
                startToken = lookahead;
                strict = false;

                body = parseSourceElements();
                return delegate.markEnd(delegate.createProgram(body), startToken);
            }

            function filterTokenLocation() {
                var i, entry, token, tokens = [];

                for (i = 0; i < extra.tokens.length; ++i) {
                    entry = extra.tokens[i];
                    token = {
                        type: entry.type,
                        value: entry.value
                    };
                    if (extra.range) {
                        token.range = entry.range;
                    }
                    if (extra.loc) {
                        token.loc = entry.loc;
                    }
                    tokens.push(token);
                }

                extra.tokens = tokens;
            }

            function tokenize(code, options) {
                var toString,
                    token,
                    tokens;

                toString = String;
                if (typeof code !== 'string' && !(code instanceof String)) {
                    code = toString(code);
                }

                delegate = SyntaxTreeDelegate;
                source = code;
                index = 0;
                lineNumber = (source.length > 0) ? 1 : 0;
                lineStart = 0;
                length = source.length;
                lookahead = null;
                state = {
                    allowIn: true,
                    labelSet: {},
                    inFunctionBody: false,
                    inIteration: false,
                    inSwitch: false,
                    lastCommentStart: -1
                };

                extra = {};

                // Options matching.
                options = options || {};

                // Of course we collect tokens here.
                options.tokens = true;
                extra.tokens = [];
                extra.tokenize = true;
                // The following two fields are necessary to compute the Regex tokens.
                extra.openParenToken = -1;
                extra.openCurlyToken = -1;

                extra.range = (typeof options.range === 'boolean') && options.range;
                extra.loc = (typeof options.loc === 'boolean') && options.loc;

                if (typeof options.comment === 'boolean' && options.comment) {
                    extra.comments = [];
                }
                if (typeof options.tolerant === 'boolean' && options.tolerant) {
                    extra.errors = [];
                }

                try {
                    peek();
                    if (lookahead.type === Token.EOF) {
                        return extra.tokens;
                    }

                    token = lex();
                    while (lookahead.type !== Token.EOF) {
                        try {
                            token = lex();
                        } catch (lexError) {
                            token = lookahead;
                            if (extra.errors) {
                                extra.errors.push(lexError);
                                // We have to break on the first error
                                // to avoid infinite loops.
                                break;
                            } else {
                                throw lexError;
                            }
                        }
                    }

                    filterTokenLocation();
                    tokens = extra.tokens;
                    if (typeof extra.comments !== 'undefined') {
                        tokens.comments = extra.comments;
                    }
                    if (typeof extra.errors !== 'undefined') {
                        tokens.errors = extra.errors;
                    }
                } catch (e) {
                    throw e;
                } finally {
                    extra = {};
                }
                return tokens;
            }

            function parse(code, options) {
                var program, toString;

                toString = String;
                if (typeof code !== 'string' && !(code instanceof String)) {
                    code = toString(code);
                }

                delegate = SyntaxTreeDelegate;
                source = code;
                index = 0;
                lineNumber = (source.length > 0) ? 1 : 0;
                lineStart = 0;
                length = source.length;
                lookahead = null;
                state = {
                    allowIn: true,
                    labelSet: {},
                    inFunctionBody: false,
                    inIteration: false,
                    inSwitch: false,
                    lastCommentStart: -1
                };

                extra = {};
                if (typeof options !== 'undefined') {
                    extra.range = (typeof options.range === 'boolean') && options.range;
                    extra.loc = (typeof options.loc === 'boolean') && options.loc;
                    extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;

                    if (extra.loc && options.source !== null && options.source !== undefined) {
                        extra.source = toString(options.source);
                    }

                    if (typeof options.tokens === 'boolean' && options.tokens) {
                        extra.tokens = [];
                    }
                    if (typeof options.comment === 'boolean' && options.comment) {
                        extra.comments = [];
                    }
                    if (typeof options.tolerant === 'boolean' && options.tolerant) {
                        extra.errors = [];
                    }
                    if (extra.attachComment) {
                        extra.range = true;
                        extra.comments = [];
                        extra.bottomRightStack = [];
                        extra.trailingComments = [];
                        extra.leadingComments = [];
                    }
                }

                try {
                    program = parseProgram();
                    if (typeof extra.comments !== 'undefined') {
                        program.comments = extra.comments;
                    }
                    if (typeof extra.tokens !== 'undefined') {
                        filterTokenLocation();
                        program.tokens = extra.tokens;
                    }
                    if (typeof extra.errors !== 'undefined') {
                        program.errors = extra.errors;
                    }
                } catch (e) {
                    throw e;
                } finally {
                    extra = {};
                }

                return program;
            }

            // Sync with *.json manifests.
            exports.version = '1.2.5';

            exports.tokenize = tokenize;

            exports.parse = parse;

            // Deep copy.
            /* istanbul ignore next */
            exports.Syntax = (function () {
                var name, types = {};

                if (typeof Object.create === 'function') {
                    types = Object.create(null);
                }

                for (name in Syntax) {
                    if (Syntax.hasOwnProperty(name)) {
                        types[name] = Syntax[name];
                    }
                }

                if (typeof Object.freeze === 'function') {
                    Object.freeze(types);
                }

                return types;
            }());

        }));
        /* vim: set sw=4 ts=4 et tw=80 : */

    }, {}],
    365: [function (require, module, exports) {
        'use strict';

        var has = Object.prototype.hasOwnProperty
            , prefix = '~';

        /**
         * Constructor to create a storage for our `EE` objects.
         * An `Events` instance is a plain object whose properties are event names.
         *
         * @constructor
         * @private
         */
        function Events() {
        }

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
        if (Object.create) {
            Events.prototype = Object.create(null);

            //
            // This hack is needed because the `__proto__` property is still inherited in
            // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
            //
            if (!new Events().__proto__) prefix = false;
        }

        /**
         * Representation of a single event listener.
         *
         * @param {Function} fn The listener function.
         * @param {*} context The context to invoke the listener with.
         * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
         * @constructor
         * @private
         */
        function EE(fn, context, once) {
            this.fn = fn;
            this.context = context;
            this.once = once || false;
        }

        /**
         * Add a listener for a given event.
         *
         * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
         * @param {(String|Symbol)} event The event name.
         * @param {Function} fn The listener function.
         * @param {*} context The context to invoke the listener with.
         * @param {Boolean} once Specify if the listener is a one-time listener.
         * @returns {EventEmitter}
         * @private
         */
        function addListener(emitter, event, fn, context, once) {
            if (typeof fn !== 'function') {
                throw new TypeError('The listener must be a function');
            }

            var listener = new EE(fn, context || emitter, once)
                , evt = prefix ? prefix + event : event;

            if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
            else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
            else emitter._events[evt] = [emitter._events[evt], listener];

            return emitter;
        }

        /**
         * Clear event by name.
         *
         * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
         * @param {(String|Symbol)} evt The Event name.
         * @private
         */
        function clearEvent(emitter, evt) {
            if (--emitter._eventsCount === 0) emitter._events = new Events();
            else delete emitter._events[evt];
        }

        /**
         * Minimal `EventEmitter` interface that is molded against the Node.js
         * `EventEmitter` interface.
         *
         * @constructor
         * @public
         */
        function EventEmitter() {
            this._events = new Events();
            this._eventsCount = 0;
        }

        /**
         * Return an array listing the events for which the emitter has registered
         * listeners.
         *
         * @returns {Array}
         * @public
         */
        EventEmitter.prototype.eventNames = function eventNames() {
            var names = []
                , events
                , name;

            if (this._eventsCount === 0) return names;

            for (name in (events = this._events)) {
                if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
            }

            if (Object.getOwnPropertySymbols) {
                return names.concat(Object.getOwnPropertySymbols(events));
            }

            return names;
        };

        /**
         * Return the listeners registered for a given event.
         *
         * @param {(String|Symbol)} event The event name.
         * @returns {Array} The registered listeners.
         * @public
         */
        EventEmitter.prototype.listeners = function listeners(event) {
            var evt = prefix ? prefix + event : event
                , handlers = this._events[evt];

            if (!handlers) return [];
            if (handlers.fn) return [handlers.fn];

            for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
                ee[i] = handlers[i].fn;
            }

            return ee;
        };

        /**
         * Return the number of listeners listening to a given event.
         *
         * @param {(String|Symbol)} event The event name.
         * @returns {Number} The number of listeners.
         * @public
         */
        EventEmitter.prototype.listenerCount = function listenerCount(event) {
            var evt = prefix ? prefix + event : event
                , listeners = this._events[evt];

            if (!listeners) return 0;
            if (listeners.fn) return 1;
            return listeners.length;
        };

        /**
         * Calls each of the listeners registered for a given event.
         *
         * @param {(String|Symbol)} event The event name.
         * @returns {Boolean} `true` if the event had listeners, else `false`.
         * @public
         */
        EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
            var evt = prefix ? prefix + event : event;

            if (!this._events[evt]) return false;

            var listeners = this._events[evt]
                , len = arguments.length
                , args
                , i;

            if (listeners.fn) {
                if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

                switch (len) {
                    case 1:
                        return listeners.fn.call(listeners.context), true;
                    case 2:
                        return listeners.fn.call(listeners.context, a1), true;
                    case 3:
                        return listeners.fn.call(listeners.context, a1, a2), true;
                    case 4:
                        return listeners.fn.call(listeners.context, a1, a2, a3), true;
                    case 5:
                        return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
                    case 6:
                        return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
                }

                for (i = 1, args = new Array(len - 1); i < len; i++) {
                    args[i - 1] = arguments[i];
                }

                listeners.fn.apply(listeners.context, args);
            } else {
                var length = listeners.length
                    , j;

                for (i = 0; i < length; i++) {
                    if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

                    switch (len) {
                        case 1:
                            listeners[i].fn.call(listeners[i].context);
                            break;
                        case 2:
                            listeners[i].fn.call(listeners[i].context, a1);
                            break;
                        case 3:
                            listeners[i].fn.call(listeners[i].context, a1, a2);
                            break;
                        case 4:
                            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                            break;
                        default:
                            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                                args[j - 1] = arguments[j];
                            }

                            listeners[i].fn.apply(listeners[i].context, args);
                    }
                }
            }

            return true;
        };

        /**
         * Add a listener for a given event.
         *
         * @param {(String|Symbol)} event The event name.
         * @param {Function} fn The listener function.
         * @param {*} [context=this] The context to invoke the listener with.
         * @returns {EventEmitter} `this`.
         * @public
         */
        EventEmitter.prototype.on = function on(event, fn, context) {
            return addListener(this, event, fn, context, false);
        };

        /**
         * Add a one-time listener for a given event.
         *
         * @param {(String|Symbol)} event The event name.
         * @param {Function} fn The listener function.
         * @param {*} [context=this] The context to invoke the listener with.
         * @returns {EventEmitter} `this`.
         * @public
         */
        EventEmitter.prototype.once = function once(event, fn, context) {
            return addListener(this, event, fn, context, true);
        };

        /**
         * Remove the listeners of a given event.
         *
         * @param {(String|Symbol)} event The event name.
         * @param {Function} fn Only remove the listeners that match this function.
         * @param {*} context Only remove the listeners that have this context.
         * @param {Boolean} once Only remove one-time listeners.
         * @returns {EventEmitter} `this`.
         * @public
         */
        EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
            var evt = prefix ? prefix + event : event;

            if (!this._events[evt]) return this;
            if (!fn) {
                clearEvent(this, evt);
                return this;
            }

            var listeners = this._events[evt];

            if (listeners.fn) {
                if (
                    listeners.fn === fn &&
                    (!once || listeners.once) &&
                    (!context || listeners.context === context)
                ) {
                    clearEvent(this, evt);
                }
            } else {
                for (var i = 0, events = [], length = listeners.length; i < length; i++) {
                    if (
                        listeners[i].fn !== fn ||
                        (once && !listeners[i].once) ||
                        (context && listeners[i].context !== context)
                    ) {
                        events.push(listeners[i]);
                    }
                }

                //
                // Reset the array, or remove it completely if we have no more listeners.
                //
                if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
                else clearEvent(this, evt);
            }

            return this;
        };

        /**
         * Remove all listeners, or those of the specified event.
         *
         * @param {(String|Symbol)} [event] The event name.
         * @returns {EventEmitter} `this`.
         * @public
         */
        EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
            var evt;

            if (event) {
                evt = prefix ? prefix + event : event;
                if (this._events[evt]) clearEvent(this, evt);
            } else {
                this._events = new Events();
                this._eventsCount = 0;
            }

            return this;
        };

//
// Alias methods names because people roll like that.
//
        EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
        EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
        EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
        EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
        if ('undefined' !== typeof module) {
            module.exports = EventEmitter;
        }

    }, {}],
    366: [function (require, module, exports) {
        "use strict"

        function iota(n) {
            var result = new Array(n)
            for (var i = 0; i < n; ++i) {
                result[i] = i
            }
            return result
        }

        module.exports = iota
    }, {}],
    367: [function (require, module, exports) {
        /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
        module.exports = function (obj) {
            return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
        }

        function isBuffer(obj) {
            return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
        }

// For Node v0.10 support. Remove this eventually.
        function isSlowBuffer(obj) {
            return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
        }

    }, {}],
    368: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _WebGL = require("./WebGL2");

        class Layer {
            constructor(attrs = {}) {
                this.layerClass = 'Layer';
                this.name = attrs.name;
                this.description = '';
                this.gpu = _WebGL.webgl2.isSupported && attrs.gpu;
                this.params = [];
                this.weights = {};
                this.inbound = [];
                this.outbound = [];
            }

            throwError(message) {
                throw new Error(`[${this.layerClass} layer: ${this.name || ''}] ${message}`);
            }

            toggleGPU(mode) {
                const newMode = typeof mode === 'undefined' ? !this.gpu : mode;

                if (_WebGL.webgl2.isSupported && newMode) {
                    this.gpu = true;
                } else {
                    this.gpu = false;
                }
            }

            setWeights(weightsArr, createGLTexture = true) {
                this.params.forEach((p, i) => {
                    this.weights[p] = weightsArr[i];

                    if (this.gpu && createGLTexture) {
                        this.weights[p].createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    }
                });
            }

            call(x) {
                this.output = x;
                return this.output;
            }

        }

        exports.default = Layer;
    }, {"./WebGL2": 371}],
    369: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _keys2 = _interopRequireDefault(require("lodash/keys"));

        var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

        var _map2 = _interopRequireDefault(require("lodash/map"));

        var _every2 = _interopRequireDefault(require("lodash/every"));

        var _find2 = _interopRequireDefault(require("lodash/find"));

        var _pick2 = _interopRequireDefault(require("lodash/pick"));

        var _bluebird = _interopRequireDefault(require("bluebird"));

        var _axios = _interopRequireDefault(require("axios"));

        var _performanceNow = _interopRequireDefault(require("performance-now"));

        var _eventemitter = require("eventemitter3");

        var layers = _interopRequireWildcard(require("./layers"));

        var visMethods = _interopRequireWildcard(require("./visualizations"));

        var _Tensor = _interopRequireDefault(require("./Tensor"));

        var _WebGL = require("./WebGL2");

        var _proto = _interopRequireDefault(require("./proto"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const axiosSource = _axios.default.CancelToken.source();

        class Model {
            constructor(config = {}) {
                const {
                    filepath = null,
                    headers = {},
                    filesystem = false,
                    gpu = false,
                    transferLayerOutputs = false,
                    pauseAfterLayerCalls = false,
                    visualizations = []
                } = config;

                if (!filepath) {
                    throw new Error('[Model] path to protobuf-serialized model definition file is missing.');
                }

                this.filepath = filepath;
                this.headers = headers;
                this.filesystem = typeof window !== 'undefined' ? false : filesystem;
                this.events = new _eventemitter.EventEmitter();
                this.id = null;
                this.name = null;
                this.kerasVersion = null;
                this.backend = null;
                this.modelConfig = {};
                this.modelWeights = [];
                this.gpu = typeof window !== 'undefined' && _WebGL.webgl2.isSupported ? gpu : false;
                this.transferLayerOutputs = transferLayerOutputs;
                this.pauseAfterLayerCalls = pauseAfterLayerCalls;
                this.modelLayersInfo = [];
                this.modelLayersMap = new Map();
                this.inputTensorsMap = new Map();
                this.inputLayerNames = [];
                this.outputLayerNames = [];
                this.finishedLayerNames = [];
                this.isRunning = false;
                this.runningProgress = 0;
                this.predictStats = {};
                this.visMap = new Map();
                visualizations.forEach(v => {
                    if (v in visMethods) {
                        const visInstance = new visMethods[v]({
                            modelLayersMap: this.modelLayersMap,
                            gpu: this.gpu
                        });
                        this.visMap.set(v, visInstance);
                    }
                });
                this._ready = this._initialize();
            }

            checkGPUSupport() {
                return _WebGL.webgl2.isSupported;
            }

            ready() {
                return this._ready;
            }

            _interrupt() {
                axiosSource.cancel();
            }

            async _initialize() {
                this.events.emit('loadingProgress', 0);

                try {
                    const req = this.filesystem ? this._dataRequestFS() : this._dataRequestHTTP(this.headers);
                    await req;
                } catch (err) {
                    console.log(err);

                    this._interrupt();
                }

                this.events.emit('loadingProgress', 100);

                this._buildDAG();

                this.inputLayerNames.forEach(name => {
                    const inputLayer = this.modelLayersMap.get(name);
                    inputLayer.call(this.inputTensorsMap.get(name));
                    inputLayer.hasOutput = true;
                    inputLayer.visited = true;
                });
                const _pauseAfterLayerCalls = this.pauseAfterLayerCalls;
                this.pauseAfterLayerCalls = true;
                this.runningProgress = 0;
                this.events.emit('initProgress', 0);
                await this._traverseDAG(this.inputLayerNames, 'initProgress');
                this.pauseAfterLayerCalls = _pauseAfterLayerCalls;
                this.finishedLayerNames = [];
                this.modelLayersMap.forEach(layer => {
                    layer.hasOutput = false;
                    layer.visited = false;
                });
                this.visMap.forEach(visInstance => {
                    visInstance.initialize();
                });
                this.events.emit('initProgress', 100);
                return true;
            }

            async _dataRequestHTTP(headers = {}) {
                try {
                    const res = await _axios.default.get(this.filepath, {
                        responseType: 'arraybuffer',
                        headers,
                        onDownloadProgress: e => {
                            if (e.lengthComputable) {
                                const percentComplete = Math.round(100 * e.loaded / e.total);
                                this.events.emit('loadingProgress', percentComplete);
                            }
                        },
                        cancelToken: axiosSource.token
                    });

                    this._decodeProtobuf(new Uint8Array(res.data));
                } catch (err) {
                    if (_axios.default.isCancel(err)) {
                        console.log('[Model] Data request canceled', err.message);
                    } else {
                        throw err;
                    }
                }
            }

            async _dataRequestFS() {
                const readFile = _bluebird.default.promisify(require('fs').readFile);

                try {
                    const file = await readFile(this.filepath);

                    this._decodeProtobuf(file);
                } catch (err) {
                    throw err;
                }
            }

            _decodeProtobuf(buffer) {
                const err = _proto.default.Model.verify(buffer);

                if (err) {
                    throw new Error(`[Model] Invalid model - check protobuf serialization: {err}`);
                }

                const model = _proto.default.Model.decode(buffer);

                this.id = model.id;
                this.name = model.name;
                this.kerasVersion = model.kerasVersion;
                this.backend = model.backend;
                this.modelConfig = JSON.parse(model.modelConfig);
                this.modelWeights = model.modelWeights;
            }

            toggleGPU(mode) {
                if (typeof mode === 'undefined') {
                    this.gpu = !this.gpu;
                } else {
                    this.gpu = mode;
                }

                this.modelLayersMap.forEach(layer => {
                    layer.toggleGPU(this.gpu);
                });
                this.visMap.forEach(visInstance => {
                    visInstance.gpu = this.gpu;
                });
                this.resetInputTensors();
            }

            resetInputTensors() {
                this.inputLayerNames.forEach(name => {
                    const inputLayer = this.modelLayersMap.get(name);
                    this.inputTensorsMap.set(name, new _Tensor.default([], inputLayer.shape));
                });
            }

            _buildDAG() {
                const modelClass = this.modelConfig.class_name;
                let modelConfig = [];

                if (modelClass === 'Sequential') {
                    modelConfig = this.modelConfig.config;
                } else if (modelClass === 'Model') {
                    modelConfig = this.modelConfig.config.layers;
                }

                if (!(Array.isArray(modelConfig) && modelConfig.length)) {
                    throw new Error('[Model] Model configuration does not contain any layers.');
                }

                modelConfig.forEach((layerDef, index) => {
                    const layerClass = layerDef.class_name;
                    const layerConfig = layerDef.config;

                    if (modelClass === 'Model' && layerClass === 'Sequential') {
                        layerConfig.forEach((branchLayerDef, branchIndex) => {
                            const branchLayerClass = branchLayerDef.class_name;
                            const branchLayerConfig = branchLayerDef.config;
                            const branchInboundLayerNames = branchIndex === 0 ? layerDef.inbound_nodes[0].map(node => node[0]) : [layerConfig[branchIndex - 1].config.name];

                            this._createLayer(branchLayerClass, branchLayerConfig, branchInboundLayerNames);
                        });
                    } else if (!(layerClass in layers)) {
                        throw new Error(`[Model] Layer ${layerClass} specified in model configuration is not implemented!`);
                    } else {
                        if (modelClass === 'Sequential' && index === 0) {
                            const inputName = 'input';
                            const inputShape = layerConfig.batch_input_shape.slice(1);
                            const layer = new layers.InputLayer({
                                name: inputName,
                                shape: inputShape,
                                gpu: this.gpu
                            });
                            this.modelLayersMap.set(inputName, layer);
                            this.inputTensorsMap.set(inputName, new _Tensor.default([], inputShape));
                            this.inputLayerNames.push(inputName);
                        } else if (modelClass === 'Model' && layerClass === 'InputLayer') {
                            const inputShape = layerConfig.batch_input_shape.slice(1);
                            this.inputTensorsMap.set(layerConfig.name, new _Tensor.default([], inputShape));
                            this.inputLayerNames.push(layerConfig.name);
                        }

                        let inboundLayerNames = [];

                        if (modelClass === 'Sequential') {
                            if (index === 0) {
                                inboundLayerNames = ['input'];
                            } else {
                                inboundLayerNames = [modelConfig[index - 1].config.name];
                            }
                        } else if (modelClass === 'Model') {
                            const inboundNodes = layerDef.inbound_nodes;

                            if (inboundNodes && inboundNodes.length) {
                                inboundLayerNames = inboundNodes[0].map(node => node[0]);
                            }
                        }

                        this._createLayer(layerClass, layerConfig, inboundLayerNames);
                    }
                });
                this.modelLayersMap.forEach(layer => {
                    this.modelLayersInfo.push((0, _pick2.default)(layer, ['name', 'description', 'layerClass', 'inbound', 'outbound']));

                    if (layer.outbound.length === 0) {
                        this.outputLayerNames.push(layer.name);
                    }
                });
                this.inputLayerNames.sort();
                this.outputLayerNames.sort();
            }

            _createLayer(layerClass, layerConfig, inboundLayerNames) {
                const layer = new layers[layerClass](Object.assign({}, layerConfig, {
                    gpu: this.gpu
                }));
                let weightNames = [];

                if (layerClass === 'Bidirectional') {
                    const forwardWeightNames = layer.forwardLayer.params.map(param => `${layerConfig.name}/forward_${layerConfig.layer.config.name}/${param}`);
                    const backwardWeightNames = layer.backwardLayer.params.map(param => `${layerConfig.name}/backward_${layerConfig.layer.config.name}/${param}`);
                    weightNames = forwardWeightNames.concat(backwardWeightNames);
                } else if (layerClass === 'TimeDistributed') {
                    weightNames = layer.layer.params.map(param => `${layerConfig.name}/${param}`);
                } else {
                    weightNames = layer.params.map(param => `${layerConfig.name}/${param}`);
                }

                if (weightNames && weightNames.length) {
                    const weights = weightNames.map(weightName => {
                        const weightDef = (0, _find2.default)(this.modelWeights, w => {
                            const weightRE = new RegExp(`^.*${weightName}`);
                            return weightRE.test(w.weightName);
                        });

                        if (!weightDef) {
                            throw new Error(`[Model] error loading weights.`);
                        }

                        const {
                            data,
                            shape,
                            type
                        } = weightDef;
                        const buf = new ArrayBuffer(data.byteLength);
                        const arr = new Uint8Array(buf);
                        arr.set(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));

                        if (type === 'uint8') {
                            const {
                                quantizeMin,
                                quantizeMax
                            } = weightDef;
                            const unquantized = new Float32Array(arr);

                            for (let i = 0, len = unquantized.length; i < len; i++) {
                                unquantized[i] *= (quantizeMax - quantizeMin) / 255;
                                unquantized[i] += quantizeMin;
                            }

                            return new _Tensor.default(unquantized, shape);
                        } else {
                            return new _Tensor.default(new Float32Array(buf), shape);
                        }
                    });
                    layer.setWeights(weights);
                }

                this.modelLayersMap.set(layerConfig.name, layer);
                inboundLayerNames.forEach(layerName => {
                    this.modelLayersMap.get(layerConfig.name).inbound.push(layerName);
                    this.modelLayersMap.get(layerName).outbound.push(layerConfig.name);
                });
            }

            async _traverseDAG(nodes, eventName) {
                if (nodes.length === 0) {
                    this.runningProgress = 100;
                    this.events.emit(eventName, 100);
                    return true;
                } else if (nodes.length === 1) {
                    const node = nodes[0];
                    const currentLayer = this.modelLayersMap.get(node);

                    if (currentLayer.layerClass === 'InputLayer') {
                        this.finishedLayerNames.push(this.modelLayersMap.get(node).name);
                    } else {
                        const currentLayer = this.modelLayersMap.get(node);

                        if (currentLayer.visited) {
                            return false;
                        }

                        const inboundLayers = currentLayer.inbound.map(n => this.modelLayersMap.get(n));

                        if (!(0, _every2.default)((0, _map2.default)(inboundLayers, 'hasOutput'))) {
                            return false;
                        }

                        if (currentLayer.isMergeLayer) {
                            currentLayer.call((0, _map2.default)(inboundLayers, 'output'));
                        } else {
                            currentLayer.call(inboundLayers[0].output);
                        }

                        currentLayer.hasOutput = true;
                        currentLayer.visited = true;
                        this.finishedLayerNames.push(currentLayer.name);

                        if (this.pauseAfterLayerCalls) {
                            await _bluebird.default.delay(0);
                        }
                    }

                    this.runningProgress += 100 / this.modelLayersMap.size;
                    this.events.emit(eventName, this.runningProgress);
                    await this._traverseDAG(currentLayer.outbound, eventName);
                } else {
                    await _bluebird.default.all(nodes.map(node => this._traverseDAG([node], eventName)));
                }
            }

            _maybeTransferIntermediateOutputs() {
                if (this.gpu && this.transferLayerOutputs) {
                    this.modelLayersMap.forEach(layer => {
                        if (layer.output && layer.output.glTexture) {
                            _WebGL.webgl2.bindOutputTexture(layer.output.glTexture, layer.output.glTextureShape);

                            layer.output.transferFromGLTexture();

                            if (layer.output.is2DReshaped) {
                                layer.output.reshapeFrom2D();
                            }
                        }
                    });
                }
            }

            loadData(inputData) {
                this.inputLayerNames.forEach(name => {
                    const inputLayer = this.modelLayersMap.get(name);
                    this.inputTensorsMap.get(name).replaceTensorData(inputData[name]);
                    inputLayer.call(this.inputTensorsMap.get(name));
                    inputLayer.hasOutput = true;
                    inputLayer.visited = true;
                });
            }

            async predict(inputData) {
                this.isRunning = true;
                this.runningProgress = 0;
                this.events.emit('predictProgress', 0);

                if (!(0, _isEqual2.default)((0, _keys2.default)(inputData).sort(), this.inputLayerNames)) {
                    this.isRunning = false;
                    throw new Error('[Model] predict() must take an object where the keys are the named inputs of the model: ' + JSON.stringify(this.inputLayerNames));
                }

                if (!(0, _every2.default)(this.inputLayerNames, name => inputData[name] instanceof Float32Array)) {
                    this.isRunning = false;
                    throw new Error('[Model] predict() must take an object where the values are the flattened data as Float32Array.');
                }

                this.finishedLayerNames = [];
                this.modelLayersMap.forEach(layer => {
                    layer.hasOutput = false;
                    layer.visited = false;
                });
                let start = (0, _performanceNow.default)();
                this.loadData(inputData);
                this.predictStats.loadData = (0, _performanceNow.default)() - start;
                start = (0, _performanceNow.default)();
                await this._traverseDAG(this.inputLayerNames, 'predictProgress');
                this.predictStats.forwardPass = (0, _performanceNow.default)() - start;

                this._maybeTransferIntermediateOutputs();

                const modelClass = this.modelConfig.class_name;
                const outputData = {};

                if (modelClass === 'Sequential') {
                    const outputLayer = this.modelLayersMap.get(this.outputLayerNames[0]);
                    outputData['output'] = outputLayer.output.tensor.data;
                } else if (modelClass === 'Model') {
                    this.outputLayerNames.forEach(layerName => {
                        const outputLayer = this.modelLayersMap.get(layerName);
                        outputData[layerName] = outputLayer.output.tensor.data;
                    });
                }

                start = (0, _performanceNow.default)();
                this.visMap.forEach(visInstance => {
                    visInstance.update();
                });
                this.predictStats.visualizations = (0, _performanceNow.default)() - start;
                this.isRunning = false;
                this.events.emit('predictProgress', 100);
                return outputData;
            }

            layerCall(layerName, input) {
                if (!this.modelLayersMap.has(layerName)) return;
                let x;

                if (input instanceof _Tensor.default) {
                    x = input;
                } else {
                    x = new _Tensor.default(input.data, input.shape);
                }

                const layer = this.modelLayersMap.get(layerName);
                return layer.call(x);
            }

            cleanup() {
                _WebGL.webgl2.clearRefs();

                this.modelLayersMap.clear();
                this.inputTensorsMap.clear();
                this.visMap.clear();
                delete this.modelWeights;
            }

        }

        exports.default = Model;
    }, {
        "./Tensor": 370,
        "./WebGL2": 371,
        "./layers": 418,
        "./proto": 460,
        "./visualizations": 464,
        "axios": 9,
        "bluebird": 35,
        "eventemitter3": 365,
        "fs": 687,
        "lodash/every": 601,
        "lodash/find": 602,
        "lodash/isEqual": 613,
        "lodash/keys": 621,
        "lodash/map": 623,
        "lodash/pick": 625,
        "performance-now": 671
    }],
    370: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _WebGL = require("./WebGL2");

        var tensorUtils = _interopRequireWildcard(require("./utils/tensorUtils"));

        var _ndarray = _interopRequireDefault(require("ndarray"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var _ndarraySqueeze = _interopRequireDefault(require("ndarray-squeeze"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        class Tensor {
            constructor(data, shape, options = {}) {
                this.arrayType = options.type || Float32Array;

                if (data && data.length && (data instanceof this.arrayType || data instanceof Array)) {
                    tensorUtils.checkShape(data, shape);

                    if (data instanceof this.arrayType) {
                        this.tensor = (0, _ndarray.default)(data, shape);
                    } else if (data instanceof Array) {
                        this.tensor = (0, _ndarray.default)(new this.arrayType(data), shape);
                    }
                } else if (!data.length && shape.length) {
                    this.tensor = (0, _ndarray.default)(new this.arrayType(shape.reduce((a, b) => a * b, 1)), shape);
                } else {
                    this.tensor = (0, _ndarray.default)(new this.arrayType([]), []);
                }
            }

            createGLTexture({
                                type = '2d',
                                format = 'float',
                                supportsTextureFragments = false
                            }) {
                let shape = [];

                if (this.tensor.shape.length === 1) {
                    shape = [1, this.tensor.shape[0]];
                    this.is1D = true;
                } else if (this.tensor.shape.length === 2) {
                    shape = this.tensor.shape;
                } else if (this.tensor.shape.length === 3 && (type === '2d_array' || type === '3d')) {
                    shape = this.tensor.shape;
                } else {
                    throw new Error('[Tensor] cannot create WebGL2 texture.');
                }

                this.glTextureShape = shape;
                this.glTextureType = type;
                this.glTextureFormat = format;

                if (type === '2d') {
                    if (this.glTextureShape[0] > _WebGL.MAX_TEXTURE_SIZE && supportsTextureFragments) {
                        this._create2DRowFragmentedGLTexture();
                    } else {
                        this._create2DGLTexture();
                    }
                } else if (type === '2d_array' || type === '3d') {
                    this._create3DGLTexture();
                } else {
                    throw new Error(`[Tensor] invalid type ${type}.`);
                }
            }

            _create2DGLTexture() {
                const gl = _WebGL.webgl2.context;

                const textureOptions = _WebGL.webgl2.getWebGLTextureOptions(this.glTextureType, this.glTextureFormat);

                const {
                    textureTarget,
                    textureInternalFormat,
                    textureFormat,
                    textureType
                } = textureOptions;
                this.glTexture = gl.createTexture();

                _WebGL.webgl2.storeRef('texture', this.glTexture);

                gl.bindTexture(textureTarget, this.glTexture);
                const shape = this.glTextureShape;
                const data = this.tensor.data;
                gl.texImage2D(textureTarget, 0, textureInternalFormat, shape[1], shape[0], 0, textureFormat, textureType, data);
                gl.texParameteri(textureTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(textureTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                gl.texParameteri(textureTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                gl.texParameteri(textureTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            }

            _create2DRowFragmentedGLTexture() {
                const gl = _WebGL.webgl2.context;

                const textureOptions = _WebGL.webgl2.getWebGLTextureOptions(this.glTextureType, this.glTextureFormat);

                const {
                    textureTarget,
                    textureInternalFormat,
                    textureFormat,
                    textureType
                } = textureOptions;
                this.glTextureFragments = [];
                this.glTextureFragmentShape = [_WebGL.MAX_TEXTURE_SIZE, this.glTextureShape[1]];
                const shape = this.glTextureFragmentShape;
                const numFragments = Math.ceil(this.glTextureShape[0] / _WebGL.MAX_TEXTURE_SIZE);
                let offset = 0;

                for (let k = 0; k < numFragments; k++) {
                    const glTexture = gl.createTexture();

                    _WebGL.webgl2.storeRef('texture', glTexture);

                    gl.bindTexture(textureTarget, glTexture);
                    let data;

                    if (k === numFragments - 1) {
                        data = new this.arrayType(shape[0] * shape[1]);
                        data.set(this.tensor.data.slice(offset, offset + shape[0] * shape[1]), 0);
                    } else {
                        data = this.tensor.data.slice(offset, offset + shape[0] * shape[1]);
                    }

                    gl.texImage2D(textureTarget, 0, textureInternalFormat, shape[1], shape[0], 0, textureFormat, textureType, data);
                    gl.texParameteri(textureTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                    gl.texParameteri(textureTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                    gl.texParameteri(textureTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                    gl.texParameteri(textureTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
                    this.glTextureFragments.push(glTexture);
                    offset += shape[0] * shape[1];
                }
            }

            _create3DGLTexture() {
                const gl = _WebGL.webgl2.context;

                const textureOptions = _WebGL.webgl2.getWebGLTextureOptions(this.glTextureType, this.glTextureFormat);

                const {
                    textureTarget,
                    textureInternalFormat,
                    textureFormat,
                    textureType
                } = textureOptions;
                this.glTexture = gl.createTexture();

                _WebGL.webgl2.storeRef('texture', this.glTexture);

                gl.bindTexture(textureTarget, this.glTexture);
                const shape = this.glTextureShape;
                const data = tensorUtils.data3DLayoutForGL(this.arrayType, this.tensor, this.glTextureShape);
                gl.texImage3D(textureTarget, 0, textureInternalFormat, shape[1], shape[0], shape[2], 0, textureFormat, textureType, data);
                gl.texParameteri(textureTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(textureTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                gl.texParameteri(textureTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                gl.texParameteri(textureTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            }

            convert2DRowFragmentedGLTextureToColStack() {
                if (!this.glTextureFragments || !this.glTextureFragmentShape) {
                    throw new Error('[Tensor] no glTextureFragments available.');
                }

                const gl = _WebGL.webgl2.context;

                const textureOptions = _WebGL.webgl2.getWebGLTextureOptions(this.glTextureType, this.glTextureFormat);

                const {
                    textureTarget,
                    textureInternalFormat,
                    textureFormat,
                    textureType
                } = textureOptions;

                if (!this.glTextureFragmentsAsColStack) {
                    this.glTextureFragmentsAsColStack = gl.createTexture();

                    _WebGL.webgl2.storeRef('texture', this.glTextureFragmentsAsColStack);

                    gl.bindTexture(textureTarget, this.glTextureFragmentsAsColStack);
                    const numFragments = this.glTextureFragments.length;
                    this.glTextureFragmentsAsColStackShape = [this.glTextureFragmentShape[0], this.glTextureFragmentShape[1] * numFragments];
                    const shape = this.glTextureFragmentsAsColStackShape;
                    const data = new this.arrayType(shape.reduce((a, b) => a * b, 1));
                    gl.texImage2D(textureTarget, 0, textureInternalFormat, shape[1], shape[0], 0, textureFormat, textureType, data);
                    gl.texParameteri(textureTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                    gl.texParameteri(textureTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                    gl.texParameteri(textureTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                    gl.texParameteri(textureTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
                } else {
                    gl.bindTexture(textureTarget, this.glTextureFragmentsAsColStack);
                }

                const fbo = gl.createFramebuffer();
                gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo);
                this.glTextureFragments.forEach((texture, k) => {
                    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
                    gl.copyTexSubImage2D(textureTarget, 0, k * this.glTextureFragmentShape[1], 0, 0, 0, this.glTextureFragmentShape[1], this.glTextureFragmentShape[0]);
                });
                gl.deleteFramebuffer(fbo);
            }

            removeGLTextureFragmentsAsColStack() {
                if (this.glTextureFragmentsAsColStack) {
                    const gl = _WebGL.webgl2.context;
                    gl.deleteTexture(this.glTextureFragmentsAsColStack);
                    delete this.glTextureFragmentsAsColStack;
                    delete this.glTextureFragmentsAsColStackShape;
                }
            }

            deleteGLTexture() {
                const gl = _WebGL.webgl2.context;

                if (this.glTexture) {
                    gl.deleteTexture(this.glTexture);
                    delete this.glTexture;
                }

                if (this.glTextureFragments) {
                    this.glTextureFragments.forEach(texture => {
                        gl.deleteTexture(texture);
                    });
                    delete this.glTextureFragments;
                }
            }

            replaceTensorData(data) {
                if (data && data.length && data instanceof this.arrayType) {
                    this.tensor.data.set(data);
                } else if (data && data.length && data instanceof Array) {
                    this.tensor.data.set(new this.arrayType(data));
                } else {
                    throw new Error('[Tensor] invalid input for replaceTensorData method.');
                }

                if (this.glTexture) {
                    const gl = _WebGL.webgl2.context;

                    const textureOptions = _WebGL.webgl2.getWebGLTextureOptions(this.glTextureType, this.glTextureFormat);

                    const {
                        textureTarget,
                        textureFormat,
                        textureType
                    } = textureOptions;
                    gl.bindTexture(textureTarget, this.glTexture);
                    const shape = this.glTextureShape;

                    if (this.glTextureType === '2d') {
                        const data = this.tensor.data;
                        gl.texSubImage2D(textureTarget, 0, 0, 0, shape[1], shape[0], textureFormat, textureType, data, 0);
                    } else if (this.glTextureType === '2d_array' || this.glTextureType === '3d') {
                        const data = tensorUtils.data3DLayoutForGL(this.arrayType, this.tensor, shape);
                        gl.texSubImage3D(textureTarget, 0, 0, 0, 0, shape[1], shape[0], shape[2], textureFormat, textureType, data, 0);
                    }
                }
            }

            transferFromGLTexture() {
                if (this.glTextureFragments) {
                    this.tensor = (0, _ndarray.default)(new this.arrayType(this.glTextureShape[0] * this.glTextureShape[1]), this.glTextureShape);
                    let offset = 0;

                    for (let k = 0; k < this.glTextureFragments.length; k++) {
                        _WebGL.webgl2.bindOutputTexture(this.glTextureFragments[k], this.glTextureFragmentShape);

                        const fragmentData = _WebGL.webgl2.readData(this.glTextureFragmentShape);

                        if (k === this.glTextureFragments.length - 1) {
                            const truncate = this.tensor.data.length - offset;
                            this.tensor.data.set(fragmentData.subarray(0, truncate), offset);
                        } else {
                            this.tensor.data.set(fragmentData, offset);
                        }

                        offset += fragmentData.length;
                    }
                } else {
                    _WebGL.webgl2.bindOutputTexture(this.glTexture, this.glTextureShape);

                    this.tensor = (0, _ndarray.default)(new this.arrayType([]), this.glTextureShape);
                    this.tensor.data = _WebGL.webgl2.readData(this.glTextureShape);
                }

                if (this.is1D && this.glTextureShape[0] === 1) {
                    this.tensor = (0, _ndarraySqueeze.default)(this.tensor, [0]);
                }
            }

            reshapeTo2D() {
                const axis = this.tensor.shape.length - 1;
                const axisSize = this.tensor.shape[axis];
                const otherAxes = this.tensor.shape.slice(0, axis);
                const otherAxesSize = otherAxes.reduce((a, b) => a * b, 1);
                const reshaped = (0, _ndarray.default)(new this.arrayType(otherAxesSize * axisSize), [otherAxesSize, axisSize]);
                const otherAxesData = (0, _ndarray.default)(new this.arrayType(otherAxesSize), otherAxes);
                const otherAxesDataRaveled = (0, _ndarray.default)(new this.arrayType(otherAxesSize), [otherAxesSize]);
                const axisSlices = Array(this.tensor.shape.length).fill(null);

                for (let n = 0; n < axisSize; n++) {
                    axisSlices[axis] = n;

                    _ndarrayOps.default.assign(otherAxesData, this.tensor.pick(...axisSlices));

                    otherAxesDataRaveled.data = otherAxesData.data;

                    _ndarrayOps.default.assign(reshaped.pick(null, n), otherAxesDataRaveled);
                }

                this.originalShape = this.tensor.shape;
                this.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(this.tensor.shape, false, axis);
                this.tensor = reshaped;
                this.is2DReshaped = true;
            }

            reshapeFrom2D(axis = -1) {
                if (!this.is2DReshaped) {
                    throw new Error('[Tensor] not in reshaped 2D representation.');
                }

                if (!this.originalShape) {
                    throw new Error('[Tensor] does not contain originalShape.');
                }

                if (axis < 0) {
                    axis = this.originalShape.length + axis;
                }

                const channelDataSize = this.tensor.shape[0];
                const channels = this.tensor.shape[1];
                const reshaped = (0, _ndarray.default)(new this.arrayType(this.originalShape.reduce((a, b) => a * b, 1)), this.originalShape);
                const channelDataRaveled = (0, _ndarray.default)(new this.arrayType(channelDataSize), [channelDataSize]);
                const unraveledChannelShape = [...this.originalShape.slice(0, axis), ...this.originalShape.slice(axis + 1)];
                const unraveledChannel = (0, _ndarray.default)(new this.arrayType(unraveledChannelShape.reduce((a, b) => a * b, 1)), unraveledChannelShape);
                const axisSlices = Array(this.originalShape.length).fill(null);

                for (let n = 0; n < channels; n++) {
                    _ndarrayOps.default.assign(channelDataRaveled, this.tensor.pick(null, n));

                    unraveledChannel.data = channelDataRaveled.data;
                    axisSlices[axis] = n;

                    _ndarrayOps.default.assign(reshaped.pick(...axisSlices), unraveledChannel);
                }

                this.tensor = reshaped;
            }

            reshapeTo2DSquare() {
                const squareDim = Math.ceil(Math.sqrt(this.tensor.size));
                const reshaped = (0, _ndarray.default)(new this.arrayType(squareDim ** 2), [squareDim, squareDim]);
                reshaped.data.set(this.tensor.data);
                this.originalShape = this.tensor.shape;
                this.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(this.tensor.shape, true);
                this.tensor = reshaped;
                this.is2DSquareReshaped = true;
            }

            reshapeFrom2DSquare() {
                if (!this.is2DSquareReshaped) {
                    throw new Error('[Tensor] not in reshaped 2D square representation.');
                }

                if (!this.originalShape) {
                    throw new Error('[Tensor] does not contain originalShape.');
                }

                const size = this.originalShape.reduce((a, b) => a * b, 1);
                const reshaped = (0, _ndarray.default)(new this.arrayType(size), this.originalShape);
                reshaped.data.set(this.tensor.data.subarray(0, size));
                this.tensor = reshaped;
            }

        }

        exports.default = Tensor;
    }, {
        "./WebGL2": 371,
        "./utils/tensorUtils": 461,
        "ndarray": "ndarray",
        "ndarray-ops": "ndarray-ops",
        "ndarray-squeeze": 667
    }],
    371: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.MAX_TEXTURE_IMAGE_UNITS = exports.MAX_TEXTURE_SIZE = exports.webgl2 = void 0;
        const vertexShaderSource = "#version 300 es\nprecision highp float;\n\nin vec3 position;\nin vec2 texcoord;\nout vec2 outTex;\n\nvoid main () {\n  gl_Position = vec4(position, 1.0);\n\toutTex = texcoord;\n}\n";

        class WebGL2 {
            constructor() {
                this.isSupported = false;
                this.vertexShader = null;

                if (typeof window !== 'undefined') {
                    this.canvas = document.createElement('canvas');
                    this.context = this.canvas.getContext('webgl2');
                    const gl = this.context;

                    if (gl) {
                        this.isSupported = true;
                        gl.getExtension('EXT_color_buffer_float');
                        this.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);
                        this.MAX_TEXTURE_IMAGE_UNITS = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
                        this.init();
                    } else {
                        console.log('Unable to initialize WebGL2 -- your browser may not support it.');
                    }
                }

                this._refs = {
                    textures: [],
                    buffers: []
                };
            }

            init() {
                this.createCommonVertexShader();
            }

            createCommonVertexShader() {
                const gl = this.context;
                const vertexShader = gl.createShader(gl.VERTEX_SHADER);
                gl.shaderSource(vertexShader, vertexShaderSource);
                gl.compileShader(vertexShader);
                const success = gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS);

                if (!success) {
                    console.error(gl.getShaderInfoLog(vertexShader));
                    gl.deleteShader(vertexShader);
                    this.isSupported = false;
                }

                this.vertexShader = vertexShader;
            }

            compileProgram(source) {
                const gl = this.context;
                const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
                gl.shaderSource(fragmentShader, source);
                gl.compileShader(fragmentShader);
                let success = gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);

                if (!success) {
                    console.error(gl.getShaderInfoLog(fragmentShader));
                    gl.deleteShader(fragmentShader);
                    this.isSupported = false;
                }

                const program = gl.createProgram();
                gl.attachShader(program, this.vertexShader);
                gl.attachShader(program, fragmentShader);
                gl.linkProgram(program);
                success = gl.getProgramParameter(program, gl.LINK_STATUS);

                if (!success) {
                    console.error(gl.getProgramInfoLog(program));
                    this.isSupported = false;
                }

                this.setupVertices(program);
                return program;
            }

            setupVertices(program) {
                const gl = this.context;
                const position = gl.getAttribLocation(program, 'position');
                const positionVertexObj = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, positionVertexObj);
                this.storeRef('buffer', positionVertexObj);
                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 1.0, 0.0, -1.0, 1.0, 0.0]), gl.STATIC_DRAW);
                gl.vertexAttribPointer(position, 3, gl.FLOAT, false, 0, 0);
                gl.enableVertexAttribArray(position);
                const texcoord = gl.getAttribLocation(program, 'texcoord');
                const texcoordVertexObj = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, texcoordVertexObj);
                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]), gl.STATIC_DRAW);
                gl.vertexAttribPointer(texcoord, 2, gl.FLOAT, false, 0, 0);
                gl.enableVertexAttribArray(texcoord);
                this.storeRef('buffer', texcoordVertexObj);
                const indicesVertexObj = gl.createBuffer();
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesVertexObj);
                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), gl.STATIC_DRAW);
                this.storeRef('buffer', indicesVertexObj);
            }

            selectProgram(program) {
                const gl = this.context;
                gl.useProgram(program);
            }

            bindUniforms(program, uniforms) {
                const gl = this.context;
                uniforms.forEach(({
                                      value,
                                      type,
                                      name
                                  }) => {
                    const loc = gl.getUniformLocation(program, name);

                    if (type === 'float') {
                        gl.uniform1f(loc, value);
                    } else if (type === 'int' || type === 'bool') {
                        gl.uniform1i(loc, value);
                    }
                });
            }

            bindInputTextures(program, inputs, k) {
                const gl = this.context;
                inputs.forEach(({
                                    input,
                                    name
                                }, i) => {
                    gl.activeTexture(gl.TEXTURE0 + i);

                    if (input.glTextureFragments) {
                        if (input.glTextureFragmentsAsColStack) {
                            const {
                                textureTarget
                            } = this.getWebGLTextureOptions(input.glTextureType, input.glTextureFormat);
                            gl.bindTexture(textureTarget, input.glTextureFragmentsAsColStack);
                        } else {
                            const {
                                textureTarget
                            } = this.getWebGLTextureOptions(input.glTextureType, input.glTextureFormat);
                            gl.bindTexture(textureTarget, input.glTextureFragments[k]);
                        }
                    } else {
                        const {
                            textureTarget
                        } = this.getWebGLTextureOptions(input.glTextureType, input.glTextureFormat);
                        gl.bindTexture(textureTarget, input.glTexture);
                    }

                    gl.uniform1i(gl.getUniformLocation(program, name), i);
                });
            }

            bindOutputTexture(outputTexture, shape) {
                const gl = this.context;
                gl.viewport(0, 0, shape[1], shape[0]);
                this.framebuffer = this.framebuffer || gl.createFramebuffer();
                gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0);
            }

            runProgram({
                           program,
                           output,
                           inputs,
                           uniforms,
                           supportsTextureFragments = false
                       }) {
                if (!program) throw new Error('[WebGL2] missing program');
                if (!output) throw new Error('[WebGL2] missing output');
                if (!inputs) throw new Error('[WebGL2] missing inputs');
                const gl = this.context;
                this.selectProgram(program);

                if (uniforms && Array.isArray(uniforms)) {
                    this.bindUniforms(program, uniforms);
                }

                if (output.glTextureFragments) {
                    if (!supportsTextureFragments) {
                        throw new Error('[WebGL2] program does not support texture fragments');
                    }

                    const inputsWithFragments = inputs.filter(obj => obj.input.glTextureFragments && !obj.input.glTextureFragmentsAsColStack);
                    const numFragments = output.glTextureFragments.length;

                    if (inputsWithFragments.some(obj => obj.input.glTextureFragments.length !== numFragments)) {
                        throw new Error('[WebGL2] number of texture fragments in inputs and output do not match');
                    }

                    for (let k = 0; k < numFragments; k++) {
                        this.bindOutputTexture(output.glTextureFragments[k], output.glTextureFragmentShape);
                        this.bindInputTextures(program, inputs, k);
                        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
                    }
                } else {
                    this.bindOutputTexture(output.glTexture, output.glTextureShape);
                    this.bindInputTextures(program, inputs);
                    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
                }
            }

            readData(shape) {
                const gl = this.context;
                const buf = new ArrayBuffer(shape[0] * shape[1] * 4 * 4);
                const view = new Float32Array(buf);
                gl.readPixels(0, 0, shape[1], shape[0], gl.RGBA, gl.FLOAT, view);
                const out = [];

                for (let i = 0; i < view.length; i += 4) {
                    out.push(view[i]);
                }

                return new Float32Array(out);
            }

            getWebGLTextureOptions(type, format) {
                const gl = this.context;
                const targetMap = {
                    '2d': gl.TEXTURE_2D,
                    '2d_array': gl.TEXTURE_2D_ARRAY,
                    '3d': gl.TEXTURE_3D
                };
                const internalFormatMap = {
                    float: gl.R32F,
                    int: gl.R32I
                };
                const formatMap = {
                    float: gl.RED,
                    int: gl.RED_INTEGER
                };
                const typeMap = {
                    float: gl.FLOAT,
                    int: gl.INT
                };
                const textureTarget = targetMap[type];
                const textureInternalFormat = internalFormatMap[format];
                const textureFormat = formatMap[format];
                const textureType = typeMap[format];
                return {
                    textureTarget,
                    textureInternalFormat,
                    textureFormat,
                    textureType
                };
            }

            storeRef(type, obj) {
                if (type === 'texture') {
                    this._refs.textures.push(obj);
                } else if (type === 'buffer') {
                    this._refs.buffers.push(obj);
                }
            }

            clearRefs() {
                const gl = this.context;

                this._refs.textures.forEach(texture => gl.deleteTexture(texture));

                this._refs.buffers.forEach(buffer => gl.deleteBuffer(buffer));

                this._refs = {
                    textures: [],
                    buffers: []
                };
            }

        }

        const webgl2 = new WebGL2();
        exports.webgl2 = webgl2;
        const MAX_TEXTURE_SIZE = webgl2.MAX_TEXTURE_SIZE;
        exports.MAX_TEXTURE_SIZE = MAX_TEXTURE_SIZE;
        const MAX_TEXTURE_IMAGE_UNITS = webgl2.MAX_TEXTURE_IMAGE_UNITS;
        exports.MAX_TEXTURE_IMAGE_UNITS = MAX_TEXTURE_IMAGE_UNITS;
    }, {}],
    372: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = elu;

        var _cwise = _interopRequireDefault(require("cwise"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const _elu = (0, _cwise.default)({
            args: ['array', 'scalar'],
            body: function (_x, alpha) {
                _x = Math.max(_x, 0) + alpha * (Math.exp(Math.min(_x, 0)) - 1);
            }
        });

        function elu(x, opts = {}) {
            const {
                alpha = 1.0
            } = opts;

            _elu(x.tensor, alpha);
        }
    }, {"cwise": 361}],
    373: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = hard_sigmoid;

        var _cwise = _interopRequireDefault(require("cwise"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const _hard_sigmoid = (0, _cwise.default)({
            args: ['array'],
            body: function (_x) {
                _x = _x * 0.2 + 0.5;

                if (_x <= 0) {
                    _x = 0;
                } else if (_x >= 1) {
                    _x = 1;
                }
            }
        });

        function hard_sigmoid(x) {
            _hard_sigmoid(x.tensor);
        }
    }, {"cwise": 361}],
    374: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "softmax", {
            enumerable: true,
            get: function () {
                return _softmax.default;
            }
        });
        Object.defineProperty(exports, "elu", {
            enumerable: true,
            get: function () {
                return _elu.default;
            }
        });
        Object.defineProperty(exports, "selu", {
            enumerable: true,
            get: function () {
                return _selu.default;
            }
        });
        Object.defineProperty(exports, "softplus", {
            enumerable: true,
            get: function () {
                return _softplus.default;
            }
        });
        Object.defineProperty(exports, "softsign", {
            enumerable: true,
            get: function () {
                return _softsign.default;
            }
        });
        Object.defineProperty(exports, "relu", {
            enumerable: true,
            get: function () {
                return _relu.default;
            }
        });
        Object.defineProperty(exports, "tanh", {
            enumerable: true,
            get: function () {
                return _tanh.default;
            }
        });
        Object.defineProperty(exports, "sigmoid", {
            enumerable: true,
            get: function () {
                return _sigmoid.default;
            }
        });
        Object.defineProperty(exports, "hard_sigmoid", {
            enumerable: true,
            get: function () {
                return _hard_sigmoid.default;
            }
        });
        Object.defineProperty(exports, "linear", {
            enumerable: true,
            get: function () {
                return _linear.default;
            }
        });

        var _softmax = _interopRequireDefault(require("./softmax"));

        var _elu = _interopRequireDefault(require("./elu"));

        var _selu = _interopRequireDefault(require("./selu"));

        var _softplus = _interopRequireDefault(require("./softplus"));

        var _softsign = _interopRequireDefault(require("./softsign"));

        var _relu = _interopRequireDefault(require("./relu"));

        var _tanh = _interopRequireDefault(require("./tanh"));

        var _sigmoid = _interopRequireDefault(require("./sigmoid"));

        var _hard_sigmoid = _interopRequireDefault(require("./hard_sigmoid"));

        var _linear = _interopRequireDefault(require("./linear"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }
    }, {
        "./elu": 372,
        "./hard_sigmoid": 373,
        "./linear": 375,
        "./relu": 377,
        "./selu": 378,
        "./sigmoid": 379,
        "./softmax": 380,
        "./softplus": 381,
        "./softsign": 382,
        "./tanh": 383
    }],
    375: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = linear;

        function linear(x) {
            return x;
        }
    }, {}],
    376: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.linear = exports.hard_sigmoid = exports.sigmoid = exports.tanh = exports.relu = exports.softsign = exports.softplus = exports.selu = exports.elu = exports.softmax = void 0;
        const softmaxProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(x, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  float maxval = 0.0;\n  for (int i = 0; i < int(size[0]); ++i) {\n    float val = texelFetch(x, ivec2(i, out_y), 0).r;\n    if (i == 0 || val > maxval) {\n      maxval = val;\n    }\n  }\n\n  float sum = 0.0;\n  for (int i = 0; i < int(size[0]); ++i) {\n    float val = texelFetch(x, ivec2(i, out_y), 0).r;\n    sum += exp(val - maxval);\n  }\n\n  outColor = exp(texture(x, vec2(outTex.x, outTex.y)) - maxval) / sum;\n}\n";
        exports.softmax = softmaxProgramSource;
        const eluProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nout vec4 outColor;\n\nvoid main() {\n  float alpha = 1.0;\n  vec4 v = texture(x, vec2(outTex.x, outTex.y));\n  outColor = max(v, 0.0) + alpha * (exp(min(v, 0.0)) - 1.0);\n}\n";
        exports.elu = eluProgramSource;
        const seluProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nout vec4 outColor;\n\nvoid main() {\n  float alpha = 1.6732632423543772848170429916717;\n  float scale = 1.0507009873554804934193349852946;\n  vec4 v = texture(x, vec2(outTex.x, outTex.y));\n  outColor = scale * (max(v, 0.0) + alpha * (exp(min(v, 0.0)) - 1.0));\n}\n";
        exports.selu = seluProgramSource;
        const softplusProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nout vec4 outColor;\n\nvoid main() {\n  outColor = log(1.0 + exp(texture(x, vec2(outTex.x, outTex.y))));\n}\n";
        exports.softplus = softplusProgramSource;
        const softsignProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nout vec4 outColor;\n\nvoid main() {\n  vec4 v = texture(x, vec2(outTex.x, outTex.y));\n  v /= 1.0 + abs(v);\n  outColor = v;\n}\n";
        exports.softsign = softsignProgramSource;
        const reluProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nout vec4 outColor;\n\nvoid main() {\n  vec4 v = texture(x, vec2(outTex.x, outTex.y));\n  outColor = max(v, 0.0);\n}\n";
        exports.relu = reluProgramSource;
        const tanhProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nout vec4 outColor;\n\nvoid main() {\n  vec4 v = texture(x, vec2(outTex.x, outTex.y));\n  outColor = tanh(v);\n}\n";
        exports.tanh = tanhProgramSource;
        const sigmoidProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nout vec4 outColor;\n\nvoid main() {\n  outColor = 1.0 / (1.0 + exp(-1.0 * texture(x, vec2(outTex.x, outTex.y))));\n}\n";
        exports.sigmoid = sigmoidProgramSource;
        const hardSigmoidProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nout vec4 outColor;\n\nvoid main() {\n  vec4 v = texture(x, vec2(outTex.x, outTex.y));\n  v = v * 0.2 + 0.5;\n  v = max(v, 0.0);\n  v = min(v, 1.0);\n  outColor = v;\n}\n";
        exports.hard_sigmoid = hardSigmoidProgramSource;
        const linearProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nout vec4 outColor;\n\nvoid main() {\n  outColor = texture(x, vec2(outTex.x, outTex.y));\n}\n";
        exports.linear = linearProgramSource;
    }, {}],
    377: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = relu;

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var _Tensor = _interopRequireDefault(require("../Tensor"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function relu(x, opts = {}) {
            const {
                alpha = 0,
                maxValue = null
            } = opts;
            let neg;

            if (alpha !== 0) {
                neg = new _Tensor.default([], x.tensor.shape);

                _ndarrayOps.default.mins(neg.tensor, x.tensor, 0);

                _ndarrayOps.default.mulseq(neg.tensor, alpha);
            }

            _ndarrayOps.default.maxseq(x.tensor, 0);

            if (maxValue) {
                _ndarrayOps.default.minseq(x.tensor, maxValue);
            }

            if (neg) {
                _ndarrayOps.default.addeq(x.tensor, neg.tensor);
            }
        }
    }, {"../Tensor": 370, "ndarray-ops": "ndarray-ops"}],
    378: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = selu;

        var _cwise = _interopRequireDefault(require("cwise"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const _selu = (0, _cwise.default)({
            args: ['array', 'scalar'],
            body: function (_x) {
                const alpha = 1.6732632423543772848170429916717;
                const scale = 1.0507009873554804934193349852946;
                _x = scale * (Math.max(_x, 0) + alpha * (Math.exp(Math.min(_x, 0)) - 1));
            }
        });

        function selu(x) {
            _selu(x.tensor);
        }
    }, {"cwise": 361}],
    379: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = sigmoid;

        var _cwise = _interopRequireDefault(require("cwise"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const _sigmoid = (0, _cwise.default)({
            args: ['array'],
            body: function (_x) {
                _x = 1 / (1 + Math.exp(-_x));
            }
        });

        function sigmoid(x) {
            _sigmoid(x.tensor);
        }
    }, {"cwise": 361}],
    380: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = softmax;

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function softmax(x) {
            if (x.tensor.shape.length === 1) {
                const maxval = _ndarrayOps.default.sup(x.tensor);

                _ndarrayOps.default.subseq(x.tensor, maxval);

                _ndarrayOps.default.expeq(x.tensor);

                const sum = _ndarrayOps.default.sum(x.tensor);

                _ndarrayOps.default.divseq(x.tensor, sum);
            } else if (x.tensor.shape.length === 2) {
                for (let i = 0; i < x.tensor.shape[0]; i++) {
                    const maxval = _ndarrayOps.default.sup(x.tensor.pick(i, null));

                    _ndarrayOps.default.subseq(x.tensor.pick(i, null), maxval);

                    _ndarrayOps.default.expeq(x.tensor.pick(i, null));

                    const sum = _ndarrayOps.default.sum(x.tensor.pick(i, null));

                    _ndarrayOps.default.divseq(x.tensor.pick(i, null), sum);
                }
            } else {
                throw new Error(`[activations.softmax] tensor shape ${x.tensor.shape} not supported.`);
            }
        }
    }, {"ndarray-ops": "ndarray-ops"}],
    381: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = softplus;

        var _cwise = _interopRequireDefault(require("cwise"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const _softplus = (0, _cwise.default)({
            args: ['array'],
            body: function (_x) {
                _x = Math.log(Math.exp(_x) + 1);
            }
        });

        function softplus(x) {
            _softplus(x.tensor);
        }
    }, {"cwise": 361}],
    382: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = softsign;

        var _cwise = _interopRequireDefault(require("cwise"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const _softsign = (0, _cwise.default)({
            args: ['array'],
            body: function (_x) {
                _x /= 1 + Math.abs(_x);
            }
        });

        function softsign(x) {
            _softsign(x.tensor);
        }
    }, {"cwise": 361}],
    383: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = tanh;

        var _cwise = _interopRequireDefault(require("cwise"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const _tanh = (0, _cwise.default)({
            args: ['array'],
            body: function (_x) {
                _x = Math.tanh(_x);
            }
        });

        function tanh(x) {
            _tanh(x.tensor);
        }
    }, {"cwise": 361}],
    384: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

        var _Layer = _interopRequireDefault(require("../Layer"));

        var _Tensor = _interopRequireDefault(require("../Tensor"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class InputLayer extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'InputLayer';
                const {
                    shape = []
                } = attrs;
                this.shape = attrs.batch_input_shape && attrs.batch_input_shape.length ? attrs.batch_input_shape.slice(1) : shape;
                this.description = `shape: ${JSON.stringify(this.shape)}`;
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                this.inputShape = x.tensor.shape;

                if (!(0, _isEqual2.default)(this.inputShape, this.shape)) {
                    this.throwError(`input tensor shape ${x.tensor.shape} does not match specified shape ${this.shape}.`);
                }

                this.output = new _Tensor.default(x.tensor.data, x.tensor.shape);
            }

            _callGPU(x) {
                if (!x.glTexture && !x.glTextureFragments) {
                    this.inputShape = x.tensor.shape;
                } else {
                    if (x.is2DReshaped || x.is2DSquareReshaped) {
                        this.inputShape = x.originalShape;
                    } else {
                        this.inputShape = x.tensor.shape;
                    }
                }

                if (!(0, _isEqual2.default)(this.inputShape, this.shape)) {
                    this.throwError(`input tensor shape ${x.tensor.shape} does not match specified shape ${this.shape}.`);
                }

                if (!x.glTexture) {
                    if (x.tensor.shape.length <= 2) {
                        x.createGLTexture({
                            type: '2d',
                            format: 'float',
                            supportsTextureFragments: true
                        });
                    } else if (x.tensor.shape.length > 2) {
                        x.reshapeTo2D();
                        x.createGLTexture({
                            type: '2d',
                            format: 'float',
                            supportsTextureFragments: true
                        });
                    }
                }

                this.output = x;
            }

        }

        exports.default = InputLayer;
    }, {"../Layer": 368, "../Tensor": 370, "lodash/isEqual": 613}],
    385: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _cwise = _interopRequireDefault(require("cwise"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const programSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform float alpha;\nout vec4 outColor;\n\nvoid main() {\n  vec4 v = texture(x, vec2(outTex.x, outTex.y));\n  outColor = max(v, 0.0) + alpha * (exp(min(v, 0.0)) - 1.0);\n}\n";

        class ELU extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);

                _initialiseProps.call(this);

                this.layerClass = 'ELU';
                const {
                    alpha = 1.0
                } = attrs;
                this.description = `alpha: ${alpha}`;
                this.alpha = alpha;

                if (this.gpu) {
                    this.program = _WebGL.webgl2.compileProgram(programSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                this.output = x;

                this._compute(this.output.tensor, this.alpha);
            }

            _callGPU(x) {
                if (!x.glTexture && !x.glTextureFragments) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], x.glTextureShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });

                    if (x.is1D) {
                        this.output.is1D = x.is1D;
                    } else if (x.is2DReshaped || x.is2DSquareReshaped) {
                        if (x.is2DReshaped) {
                            this.output.is2DReshaped = x.is2DReshaped;
                        } else if (x.is2DSquareReshaped) {
                            this.output.is2DSquareReshaped = x.is2DSquareReshaped;
                        }

                        this.output.originalShape = x.originalShape;
                        this.output.indicesForReshaped = x.indicesForReshaped;
                    }
                }

                _WebGL.webgl2.runProgram({
                    program: this.program,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }],
                    uniforms: [{
                        value: this.alpha,
                        type: 'float',
                        name: 'alpha'
                    }],
                    supportsTextureFragments: true
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else if (this.output.is2DSquareReshaped) {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = ELU;

        var _initialiseProps = function () {
            Object.defineProperty(this, "_compute", {
                configurable: true,
                enumerable: true,
                writable: true,
                value: (0, _cwise.default)({
                    args: ['array', 'scalar'],
                    body: function (_x, alpha) {
                        _x = Math.max(_x, 0) + alpha * (Math.exp(Math.min(_x, 0)) - 1);
                    }
                })
            });
        };
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "cwise": 361}],
    386: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _activations = require("../../activations");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const programSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform float alpha;\nout vec4 outColor;\n\nvoid main() {\n  vec4 v = texture(x, vec2(outTex.x, outTex.y));\n  outColor = max(v, 0.0) + alpha * min(v, 0.0);\n}\n";

        class LeakyReLU extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'LeakyReLU';
                const {
                    alpha = 0.3
                } = attrs;
                this.description = `alpha: ${alpha}`;
                this.alpha = alpha;

                if (this.gpu) {
                    this.program = _WebGL.webgl2.compileProgram(programSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                this.output = x;
                (0, _activations.relu)(this.output, {
                    alpha: this.alpha
                });
            }

            _callGPU(x) {
                if (!x.glTexture && !x.glTextureFragments) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], x.glTextureShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });

                    if (x.is1D) {
                        this.output.is1D = x.is1D;
                    } else if (x.is2DReshaped || x.is2DSquareReshaped) {
                        if (x.is2DReshaped) {
                            this.output.is2DReshaped = x.is2DReshaped;
                        } else if (x.is2DSquareReshaped) {
                            this.output.is2DSquareReshaped = x.is2DSquareReshaped;
                        }

                        this.output.originalShape = x.originalShape;
                        this.output.indicesForReshaped = x.indicesForReshaped;
                    }
                }

                _WebGL.webgl2.runProgram({
                    program: this.program,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }],
                    uniforms: [{
                        value: this.alpha,
                        type: 'float',
                        name: 'alpha'
                    }],
                    supportsTextureFragments: true
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else if (this.output.is2DSquareReshaped) {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = LeakyReLU;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "../../activations": 374}],
    387: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _cwise = _interopRequireDefault(require("cwise"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const programSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform sampler2D alpha;\nout vec4 outColor;\n\nvoid main() {\n  vec4 v = texture(x, vec2(outTex.x, outTex.y));\n  vec4 a = texture(alpha, vec2(outTex.x, outTex.y));\n  outColor = max(v, 0.0) + a * min(v, 0.0);\n}\n";

        class PReLU extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                Object.defineProperty(this, "_compute", {
                    configurable: true,
                    enumerable: true,
                    writable: true,
                    value: (0, _cwise.default)({
                        args: ['array', 'array'],
                        body: function (_x, alpha) {
                            _x = Math.max(_x, 0) + alpha * Math.min(_x, 0);
                        }
                    })
                });
                this.layerClass = 'PReLU';
                this.params = ['alpha'];

                if (this.gpu) {
                    this.program = _WebGL.webgl2.compileProgram(programSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                this.output = x;

                this._compute(this.output.tensor, this.weights['alpha'].tensor);
            }

            _callGPU(x) {
                if (!x.glTexture && !x.glTextureFragments) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], x.glTextureShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });

                    if (x.is1D) {
                        this.output.is1D = x.is1D;
                    } else if (x.is2DReshaped || x.is2DSquareReshaped) {
                        if (x.is2DReshaped) {
                            this.output.is2DReshaped = x.is2DReshaped;
                        } else if (x.is2DSquareReshaped) {
                            this.output.is2DSquareReshaped = x.is2DSquareReshaped;
                        }

                        this.output.originalShape = x.originalShape;
                        this.output.indicesForReshaped = x.indicesForReshaped;
                    }
                }

                _WebGL.webgl2.runProgram({
                    program: this.program,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }, {
                        input: this.weights['alpha'],
                        name: 'alpha'
                    }],
                    supportsTextureFragments: true
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else if (this.output.is2DSquareReshaped) {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = PReLU;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "cwise": 361}],
    388: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _cwise = _interopRequireDefault(require("cwise"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const programSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform float theta;\nout vec4 outColor;\n\nvoid main() {\n  vec4 v = texture(x, vec2(outTex.x, outTex.y));\n  outColor = v * float(greaterThan(v, vec4(theta)));\n}\n";

        class ThresholdedReLU extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);

                _initialiseProps.call(this);

                this.layerClass = 'ThresholdedReLU';
                const {
                    theta = 1
                } = attrs;
                this.description = `theta: ${theta}`;
                this.theta = theta;

                if (this.gpu) {
                    this.program = _WebGL.webgl2.compileProgram(programSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                this.output = x;

                this._compute(this.output.tensor, this.theta);
            }

            _callGPU(x) {
                if (!x.glTexture && !x.glTextureFragments) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], x.glTextureShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });

                    if (x.is1D) {
                        this.output.is1D = x.is1D;
                    } else if (x.is2DReshaped || x.is2DSquareReshaped) {
                        if (x.is2DReshaped) {
                            this.output.is2DReshaped = x.is2DReshaped;
                        } else if (x.is2DSquareReshaped) {
                            this.output.is2DSquareReshaped = x.is2DSquareReshaped;
                        }

                        this.output.originalShape = x.originalShape;
                        this.output.indicesForReshaped = x.indicesForReshaped;
                    }
                }

                _WebGL.webgl2.runProgram({
                    program: this.program,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }],
                    uniforms: [{
                        value: this.theta,
                        type: 'float',
                        name: 'theta'
                    }],
                    supportsTextureFragments: true
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else if (this.output.is2DSquareReshaped) {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = ThresholdedReLU;

        var _initialiseProps = function () {
            Object.defineProperty(this, "_compute", {
                configurable: true,
                enumerable: true,
                writable: true,
                value: (0, _cwise.default)({
                    args: ['array', 'scalar'],
                    body: function (_x, theta) {
                        _x = _x * Number(_x > theta);
                    }
                })
            });
        };
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "cwise": 361}],
    389: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "LeakyReLU", {
            enumerable: true,
            get: function () {
                return _LeakyReLU.default;
            }
        });
        Object.defineProperty(exports, "PReLU", {
            enumerable: true,
            get: function () {
                return _PReLU.default;
            }
        });
        Object.defineProperty(exports, "ELU", {
            enumerable: true,
            get: function () {
                return _ELU.default;
            }
        });
        Object.defineProperty(exports, "ThresholdedReLU", {
            enumerable: true,
            get: function () {
                return _ThresholdedReLU.default;
            }
        });

        var _LeakyReLU = _interopRequireDefault(require("./LeakyReLU"));

        var _PReLU = _interopRequireDefault(require("./PReLU"));

        var _ELU = _interopRequireDefault(require("./ELU"));

        var _ThresholdedReLU = _interopRequireDefault(require("./ThresholdedReLU"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }
    }, {"./ELU": 385, "./LeakyReLU": 386, "./PReLU": 387, "./ThresholdedReLU": 388}],
    390: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _Conv2D = _interopRequireDefault(require("./Conv2D"));

        var tensorUtils = _interopRequireWildcard(require("../../utils/tensorUtils"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var _ndarraySqueeze = _interopRequireDefault(require("ndarray-squeeze"));

        var _ndarrayUnsqueeze = _interopRequireDefault(require("ndarray-unsqueeze"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class Conv1D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Conv1D';
                const {
                    filters = 1,
                    kernel_size = 1,
                    strides = 1,
                    padding = 'valid',
                    dilation_rate = 1,
                    activation = 'linear',
                    use_bias = true
                } = attrs;
                this.description = `${filters} filters of size ${kernel_size}, striding ${strides}`;
                this.description += padding === 'valid' ? `, no border padding` : ', pad to same borders';
                this.description += dilation_rate > 1 ? `, dilation rate ${dilation_rate}` : '';
                this.description += activation !== 'linear' ? `, ${activation} activation` : '';

                if (padding !== 'valid' && padding !== 'same') {
                    this.throwError('Invalid padding.');
                }

                if (dilation_rate !== 1 && strides !== 1) {
                    this.throwError('Incompatible combination of dilation_rate with strides.');
                }

                this.use_bias = use_bias;
                this.params = this.use_bias ? ['kernel', 'bias'] : ['kernel'];
                const conv2dAttrs = {
                    filters,
                    kernel_size: [kernel_size, 1],
                    strides: [strides, 1],
                    padding,
                    data_format: 'channels_first',
                    dilation_rate,
                    activation,
                    use_bias
                };
                this._conv2dAttrs = conv2dAttrs;
                this._conv2d = new _Conv2D.default(Object.assign(conv2dAttrs, {
                    gpu: attrs.gpu
                }));
            }

            setWeights(weightsArr) {
                weightsArr[0].tensor = (0, _ndarrayUnsqueeze.default)(weightsArr[0].tensor).transpose(2, 1, 0, 3);

                this._conv2d.setWeights(weightsArr);
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                const input = new _Tensor.default(x.tensor.data, x.tensor.shape);
                input.tensor = (0, _ndarrayUnsqueeze.default)(input.tensor).transpose(0, 2, 1);

                const conv2dOutput = this._conv2d.call(input);

                this.outputShape = [0, 2].map(i => this._conv2d.outputShape[i]);
                this.output = new _Tensor.default([], this.outputShape);

                _ndarrayOps.default.assign(this.output.tensor, (0, _ndarraySqueeze.default)(conv2dOutput.tensor).transpose(1, 0, 2));
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                const inputShape = x.tensor.shape;
                const input = new _Tensor.default([], inputShape);
                Object.assign(input, x);
                input.glTextureShape = inputShape;
                input.is2DReshaped = true;
                input.originalShape = [inputShape[0], 1, inputShape[1]];
                input.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(input.originalShape, false, -1);
                this.output = this._conv2d.call(input);

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = Conv1D;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../utils/tensorUtils": 461,
        "./Conv2D": 391,
        "ndarray-ops": "ndarray-ops",
        "ndarray-squeeze": 667,
        "ndarray-unsqueeze": 670
    }],
    391: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var activations = _interopRequireWildcard(require("../../activations"));

        var _WebGL = require("../../WebGL2");

        var _createGLSLProgram = _interopRequireDefault(require("../../webgl/dynamic/createGLSLProgram"));

        var tensorUtils = _interopRequireWildcard(require("../../utils/tensorUtils"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var _ndarrayGemm = _interopRequireDefault(require("ndarray-gemm"));

        var activationProgramSources = _interopRequireWildcard(require("../../activations/programSources"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";
        const mapInputFragmentsProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 inputSize = textureSize(x, 0);\n  ivec2 outputSize = textureSize(indexMap, 0);\n  int out_x = int(float(outputSize[0]) * outTex.x);\n  int out_y = int(float(outputSize[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    int fragmentIndex = int(floor(float(rowIndex) / float(inputSize[1])));\n    rowIndex = int(mod(float(rowIndex), float(inputSize[1])));\n    colIndex = fragmentIndex * inputCols + colIndex;\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";
        const matMulProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D A;\nuniform sampler2D B;\nuniform sampler2D C;\nuniform bool addC;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 A_size = textureSize(A, 0);\n  ivec2 B_size = textureSize(B, 0);\n  int out_x = int(float(B_size[0]) * outTex.x);\n  int out_y = int(float(A_size[1]) * outTex.y);\n  int commonDim = A_size[0];\n\n  float sum = 0.;\n  for (int i = 0; i < commonDim; ++i) {\n    float a = texelFetch(A, ivec2(i, out_y), 0).r;\n    float b = texelFetch(B, ivec2(out_x, i), 0).r;\n    sum += a * b;\n  }\n\n  if (addC) {\n    sum += texelFetch(C, ivec2(out_x, 0), 0).r;\n  }\n\n  outColor = vec4(sum);\n}\n";

        class Conv2D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Conv2D';
                const {
                    filters = 1,
                    kernel_size = [3, 3],
                    strides = [1, 1],
                    padding = 'valid',
                    data_format = 'channels_last',
                    dilation_rate = [1, 1],
                    activation = 'linear',
                    use_bias = true
                } = attrs;

                if (Array.isArray(kernel_size)) {
                    this.kernelShape = [filters, ...kernel_size];
                } else {
                    this.kernelShape = [filters, kernel_size, kernel_size];
                }

                if (Array.isArray(strides)) {
                    this.strides = strides;
                } else {
                    this.strides = [strides, strides];
                }

                if (padding === 'valid' || padding === 'same') {
                    this.padding = padding;
                } else {
                    this.throwError('Invalid padding.');
                }

                if (data_format === 'channels_last' || data_format === 'channels_first') {
                    this.dataFormat = data_format;
                } else {
                    this.throwError('Only channels_last and channels_first data formats are allowed.');
                }

                if (Array.isArray(dilation_rate)) {
                    this.dilationRate = dilation_rate;
                } else {
                    this.dilationRate = [dilation_rate, dilation_rate];
                }

                if ((this.dilationRate[0] !== 1 || this.dilationRate[1] !== 1) && (this.strides[0] !== 1 || this.strides[1] !== 1)) {
                    this.throwError(`Incompatible combination of dilation_rate with strides.`);
                }

                this.activation = activation;
                this.activationFunc = activations[activation];
                this.useBias = use_bias;
                this.params = this.useBias ? ['kernel', 'bias'] : ['kernel'];
                this.description = `${this.kernelShape[0]} ${this.kernelShape.slice(1).join('x')} filters`;
                this.description += this.strides.some(s => s > 1) ? `, ${this.strides.join('x')} striding` : '';
                this.description += this.padding === 'valid' ? `, no border padding` : ', pad to same borders';
                this.description += this.dilationRate.some(r => r > 1) ? `, ${this.dilationRate.join('x')} dilation` : '';
                this.description += this.activation !== 'linear' ? `, ${this.activation} activation` : '';

                if (this.gpu) {
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                    this.mapInputFragmentsProgram = _WebGL.webgl2.compileProgram(mapInputFragmentsProgramSource);
                    this.matMulProgram = _WebGL.webgl2.compileProgram(matMulProgramSource);
                    this.activationProgram = _WebGL.webgl2.compileProgram(activationProgramSources[this.activation]);
                }
            }

            setWeights(weightsArr) {
                if (this.dataFormat === 'channels_first') {
                    weightsArr[0].tensor = weightsArr[0].tensor.transpose(2, 3, 1, 0);
                }

                super.setWeights(weightsArr, false);

                this._w2row();

                if (this.gpu) {
                    this.weights['kernel'] = this.wRowsMat;
                    this.weights['kernel'].createGLTexture({
                        type: '2d',
                        format: 'float'
                    });

                    if (this.useBias) {
                        this.weights['bias'].createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    }
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _calcOutputShape(inputShape) {
                if (this.outputShape && this.inputPadding) {
                    return;
                }

                const inputRows = inputShape[0];
                const inputCols = inputShape[1];
                const [nbFilter, nbRow, nbCol] = this.kernelShape;
                const nbRowDilated = nbRow + (nbRow - 1) * (this.dilationRate[0] - 1);
                const nbColDilated = nbCol + (nbCol - 1) * (this.dilationRate[1] - 1);
                const outputRows = this.padding === 'same' ? Math.floor((inputRows + this.strides[0] - 1) / this.strides[0]) : Math.floor((inputRows - nbRowDilated + this.strides[0]) / this.strides[0]);
                const outputCols = this.padding === 'same' ? Math.floor((inputCols + this.strides[1] - 1) / this.strides[1]) : Math.floor((inputCols - nbColDilated + this.strides[1]) / this.strides[1]);
                const outputChannels = nbFilter;
                const paddingRow = this.padding === 'same' ? Math.max(0, Math.floor((outputRows - 1) * this.strides[0] + nbRowDilated - inputRows)) : 0;
                const paddingCol = this.padding === 'same' ? Math.max(0, Math.floor((outputCols - 1) * this.strides[1] + nbColDilated - inputCols)) : 0;
                const paddingRowBefore = Math.floor(paddingRow / 2);
                const paddingRowAfter = paddingRow - paddingRowBefore;
                const paddingColBefore = Math.floor(paddingCol / 2);
                const paddingColAfter = paddingCol - paddingColBefore;
                this.outputShape = [outputRows, outputCols, outputChannels];
                this.inputPadding = [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter];
            }

            _padInput(x, padValue = 0) {
                if (this.padding === 'same') {
                    const [inputRows, inputCols, inputChannels] = x.tensor.shape;
                    const [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter] = this.inputPadding;
                    const newRows = inputRows + paddingRowBefore + paddingRowAfter;
                    const newCols = inputCols + paddingColBefore + paddingColAfter;

                    const _x = new _Tensor.default([], [newRows, newCols, inputChannels]);

                    if (padValue !== 0) {
                        _ndarrayOps.default.assigns(_x.tensor, padValue);
                    }

                    _ndarrayOps.default.assign(_x.tensor.hi(inputRows + paddingRowBefore, inputCols + paddingColBefore, inputChannels).lo(paddingRowBefore, paddingColBefore, 0), x.tensor);

                    return _x;
                }

                return x;
            }

            _im2col(x) {
                const [inputRows, inputCols, inputChannels] = x.tensor.shape;
                const nbRow = this.kernelShape[1];
                const nbCol = this.kernelShape[2];
                const outputRows = this.outputShape[0];
                const outputCols = this.outputShape[1];
                const nbPatches = outputRows * outputCols;
                const patchLen = nbRow * nbCol * inputChannels;
                const nbRowDilated = nbRow + (nbRow - 1) * (this.dilationRate[0] - 1);
                const nbColDilated = nbCol + (nbCol - 1) * (this.dilationRate[1] - 1);

                if (!this.imColsMat) {
                    this.imColsMat = new _Tensor.default([], [nbPatches, patchLen]);
                }

                if (nbRowDilated === 1 && nbColDilated === 1 && this.strides[0] === 1 && this.strides[1] === 1) {
                    this.imColsMat.replaceTensorData(x.tensor.data);
                    return this.imColsMat;
                }

                const patch = new _Tensor.default([], [nbRow, nbCol, inputChannels]);
                let offset = 0;

                for (let i = 0, limit = inputRows - nbRowDilated; i <= limit; i += this.strides[0]) {
                    for (let j = 0, limit = inputCols - nbColDilated; j <= limit; j += this.strides[1]) {
                        _ndarrayOps.default.assign(patch.tensor, x.tensor.hi(i + nbRowDilated, j + nbColDilated, inputChannels).lo(i, j, 0).step(this.dilationRate[0], this.dilationRate[1], 1));

                        this.imColsMat.tensor.data.set(patch.tensor.data, offset);
                        offset += patchLen;
                    }
                }

                return this.imColsMat;
            }

            _w2row() {
                const inputChannels = this.weights['kernel'].tensor.shape[2];
                const [nbFilter, nbRow, nbCol] = this.kernelShape;
                const patchLen = nbRow * nbCol * inputChannels;
                this.wRowsMat = new _Tensor.default([], [patchLen, nbFilter]);
                const patch = new _Tensor.default([], [nbRow, nbCol, inputChannels]);
                const patchRaveled = new _Tensor.default([], [patchLen]);

                for (let n = 0; n < nbFilter; n++) {
                    _ndarrayOps.default.assign(patch.tensor, this.weights['kernel'].tensor.pick(null, null, null, n));

                    patchRaveled.replaceTensorData(patch.tensor.data);

                    _ndarrayOps.default.assign(this.wRowsMat.tensor.pick(null, n), patchRaveled.tensor);
                }

                return this.wRowsMat;
            }

            _callCPU(x) {
                this.inputShape = x.tensor.shape;

                this._calcOutputShape(this.inputShape);

                x = this._padInput(x);

                this._im2col(x);

                const nbFilter = this.kernelShape[0];
                const outputRows = this.outputShape[0];
                const outputCols = this.outputShape[1];
                const nbPatches = outputRows * outputCols;
                const matMul = new _Tensor.default([], [nbPatches, nbFilter]);

                if (this.useBias) {
                    for (let n = 0; n < nbFilter; n++) {
                        _ndarrayOps.default.assigns(matMul.tensor.pick(null, n), this.weights['bias'].tensor.get(n));
                    }
                }

                (0, _ndarrayGemm.default)(matMul.tensor, this.imColsMat.tensor, this.wRowsMat.tensor, 1, 1);
                this.output = new _Tensor.default([], this.outputShape);
                let outputChannelRaveled = new _Tensor.default([], [outputRows * outputCols]);
                let outputChannel = new _Tensor.default([], [outputRows, outputCols]);

                for (let n = 0; n < nbFilter; n++) {
                    _ndarrayOps.default.assign(outputChannelRaveled.tensor, matMul.tensor.pick(null, n));

                    outputChannel.replaceTensorData(outputChannelRaveled.tensor.data);

                    _ndarrayOps.default.assign(this.output.tensor.pick(null, null, n), outputChannel.tensor);
                }

                this.activationFunc(this.output);

                if (this.dataFormat === 'channels_first') {
                    this.output.tensor = this.output.tensor.transpose(2, 0, 1);
                }
            }

            _createIndexMap(indicesForReshaped) {
                if (this.indexMap) {
                    return;
                }

                let [inputRows, inputCols, inputChannels] = this.inputShape;
                let indices = new _Tensor.default(indicesForReshaped.data, indicesForReshaped.shape, {
                    type: Int32Array
                });

                if (this.padding === 'same') {
                    const [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter] = this.inputPadding;
                    inputRows = inputRows + paddingRowBefore + paddingRowAfter;
                    inputCols = inputCols + paddingColBefore + paddingColAfter;
                    const padValue = -1;
                    indices = this._padInput(indices, padValue);
                }

                const nbRow = this.kernelShape[1];
                const nbCol = this.kernelShape[2];
                const outputRows = this.outputShape[0];
                const outputCols = this.outputShape[1];
                const nbPatches = outputRows * outputCols;
                const patchLen = nbRow * nbCol * inputChannels;
                const nbRowDilated = nbRow + (nbRow - 1) * (this.dilationRate[0] - 1);
                const nbColDilated = nbCol + (nbCol - 1) * (this.dilationRate[1] - 1);
                this.indexMap = new _Tensor.default([], [nbPatches, patchLen], {
                    type: Int32Array
                });
                const indicesPatch = new _Tensor.default([], [nbRow, nbCol, inputChannels]);
                let offset = 0;

                for (let i = 0, limit = inputRows - nbRowDilated; i <= limit; i += this.strides[0]) {
                    for (let j = 0, limit = inputCols - nbColDilated; j <= limit; j += this.strides[1]) {
                        _ndarrayOps.default.assign(indicesPatch.tensor, indices.tensor.hi(i + nbRowDilated, j + nbColDilated, inputChannels).lo(i, j, 0).step(this.dilationRate[0], this.dilationRate[1], 1));

                        this.indexMap.tensor.data.set(indicesPatch.tensor.data, offset);
                        offset += patchLen;
                    }
                }

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int',
                    supportsTextureFragments: true
                });
            }

            _callGPU(x) {
                let outputTextureShape;

                if (x.is2DReshaped || x.is2DSquareReshaped) {
                    this.inputShape = x.originalShape;

                    this._calcOutputShape(this.inputShape);

                    this._createIndexMap(x.indicesForReshaped);

                    outputTextureShape = [this.indexMap.glTextureShape[0], this.weights['kernel'].glTextureShape[1]];
                } else {
                    this.inputShape = x.tensor.shape;

                    this._calcOutputShape(this.inputShape);

                    x = this._padInput(x);

                    this._im2col(x);

                    this.imColsMat.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                    outputTextureShape = [this.imColsMat.glTextureShape[0], this.weights['kernel'].glTextureShape[1]];
                }

                if (this.activation !== 'linear' && !this.outputPreactiv) {
                    this.outputPreactiv = new _Tensor.default([], outputTextureShape);
                    this.outputPreactiv.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                    this.outputPreactiv.is2DReshaped = true;
                    this.outputPreactiv.originalShape = this.outputShape;
                    this.outputPreactiv.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(this.outputShape, false, -1);
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], outputTextureShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                    this.output.is2DReshaped = true;
                    this.output.originalShape = this.outputShape;
                    this.output.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(this.outputShape, false, -1);
                }

                if (x.is2DReshaped || x.is2DSquareReshaped) {
                    const hasFragments = Boolean(x.glTextureFragments);

                    if (hasFragments) {
                        x.convert2DRowFragmentedGLTextureToColStack();
                    }

                    if (!this.convProgram) {
                        const convProgramSource = (0, _createGLSLProgram.default)('conv2d', this.output.glTextureFragmentShape ? this.output.glTextureFragmentShape : this.output.glTextureShape, x.glTextureFragmentShape ? x.glTextureFragmentShape : x.glTextureShape, this.indexMap.glTextureFragmentShape ? this.indexMap.glTextureFragmentShape : this.indexMap.glTextureShape, this.useBias, hasFragments);
                        this.convProgram = _WebGL.webgl2.compileProgram(convProgramSource);
                    }

                    _WebGL.webgl2.runProgram({
                        program: this.convProgram,
                        output: this.activation === 'linear' ? this.output : this.outputPreactiv,
                        inputs: [{
                            input: x,
                            name: 'x'
                        }, {
                            input: this.indexMap,
                            name: 'indexMap'
                        }, {
                            input: this.weights['kernel'],
                            name: 'kernel'
                        }, ...(this.useBias ? [{
                            input: this.weights['bias'],
                            name: 'bias'
                        }] : [])],
                        supportsTextureFragments: true
                    });

                    if (hasFragments) {
                        x.removeGLTextureFragmentsAsColStack();
                    }
                } else {
                    const matMulInputs = [{
                        input: this.imColsMat,
                        name: 'A'
                    }, {
                        input: this.weights['kernel'],
                        name: 'B'
                    }];

                    if (this.useBias) {
                        matMulInputs.push({
                            input: this.weights['bias'],
                            name: 'C'
                        });
                    }

                    _WebGL.webgl2.runProgram({
                        program: this.matMulProgram,
                        output: this.activation === 'linear' ? this.output : this.outputPreactiv,
                        inputs: matMulInputs,
                        uniforms: [{
                            value: this.useBias ? 1 : 0,
                            type: 'bool',
                            name: 'addC'
                        }],
                        supportsTextureFragments: true
                    });
                }

                if (this.activation !== 'linear') {
                    _WebGL.webgl2.runProgram({
                        program: this.activationProgram,
                        output: this.output,
                        inputs: [{
                            input: this.outputPreactiv,
                            name: 'x'
                        }],
                        supportsTextureFragments: true
                    });
                }

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                    this.output.reshapeFrom2D();

                    if (this.dataFormat === 'channels_first') {
                        this.output.tensor = this.output.tensor.transpose(2, 0, 1);
                    }
                }
            }

        }

        exports.default = Conv2D;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../activations": 374,
        "../../activations/programSources": 376,
        "../../utils/tensorUtils": 461,
        "../../webgl/dynamic/createGLSLProgram": 467,
        "ndarray-gemm": 664,
        "ndarray-ops": "ndarray-ops"
    }],
    392: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var activations = _interopRequireWildcard(require("../../activations"));

        var _WebGL = require("../../WebGL2");

        var _createGLSLProgram = _interopRequireDefault(require("../../webgl/dynamic/createGLSLProgram"));

        var tensorUtils = _interopRequireWildcard(require("../../utils/tensorUtils"));

        var _cwise = _interopRequireDefault(require("cwise"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var _ndarrayGemm = _interopRequireDefault(require("ndarray-gemm"));

        var activationProgramSources = _interopRequireWildcard(require("../../activations/programSources"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const matMulProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D A;\nuniform sampler2D B;\nuniform sampler2D C;\nuniform bool addC;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 A_size = textureSize(A, 0);\n  ivec2 B_size = textureSize(B, 0);\n  int out_x = int(float(B_size[0]) * outTex.x);\n  int out_y = int(float(A_size[1]) * outTex.y);\n  int commonDim = A_size[0];\n\n  float sum = 0.;\n  for (int i = 0; i < commonDim; ++i) {\n    float a = texelFetch(A, ivec2(i, out_y), 0).r;\n    float b = texelFetch(B, ivec2(out_x, i), 0).r;\n    sum += a * b;\n  }\n\n  if (addC) {\n    sum += texelFetch(C, ivec2(out_x, 0), 0).r;\n  }\n\n  outColor = vec4(sum);\n}\n";
        const assignToRowIndicesMap = (0, _cwise.default)({
            args: [{
                blockIndices: -1
            }, 'scalar', 'scalar'],
            body: function (x, rowIndex, size) {
                for (let i = 0; i < size; i++) {
                    if (x[i] === -1) {
                        x[i] = rowIndex;
                        break;
                    }
                }
            }
        });
        const assignToColIndicesMap = (0, _cwise.default)({
            args: [{
                blockIndices: -1
            }, 'array', 'scalar'],
            body: function (x, colIndex, size) {
                for (let i = 0; i < size; i++) {
                    if (x[i] === -1) {
                        x[i] = colIndex;
                        break;
                    }
                }
            }
        });

        class Conv2DTranspose extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Conv2DTranspose';
                const {
                    filters = 1,
                    kernel_size = [3, 3],
                    strides = [1, 1],
                    padding = 'valid',
                    data_format = 'channels_last',
                    activation = 'linear',
                    use_bias = true
                } = attrs;

                if (Array.isArray(kernel_size)) {
                    this.kernelShape = [filters, ...kernel_size];
                } else {
                    this.kernelShape = [filters, kernel_size, kernel_size];
                }

                if (Array.isArray(strides)) {
                    this.strides = strides;
                } else {
                    this.strides = [strides, strides];
                }

                if (padding === 'valid' || padding === 'same') {
                    this.padding = padding;
                } else {
                    this.throwError('Invalid padding.');
                }

                if (data_format === 'channels_last' || data_format === 'channels_first') {
                    this.dataFormat = data_format;
                } else {
                    this.throwError('Only channels_last and channels_first data formats are allowed.');
                }

                this.activation = activation;
                this.activationFunc = activations[activation];
                this.useBias = use_bias;
                this.params = this.useBias ? ['kernel', 'bias'] : ['kernel'];
                this.description = `${this.kernelShape[0]} ${this.kernelShape.slice(1).join('x')} filters`;
                this.description += this.strides.some(s => s > 1) ? `, ${this.strides.join('x')} striding` : '';
                this.description += this.padding === 'valid' ? `, no border padding` : ', pad to same borders';
                this.description += this.activation !== 'linear' ? `, ${this.activation} activation` : '';

                if (this.gpu) {
                    this.matMulProgram = _WebGL.webgl2.compileProgram(matMulProgramSource);
                    this.activationProgram = _WebGL.webgl2.compileProgram(activationProgramSources[this.activation]);
                }
            }

            setWeights(weightsArr) {
                if (this.dataFormat === 'channels_first') {
                    weightsArr[0].tensor = weightsArr[0].tensor.transpose(2, 3, 1, 0);
                }

                super.setWeights(weightsArr, false);

                this._w2row();

                if (this.gpu) {
                    this.weights['kernel'] = this.wRowsMat;
                    this.weights['kernel'].createGLTexture({
                        type: '2d',
                        format: 'float'
                    });

                    if (this.useBias) {
                        this.weights['bias'].createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    }
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _calcOutputShape(inputShape) {
                if (this.outputShape && this.outputPadding) {
                    return;
                }

                const inputRows = inputShape[0];
                const inputCols = inputShape[1];
                const [nbFilter, nbRow, nbCol] = this.kernelShape;
                const outputRows = this.padding === 'same' ? inputRows * this.strides[0] : inputRows * this.strides[0] + Math.max(nbRow - this.strides[0], 0);
                const outputCols = this.padding === 'same' ? inputCols * this.strides[1] : inputCols * this.strides[1] + Math.max(nbCol - this.strides[1], 0);
                const outputChannels = nbFilter;
                const paddingRow = this.padding === 'same' ? Math.max(0, Math.floor((inputRows - 1) * this.strides[0] + nbRow - outputRows)) : 0;
                const paddingCol = this.padding === 'same' ? Math.max(0, Math.floor((inputCols - 1) * this.strides[1] + nbCol - outputCols)) : 0;
                const paddingRowBefore = Math.floor(paddingRow / 2);
                const paddingRowAfter = paddingRow - paddingRowBefore;
                const paddingColBefore = Math.floor(paddingCol / 2);
                const paddingColAfter = paddingCol - paddingColBefore;
                this.outputShape = [outputRows, outputCols, outputChannels];
                this.outputPadding = [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter];
            }

            _im2col(x) {
                const [inputRows, inputCols, inputChannels] = x.tensor.shape;

                if (!this.imColsMat) {
                    this.imColsMat = new _Tensor.default([], [inputRows * inputCols, inputChannels]);
                }

                const channelRaveled = new _Tensor.default([], [inputRows * inputCols]);
                const channel = new _Tensor.default([], [inputRows, inputCols]);

                for (let c = 0; c < inputChannels; c++) {
                    _ndarrayOps.default.assign(channel.tensor, x.tensor.pick(null, null, c));

                    channelRaveled.replaceTensorData(channel.tensor.data);

                    _ndarrayOps.default.assign(this.imColsMat.tensor.pick(null, c), channelRaveled.tensor);
                }

                return this.imColsMat;
            }

            _w2row() {
                const [nbRow, nbCol, nbFilter, inputChannels] = this.weights['kernel'].tensor.shape;
                this.wRowsMat = new _Tensor.default([], [inputChannels, nbRow * nbCol * nbFilter]);
                const channelRaveled = new _Tensor.default([], [nbRow * nbCol * nbFilter]);
                const channel = new _Tensor.default([], [nbRow, nbCol, nbFilter]);

                for (let c = 0; c < inputChannels; c++) {
                    _ndarrayOps.default.assign(channel.tensor, this.weights['kernel'].tensor.pick(null, null, null, c));

                    channelRaveled.replaceTensorData(channel.tensor.data);

                    _ndarrayOps.default.assign(this.wRowsMat.tensor.pick(c, null), channelRaveled.tensor);
                }

                return this.wRowsMat;
            }

            _callCPU(x) {
                this.inputShape = x.tensor.shape;

                this._calcOutputShape(this.inputShape);

                this._im2col(x);

                const inputRows = x.tensor.shape[0];
                const inputCols = x.tensor.shape[1];
                const [nbFilter, nbRow, nbCol] = this.kernelShape;
                const matMul = new _Tensor.default([], [inputRows * inputCols, nbRow * nbCol * nbFilter]);
                (0, _ndarrayGemm.default)(matMul.tensor, this.imColsMat.tensor, this.wRowsMat.tensor, 1, 1);
                const [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter] = this.outputPadding;
                this.output = new _Tensor.default([], this.outputShape);
                let outputPadded = new _Tensor.default([], [this.outputShape[0] + paddingRowBefore + paddingRowAfter, this.outputShape[1] + paddingColBefore + paddingColAfter, this.outputShape[2]]);
                const patchShape = [nbRow, nbCol, nbFilter];
                let patch = new _Tensor.default([], patchShape);
                let patchRaveled = new _Tensor.default([], [nbRow * nbCol * nbFilter]);
                let index = 0;

                for (let i = 0; i < inputRows; i++) {
                    for (let j = 0; j < inputCols; j++) {
                        _ndarrayOps.default.assign(patchRaveled.tensor, matMul.tensor.pick(index, null));

                        patch.replaceTensorData(patchRaveled.tensor.data);
                        const iOutPos = i * this.strides[0];
                        const jOutPos = j * this.strides[1];

                        _ndarrayOps.default.addeq(outputPadded.tensor.hi(iOutPos + nbRow, jOutPos + nbCol, this.outputShape[2]).lo(iOutPos, jOutPos, 0), patch.tensor);

                        index += 1;
                    }
                }

                _ndarrayOps.default.assign(this.output.tensor, outputPadded.tensor.hi(this.outputShape[0] + paddingRowBefore, this.outputShape[1] + paddingColBefore, this.outputShape[2]).lo(paddingRowBefore, paddingColBefore, 0));

                if (this.useBias) {
                    for (let n = 0; n < nbFilter; n++) {
                        _ndarrayOps.default.addseq(this.output.tensor.pick(null, null, n), this.weights['bias'].tensor.get(n));
                    }
                }

                this.activationFunc(this.output);

                if (this.dataFormat === 'channels_first') {
                    this.output.tensor = this.output.tensor.transpose(2, 0, 1);
                }
            }

            _createIndexMap() {
                if (this.indexMap) {
                    return;
                }

                const inputRows = this.inputShape[0];
                const inputCols = this.inputShape[1];
                const [nbFilter, nbRow, nbCol] = this.kernelShape;
                const [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter] = this.outputPadding;
                const effectiveKernelSize = (nbRow - this.strides[0] + 1) * (nbCol - this.strides[1] + 1);
                const indicesMapShape = [this.outputShape[0], this.outputShape[1], effectiveKernelSize];
                const indicesMapShapePadded = [this.outputShape[0] + paddingRowBefore + paddingRowAfter, this.outputShape[1] + paddingColBefore + paddingColAfter, effectiveKernelSize];
                const outputRowIndicesMap = new _Tensor.default([], indicesMapShape, {
                    type: Int32Array
                });
                const outputColIndicesMap = new _Tensor.default([], indicesMapShape, {
                    type: Int32Array
                });
                const outputRowIndicesMapPadded = new _Tensor.default([], indicesMapShapePadded, {
                    type: Int32Array
                });
                const outputColIndicesMapPadded = new _Tensor.default([], indicesMapShapePadded, {
                    type: Int32Array
                });

                _ndarrayOps.default.assigns(outputRowIndicesMap.tensor, -1);

                _ndarrayOps.default.assigns(outputColIndicesMap.tensor, -1);

                _ndarrayOps.default.assigns(outputRowIndicesMapPadded.tensor, -1);

                _ndarrayOps.default.assigns(outputColIndicesMapPadded.tensor, -1);

                const matMulColIndicesPatch = new _Tensor.default([], [nbRow, nbCol, nbFilter], {
                    type: Int32Array
                });

                for (let i = 0; i < nbRow * nbCol * nbFilter; i++) {
                    matMulColIndicesPatch.tensor.data[i] = i;
                }

                for (let i = 0; i < inputRows; i++) {
                    for (let j = 0; j < inputCols; j++) {
                        const matMulRowIndex = i * inputCols + j;
                        const iOutPos = i * this.strides[0];
                        const jOutPos = j * this.strides[1];
                        assignToRowIndicesMap(outputRowIndicesMapPadded.tensor.hi(iOutPos + nbRow, jOutPos + nbCol, effectiveKernelSize).lo(iOutPos, jOutPos, 0), matMulRowIndex, effectiveKernelSize);
                        assignToColIndicesMap(outputColIndicesMapPadded.tensor.hi(iOutPos + nbRow, jOutPos + nbCol, effectiveKernelSize).lo(iOutPos, jOutPos, 0), matMulColIndicesPatch.tensor.pick(null, null, 0), effectiveKernelSize);
                    }
                }

                _ndarrayOps.default.assign(outputRowIndicesMap.tensor, outputRowIndicesMapPadded.tensor.hi(this.outputShape[0] + paddingRowBefore, this.outputShape[1] + paddingColBefore, effectiveKernelSize).lo(paddingRowBefore, paddingColBefore, 0));

                _ndarrayOps.default.assign(outputColIndicesMap.tensor, outputColIndicesMapPadded.tensor.hi(this.outputShape[0] + paddingRowBefore, this.outputShape[1] + paddingColBefore, effectiveKernelSize).lo(paddingRowBefore, paddingColBefore, 0));

                const tiledIndicesMapShape = [this.outputShape[0] * this.outputShape[1], effectiveKernelSize];
                this.indexMap = new _Tensor.default([], tiledIndicesMapShape, {
                    type: Int32Array
                });
                const channelData = new _Tensor.default([], [effectiveKernelSize], {
                    type: Int32Array
                });

                for (let i = 0; i < this.outputShape[0]; i++) {
                    for (let j = 0; j < this.outputShape[1]; j++) {
                        for (let k = 0; k < effectiveKernelSize; k++) {
                            const rowIndex = outputRowIndicesMap.tensor.get(i, j, k);
                            const colIndex = outputColIndicesMap.tensor.get(i, j, k);

                            if (rowIndex !== -1 && colIndex !== -1) {
                                channelData.tensor.set(k, rowIndex * this.weights['kernel'].glTextureShape[1] + colIndex);
                            } else {
                                channelData.tensor.set(k, -1);
                            }
                        }

                        _ndarrayOps.default.assign(this.indexMap.tensor.pick(i * this.outputShape[1] + j, null), channelData.tensor);
                    }
                }

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int',
                    supportsTextureFragments: true
                });
            }

            _callGPU(x) {
                if (x.is2DReshaped || x.is2DSquareReshaped) {
                    this.inputShape = x.originalShape;

                    this._calcOutputShape(this.inputShape);
                } else {
                    this.inputShape = x.tensor.shape;

                    this._calcOutputShape(this.inputShape);

                    this._im2col(x);

                    this.imColsMat.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                }

                const input = x.is2DReshaped || x.is2DSquareReshaped ? x : this.imColsMat;

                if (!this.matMulResult) {
                    const outputTextureShape = [input.glTextureShape[0], this.weights['kernel'].glTextureShape[1]];
                    this.matMulResult = new _Tensor.default([], outputTextureShape);
                    this.matMulResult.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                }

                if (this.activation !== 'linear' && !this.outputPreactiv) {
                    const outputTextureShape = [this.outputShape[0] * this.outputShape[1], this.outputShape[2]];
                    this.outputPreactiv = new _Tensor.default([], outputTextureShape);
                    this.outputPreactiv.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                    this.outputPreactiv.is2DReshaped = true;
                    this.outputPreactiv.originalShape = this.outputShape;
                    this.outputPreactiv.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(this.outputShape, false, -1);
                }

                if (!this.output) {
                    const outputTextureShape = [this.outputShape[0] * this.outputShape[1], this.outputShape[2]];
                    this.output = new _Tensor.default([], outputTextureShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                    this.output.is2DReshaped = true;
                    this.output.originalShape = this.outputShape;
                    this.output.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(this.outputShape, false, -1);
                }

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.matMulResult,
                    inputs: [{
                        input: input,
                        name: 'A'
                    }, {
                        input: this.weights['kernel'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }],
                    supportsTextureFragments: true
                });

                this._createIndexMap();

                const hasFragments = Boolean(this.matMulResult.glTextureFragments);

                if (hasFragments) {
                    this.matMulResult.convert2DRowFragmentedGLTextureToColStack();
                }

                if (!this.convTransposeProgram) {
                    const convTransposeProgramSource = (0, _createGLSLProgram.default)('conv2dTranspose', this.output.glTextureFragmentShape ? this.output.glTextureFragmentShape : this.output.glTextureShape, this.matMulResult.glTextureFragmentShape ? this.matMulResult.glTextureFragmentShape : this.matMulResult.glTextureShape, this.indexMap.glTextureFragmentShape ? this.indexMap.glTextureFragmentShape : this.indexMap.glTextureShape, this.useBias, hasFragments);
                    this.convTransposeProgram = _WebGL.webgl2.compileProgram(convTransposeProgramSource);
                }

                _WebGL.webgl2.runProgram({
                    program: this.convTransposeProgram,
                    output: this.activation === 'linear' ? this.output : this.outputPreactiv,
                    inputs: [{
                        input: this.matMulResult,
                        name: 'matMulResult'
                    }, {
                        input: this.indexMap,
                        name: 'indexMap'
                    }, ...(this.useBias ? [{
                        input: this.weights['bias'],
                        name: 'bias'
                    }] : [])],
                    supportsTextureFragments: true
                });

                if (hasFragments) {
                    this.matMulResult.removeGLTextureFragmentsAsColStack();
                }

                if (this.activation !== 'linear') {
                    _WebGL.webgl2.runProgram({
                        program: this.activationProgram,
                        output: this.output,
                        inputs: [{
                            input: this.outputPreactiv,
                            name: 'x'
                        }],
                        supportsTextureFragments: true
                    });
                }

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                    this.output.reshapeFrom2D();

                    if (this.dataFormat === 'channels_first') {
                        this.output.tensor = this.output.tensor.transpose(2, 0, 1);
                    }
                }
            }

        }

        exports.default = Conv2DTranspose;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../activations": 374,
        "../../activations/programSources": 376,
        "../../utils/tensorUtils": 461,
        "../../webgl/dynamic/createGLSLProgram": 467,
        "cwise": 361,
        "ndarray-gemm": 664,
        "ndarray-ops": "ndarray-ops"
    }],
    393: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var activations = _interopRequireWildcard(require("../../activations"));

        var _WebGL = require("../../WebGL2");

        var _createGLSLProgram = _interopRequireDefault(require("../../webgl/dynamic/createGLSLProgram"));

        var tensorUtils = _interopRequireWildcard(require("../../utils/tensorUtils"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var _ndarrayGemm = _interopRequireDefault(require("ndarray-gemm"));

        var activationProgramSources = _interopRequireWildcard(require("../../activations/programSources"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";
        const mapInputFragmentsProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 inputSize = textureSize(x, 0);\n  ivec2 outputSize = textureSize(indexMap, 0);\n  int out_x = int(float(outputSize[0]) * outTex.x);\n  int out_y = int(float(outputSize[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    int fragmentIndex = int(floor(float(rowIndex) / float(inputSize[1])));\n    rowIndex = int(mod(float(rowIndex), float(inputSize[1])));\n    colIndex = fragmentIndex * inputCols + colIndex;\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";
        const matMulProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D A;\nuniform sampler2D B;\nuniform sampler2D C;\nuniform bool addC;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 A_size = textureSize(A, 0);\n  ivec2 B_size = textureSize(B, 0);\n  int out_x = int(float(B_size[0]) * outTex.x);\n  int out_y = int(float(A_size[1]) * outTex.y);\n  int commonDim = A_size[0];\n\n  float sum = 0.;\n  for (int i = 0; i < commonDim; ++i) {\n    float a = texelFetch(A, ivec2(i, out_y), 0).r;\n    float b = texelFetch(B, ivec2(out_x, i), 0).r;\n    sum += a * b;\n  }\n\n  if (addC) {\n    sum += texelFetch(C, ivec2(out_x, 0), 0).r;\n  }\n\n  outColor = vec4(sum);\n}\n";

        class Conv3D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Conv3D';
                const {
                    filters = 1,
                    kernel_size = [1, 1, 1],
                    strides = [1, 1, 1],
                    padding = 'valid',
                    data_format = 'channels_last',
                    dilation_rate = [1, 1, 1],
                    activation = 'linear',
                    use_bias = true
                } = attrs;

                if (Array.isArray(kernel_size)) {
                    this.kernelShape = [filters, ...kernel_size];
                } else {
                    this.kernelShape = [filters, kernel_size, kernel_size, kernel_size];
                }

                if (Array.isArray(strides)) {
                    this.strides = strides;
                } else {
                    this.strides = [strides, strides, strides];
                }

                if (padding === 'valid' || padding === 'same') {
                    this.padding = padding;
                } else {
                    this.throwError('Invalid padding.');
                }

                if (data_format === 'channels_last' || data_format === 'channels_first') {
                    this.dataFormat = data_format;
                } else {
                    this.throwError('Only channels_last and channels_first data formats are allowed.');
                }

                if (Array.isArray(dilation_rate)) {
                    this.dilationRate = dilation_rate;
                } else {
                    this.dilationRate = [dilation_rate, dilation_rate, dilation_rate];
                }

                if ((this.dilationRate[0] !== 1 || this.dilationRate[1] !== 1 || this.dilationRate[2] !== 1) && (this.strides[0] !== 1 || this.strides[1] !== 1 || this.strides[2] !== 1)) {
                    this.throwError('Incompatible combination of dilation_rate with strides.');
                }

                this.activation = activation;
                this.activationFunc = activations[activation];
                this.useBias = use_bias;
                this.params = this.useBias ? ['kernel', 'bias'] : ['kernel'];
                this.description = `${this.kernelShape[0]} ${this.kernelShape.slice(1).join('x')} filters`;
                this.description += this.strides.some(s => s > 1) ? `, ${this.strides.join('x')} striding` : '';
                this.description += this.padding === 'valid' ? `, no border padding` : ', pad to same borders';
                this.description += this.dilationRate.some(r => r > 1) ? `, ${this.dilationRate.join('x')} dilation` : '';
                this.description += this.activation !== 'linear' ? `, ${this.activation} activation` : '';

                if (this.gpu) {
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                    this.mapInputFragmentsProgram = _WebGL.webgl2.compileProgram(mapInputFragmentsProgramSource);
                    this.matMulProgram = _WebGL.webgl2.compileProgram(matMulProgramSource);
                    this.activationProgram = _WebGL.webgl2.compileProgram(activationProgramSources[this.activation]);
                }
            }

            setWeights(weightsArr) {
                if (this.dataFormat === 'channels_first') {
                    weightsArr[0].tensor = weightsArr[0].tensor.transpose(2, 3, 4, 1, 0);
                }

                super.setWeights(weightsArr, false);

                this._w2row();

                if (this.gpu) {
                    this.weights['kernel'] = this.wRowsMat;
                    this.weights['kernel'].createGLTexture({
                        type: '2d',
                        format: 'float'
                    });

                    if (this.useBias) {
                        this.weights['bias'].createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    }
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _calcOutputShape(inputShape) {
                if (this.outputShape && this.inputPadding) {
                    return;
                }

                const inputDim1 = inputShape[0];
                const inputDim2 = inputShape[1];
                const inputDim3 = inputShape[2];
                const [nbFilter, kernelDim1, kernelDim2, kernelDim3] = this.kernelShape;
                const kernelDim1Dilated = kernelDim1 + (kernelDim1 - 1) * (this.dilationRate[0] - 1);
                const kernelDim2Dilated = kernelDim2 + (kernelDim2 - 1) * (this.dilationRate[1] - 1);
                const kernelDim3Dilated = kernelDim3 + (kernelDim3 - 1) * (this.dilationRate[2] - 1);
                const outputDim1 = this.padding === 'same' ? Math.floor((inputDim1 + this.strides[0] - 1) / this.strides[0]) : Math.floor((inputDim1 - kernelDim1Dilated + this.strides[0]) / this.strides[0]);
                const outputDim2 = this.padding === 'same' ? Math.floor((inputDim2 + this.strides[1] - 1) / this.strides[1]) : Math.floor((inputDim2 - kernelDim2Dilated + this.strides[1]) / this.strides[1]);
                const outputDim3 = this.padding === 'same' ? Math.floor((inputDim3 + this.strides[2] - 1) / this.strides[2]) : Math.floor((inputDim3 - kernelDim3Dilated + this.strides[2]) / this.strides[2]);
                const outputChannels = nbFilter;
                const paddingDim1 = this.padding === 'same' ? Math.max(0, Math.floor((outputDim1 - 1) * this.strides[0] + kernelDim1Dilated - inputDim1)) : 0;
                const paddingDim2 = this.padding === 'same' ? Math.max(0, Math.floor((outputDim2 - 1) * this.strides[1] + kernelDim2Dilated - inputDim2)) : 0;
                const paddingDim3 = this.padding === 'same' ? Math.max(0, Math.floor((outputDim3 - 1) * this.strides[2] + kernelDim3Dilated - inputDim3)) : 0;
                const paddingDim1Before = Math.floor(paddingDim1 / 2);
                const paddingDim1After = paddingDim1 - paddingDim1Before;
                const paddingDim2Before = Math.floor(paddingDim2 / 2);
                const paddingDim2After = paddingDim2 - paddingDim2Before;
                const paddingDim3Before = Math.floor(paddingDim3 / 2);
                const paddingDim3After = paddingDim3 - paddingDim3Before;
                this.outputShape = [outputDim1, outputDim2, outputDim3, outputChannels];
                this.inputPadding = [paddingDim1Before, paddingDim1After, paddingDim2Before, paddingDim2After, paddingDim3Before, paddingDim3After];
            }

            _padInput(x, padValue = 0) {
                if (this.padding === 'same') {
                    const [inputDim1, inputDim2, inputDim3, inputChannels] = x.tensor.shape;
                    const [paddingDim1Before, paddingDim1After, paddingDim2Before, paddingDim2After, paddingDim3Before, paddingDim3After] = this.inputPadding;
                    const newDim1 = inputDim1 + paddingDim1Before + paddingDim1After;
                    const newDim2 = inputDim2 + paddingDim2Before + paddingDim2After;
                    const newDim3 = inputDim3 + paddingDim3Before + paddingDim3After;

                    const _x = new _Tensor.default([], [newDim1, newDim2, newDim3, inputChannels]);

                    if (padValue !== 0) {
                        _ndarrayOps.default.assigns(_x.tensor, padValue);
                    }

                    _ndarrayOps.default.assign(_x.tensor.hi(inputDim1 + paddingDim1Before, inputDim2 + paddingDim2Before, inputDim3 + paddingDim3Before, inputChannels).lo(paddingDim1Before, paddingDim2Before, paddingDim3Before, 0), x.tensor);

                    return _x;
                }

                return x;
            }

            _vol2col(x) {
                const [inputDim1, inputDim2, inputDim3, inputChannels] = x.tensor.shape;
                const kernelDim1 = this.kernelShape[1];
                const kernelDim2 = this.kernelShape[2];
                const kernelDim3 = this.kernelShape[3];
                const outputDim1 = this.outputShape[0];
                const outputDim2 = this.outputShape[1];
                const outputDim3 = this.outputShape[2];
                const nbPatches = outputDim1 * outputDim2 * outputDim3;
                const patchLen = kernelDim1 * kernelDim2 * kernelDim3 * inputChannels;
                const kernelDim1Dilated = kernelDim1 + (kernelDim1 - 1) * (this.dilationRate[0] - 1);
                const kernelDim2Dilated = kernelDim2 + (kernelDim2 - 1) * (this.dilationRate[1] - 1);
                const kernelDim3Dilated = kernelDim3 + (kernelDim3 - 1) * (this.dilationRate[2] - 1);

                if (!this.volColsMat) {
                    this.volColsMat = new _Tensor.default([], [nbPatches, patchLen]);
                }

                if (kernelDim1Dilated === 1 && kernelDim2Dilated === 1 && kernelDim3Dilated === 1 && this.strides[0] === 1 && this.strides[1] === 1 && this.strides[2] === 1) {
                    this.volColsMat.replaceTensorData(x.tensor.data);
                    return this.volColsMat;
                }

                const patch = new _Tensor.default([], [kernelDim1, kernelDim2, kernelDim3, inputChannels]);
                let offset = 0;

                for (let i = 0, limit = inputDim1 - kernelDim1Dilated; i <= limit; i += this.strides[0]) {
                    for (let j = 0, limit = inputDim2 - kernelDim2Dilated; j <= limit; j += this.strides[1]) {
                        for (let k = 0, limit = inputDim3 - kernelDim3Dilated; k <= limit; k += this.strides[2]) {
                            _ndarrayOps.default.assign(patch.tensor, x.tensor.hi(i + kernelDim1Dilated, j + kernelDim2Dilated, k + kernelDim3Dilated, inputChannels).lo(i, j, k, 0).step(this.dilationRate[0], this.dilationRate[1], this.dilationRate[2], 1));

                            this.volColsMat.tensor.data.set(patch.tensor.data, offset);
                            offset += patchLen;
                        }
                    }
                }

                return this.volColsMat;
            }

            _w2row() {
                const inputChannels = this.weights['kernel'].tensor.shape[3];
                const [nbFilter, kernelDim1, kernelDim2, kernelDim3] = this.kernelShape;
                const patchLen = kernelDim1 * kernelDim2 * kernelDim3 * inputChannels;
                this.wRowsMat = new _Tensor.default([], [patchLen, nbFilter]);
                const patch = new _Tensor.default([], [kernelDim1, kernelDim2, kernelDim3, inputChannels]);
                const patchRaveled = new _Tensor.default([], [patchLen]);

                for (let n = 0; n < nbFilter; n++) {
                    _ndarrayOps.default.assign(patch.tensor, this.weights['kernel'].tensor.pick(null, null, null, null, n));

                    patchRaveled.replaceTensorData(patch.tensor.data);

                    _ndarrayOps.default.assign(this.wRowsMat.tensor.pick(null, n), patchRaveled.tensor);
                }

                return this.wRowsMat;
            }

            _callCPU(x) {
                this.inputShape = x.tensor.shape;

                this._calcOutputShape(this.inputShape);

                x = this._padInput(x);

                this._vol2col(x);

                const nbFilter = this.kernelShape[0];
                const outputDim1 = this.outputShape[0];
                const outputDim2 = this.outputShape[1];
                const outputDim3 = this.outputShape[2];
                const nbPatches = outputDim1 * outputDim2 * outputDim3;
                const matMul = new _Tensor.default([], [nbPatches, nbFilter]);

                if (this.useBias) {
                    for (let n = 0; n < nbFilter; n++) {
                        _ndarrayOps.default.assigns(matMul.tensor.pick(null, n), this.weights['bias'].tensor.get(n));
                    }
                }

                (0, _ndarrayGemm.default)(matMul.tensor, this.volColsMat.tensor, this.wRowsMat.tensor, 1, 1);
                this.output = new _Tensor.default([], this.outputShape);
                let outputChannelRaveled = new _Tensor.default([], [outputDim1 * outputDim2 * outputDim3]);
                let outputChannel = new _Tensor.default([], [outputDim1, outputDim2, outputDim3]);

                for (let n = 0; n < nbFilter; n++) {
                    _ndarrayOps.default.assign(outputChannelRaveled.tensor, matMul.tensor.pick(null, n));

                    outputChannel.replaceTensorData(outputChannelRaveled.tensor.data);

                    _ndarrayOps.default.assign(this.output.tensor.pick(null, null, null, n), outputChannel.tensor);
                }

                this.activationFunc(this.output);

                if (this.dataFormat === 'channels_first') {
                    this.output.tensor = this.output.tensor.transpose(3, 0, 1, 2);
                }
            }

            _createIndexMap(indicesForReshaped) {
                if (this.indexMap) {
                    return;
                }

                let [inputDim1, inputDim2, inputDim3, inputChannels] = this.inputShape;
                let indices = new _Tensor.default(indicesForReshaped.data, indicesForReshaped.shape, {
                    type: Int32Array
                });

                if (this.padding === 'same') {
                    const [paddingDim1Before, paddingDim1After, paddingDim2Before, paddingDim2After, paddingDim3Before, paddingDim3After] = this.inputPadding;
                    inputDim1 = inputDim1 + paddingDim1Before + paddingDim1After;
                    inputDim2 = inputDim2 + paddingDim2Before + paddingDim2After;
                    inputDim3 = inputDim3 + paddingDim3Before + paddingDim3After;
                    const padValue = -1;
                    indices = this._padInput(indices, padValue);
                }

                const kernelDim1 = this.kernelShape[1];
                const kernelDim2 = this.kernelShape[2];
                const kernelDim3 = this.kernelShape[3];
                const outputDim1 = this.outputShape[0];
                const outputDim2 = this.outputShape[1];
                const outputDim3 = this.outputShape[2];
                const nbPatches = outputDim1 * outputDim2 * outputDim3;
                const patchLen = kernelDim1 * kernelDim2 * kernelDim3 * inputChannels;
                const kernelDim1Dilated = kernelDim1 + (kernelDim1 - 1) * (this.dilationRate[0] - 1);
                const kernelDim2Dilated = kernelDim2 + (kernelDim2 - 1) * (this.dilationRate[1] - 1);
                const kernelDim3Dilated = kernelDim3 + (kernelDim3 - 1) * (this.dilationRate[2] - 1);
                this.indexMap = new _Tensor.default([], [nbPatches, patchLen], {
                    type: Int32Array
                });
                const indicesPatch = new _Tensor.default([], [kernelDim1, kernelDim2, kernelDim3, inputChannels]);
                let offset = 0;

                for (let i = 0, limit = inputDim1 - kernelDim1Dilated; i <= limit; i += this.strides[0]) {
                    for (let j = 0, limit = inputDim2 - kernelDim2Dilated; j <= limit; j += this.strides[1]) {
                        for (let k = 0, limit = inputDim3 - kernelDim3Dilated; k <= limit; k += this.strides[2]) {
                            _ndarrayOps.default.assign(indicesPatch.tensor, indices.tensor.hi(i + kernelDim1Dilated, j + kernelDim2Dilated, k + kernelDim3Dilated, inputChannels).lo(i, j, k, 0).step(this.dilationRate[0], this.dilationRate[1], this.dilationRate[2], 1));

                            this.indexMap.tensor.data.set(indicesPatch.tensor.data, offset);
                            offset += patchLen;
                        }
                    }
                }

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int',
                    supportsTextureFragments: true
                });
            }

            _callGPU(x) {
                let outputTextureShape;

                if (x.is2DReshaped || x.is2DSquareReshaped) {
                    this.inputShape = x.originalShape;

                    this._calcOutputShape(this.inputShape);

                    this._createIndexMap(x.indicesForReshaped);

                    outputTextureShape = [this.indexMap.glTextureShape[0], this.weights['kernel'].glTextureShape[1]];
                } else {
                    this.inputShape = x.tensor.shape;

                    this._calcOutputShape(this.inputShape);

                    x = this._padInput(x);

                    this._vol2col(x);

                    this.volColsMat.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                    outputTextureShape = [this.volColsMat.glTextureShape[0], this.weights['kernel'].glTextureShape[1]];
                }

                if (this.activation !== 'linear' && !this.outputPreactiv) {
                    this.outputPreactiv = new _Tensor.default([], outputTextureShape);
                    this.outputPreactiv.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                    this.outputPreactiv.is2DReshaped = true;
                    this.outputPreactiv.originalShape = this.outputShape;
                    this.outputPreactiv.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(this.outputShape, false, -1);
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], outputTextureShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                    this.output.is2DReshaped = true;
                    this.output.originalShape = this.outputShape;
                    this.output.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(this.outputShape, false, -1);
                }

                if (x.is2DReshaped || x.is2DSquareReshaped) {
                    const hasFragments = Boolean(x.glTextureFragments);

                    if (hasFragments) {
                        x.convert2DRowFragmentedGLTextureToColStack();
                    }

                    if (!this.convProgram) {
                        const convProgramSource = (0, _createGLSLProgram.default)('conv2d', this.output.glTextureFragmentShape ? this.output.glTextureFragmentShape : this.output.glTextureShape, x.glTextureFragmentShape ? x.glTextureFragmentShape : x.glTextureShape, this.indexMap.glTextureFragmentShape ? this.indexMap.glTextureFragmentShape : this.indexMap.glTextureShape, this.useBias, hasFragments);
                        this.convProgram = _WebGL.webgl2.compileProgram(convProgramSource);
                    }

                    _WebGL.webgl2.runProgram({
                        program: this.convProgram,
                        output: this.activation === 'linear' ? this.output : this.outputPreactiv,
                        inputs: [{
                            input: x,
                            name: 'x'
                        }, {
                            input: this.indexMap,
                            name: 'indexMap'
                        }, {
                            input: this.weights['kernel'],
                            name: 'kernel'
                        }, ...(this.useBias ? [{
                            input: this.weights['bias'],
                            name: 'bias'
                        }] : [])],
                        supportsTextureFragments: true
                    });

                    if (hasFragments) {
                        x.removeGLTextureFragmentsAsColStack();
                    }
                } else {
                    const matMulInputs = [{
                        input: this.volColsMat,
                        name: 'A'
                    }, {
                        input: this.weights['kernel'],
                        name: 'B'
                    }];

                    if (this.useBias) {
                        matMulInputs.push({
                            input: this.weights['bias'],
                            name: 'C'
                        });
                    }

                    _WebGL.webgl2.runProgram({
                        program: this.matMulProgram,
                        output: this.activation === 'linear' ? this.output : this.outputPreactiv,
                        inputs: matMulInputs,
                        uniforms: [{
                            value: this.useBias ? 1 : 0,
                            type: 'bool',
                            name: 'addC'
                        }],
                        supportsTextureFragments: true
                    });
                }

                if (this.activation !== 'linear') {
                    _WebGL.webgl2.runProgram({
                        program: this.activationProgram,
                        output: this.output,
                        inputs: [{
                            input: this.outputPreactiv,
                            name: 'x'
                        }],
                        supportsTextureFragments: true
                    });
                }

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                    this.output.reshapeFrom2D();

                    if (this.dataFormat === 'channels_first') {
                        this.output.tensor = this.output.tensor.transpose(3, 0, 1, 2);
                    }
                }
            }

        }

        exports.default = Conv3D;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../activations": 374,
        "../../activations/programSources": 376,
        "../../utils/tensorUtils": 461,
        "../../webgl/dynamic/createGLSLProgram": 467,
        "ndarray-gemm": 664,
        "ndarray-ops": "ndarray-ops"
    }],
    394: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";

        class Cropping1D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Cropping1D';
                const {
                    cropping = [0, 0]
                } = attrs;

                if (Array.isArray(cropping)) {
                    this.cropping = cropping;
                } else {
                    this.cropping = [cropping, cropping];
                }

                this.description = `${JSON.stringify(this.cropping)}`;

                if (this.gpu) {
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                this.inputShape = x.tensor.shape;
                this.outputShape = [this.inputShape[0] - this.cropping[0] - this.cropping[1], this.inputShape[1]];
                this.output = new _Tensor.default([], this.outputShape);

                _ndarrayOps.default.assign(this.output.tensor, x.tensor.hi(this.inputShape[0] - this.cropping[1], this.inputShape[2]).lo(this.cropping[0], 0));
            }

            _createIndexMap() {
                if (this.indexMap) {
                    return;
                }

                const indices = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });
                const indicesRow = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });
                const indicesCol = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });

                for (let i = 0; i < this.inputShape[0]; i++) {
                    _ndarrayOps.default.assigns(indicesRow.tensor.pick(i, null), i);
                }

                for (let j = 0; j < this.inputShape[1]; j++) {
                    _ndarrayOps.default.assigns(indicesCol.tensor.pick(null, j), j);
                }

                _ndarrayOps.default.muls(indices.tensor, indicesRow.tensor, this.inputShape[1]);

                _ndarrayOps.default.addeq(indices.tensor, indicesCol.tensor);

                this.indexMap = new _Tensor.default([], this.outputShape, {
                    type: Int32Array
                });
                const sliceStart = [this.cropping[0], 0];
                const sliceEnd = [this.inputShape[0] - this.cropping[1], this.inputShape[2]];

                _ndarrayOps.default.assign(this.indexMap.tensor, indices.tensor.hi(...sliceEnd).lo(...sliceStart));

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int'
                });
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                this.inputShape = x.tensor.shape;
                this.outputShape = [this.inputShape[0] - this.cropping[0] - this.cropping[1], this.inputShape[1]];

                this._createIndexMap();

                if (!this.output) {
                    this.output = new _Tensor.default([], this.outputShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.mapInputProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }, {
                        input: this.indexMap,
                        name: 'indexMap'
                    }],
                    uniforms: [{
                        value: x.glTextureShape[1],
                        type: 'int',
                        name: 'inputCols'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = Cropping1D;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    395: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";

        class Cropping2D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Cropping2D';
                const {
                    cropping = [[0, 0], [0, 0]],
                    data_format = 'channels_last'
                } = attrs;

                if (Array.isArray(cropping)) {
                    if (Array.isArray(cropping[0])) {
                        this.cropping = cropping;
                    } else {
                        this.cropping = [[cropping[0], cropping[0]], [cropping[1], cropping[1]]];
                    }
                } else {
                    this.cropping = [[cropping, cropping], [cropping, cropping]];
                }

                this.dataFormat = data_format;
                this.description = `${JSON.stringify(this.cropping)}`;

                if (this.gpu) {
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(1, 2, 0);
                }

                this.inputShape = x.tensor.shape;
                this.outputShape = [this.inputShape[0] - this.cropping[0][0] - this.cropping[0][1], this.inputShape[1] - this.cropping[1][0] - this.cropping[1][1], this.inputShape[2]];
                this.output = new _Tensor.default([], this.outputShape);

                _ndarrayOps.default.assign(this.output.tensor, x.tensor.hi(this.inputShape[0] - this.cropping[0][1], this.inputShape[1] - this.cropping[1][1], this.inputShape[2]).lo(this.cropping[0][0], this.cropping[1][0], 0));

                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(2, 0, 1);
                    this.output.tensor = this.output.tensor.transpose(2, 0, 1);
                }
            }

            _createIndexMap(indicesForReshaped, is2DReshaped) {
                if (this.indexMap) {
                    return;
                }

                const indices = new _Tensor.default(indicesForReshaped.data, indicesForReshaped.shape, {
                    type: Int32Array
                });
                this.indexMap = new _Tensor.default([], this.outputShape, {
                    type: Int32Array
                });
                const sliceStart = this.dataFormat === 'channels_first' ? [0, this.cropping[0][0], this.cropping[1][0]] : [this.cropping[0][0], this.cropping[1][0], 0];
                const sliceEnd = this.dataFormat === 'channels_first' ? [this.inputShape[0], this.inputShape[1] - this.cropping[0][1], this.inputShape[2] - this.cropping[1][1]] : [this.inputShape[0] - this.cropping[0][1], this.inputShape[1] - this.cropping[1][1], this.inputShape[2]];

                _ndarrayOps.default.assign(this.indexMap.tensor, indices.tensor.hi(...sliceEnd).lo(...sliceStart));

                if (is2DReshaped) {
                    this.indexMap.reshapeTo2D();
                } else {
                    this.indexMap.reshapeTo2DSquare();
                }

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int'
                });
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.reshapeTo2DSquare();
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                this.inputShape = x.originalShape;
                this.outputShape = this.dataFormat === 'channels_first' ? [this.inputShape[0], this.inputShape[1] - this.cropping[0][0] - this.cropping[0][1], this.inputShape[2] - this.cropping[1][0] - this.cropping[1][1]] : [this.inputShape[0] - this.cropping[0][0] - this.cropping[0][1], this.inputShape[1] - this.cropping[1][0] - this.cropping[1][1], this.inputShape[2]];

                this._createIndexMap(x.indicesForReshaped, x.is2DReshaped);

                if (!this.output) {
                    this.output = new _Tensor.default([], this.outputShape);

                    if (x.is2DReshaped) {
                        this.output.reshapeTo2D();
                    } else {
                        this.output.reshapeTo2DSquare();
                    }

                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.mapInputProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }, {
                        input: this.indexMap,
                        name: 'indexMap'
                    }],
                    uniforms: [{
                        value: x.glTextureShape[1],
                        type: 'int',
                        name: 'inputCols'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = Cropping2D;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    396: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";

        class Cropping3D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Cropping3D';
                const {
                    cropping = [[0, 0], [0, 0], [0, 0]],
                    data_format = 'channels_last'
                } = attrs;

                if (Array.isArray(cropping)) {
                    if (Array.isArray(cropping[0])) {
                        this.cropping = cropping;
                    } else {
                        this.cropping = [[cropping[0], cropping[0]], [cropping[1], cropping[1]], [cropping[2], cropping[2]]];
                    }
                } else {
                    this.cropping = [[cropping, cropping], [cropping, cropping], [cropping, cropping]];
                }

                this.dataFormat = data_format;
                this.description = `${JSON.stringify(this.cropping)}`;

                if (this.gpu) {
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(1, 2, 3, 0);
                }

                this.inputShape = x.tensor.shape;
                this.outputShape = [this.inputShape[0] - this.cropping[0][0] - this.cropping[0][1], this.inputShape[1] - this.cropping[1][0] - this.cropping[1][1], this.inputShape[2] - this.cropping[2][0] - this.cropping[2][1], this.inputShape[3]];
                this.output = new _Tensor.default([], this.outputShape);

                _ndarrayOps.default.assign(this.output.tensor, x.tensor.hi(this.inputShape[0] - this.cropping[0][1], this.inputShape[1] - this.cropping[1][1], this.inputShape[2] - this.cropping[2][1], this.inputShape[3]).lo(this.cropping[0][0], this.cropping[1][0], this.cropping[2][0], 0));

                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(3, 0, 1, 2);
                    this.output.tensor = this.output.tensor.transpose(3, 0, 1, 2);
                }
            }

            _createIndexMap(indicesForReshaped, is2DReshaped) {
                if (this.indexMap) {
                    return;
                }

                const indices = new _Tensor.default(indicesForReshaped.data, indicesForReshaped.shape, {
                    type: Int32Array
                });
                this.indexMap = new _Tensor.default([], this.outputShape, {
                    type: Int32Array
                });
                const sliceStart = this.dataFormat === 'channels_first' ? [0, this.cropping[0][0], this.cropping[1][0], this.cropping[2][0]] : [this.cropping[0][0], this.cropping[1][0], this.cropping[2][0], 0];
                const sliceEnd = this.dataFormat === 'channels_first' ? [this.inputShape[0], this.inputShape[1] - this.cropping[0][1], this.inputShape[2] - this.cropping[1][1], this.inputShape[3] - this.cropping[2][1]] : [this.inputShape[0] - this.cropping[0][1], this.inputShape[1] - this.cropping[1][1], this.inputShape[2] - this.cropping[2][1], this.inputShape[3]];

                _ndarrayOps.default.assign(this.indexMap.tensor, indices.tensor.hi(...sliceEnd).lo(...sliceStart));

                if (is2DReshaped) {
                    this.indexMap.reshapeTo2D();
                } else {
                    this.indexMap.reshapeTo2DSquare();
                }

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int'
                });
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.reshapeTo2DSquare();
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                this.inputShape = x.originalShape;
                this.outputShape = this.dataFormat === 'channels_first' ? [this.inputShape[0], this.inputShape[1] - this.cropping[0][0] - this.cropping[0][1], this.inputShape[2] - this.cropping[1][0] - this.cropping[1][1], this.inputShape[3] - this.cropping[2][0] - this.cropping[2][1]] : [this.inputShape[0] - this.cropping[0][0] - this.cropping[0][1], this.inputShape[1] - this.cropping[1][0] - this.cropping[1][1], this.inputShape[2] - this.cropping[2][0] - this.cropping[2][1], this.inputShape[3]];

                this._createIndexMap(x.indicesForReshaped, x.is2DReshaped);

                if (!this.output) {
                    this.output = new _Tensor.default([], this.outputShape);

                    if (x.is2DReshaped) {
                        this.output.reshapeTo2D();
                    } else {
                        this.output.reshapeTo2DSquare();
                    }

                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.mapInputProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }, {
                        input: this.indexMap,
                        name: 'indexMap'
                    }],
                    uniforms: [{
                        value: x.glTextureShape[1],
                        type: 'int',
                        name: 'inputCols'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = Cropping3D;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    397: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var activations = _interopRequireWildcard(require("../../activations"));

        var _WebGL = require("../../WebGL2");

        var tensorUtils = _interopRequireWildcard(require("../../utils/tensorUtils"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var _ndarrayGemm = _interopRequireDefault(require("ndarray-gemm"));

        var _Conv2D = _interopRequireDefault(require("./Conv2D"));

        var activationProgramSources = _interopRequireWildcard(require("../../activations/programSources"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class _DepthwiseConv2D extends _Conv2D.default {
            constructor(attrs = {}) {
                super(attrs);
            }

            _calcOutputShape(inputShape) {
                super._calcOutputShape(inputShape);

                const nbFilter = this.kernelShape[0];
                const inputChannels = inputShape[2];
                this.outputShape[2] = nbFilter * inputChannels;
            }

            _im2col(x) {
                const [inputRows, inputCols, inputChannels] = x.tensor.shape;
                const nbRow = this.kernelShape[1];
                const nbCol = this.kernelShape[2];
                const outputRows = this.outputShape[0];
                const outputCols = this.outputShape[1];
                const nbPatches = outputRows * outputCols;
                const patchLen = nbRow * nbCol;

                if (!this.imColsMat) {
                    this.imColsMat = new _Tensor.default([], [nbPatches * inputChannels, patchLen]);
                }

                let patch = new _Tensor.default([], [nbRow, nbCol, 1]);
                let offset = 0;

                for (let c = 0; c < inputChannels; c++) {
                    for (let i = 0, limit = inputRows - nbRow; i <= limit; i += this.strides[0]) {
                        for (let j = 0, limit = inputCols - nbCol; j <= limit; j += this.strides[1]) {
                            _ndarrayOps.default.assign(patch.tensor, x.tensor.hi(i + nbRow, j + nbCol, c + 1).lo(i, j, c));

                            this.imColsMat.tensor.data.set(patch.tensor.data, offset);
                            offset += patchLen;
                        }
                    }
                }

                return this.imColsMat;
            }

            _w2row() {
                const inputChannels = this.weights['kernel'].tensor.shape[2];
                const [nbFilter, nbRow, nbCol] = this.kernelShape;
                const patchLen = nbRow * nbCol;
                this.wRowsMat = new _Tensor.default([], [patchLen, nbFilter * inputChannels]);
                let patch = new _Tensor.default([], [nbRow, nbCol]);
                let patchRaveled = new _Tensor.default([], [patchLen]);
                let p = 0;

                for (let c = 0; c < inputChannels; c++) {
                    for (let n = 0; n < nbFilter; n++) {
                        _ndarrayOps.default.assign(patch.tensor, this.weights['kernel'].tensor.pick(null, null, c, n));

                        patchRaveled.replaceTensorData(patch.tensor.data);

                        _ndarrayOps.default.assign(this.wRowsMat.tensor.pick(null, p), patchRaveled.tensor);

                        p += 1;
                    }
                }

                return this.wRowsMat;
            }

            _callCPU(x) {
                this.inputShape = x.tensor.shape;

                this._calcOutputShape(this.inputShape);

                x = this._padInput(x);

                this._im2col(x);

                const nbFilter = this.kernelShape[0];
                const outputRows = this.outputShape[0];
                const outputCols = this.outputShape[1];
                const nbPatches = outputRows * outputCols;
                const inputChannels = this.inputShape[2];
                const matMul = new _Tensor.default([], [nbPatches * inputChannels, nbFilter * inputChannels]);
                (0, _ndarrayGemm.default)(matMul.tensor, this.imColsMat.tensor, this.wRowsMat.tensor, 1, 1);
                this.output = new _Tensor.default([], this.outputShape);
                const outputDataLength = outputRows * outputCols * nbFilter * inputChannels;
                let dataFiltered = new Float32Array(outputDataLength);

                for (let c = 0; c < inputChannels; c++) {
                    for (let n = c * outputDataLength + c * nbFilter; n < (c + 1) * outputDataLength; n += nbFilter * inputChannels) {
                        for (let m = 0; m < nbFilter; m++) {
                            dataFiltered[n + m - c * outputDataLength] = matMul.tensor.data[n + m];
                        }
                    }
                }

                this.output.replaceTensorData(dataFiltered);
            }

            _createIndexMap(indicesForReshaped) {
                if (this.indexMap) {
                    return;
                }

                let [inputRows, inputCols, inputChannels] = this.inputShape;
                let indices = new _Tensor.default(indicesForReshaped.data, indicesForReshaped.shape, {
                    type: Int32Array
                });

                if (this.padding === 'same') {
                    const [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter] = this.inputPadding;
                    inputRows = inputRows + paddingRowBefore + paddingRowAfter;
                    inputCols = inputCols + paddingColBefore + paddingColAfter;
                    const padValue = -1;
                    indices = this._padInput(indices, padValue);
                }

                const nbRow = this.kernelShape[1];
                const nbCol = this.kernelShape[2];
                const outputRows = this.outputShape[0];
                const outputCols = this.outputShape[1];
                const nbPatches = outputRows * outputCols;
                const patchLen = nbRow * nbCol;
                this.indexMap = new _Tensor.default([], [nbPatches * inputChannels, patchLen], {
                    type: Int32Array
                });
                const indicesPatch = new _Tensor.default([], [nbRow, nbCol, 1]);
                let offset = 0;

                for (let c = 0; c < inputChannels; c++) {
                    for (let i = 0, limit = inputRows - nbRow; i <= limit; i += this.strides[0]) {
                        for (let j = 0, limit = inputCols - nbCol; j <= limit; j += this.strides[1]) {
                            _ndarrayOps.default.assign(indicesPatch.tensor, indices.tensor.hi(i + nbRow, j + nbCol, c + 1).lo(i, j, c));

                            this.indexMap.tensor.data.set(indicesPatch.tensor.data, offset);
                            offset += patchLen;
                        }
                    }
                }

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int',
                    supportsTextureFragments: true
                });
            }

            _createOutputReshapeIndexMap() {
                if (this.reshapeIndexMap) {
                    return;
                }

                const nbFilter = this.kernelShape[0];
                const reshape = [this.outputShape[0] * this.outputShape[1], this.outputShape[2]];
                const reshapeRowIndices = new _Tensor.default([], reshape, {
                    type: Int32Array
                });
                const reshapeColIndices = new _Tensor.default([], reshape, {
                    type: Int32Array
                });
                this.reshapeIndexMap = new _Tensor.default([], reshape, {
                    type: Int32Array
                });

                for (let j = 0; j < reshape[1]; j++) {
                    for (let i = 0; i < reshape[0]; i++) {
                        _ndarrayOps.default.assigns(reshapeRowIndices.tensor.pick(i, j), i + Math.floor(j / nbFilter) * reshape[0]);
                    }
                }

                for (let j = 0; j < reshape[1]; j++) {
                    _ndarrayOps.default.assigns(reshapeColIndices.tensor.pick(null, j), j);
                }

                _ndarrayOps.default.muls(this.reshapeIndexMap.tensor, reshapeRowIndices.tensor, reshape[1]);

                _ndarrayOps.default.addeq(this.reshapeIndexMap.tensor, reshapeColIndices.tensor);

                this.reshapeIndexMap.createGLTexture({
                    type: '2d',
                    format: 'int',
                    supportsTextureFragments: true
                });
            }

            _callGPU(x) {
                super._callGPU(x);

                this._createOutputReshapeIndexMap();

                if (!this.outputReshaped) {
                    const reshape = [this.outputShape[0] * this.outputShape[1], this.outputShape[2]];
                    this.outputReshaped = new _Tensor.default([], reshape);
                    this.outputReshaped.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                    this.outputReshaped.is2DReshaped = true;
                    this.outputReshaped.originalShape = this.outputShape;
                    this.outputReshaped.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(this.outputShape, false, -1);
                }

                if (this.output.glTextureFragments) {
                    this.output.convert2DRowFragmentedGLTextureToColStack();
                }

                _WebGL.webgl2.runProgram({
                    program: this.output.glTextureFragments ? this.mapInputFragmentsProgram : this.mapInputProgram,
                    output: this.outputReshaped,
                    inputs: [{
                        input: this.output,
                        name: 'x'
                    }, {
                        input: this.reshapeIndexMap,
                        name: 'indexMap'
                    }],
                    uniforms: [{
                        value: this.output.glTextureShape[1],
                        type: 'int',
                        name: 'inputCols'
                    }],
                    supportsTextureFragments: true
                });

                if (this.output.glTextureFragments) {
                    this.output.removeGLTextureFragmentsAsColStack();
                }
            }

        }

        class SeparableConv2D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'SeparableConv2D';
                const {
                    filters = 1,
                    kernel_size = [1, 1],
                    strides = [1, 1],
                    padding = 'valid',
                    data_format = 'channels_last',
                    depth_multiplier = 1,
                    activation = 'linear',
                    use_bias = true
                } = attrs;

                if (Array.isArray(kernel_size)) {
                    this.kernelShape = [filters, ...kernel_size];
                } else {
                    this.kernelShape = [filters, kernel_size, kernel_size];
                }

                if (Array.isArray(strides)) {
                    this.strides = strides;
                } else {
                    this.strides = [strides, strides];
                }

                if (padding === 'valid' || padding === 'same') {
                    this.padding = padding;
                } else {
                    this.throwError('Invalid padding.');
                }

                if (data_format === 'channels_last' || data_format === 'channels_first') {
                    this.dataFormat = data_format;
                } else {
                    this.throwError('Only channels_last and channels_first data formats are allowed.');
                }

                this.activation = activation;
                this.activationFunc = activations[activation];

                if (padding === 'valid' || padding === 'same') {
                    this.padding = padding;
                } else {
                    this.throwError('Invalid padding.');
                }

                this.useBias = use_bias;
                this.params = this.useBias ? ['depthwise_kernel', 'pointwise_kernel', 'bias'] : ['depthwise_kernel', 'pointwise_kernel'];
                this.depthwiseConvAttrs = {
                    filters: depth_multiplier,
                    kernel_size: [this.kernelShape[1], this.kernelShape[2]],
                    strides: this.strides,
                    padding,
                    data_format,
                    activation: 'linear',
                    use_bias: false,
                    gpu: attrs.gpu
                };
                this.pointwiseConvAttrs = {
                    filters,
                    kernel_size: [1, 1],
                    strides: [1, 1],
                    padding,
                    data_format,
                    activation: 'linear',
                    use_bias,
                    gpu: attrs.gpu
                };
                this.description = `${this.kernelShape[0]} ${this.kernelShape.slice(1).join('x')} filters`;
                this.description += this.strides.some(s => s > 1) ? `, ${this.strides.join('x')} striding` : '';
                this.description += this.padding === 'valid' ? `, no border padding` : ', pad to same borders';
                this.description += depth_multiplier > 1 ? `, depth multiplier: ${depth_multiplier}` : '';
                this.description += this.activation !== 'linear' ? `, ${this.activation} activation` : '';

                if (this.gpu) {
                    this.activationProgram = _WebGL.webgl2.compileProgram(activationProgramSources[this.activation]);
                }
            }

            setWeights(weightsArr) {
                this._depthwiseConv = new _DepthwiseConv2D(this.depthwiseConvAttrs);

                this._depthwiseConv.setWeights(weightsArr.slice(0, 1));

                this._pointwiseConv = new _Conv2D.default(this.pointwiseConvAttrs);

                this._pointwiseConv.setWeights(weightsArr.slice(1, 3));
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                this._depthwiseConv._callCPU(x);

                this._pointwiseConv._callCPU(this._depthwiseConv.output);

                this.output = this._pointwiseConv.output;
                this.activationFunc(this.output);
            }

            _callGPU(x) {
                this._depthwiseConv.outbound = [null];
                this._pointwiseConv.outbound = [null];

                this._depthwiseConv._callGPU(x);

                this._pointwiseConv._callGPU(this._depthwiseConv.outputReshaped);

                if (this.activation === 'linear') {
                    this.output = this._pointwiseConv.output;
                } else {
                    if (!this.output) {
                        this.output = new _Tensor.default([], this._pointwiseConv.output.glTextureShape);
                        this.output.createGLTexture({
                            type: '2d',
                            format: 'float',
                            supportsTextureFragments: true
                        });
                        this.output.is2DReshaped = true;
                        this.output.originalShape = this._pointwiseConv.output.originalShape;
                        this.output.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(this._pointwiseConv.output.originalShape, false, -1);
                    }

                    this.outputPreactiv = this._pointwiseConv.output;

                    _WebGL.webgl2.runProgram({
                        program: this.activationProgram,
                        output: this.output,
                        inputs: [{
                            input: this.outputPreactiv,
                            name: 'x'
                        }],
                        supportsTextureFragments: true
                    });
                }

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                    this.output.reshapeFrom2D();

                    if (this.dataFormat === 'channels_first') {
                        this.output.tensor = this.output.tensor.transpose(2, 0, 1);
                    }
                }
            }

        }

        exports.default = SeparableConv2D;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../activations": 374,
        "../../activations/programSources": 376,
        "../../utils/tensorUtils": 461,
        "./Conv2D": 391,
        "ndarray-gemm": 664,
        "ndarray-ops": "ndarray-ops"
    }],
    398: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";

        class UpSampling1D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'UpSampling1D';
                const {
                    size = 2
                } = attrs;
                this.size = size;
                this.description = `size ${size}`;

                if (this.gpu) {
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                this.inputShape = x.tensor.shape;
                this.outputShape = [this.inputShape[0] * this.size, this.inputShape[1]];
                this.output = new _Tensor.default([], this.outputShape);

                for (let i = 0; i < this.size; i++) {
                    _ndarrayOps.default.assign(this.output.tensor.lo(i, 0).step(this.size, 1), x.tensor);
                }
            }

            _createIndexMap() {
                if (this.indexMap) {
                    return;
                }

                const indices = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });
                const indicesRow = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });
                const indicesCol = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });

                for (let i = 0; i < this.inputShape[0]; i++) {
                    _ndarrayOps.default.assigns(indicesRow.tensor.pick(i, null), i);
                }

                for (let j = 0; j < this.inputShape[1]; j++) {
                    _ndarrayOps.default.assigns(indicesCol.tensor.pick(null, j), j);
                }

                _ndarrayOps.default.muls(indices.tensor, indicesRow.tensor, this.inputShape[1]);

                _ndarrayOps.default.addeq(indices.tensor, indicesCol.tensor);

                this.indexMap = new _Tensor.default([], this.outputShape, {
                    type: Int32Array
                });

                for (let i = 0; i < this.size; i++) {
                    _ndarrayOps.default.assign(this.indexMap.tensor.lo(i, 0).step(this.size, 1), indices.tensor);
                }

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int'
                });
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                this.inputShape = x.tensor.shape;
                this.outputShape = [this.inputShape[0] * this.size, this.inputShape[1]];

                this._createIndexMap();

                if (!this.output) {
                    this.output = new _Tensor.default([], this.outputShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.mapInputProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }, {
                        input: this.indexMap,
                        name: 'indexMap'
                    }],
                    uniforms: [{
                        value: x.glTextureShape[1],
                        type: 'int',
                        name: 'inputCols'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = UpSampling1D;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    399: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";

        class UpSampling2D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'UpSampling2D';
                const {
                    size = [2, 2],
                    data_format = 'channels_last'
                } = attrs;

                if (Array.isArray(size)) {
                    this.size = size;
                } else {
                    this.size = [size, size];
                }

                this.dataFormat = data_format;
                this.description = `size ${this.size.join('x')}`;

                if (this.gpu) {
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(1, 2, 0);
                }

                this.inputShape = x.tensor.shape;
                this.outputShape = [this.inputShape[0] * this.size[0], this.inputShape[1] * this.size[1], this.inputShape[2]];
                this.output = new _Tensor.default([], this.outputShape);

                for (let i = 0; i < this.size[0]; i++) {
                    for (let j = 0; j < this.size[1]; j++) {
                        _ndarrayOps.default.assign(this.output.tensor.lo(i, j, 0).step(this.size[0], this.size[1], 1), x.tensor);
                    }
                }

                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(2, 0, 1);
                    this.output.tensor = this.output.tensor.transpose(2, 0, 1);
                }
            }

            _createIndexMap(indicesForReshaped, is2DReshaped) {
                if (this.indexMap) {
                    return;
                }

                const indices = new _Tensor.default(indicesForReshaped.data, indicesForReshaped.shape, {
                    type: Int32Array
                });
                this.indexMap = new _Tensor.default([], this.outputShape, {
                    type: Int32Array
                });

                for (let i = 0; i < this.size[0]; i++) {
                    for (let j = 0; j < this.size[1]; j++) {
                        const sliceStart = this.dataFormat === 'channels_first' ? [0, i, j] : [i, j, 0];
                        const step = this.dataFormat === 'channels_first' ? [1, this.size[0], this.size[1]] : [this.size[0], this.size[1], 1];

                        _ndarrayOps.default.assign(this.indexMap.tensor.lo(...sliceStart).step(...step), indices.tensor);
                    }
                }

                if (is2DReshaped) {
                    this.indexMap.reshapeTo2D();
                } else {
                    this.indexMap.reshapeTo2DSquare();
                }

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int'
                });
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.reshapeTo2DSquare();
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                this.inputShape = x.originalShape;
                this.outputShape = this.dataFormat === 'channels_first' ? [this.inputShape[0], this.inputShape[1] * this.size[0], this.inputShape[2] * this.size[1]] : [this.inputShape[0] * this.size[0], this.inputShape[1] * this.size[1], this.inputShape[2]];

                this._createIndexMap(x.indicesForReshaped, x.is2DReshaped);

                if (!this.output) {
                    this.output = new _Tensor.default([], this.outputShape);

                    if (x.is2DReshaped) {
                        this.output.reshapeTo2D();
                    } else {
                        this.output.reshapeTo2DSquare();
                    }

                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.mapInputProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }, {
                        input: this.indexMap,
                        name: 'indexMap'
                    }],
                    uniforms: [{
                        value: x.glTextureShape[1],
                        type: 'int',
                        name: 'inputCols'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = UpSampling2D;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    400: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";

        class UpSampling3D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'UpSampling3D';
                const {
                    size = [2, 2, 2],
                    data_format = 'channels_last'
                } = attrs;

                if (Array.isArray(size)) {
                    this.size = size;
                } else {
                    this.size = [size, size, size];
                }

                this.dataFormat = data_format;
                this.description = `size ${this.size.join('x')}`;

                if (this.gpu) {
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(1, 2, 3, 0);
                }

                this.inputShape = x.tensor.shape;
                this.outputShape = [this.inputShape[0] * this.size[0], this.inputShape[1] * this.size[1], this.inputShape[2] * this.size[2], this.inputShape[3]];
                this.output = new _Tensor.default([], this.outputShape);

                for (let i = 0; i < this.size[0]; i++) {
                    for (let j = 0; j < this.size[1]; j++) {
                        for (let k = 0; k < this.size[2]; k++) {
                            _ndarrayOps.default.assign(this.output.tensor.lo(i, j, k, 0).step(this.size[0], this.size[1], this.size[2], 1), x.tensor);
                        }
                    }
                }

                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(3, 0, 1, 2);
                    this.output.tensor = this.output.tensor.transpose(3, 0, 1, 2);
                }
            }

            _createIndexMap(indicesForReshaped, is2DReshaped) {
                if (this.indexMap) {
                    return;
                }

                const indices = new _Tensor.default(indicesForReshaped.data, indicesForReshaped.shape, {
                    type: Int32Array
                });
                this.indexMap = new _Tensor.default([], this.outputShape, {
                    type: Int32Array
                });

                for (let i = 0; i < this.size[0]; i++) {
                    for (let j = 0; j < this.size[1]; j++) {
                        for (let k = 0; k < this.size[2]; k++) {
                            const sliceStart = this.dataFormat === 'channels_first' ? [0, i, j, k] : [i, j, k, 0];
                            const step = this.dataFormat === 'channels_first' ? [1, this.size[0], this.size[1], this.size[2]] : [this.size[0], this.size[1], this.size[2], 1];

                            _ndarrayOps.default.assign(this.indexMap.tensor.lo(...sliceStart).step(...step), indices.tensor);
                        }
                    }
                }

                if (is2DReshaped) {
                    this.indexMap.reshapeTo2D();
                } else {
                    this.indexMap.reshapeTo2DSquare();
                }

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int'
                });
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.reshapeTo2DSquare();
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                this.inputShape = x.originalShape;
                this.outputShape = this.dataFormat === 'channels_first' ? [this.inputShape[0], this.inputShape[1] * this.size[0], this.inputShape[2] * this.size[1], this.inputShape[3] * this.size[2]] : [this.inputShape[0] * this.size[0], this.inputShape[1] * this.size[1], this.inputShape[2] * this.size[2], this.inputShape[3]];

                this._createIndexMap(x.indicesForReshaped, x.is2DReshaped);

                if (!this.output) {
                    this.output = new _Tensor.default([], this.outputShape);

                    if (x.is2DReshaped) {
                        this.output.reshapeTo2D();
                    } else {
                        this.output.reshapeTo2DSquare();
                    }

                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.mapInputProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }, {
                        input: this.indexMap,
                        name: 'indexMap'
                    }],
                    uniforms: [{
                        value: x.glTextureShape[1],
                        type: 'int',
                        name: 'inputCols'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = UpSampling3D;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    401: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";

        class ZeroPadding1D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'ZeroPadding1D';
                const {
                    padding = [1, 1]
                } = attrs;

                if (Array.isArray(padding)) {
                    this.padding = padding;
                } else {
                    this.padding = [padding, padding];
                }

                this.description = `${JSON.stringify(this.padding)}`;

                if (this.gpu) {
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                this.inputShape = x.tensor.shape;
                this.outputShape = [this.inputShape[0] + this.padding[0] + this.padding[1], this.inputShape[1]];
                this.output = new _Tensor.default([], this.outputShape);

                _ndarrayOps.default.assign(this.output.tensor.hi(this.inputShape[0] + this.padding[0], this.inputShape[1]).lo(this.padding[0], 0), x.tensor);
            }

            _createIndexMap() {
                if (this.indexMap) {
                    return;
                }

                const indices = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });
                const indicesRow = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });
                const indicesCol = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });

                for (let i = 0; i < this.inputShape[0]; i++) {
                    _ndarrayOps.default.assigns(indicesRow.tensor.pick(i, null), i);
                }

                for (let j = 0; j < this.inputShape[1]; j++) {
                    _ndarrayOps.default.assigns(indicesCol.tensor.pick(null, j), j);
                }

                _ndarrayOps.default.muls(indices.tensor, indicesRow.tensor, this.inputShape[1]);

                _ndarrayOps.default.addeq(indices.tensor, indicesCol.tensor);

                this.indexMap = new _Tensor.default([], this.outputShape, {
                    type: Int32Array
                });
                const sliceStart = [this.padding[0], 0];
                const sliceEnd = [this.inputShape[0] + this.padding[0], this.inputShape[1]];

                _ndarrayOps.default.assigns(this.indexMap.tensor, -1);

                _ndarrayOps.default.assign(this.indexMap.tensor.hi(...sliceEnd).lo(...sliceStart), indices.tensor);

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int'
                });
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                this.inputShape = x.tensor.shape;
                this.outputShape = [this.inputShape[0] + this.padding[0] + this.padding[1], this.inputShape[1]];

                this._createIndexMap();

                if (!this.output) {
                    this.output = new _Tensor.default([], this.outputShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.mapInputProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }, {
                        input: this.indexMap,
                        name: 'indexMap'
                    }],
                    uniforms: [{
                        value: x.glTextureShape[1],
                        type: 'int',
                        name: 'inputCols'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = ZeroPadding1D;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    402: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";

        class ZeroPadding2D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'ZeroPadding2D';
                const {
                    padding = [[1, 1], [1, 1]],
                    data_format = 'channels_last'
                } = attrs;

                if (Array.isArray(padding)) {
                    if (Array.isArray(padding[0])) {
                        this.padding = padding;
                    } else {
                        this.padding = [[padding[0], padding[0]], [padding[1], padding[1]]];
                    }
                } else {
                    this.padding = [[padding, padding], [padding, padding]];
                }

                this.dataFormat = data_format;
                this.description = `${JSON.stringify(this.padding)}`;

                if (this.gpu) {
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(1, 2, 0);
                }

                this.inputShape = x.tensor.shape;
                this.outputShape = [this.inputShape[0] + this.padding[0][0] + this.padding[0][1], this.inputShape[1] + this.padding[1][0] + this.padding[1][1], this.inputShape[2]];
                this.output = new _Tensor.default([], this.outputShape);

                _ndarrayOps.default.assign(this.output.tensor.hi(this.inputShape[0] + this.padding[0][0], this.inputShape[1] + this.padding[1][0], this.inputShape[2]).lo(this.padding[0][0], this.padding[1][0], 0), x.tensor);

                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(2, 0, 1);
                    this.output.tensor = this.output.tensor.transpose(2, 0, 1);
                }
            }

            _createIndexMap(indicesForReshaped, is2DReshaped) {
                if (this.indexMap) {
                    return;
                }

                const indices = new _Tensor.default(indicesForReshaped.data, indicesForReshaped.shape, {
                    type: Int32Array
                });
                this.indexMap = new _Tensor.default([], this.outputShape, {
                    type: Int32Array
                });
                const sliceStart = this.dataFormat === 'channels_first' ? [0, this.padding[0][0], this.padding[1][0]] : [this.padding[0][0], this.padding[1][0], 0];
                const sliceEnd = this.dataFormat === 'channels_first' ? [this.inputShape[0], this.inputShape[1] + this.padding[0][0], this.inputShape[2] + this.padding[1][0]] : [this.inputShape[0] + this.padding[0][0], this.inputShape[1] + this.padding[1][0], this.inputShape[2]];

                _ndarrayOps.default.assigns(this.indexMap.tensor, -1);

                _ndarrayOps.default.assign(this.indexMap.tensor.hi(...sliceEnd).lo(...sliceStart), indices.tensor);

                if (is2DReshaped) {
                    this.indexMap.reshapeTo2D();
                } else {
                    this.indexMap.reshapeTo2DSquare();
                }

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int'
                });
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.reshapeTo2DSquare();
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                this.inputShape = x.originalShape;
                this.outputShape = this.dataFormat === 'channels_first' ? [this.inputShape[0], this.inputShape[1] + this.padding[0][0] + this.padding[0][1], this.inputShape[2] + this.padding[1][0] + this.padding[1][1]] : [this.inputShape[0] + this.padding[0][0] + this.padding[0][1], this.inputShape[1] + this.padding[1][0] + this.padding[1][1], this.inputShape[2]];

                this._createIndexMap(x.indicesForReshaped, x.is2DReshaped);

                if (!this.output) {
                    this.output = new _Tensor.default([], this.outputShape);

                    if (x.is2DReshaped) {
                        this.output.reshapeTo2D();
                    } else {
                        this.output.reshapeTo2DSquare();
                    }

                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.mapInputProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }, {
                        input: this.indexMap,
                        name: 'indexMap'
                    }],
                    uniforms: [{
                        value: x.glTextureShape[1],
                        type: 'int',
                        name: 'inputCols'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = ZeroPadding2D;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    403: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";

        class ZeroPadding3D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'ZeroPadding3D';
                const {
                    padding = [[1, 1], [1, 1], [1, 1]],
                    data_format = 'channels_last'
                } = attrs;

                if (Array.isArray(padding)) {
                    if (Array.isArray(padding[0])) {
                        this.padding = padding;
                    } else {
                        this.padding = [[padding[0], padding[0]], [padding[1], padding[1]], [padding[2], padding[2]]];
                    }
                } else {
                    this.padding = [[padding, padding], [padding, padding], [padding, padding]];
                }

                this.dataFormat = data_format;
                this.description = `${JSON.stringify(this.padding)}`;

                if (this.gpu) {
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(1, 2, 3, 0);
                }

                this.inputShape = x.tensor.shape;
                this.outputShape = [this.inputShape[0] + this.padding[0][0] + this.padding[0][1], this.inputShape[1] + this.padding[1][0] + this.padding[1][1], this.inputShape[2] + this.padding[2][0] + this.padding[2][1], this.inputShape[3]];
                this.output = new _Tensor.default([], this.outputShape);

                _ndarrayOps.default.assign(this.output.tensor.hi(this.inputShape[0] + this.padding[0][0], this.inputShape[1] + this.padding[1][0], this.inputShape[2] + this.padding[2][0], this.inputShape[3]).lo(this.padding[0][0], this.padding[1][0], this.padding[2][0], 0), x.tensor);

                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(3, 0, 1, 2);
                    this.output.tensor = this.output.tensor.transpose(3, 0, 1, 2);
                }
            }

            _createIndexMap(indicesForReshaped, is2DReshaped) {
                if (this.indexMap) {
                    return;
                }

                const indices = new _Tensor.default(indicesForReshaped.data, indicesForReshaped.shape, {
                    type: Int32Array
                });
                this.indexMap = new _Tensor.default([], this.outputShape, {
                    type: Int32Array
                });
                const sliceStart = this.dataFormat === 'channels_first' ? [0, this.padding[0][0], this.padding[1][0], this.padding[2][0]] : [this.padding[0][0], this.padding[1][0], this.padding[2][0], 0];
                const sliceEnd = this.dataFormat === 'channels_first' ? [this.inputShape[0], this.inputShape[1] + this.padding[0][0], this.inputShape[2] + this.padding[1][0], this.inputShape[3] + this.padding[2][0]] : [this.inputShape[0] + this.padding[0][0], this.inputShape[1] + this.padding[1][0], this.inputShape[2] + this.padding[2][0], this.inputShape[3]];

                _ndarrayOps.default.assigns(this.indexMap.tensor, -1);

                _ndarrayOps.default.assign(this.indexMap.tensor.hi(...sliceEnd).lo(...sliceStart), indices.tensor);

                if (is2DReshaped) {
                    this.indexMap.reshapeTo2D();
                } else {
                    this.indexMap.reshapeTo2DSquare();
                }

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int'
                });
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.reshapeTo2DSquare();
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                this.inputShape = x.originalShape;
                this.outputShape = this.dataFormat === 'channels_first' ? [this.inputShape[0], this.inputShape[1] + this.padding[0][0] + this.padding[0][1], this.inputShape[2] + this.padding[1][0] + this.padding[1][1], this.inputShape[3] + this.padding[2][0] + this.padding[2][1]] : [this.inputShape[0] + this.padding[0][0] + this.padding[0][1], this.inputShape[1] + this.padding[1][0] + this.padding[1][1], this.inputShape[2] + this.padding[2][0] + this.padding[2][1], this.inputShape[3]];

                this._createIndexMap(x.indicesForReshaped, x.is2DReshaped);

                if (!this.output) {
                    this.output = new _Tensor.default([], this.outputShape);

                    if (x.is2DReshaped) {
                        this.output.reshapeTo2D();
                    } else {
                        this.output.reshapeTo2DSquare();
                    }

                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.mapInputProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }, {
                        input: this.indexMap,
                        name: 'indexMap'
                    }],
                    uniforms: [{
                        value: x.glTextureShape[1],
                        type: 'int',
                        name: 'inputCols'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = ZeroPadding3D;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    404: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "Conv1D", {
            enumerable: true,
            get: function () {
                return _Conv1D.default;
            }
        });
        Object.defineProperty(exports, "Conv2D", {
            enumerable: true,
            get: function () {
                return _Conv2D.default;
            }
        });
        Object.defineProperty(exports, "SeparableConv2D", {
            enumerable: true,
            get: function () {
                return _SeparableConv2D.default;
            }
        });
        Object.defineProperty(exports, "Conv2DTranspose", {
            enumerable: true,
            get: function () {
                return _Conv2DTranspose.default;
            }
        });
        Object.defineProperty(exports, "Conv3D", {
            enumerable: true,
            get: function () {
                return _Conv3D.default;
            }
        });
        Object.defineProperty(exports, "Cropping1D", {
            enumerable: true,
            get: function () {
                return _Cropping1D.default;
            }
        });
        Object.defineProperty(exports, "Cropping2D", {
            enumerable: true,
            get: function () {
                return _Cropping2D.default;
            }
        });
        Object.defineProperty(exports, "Cropping3D", {
            enumerable: true,
            get: function () {
                return _Cropping3D.default;
            }
        });
        Object.defineProperty(exports, "UpSampling1D", {
            enumerable: true,
            get: function () {
                return _UpSampling1D.default;
            }
        });
        Object.defineProperty(exports, "UpSampling2D", {
            enumerable: true,
            get: function () {
                return _UpSampling2D.default;
            }
        });
        Object.defineProperty(exports, "UpSampling3D", {
            enumerable: true,
            get: function () {
                return _UpSampling3D.default;
            }
        });
        Object.defineProperty(exports, "ZeroPadding1D", {
            enumerable: true,
            get: function () {
                return _ZeroPadding1D.default;
            }
        });
        Object.defineProperty(exports, "ZeroPadding2D", {
            enumerable: true,
            get: function () {
                return _ZeroPadding2D.default;
            }
        });
        Object.defineProperty(exports, "ZeroPadding3D", {
            enumerable: true,
            get: function () {
                return _ZeroPadding3D.default;
            }
        });

        var _Conv1D = _interopRequireDefault(require("./Conv1D"));

        var _Conv2D = _interopRequireDefault(require("./Conv2D"));

        var _SeparableConv2D = _interopRequireDefault(require("./SeparableConv2D"));

        var _Conv2DTranspose = _interopRequireDefault(require("./Conv2DTranspose"));

        var _Conv3D = _interopRequireDefault(require("./Conv3D"));

        var _Cropping1D = _interopRequireDefault(require("./Cropping1D"));

        var _Cropping2D = _interopRequireDefault(require("./Cropping2D"));

        var _Cropping3D = _interopRequireDefault(require("./Cropping3D"));

        var _UpSampling1D = _interopRequireDefault(require("./UpSampling1D"));

        var _UpSampling2D = _interopRequireDefault(require("./UpSampling2D"));

        var _UpSampling3D = _interopRequireDefault(require("./UpSampling3D"));

        var _ZeroPadding1D = _interopRequireDefault(require("./ZeroPadding1D"));

        var _ZeroPadding2D = _interopRequireDefault(require("./ZeroPadding2D"));

        var _ZeroPadding3D = _interopRequireDefault(require("./ZeroPadding3D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }
    }, {
        "./Conv1D": 390,
        "./Conv2D": 391,
        "./Conv2DTranspose": 392,
        "./Conv3D": 393,
        "./Cropping1D": 394,
        "./Cropping2D": 395,
        "./Cropping3D": 396,
        "./SeparableConv2D": 397,
        "./UpSampling1D": 398,
        "./UpSampling2D": 399,
        "./UpSampling3D": 400,
        "./ZeroPadding1D": 401,
        "./ZeroPadding2D": 402,
        "./ZeroPadding3D": 403
    }],
    405: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var activations = _interopRequireWildcard(require("../../activations"));

        var activationProgramSources = _interopRequireWildcard(require("../../activations/programSources"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class Activation extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Activation';
                const {
                    activation = 'linear'
                } = attrs;
                this.activation = activation;
                this.activationFunc = activations[activation];
                this.description = `${this.activation}`;

                if (this.gpu) {
                    this.program = _WebGL.webgl2.compileProgram(activationProgramSources[this.activation]);
                }
            }

            call(x) {
                if (this.activation === 'linear') {
                    this.output = x;
                    return this.output;
                }

                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                this.output = new _Tensor.default(new x.arrayType(x.tensor.data), x.tensor.shape);
                this.activationFunc(this.output);
            }

            _callGPU(x) {
                if (!x.glTexture && !x.glTextureFragments) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], x.glTextureShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });

                    if (x.is1D) {
                        this.output.is1D = x.is1D;
                    } else if (x.is2DReshaped || x.is2DSquareReshaped) {
                        if (x.is2DReshaped) {
                            this.output.is2DReshaped = x.is2DReshaped;
                        } else if (x.is2DSquareReshaped) {
                            this.output.is2DSquareReshaped = x.is2DSquareReshaped;
                        }

                        this.output.originalShape = x.originalShape;
                        this.output.indicesForReshaped = x.indicesForReshaped;
                    }
                }

                _WebGL.webgl2.runProgram({
                    program: this.program,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }],
                    supportsTextureFragments: true
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else if (this.output.is2DSquareReshaped) {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = Activation;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../activations": 374,
        "../../activations/programSources": 376
    }],
    406: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var activations = _interopRequireWildcard(require("../../activations"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayBlasLevel = require("ndarray-blas-level2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var activationProgramSources = _interopRequireWildcard(require("../../activations/programSources"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const matMulProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D A;\nuniform sampler2D B;\nuniform sampler2D C;\nuniform bool addC;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 A_size = textureSize(A, 0);\n  ivec2 B_size = textureSize(B, 0);\n  int out_x = int(float(B_size[0]) * outTex.x);\n  int out_y = int(float(A_size[1]) * outTex.y);\n  int commonDim = A_size[0];\n\n  float sum = 0.;\n  for (int i = 0; i < commonDim; ++i) {\n    float a = texelFetch(A, ivec2(i, out_y), 0).r;\n    float b = texelFetch(B, ivec2(out_x, i), 0).r;\n    sum += a * b;\n  }\n\n  if (addC) {\n    sum += texelFetch(C, ivec2(out_x, 0), 0).r;\n  }\n\n  outColor = vec4(sum);\n}\n";

        class Dense extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Dense';
                const {
                    units = 1,
                    activation = 'linear',
                    input_dim = null,
                    use_bias = true
                } = attrs;
                this.description = `${activation} activation, output dimensions: ${units}`;
                this.activation = activation;
                this.activationFunc = activations[this.activation];
                this.units = units;
                this.input_dim = input_dim;
                this.use_bias = use_bias;
                this.params = this.use_bias ? ['kernel', 'bias'] : ['kernel'];

                if (this.input_dim) {
                    this.inputShape = [this.input_dim];
                }

                if (this.gpu) {
                    this.matMulProgram = _WebGL.webgl2.compileProgram(matMulProgramSource);
                    this.activationProgram = _WebGL.webgl2.compileProgram(activationProgramSources[this.activation]);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                this.output = new _Tensor.default([], [this.units]);

                if (this.use_bias) {
                    _ndarrayOps.default.assign(this.output.tensor, this.weights['bias'].tensor);
                }

                (0, _ndarrayBlasLevel.gemv)(1, this.weights['kernel'].tensor.transpose(1, 0), x.tensor, 1, this.output.tensor);
                this.activationFunc(this.output);
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (this.activation !== 'linear' && !this.outputPreactiv) {
                    this.outputPreactiv = new _Tensor.default([], [this.units]);
                    this.outputPreactiv.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], [this.units]);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                const matMulInputs = [{
                    input: x,
                    name: 'A'
                }, {
                    input: this.weights['kernel'],
                    name: 'B'
                }];

                if (this.use_bias) {
                    matMulInputs.push({
                        input: this.weights['bias'],
                        name: 'C'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.activation === 'linear' ? this.output : this.outputPreactiv,
                    inputs: matMulInputs,
                    uniforms: [{
                        value: this.use_bias ? 1 : 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                if (this.activation !== 'linear') {
                    _WebGL.webgl2.runProgram({
                        program: this.activationProgram,
                        output: this.output,
                        inputs: [{
                            input: this.outputPreactiv,
                            name: 'x'
                        }]
                    });
                }

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = Dense;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../activations": 374,
        "../../activations/programSources": 376,
        "ndarray-blas-level2": 650,
        "ndarray-ops": "ndarray-ops"
    }],
    407: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class Dropout extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Dropout';
                const {
                    rate = 0.5
                } = attrs;
                this.description = `${rate}`;
                this.rate = Math.min(Math.max(0, rate), 1);
            }

            call(x) {
                this.output = x;
                return this.output;
            }

        }

        exports.default = Dropout;
    }, {"../../Layer": 368}],
    408: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const flattenProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform int outputSize;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  int out_x = int(float(outputSize) * outTex.x);\n  int out_y = 0;\n\n  int i = int(floor(float(out_x) / float(inputCols)));\n  int j = int(mod(float(out_x), float(inputCols)));\n  outColor = vec4(texelFetch(x, ivec2(j, i), 0).r);\n}\n";
        const flattenFragmentsProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform int outputSize;\nuniform int inputRows;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  int out_x = int(float(outputSize) * outTex.x);\n  int out_y = 0;\n\n  int rowIndex = int(mod(floor(float(out_x) / float(inputCols)), float(inputRows)));\n  int colIndex = int(mod(float(out_x), float(inputCols)));\n  int fragmentIndex = int(floor(float(out_x) / (float(inputRows) * float(inputCols))));\n  colIndex += fragmentIndex * inputCols;\n  outColor = vec4(texelFetch(x, ivec2(colIndex, rowIndex), 0).r);\n}\n";

        class Flatten extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Flatten';

                if (this.gpu) {
                    this.flattenProgram = _WebGL.webgl2.compileProgram(flattenProgramSource);
                    this.flattenFragmentsProgram = _WebGL.webgl2.compileProgram(flattenFragmentsProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                if (x.tensor.shape.length <= 1) {
                    this.output = x;
                } else {
                    this.output = new _Tensor.default([], [x.tensor.shape.reduce((a, b) => a * b, 1)]);
                    this.output.replaceTensorData(x.tensor.data);
                }
            }

            _callGPU(x) {
                if (!x.glTexture && !x.glTextureFragments) {
                    if (x.tensor.shape.length <= 2) {
                        x.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    } else if (x.tensor.shape.length > 2 && !x.is2DReshaped) {
                        x.reshapeTo2D();
                        x.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    }
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], [x.glTextureShape.reduce((a, b) => a * b, 1)]);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (x.glTextureFragments) {
                    x.convert2DRowFragmentedGLTextureToColStack();

                    _WebGL.webgl2.runProgram({
                        program: this.flattenFragmentsProgram,
                        output: this.output,
                        inputs: [{
                            input: x,
                            name: 'x'
                        }],
                        uniforms: [{
                            value: this.output.glTextureShape[1],
                            type: 'int',
                            name: 'outputSize'
                        }, {
                            value: x.glTextureShape[0],
                            type: 'int',
                            name: 'inputRows'
                        }, {
                            value: x.glTextureShape[1],
                            type: 'int',
                            name: 'inputCols'
                        }],
                        supportsTextureFragments: true
                    });

                    x.removeGLTextureFragmentsAsColStack();
                } else {
                    _WebGL.webgl2.runProgram({
                        program: this.flattenProgram,
                        output: this.output,
                        inputs: [{
                            input: x,
                            name: 'x'
                        }],
                        uniforms: [{
                            value: this.output.glTextureShape[1],
                            type: 'int',
                            name: 'outputSize'
                        }, {
                            value: x.glTextureShape[1],
                            type: 'int',
                            name: 'inputCols'
                        }],
                        supportsTextureFragments: true
                    });
                }

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = Flatten;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371}],
    409: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _last2 = _interopRequireDefault(require("lodash/last"));

        var _range2 = _interopRequireDefault(require("lodash/range"));

        var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";

        class Permute extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Permute';
                const {
                    dims = []
                } = attrs;
                this.description = `${JSON.stringify(dims)}`;
                this.dims = dims.map(dim => dim - 1);

                if (this.gpu) {
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                }
            }

            call(x) {
                if (x.tensor.shape.length <= 1 || (0, _isEqual2.default)((0, _range2.default)(x.tensor.shape.length), this.dims)) {
                    this.output = x;
                    return this.output;
                }

                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                if (this.dims.length !== x.tensor.shape.length) {
                    this.throwError('The specified dims permutation must match the number of dimensions.');
                }

                const outputShape = this.dims.map(i => x.tensor.shape[i]);
                this.output = new _Tensor.default([], outputShape);

                _ndarrayOps.default.assign(this.output.tensor, x.tensor.transpose(...this.dims));
            }

            _createIndexMap() {
                if (this.indexMap) {
                    return;
                }

                const indices = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });
                const indicesRow = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });
                const indicesCol = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });

                if (this.inputShape.length === 2) {
                    for (let i = 0; i < this.inputShape[0]; i++) {
                        _ndarrayOps.default.assigns(indicesRow.tensor.pick(i, null), i);
                    }
                } else if (this.inputShape.length === 3) {
                    for (let i = 0; i < this.inputShape[0]; i++) {
                        for (let j = 0; j < this.inputShape[1]; j++) {
                            _ndarrayOps.default.assigns(indicesRow.tensor.pick(i, j, null), i * this.inputShape[1] + j);
                        }
                    }
                } else if (this.inputShape.length === 4) {
                    for (let i = 0; i < this.inputShape[0]; i++) {
                        for (let j = 0; j < this.inputShape[1]; j++) {
                            for (let k = 0; k < this.inputShape[2]; k++) {
                                _ndarrayOps.default.assigns(indicesRow.tensor.pick(i, j, k, null), i * this.inputShape[1] * this.inputShape[2] + j * this.inputShape[2] + k);
                            }
                        }
                    }
                }

                for (let c = 0; c < (0, _last2.default)(this.inputShape); c++) {
                    _ndarrayOps.default.assigns(indicesCol.tensor.pick(...Array(this.inputShape.length - 1).fill(null), c), c);
                }

                _ndarrayOps.default.muls(indices.tensor, indicesRow.tensor, (0, _last2.default)(this.inputShape));

                _ndarrayOps.default.addeq(indices.tensor, indicesCol.tensor);

                const outputShape = this.dims.map(i => this.inputShape[i]);
                this.indexMap = new _Tensor.default([], outputShape, {
                    type: Int32Array
                });

                _ndarrayOps.default.assign(this.indexMap.tensor, indices.tensor.transpose(...this.dims));

                if (outputShape.length > 2) {
                    this.indexMap.reshapeTo2D();
                }

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int'
                });
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    this.inputShape = x.tensor.shape;

                    if (x.tensor.shape.length <= 2) {
                        x.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    } else if (x.tensor.shape.length > 2 && !x.is2DReshaped) {
                        x.reshapeTo2D();
                        x.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    }
                } else if (x.is2DReshaped || x.is2DSquareReshaped) {
                    this.inputShape = x.originalShape;
                } else {
                    this.inputShape = x.tensor.shape;
                }

                this._createIndexMap();

                if (!this.output) {
                    const outputShape = this.dims.map(i => this.inputShape[i]);
                    this.output = new _Tensor.default([], outputShape);

                    if (outputShape.length > 2) {
                        this.output.reshapeTo2D();
                    }

                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.mapInputProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }, {
                        input: this.indexMap,
                        name: 'indexMap'
                    }],
                    uniforms: [{
                        value: x.glTextureShape[1],
                        type: 'int',
                        name: 'inputCols'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else if (this.output.is2DSquareReshaped) {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = Permute;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "lodash/isEqual": 613,
        "lodash/last": 622,
        "lodash/range": 627,
        "ndarray-ops": "ndarray-ops"
    }],
    410: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayUnsqueeze = _interopRequireDefault(require("ndarray-unsqueeze"));

        var _ndarrayTile = _interopRequireDefault(require("ndarray-tile"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const programSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nout vec4 outColor;\n\nvoid main() {\n  outColor = texture(x, vec2(outTex.x, 0));\n}\n";

        class RepeatVector extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'RepeatVector';
                const {
                    n = 1
                } = attrs;
                this.n = n;
                this.description = `n = ${n}`;

                if (this.gpu) {
                    this.program = _WebGL.webgl2.compileProgram(programSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                if (x.tensor.shape.length !== 1) {
                    this.throwError('Only 1D tensor inputs allowed.');
                }

                this.output = new _Tensor.default([], [this.n, x.tensor.shape[1]]);
                this.output.tensor = (0, _ndarrayTile.default)((0, _ndarrayUnsqueeze.default)(x.tensor, 0), [this.n, 1]);
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], [this.n, x.glTextureShape[1]]);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.program,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = RepeatVector;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-tile": 668, "ndarray-unsqueeze": 670}],
    411: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _last2 = _interopRequireDefault(require("lodash/last"));

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";

        class Reshape extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Reshape';
                const {
                    target_shape = []
                } = attrs;
                this.targetShape = target_shape;
                this.description = `target shape: ${JSON.stringify(this.targetShape)}`;

                if (this.gpu) {
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                if (this.targetShape.reduce((a, b) => a * b, 1) !== x.tensor.size) {
                    this.throwError('The total size of new array must be unchanged in reshape layer.');
                }

                this.output = new _Tensor.default([], this.targetShape);
                this.output.replaceTensorData(x.tensor.data);
            }

            _createIndexMap() {
                if (this.indexMap) {
                    return;
                }

                const indices = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });
                const indicesRow = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });
                const indicesCol = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });

                if (this.inputShape.length === 2) {
                    for (let i = 0; i < this.inputShape[0]; i++) {
                        _ndarrayOps.default.assigns(indicesRow.tensor.pick(i, null), i);
                    }
                } else if (this.inputShape.length === 3) {
                    for (let i = 0; i < this.inputShape[0]; i++) {
                        for (let j = 0; j < this.inputShape[1]; j++) {
                            _ndarrayOps.default.assigns(indicesRow.tensor.pick(i, j, null), i * this.inputShape[1] + j);
                        }
                    }
                } else if (this.inputShape.length === 4) {
                    for (let i = 0; i < this.inputShape[0]; i++) {
                        for (let j = 0; j < this.inputShape[1]; j++) {
                            for (let k = 0; k < this.inputShape[2]; k++) {
                                _ndarrayOps.default.assigns(indicesRow.tensor.pick(i, j, k, null), i * this.inputShape[1] * this.inputShape[2] + j * this.inputShape[2] + k);
                            }
                        }
                    }
                }

                for (let c = 0; c < (0, _last2.default)(this.inputShape); c++) {
                    _ndarrayOps.default.assigns(indicesCol.tensor.pick(...Array(this.inputShape.length - 1).fill(null), c), c);
                }

                _ndarrayOps.default.muls(indices.tensor, indicesRow.tensor, (0, _last2.default)(this.inputShape));

                _ndarrayOps.default.addeq(indices.tensor, indicesCol.tensor);

                this.indexMap = new _Tensor.default([], this.targetShape, {
                    type: Int32Array
                });
                this.indexMap.replaceTensorData(new Int32Array(indices.tensor.data));

                if (this.targetShape.length > 2) {
                    this.indexMap.reshapeTo2D();
                }

                this.indexMap.createGLTexture({
                    type: '2d',
                    format: 'int'
                });
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    this.inputShape = x.tensor.shape;

                    if (x.tensor.shape.length <= 2) {
                        x.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    } else if (x.tensor.shape.length > 2 && !x.is2DReshaped) {
                        x.reshapeTo2D();
                        x.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    }
                } else if (x.is2DReshaped || x.is2DSquareReshaped) {
                    this.inputShape = x.originalShape;
                } else {
                    this.inputShape = x.tensor.shape;
                }

                this._createIndexMap();

                if (!this.output) {
                    this.output = new _Tensor.default([], this.targetShape);

                    if (this.targetShape.length > 2) {
                        this.output.reshapeTo2D();
                    }

                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.mapInputProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }, {
                        input: this.indexMap,
                        name: 'indexMap'
                    }],
                    uniforms: [{
                        value: x.glTextureShape[1],
                        type: 'int',
                        name: 'inputCols'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else if (this.output.is2DSquareReshaped) {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = Reshape;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "lodash/last": 622,
        "ndarray-ops": "ndarray-ops"
    }],
    412: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class SpatialDropout1D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'SpatialDropout1D';
                const {
                    p = 0.5
                } = attrs;
                this.description = `${p}`;
                this.p = Math.min(Math.max(0, p), 1);
            }

            call(x) {
                this.output = x;
                return this.output;
            }

        }

        exports.default = SpatialDropout1D;
    }, {"../../Layer": 368}],
    413: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class SpatialDropout2D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'SpatialDropout2D';
                const {
                    rate = 0.5,
                    data_format = 'channels_last'
                } = attrs;
                this.description = `${rate}`;
                this.rate = Math.min(Math.max(0, rate), 1);
                this.dataFormat = data_format;
            }

            call(x) {
                this.output = x;
                return this.output;
            }

        }

        exports.default = SpatialDropout2D;
    }, {"../../Layer": 368}],
    414: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class SpatialDropout3D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'SpatialDropout3D';
                const {
                    rate = 0.5,
                    data_format = 'channels_last'
                } = attrs;
                this.description = `${rate}`;
                this.rate = Math.min(Math.max(0, rate), 1);
                this.dataFormat = data_format;
            }

            call(x) {
                this.output = x;
                return this.output;
            }

        }

        exports.default = SpatialDropout3D;
    }, {"../../Layer": 368}],
    415: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "Dense", {
            enumerable: true,
            get: function () {
                return _Dense.default;
            }
        });
        Object.defineProperty(exports, "Activation", {
            enumerable: true,
            get: function () {
                return _Activation.default;
            }
        });
        Object.defineProperty(exports, "Dropout", {
            enumerable: true,
            get: function () {
                return _Dropout.default;
            }
        });
        Object.defineProperty(exports, "SpatialDropout1D", {
            enumerable: true,
            get: function () {
                return _SpatialDropout1D.default;
            }
        });
        Object.defineProperty(exports, "SpatialDropout2D", {
            enumerable: true,
            get: function () {
                return _SpatialDropout2D.default;
            }
        });
        Object.defineProperty(exports, "SpatialDropout3D", {
            enumerable: true,
            get: function () {
                return _SpatialDropout3D.default;
            }
        });
        Object.defineProperty(exports, "Flatten", {
            enumerable: true,
            get: function () {
                return _Flatten.default;
            }
        });
        Object.defineProperty(exports, "Reshape", {
            enumerable: true,
            get: function () {
                return _Reshape.default;
            }
        });
        Object.defineProperty(exports, "Permute", {
            enumerable: true,
            get: function () {
                return _Permute.default;
            }
        });
        Object.defineProperty(exports, "RepeatVector", {
            enumerable: true,
            get: function () {
                return _RepeatVector.default;
            }
        });

        var _Dense = _interopRequireDefault(require("./Dense"));

        var _Activation = _interopRequireDefault(require("./Activation"));

        var _Dropout = _interopRequireDefault(require("./Dropout"));

        var _SpatialDropout1D = _interopRequireDefault(require("./SpatialDropout1D"));

        var _SpatialDropout2D = _interopRequireDefault(require("./SpatialDropout2D"));

        var _SpatialDropout3D = _interopRequireDefault(require("./SpatialDropout3D"));

        var _Flatten = _interopRequireDefault(require("./Flatten"));

        var _Reshape = _interopRequireDefault(require("./Reshape"));

        var _Permute = _interopRequireDefault(require("./Permute"));

        var _RepeatVector = _interopRequireDefault(require("./RepeatVector"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }
    }, {
        "./Activation": 405,
        "./Dense": 406,
        "./Dropout": 407,
        "./Flatten": 408,
        "./Permute": 409,
        "./RepeatVector": 410,
        "./Reshape": 411,
        "./SpatialDropout1D": 412,
        "./SpatialDropout2D": 413,
        "./SpatialDropout3D": 414
    }],
    416: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const programSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform sampler2D embeddings;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 x_size = textureSize(x, 0);\n  ivec2 embeddings_size = textureSize(embeddings, 0);\n  int out_x = int(float(embeddings_size[0]) * outTex.x);\n  int out_y = int(float(x_size[0]) * outTex.y);\n\n  int index = int(texelFetch(x, ivec2(out_y, 0), 0).r);\n  outColor = texelFetch(embeddings, ivec2(out_x, index), 0);\n}\n";

        class Embedding extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Embedding';
                const {
                    input_dim = 1,
                    output_dim = 1,
                    input_length = 0,
                    mask_zero = false
                } = attrs;
                this.description = `output dimensions: ${output_dim}`;
                this.inputDim = input_dim;
                this.outputDim = output_dim;
                this.inputLength = input_length;
                this.maskZero = mask_zero;
                this.params = ['embeddings'];

                if (this.gpu) {
                    this.program = _WebGL.webgl2.compileProgram(programSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                this.output = new _Tensor.default([], [x.tensor.shape[0], this.weights['embeddings'].tensor.shape[1]]);

                for (let i = 0, len = x.tensor.shape[0]; i < len; i++) {
                    _ndarrayOps.default.assign(this.output.tensor.pick(i, null), this.weights['embeddings'].tensor.pick(x.tensor.get(i), null));
                }
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], [x.glTextureShape[1], this.weights['embeddings'].glTextureShape[1]]);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.program,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }, {
                        input: this.weights['embeddings'],
                        name: 'embeddings'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = Embedding;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    417: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "Embedding", {
            enumerable: true,
            get: function () {
                return _Embedding.default;
            }
        });

        var _Embedding = _interopRequireDefault(require("./Embedding"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }
    }, {"./Embedding": 416}],
    418: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _exportNames = {
            InputLayer: true
        };
        Object.defineProperty(exports, "InputLayer", {
            enumerable: true,
            get: function () {
                return _InputLayer.default;
            }
        });

        var _InputLayer = _interopRequireDefault(require("./InputLayer"));

        var _advanced_activations = require("./advanced_activations");

        Object.keys(_advanced_activations).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                    return _advanced_activations[key];
                }
            });
        });

        var _convolutional = require("./convolutional");

        Object.keys(_convolutional).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                    return _convolutional[key];
                }
            });
        });

        var _core = require("./core");

        Object.keys(_core).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                    return _core[key];
                }
            });
        });

        var _embeddings = require("./embeddings");

        Object.keys(_embeddings).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                    return _embeddings[key];
                }
            });
        });

        var _merge = require("./merge");

        Object.keys(_merge).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                    return _merge[key];
                }
            });
        });

        var _noise = require("./noise");

        Object.keys(_noise).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                    return _noise[key];
                }
            });
        });

        var _normalization = require("./normalization");

        Object.keys(_normalization).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                    return _normalization[key];
                }
            });
        });

        var _pooling = require("./pooling");

        Object.keys(_pooling).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                    return _pooling[key];
                }
            });
        });

        var _recurrent = require("./recurrent");

        Object.keys(_recurrent).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                    return _recurrent[key];
                }
            });
        });

        var _wrappers = require("./wrappers");

        Object.keys(_wrappers).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
                enumerable: true,
                get: function () {
                    return _wrappers[key];
                }
            });
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }
    }, {
        "./InputLayer": 384,
        "./advanced_activations": 389,
        "./convolutional": 404,
        "./core": 415,
        "./embeddings": 417,
        "./merge": 428,
        "./noise": 431,
        "./normalization": 433,
        "./pooling": 452,
        "./recurrent": 456,
        "./wrappers": 459
    }],
    419: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Merge2 = _interopRequireDefault(require("./_Merge"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _createGLSLProgram = _interopRequireDefault(require("../../webgl/dynamic/createGLSLProgram"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class Add extends _Merge2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Add';
                this.mode = 'sum';
            }

            _callCPU(inputs) {
                const outputShape = inputs[0].tensor.shape.slice();
                this.output = new _Tensor.default([], outputShape);

                for (let i = 0; i < inputs.length; i++) {
                    _ndarrayOps.default.addeq(this.output.tensor, inputs[i].tensor);
                }
            }

            _callGPU(inputs) {
                if (!this.mergeProgram) {
                    const shape = inputs[0].glTextureFragments ? inputs[0].glTextureFragmentShape : inputs[0].glTextureShape;
                    const mergeProgramSource = (0, _createGLSLProgram.default)('add', inputs.length, shape);
                    this.mergeProgram = _WebGL.webgl2.compileProgram(mergeProgramSource);
                }

                super._callGPU(inputs);
            }

        }

        exports.default = Add;
    }, {
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../webgl/dynamic/createGLSLProgram": 467,
        "./_Merge": 427,
        "ndarray-ops": "ndarray-ops"
    }],
    420: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Merge2 = _interopRequireDefault(require("./_Merge"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _createGLSLProgram = _interopRequireDefault(require("../../webgl/dynamic/createGLSLProgram"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class Average extends _Merge2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Average';
                this.mode = 'ave';
            }

            _callCPU(inputs) {
                const outputShape = inputs[0].tensor.shape.slice();
                this.output = new _Tensor.default([], outputShape);

                for (let i = 0; i < inputs.length; i++) {
                    _ndarrayOps.default.addeq(this.output.tensor, inputs[i].tensor);
                }

                _ndarrayOps.default.divseq(this.output.tensor, inputs.length);
            }

            _callGPU(inputs) {
                if (!this.mergeProgram) {
                    const shape = inputs[0].glTextureFragments ? inputs[0].glTextureFragmentShape : inputs[0].glTextureShape;
                    const mergeProgramSource = (0, _createGLSLProgram.default)('average', inputs.length, shape);
                    this.mergeProgram = _WebGL.webgl2.compileProgram(mergeProgramSource);
                }

                super._callGPU(inputs);
            }

        }

        exports.default = Average;
    }, {
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../webgl/dynamic/createGLSLProgram": 467,
        "./_Merge": 427,
        "ndarray-ops": "ndarray-ops"
    }],
    421: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _sum2 = _interopRequireDefault(require("lodash/sum"));

        var _Merge2 = _interopRequireDefault(require("./_Merge"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _createGLSLProgram = _interopRequireDefault(require("../../webgl/dynamic/createGLSLProgram"));

        var tensorUtils = _interopRequireWildcard(require("../../utils/tensorUtils"));

        var _ndarrayConcatRows = _interopRequireDefault(require("ndarray-concat-rows"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class Concatenate extends _Merge2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Concatenate';
                this.mode = 'concat';
                const {
                    axis = -1
                } = attrs;
                this.concatAxis = axis <= 0 ? axis : axis - 1;
            }

            _callCPU(inputs) {
                const outputShape = inputs[0].tensor.shape.slice();

                const _concatAxis = this.concatAxis < 0 ? outputShape.length + this.concatAxis : this.concatAxis;

                inputs.slice(1, inputs.length).forEach(x => {
                    const d = x.tensor.shape.slice()[_concatAxis];

                    outputShape[_concatAxis] += d;
                });
                this.output = new _Tensor.default([], outputShape);

                if (_concatAxis === 0) {
                    (0, _ndarrayConcatRows.default)(this.output.tensor, inputs.map(x => x.tensor));
                } else {
                    let dimsAxisSwap = [_concatAxis];

                    for (let i = 0; i < inputs[0].tensor.shape.length; i++) {
                        if (i !== _concatAxis) dimsAxisSwap.push(i);
                    }

                    (0, _ndarrayConcatRows.default)(this.output.tensor.transpose(...dimsAxisSwap), inputs.map(x => x.tensor.transpose(...dimsAxisSwap)));
                }
            }

            _callGPU(inputs) {
                inputs.forEach(input => {
                    if (!input.glTexture && !input.glTextureFragments) {
                        input.createGLTexture({
                            type: '2d',
                            format: 'float',
                            supportsTextureFragments: true
                        });
                    }
                });
                const outputShape = inputs[0].glTextureShape.slice();
                let _concatAxis = 1;

                if (inputs[0].is2DReshaped) {
                    if (this.concatAxis === -1 || this.concatAxis === inputs[0].originalShape.length - 1) {
                        _concatAxis = 1;
                    } else {
                        this.throwError('specified axis not supported for now.');
                    }
                } else {
                    if (this.concatAxis === -1 || this.concatAxis === 1) {
                        _concatAxis = 1;
                    } else if (this.concatAxis === -2 || this.concatAxis === 0) {
                        _concatAxis = 0;
                    } else {
                        this.throwError('specified axis not supported for now.');
                    }
                }

                outputShape[_concatAxis] = (0, _sum2.default)(inputs.map(input => input.glTextureShape[_concatAxis]));

                if (!this.output) {
                    this.output = new _Tensor.default([], outputShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: _concatAxis === 1
                    });

                    if (inputs[0].is1D) {
                        this.output.is1D = inputs[0].is1D;
                    } else if (inputs[0].is2DReshaped) {
                        this.output.is2DReshaped = inputs[0].is2DReshaped;
                        this.output.originalShape = inputs[0].originalShape.slice();

                        const _concatAxis = this.concatAxis < 0 ? this.output.originalShape.length + this.concatAxis : this.concatAxis;

                        this.output.originalShape[_concatAxis] = (0, _sum2.default)(inputs.map(input => input.originalShape[_concatAxis]));
                        this.output.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(this.output.originalShape, false, _concatAxis);
                    }
                }

                if (!this.mergeProgram) {
                    const outputShape = this.output.glTextureFragments ? this.output.glTextureFragmentShape : this.output.glTextureShape;
                    const mergeProgramSource = (0, _createGLSLProgram.default)('concatenate', inputs.length, inputs.map(input => input.glTextureShape), outputShape, _concatAxis);
                    this.mergeProgram = _WebGL.webgl2.compileProgram(mergeProgramSource);
                }

                _WebGL.webgl2.runProgram({
                    program: this.mergeProgram,
                    output: this.output,
                    inputs: inputs.map((input, i) => ({
                        input,
                        name: `inputs[${i}]`
                    })),
                    supportsTextureFragments: true
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else if (this.output.is2DSquareReshaped) {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = Concatenate;
    }, {
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../utils/tensorUtils": 461,
        "../../webgl/dynamic/createGLSLProgram": 467,
        "./_Merge": 427,
        "lodash/sum": 630,
        "ndarray-concat-rows": 663
    }],
    422: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Merge2 = _interopRequireDefault(require("./_Merge"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayGemm = _interopRequireDefault(require("ndarray-gemm"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const mergeProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D input1;\nuniform sampler2D input2;\nuniform int rows;\nuniform int cols;\nuniform int dotAxis1;\nuniform int dotAxis2;\nuniform int commonDim;\nuniform bool normalize;\nout vec4 outColor;\n\nvoid main() {\n  int out_x = int(float(cols) * outTex.x);\n  int out_y = int(float(rows) * outTex.y);\n\n  float sum = 0.;\n  float a = 0.;\n  float b = 0.;\n  float norm1 = 0.;\n  float norm2 = 0.;\n\n  for (int i = 0; i < commonDim; ++i) {\n    if (dotAxis1 == 0 && dotAxis2 == 0) {\n      a = texelFetch(input1, ivec2(out_y, i), 0).r;\n      b = texelFetch(input2, ivec2(out_x, i), 0).r;\n    } else if (dotAxis1 == 1 && dotAxis2 == 1) {\n      a = texelFetch(input1, ivec2(i, out_y), 0).r;\n      b = texelFetch(input2, ivec2(i, out_x), 0).r;\n    }\n\n    sum += a * b;\n\n    if (normalize) {\n      norm1 += a * a;\n      norm2 += b * b;\n    }\n  }\n\n  if (normalize) {\n    sum /= sqrt(norm1) * sqrt(norm2);\n  }\n\n  outColor = vec4(sum);\n}\n";

        class Dot extends _Merge2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Dot';
                this.mode = 'dot';
                const {
                    axes = -1,
                    normalize = false
                } = attrs;

                if (Array.isArray(axes)) {
                    this.dotAxes = [axes[0] <= 0 ? axes[0] : axes[0] - 1, axes[1] <= 0 ? axes[1] : axes[1] - 1];
                } else {
                    this.dotAxes = [axes <= 0 ? axes : axes - 1, axes <= 0 ? axes : axes - 1];
                }

                this.normalize = normalize;

                if (this.gpu) {
                    this.mergeProgram = _WebGL.webgl2.compileProgram(mergeProgramSource);
                }
            }

            _calcOutputShape(inputShapes) {
                let shape1 = inputShapes[0].slice();
                let shape2 = inputShapes[1].slice();
                shape1.splice(this.dotAxes[0], 1);
                shape2.splice(this.dotAxes[1], 1);
                this.outputShape = shape1.concat(shape2);

                if (this.outputShape.length === 1) {
                    this.outputShape.push(1);
                }
            }

            _callCPU(inputs) {
                this._calcOutputShape([inputs[0].tensor.shape, inputs[1].tensor.shape]);

                this.output = new _Tensor.default([], this.outputShape);

                if (inputs[0].tensor.shape.length === 2 && inputs[1].tensor.shape.length === 2) {
                    if (this.dotAxes[0] === 0 && this.dotAxes[1] === 0) {
                        if (this.normalize) {
                            for (let i = 0; i < inputs[0].tensor.shape[1]; i++) {
                                _ndarrayOps.default.divseq(inputs[0].tensor.pick(null, i), _ndarrayOps.default.norm2(inputs[0].tensor.pick(null, i)));
                            }

                            for (let i = 0; i < inputs[1].tensor.shape[1]; i++) {
                                _ndarrayOps.default.divseq(inputs[1].tensor.pick(null, i), _ndarrayOps.default.norm2(inputs[1].tensor.pick(null, i)));
                            }
                        }

                        (0, _ndarrayGemm.default)(this.output.tensor, inputs[0].tensor.transpose(1, 0), inputs[1].tensor);
                    } else if (this.dotAxes[0] === 1 && this.dotAxes[1] === 1) {
                        if (this.normalize) {
                            for (let i = 0; i < inputs[0].tensor.shape[0]; i++) {
                                _ndarrayOps.default.divseq(inputs[0].tensor.pick(i, null), _ndarrayOps.default.norm2(inputs[0].tensor.pick(i, null)));
                            }

                            for (let i = 0; i < inputs[1].tensor.shape[0]; i++) {
                                _ndarrayOps.default.divseq(inputs[1].tensor.pick(i, null), _ndarrayOps.default.norm2(inputs[1].tensor.pick(i, null)));
                            }
                        }

                        (0, _ndarrayGemm.default)(this.output.tensor, inputs[0].tensor, inputs[1].tensor.transpose(1, 0));
                    }
                } else {
                    this.throwError('dot mode for 3+ dim tensors not yet implemented.');
                }
            }

            _callGPU(inputs) {
                inputs.forEach(input => {
                    if (!input.glTexture && !input.glTextureFragments) {
                        input.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    }
                });

                this._calcOutputShape([inputs[0].glTextureShape, inputs[1].glTextureShape]);

                if (!this.output) {
                    this.output = new _Tensor.default([], this.outputShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                const commonDim = inputs[0].glTextureShape[this.dotAxes[0]];

                _WebGL.webgl2.runProgram({
                    program: this.mergeProgram,
                    output: this.output,
                    inputs: [{
                        input: inputs[0],
                        name: 'input1'
                    }, {
                        input: inputs[1],
                        name: 'input2'
                    }],
                    uniforms: [{
                        value: this.output.glTextureShape[0],
                        type: 'int',
                        name: 'rows'
                    }, {
                        value: this.output.glTextureShape[1],
                        type: 'int',
                        name: 'cols'
                    }, {
                        value: this.dotAxes[0],
                        type: 'int',
                        name: 'dotAxis1'
                    }, {
                        value: this.dotAxes[1],
                        type: 'int',
                        name: 'dotAxis2'
                    }, {
                        value: commonDim,
                        type: 'int',
                        name: 'commonDim'
                    }, {
                        value: +this.normalize,
                        type: 'bool',
                        name: 'normalize'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = Dot;
    }, {"../../Tensor": 370, "../../WebGL2": 371, "./_Merge": 427, "ndarray-gemm": 664, "ndarray-ops": "ndarray-ops"}],
    423: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Merge2 = _interopRequireDefault(require("./_Merge"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _createGLSLProgram = _interopRequireDefault(require("../../webgl/dynamic/createGLSLProgram"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class Maximum extends _Merge2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Maximum';
                this.mode = 'max';
            }

            _callCPU(inputs) {
                const outputShape = inputs[0].tensor.shape.slice();
                this.output = new _Tensor.default([], outputShape);

                _ndarrayOps.default.assign(this.output.tensor, inputs[0].tensor);

                for (let i = 1; i < inputs.length; i++) {
                    _ndarrayOps.default.maxeq(this.output.tensor, inputs[i].tensor);
                }
            }

            _callGPU(inputs) {
                if (!this.mergeProgram) {
                    const shape = inputs[0].glTextureFragments ? inputs[0].glTextureFragmentShape : inputs[0].glTextureShape;
                    const mergeProgramSource = (0, _createGLSLProgram.default)('maximum', inputs.length, shape);
                    this.mergeProgram = _WebGL.webgl2.compileProgram(mergeProgramSource);
                }

                super._callGPU(inputs);
            }

        }

        exports.default = Maximum;
    }, {
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../webgl/dynamic/createGLSLProgram": 467,
        "./_Merge": 427,
        "ndarray-ops": "ndarray-ops"
    }],
    424: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Merge2 = _interopRequireDefault(require("./_Merge"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _createGLSLProgram = _interopRequireDefault(require("../../webgl/dynamic/createGLSLProgram"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class Minimum extends _Merge2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Minimum';
                this.mode = 'min';
            }

            _callCPU(inputs) {
                const outputShape = inputs[0].tensor.shape.slice();
                this.output = new _Tensor.default([], outputShape);

                _ndarrayOps.default.assign(this.output.tensor, inputs[0].tensor);

                for (let i = 1; i < inputs.length; i++) {
                    _ndarrayOps.default.mineq(this.output.tensor, inputs[i].tensor);
                }
            }

            _callGPU(inputs) {
                if (!this.mergeProgram) {
                    const shape = inputs[0].glTextureFragments ? inputs[0].glTextureFragmentShape : inputs[0].glTextureShape;
                    const mergeProgramSource = (0, _createGLSLProgram.default)('minimum', inputs.length, shape);
                    this.mergeProgram = _WebGL.webgl2.compileProgram(mergeProgramSource);
                }

                super._callGPU(inputs);
            }

        }

        exports.default = Minimum;
    }, {
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../webgl/dynamic/createGLSLProgram": 467,
        "./_Merge": 427,
        "ndarray-ops": "ndarray-ops"
    }],
    425: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Merge2 = _interopRequireDefault(require("./_Merge"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _createGLSLProgram = _interopRequireDefault(require("../../webgl/dynamic/createGLSLProgram"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class Multiply extends _Merge2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Multiply';
                this.mode = 'mul';
            }

            _callCPU(inputs) {
                const outputShape = inputs[0].tensor.shape.slice();
                this.output = new _Tensor.default([], outputShape);

                _ndarrayOps.default.assigns(this.output.tensor, 1);

                for (let i = 0; i < inputs.length; i++) {
                    _ndarrayOps.default.muleq(this.output.tensor, inputs[i].tensor);
                }
            }

            _callGPU(inputs) {
                if (!this.mergeProgram) {
                    const shape = inputs[0].glTextureFragments ? inputs[0].glTextureFragmentShape : inputs[0].glTextureShape;
                    const mergeProgramSource = (0, _createGLSLProgram.default)('multiply', inputs.length, shape);
                    this.mergeProgram = _WebGL.webgl2.compileProgram(mergeProgramSource);
                }

                super._callGPU(inputs);
            }

        }

        exports.default = Multiply;
    }, {
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../webgl/dynamic/createGLSLProgram": 467,
        "./_Merge": 427,
        "ndarray-ops": "ndarray-ops"
    }],
    426: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Merge2 = _interopRequireDefault(require("./_Merge"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _createGLSLProgram = _interopRequireDefault(require("../../webgl/dynamic/createGLSLProgram"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class Subtract extends _Merge2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Subtract';
                this.mode = 'diff';
            }

            _callCPU(inputs) {
                if (inputs.length !== 2) {
                    this.throwError('Inputs should be an array of 2 Tensors.');
                }

                const outputShape = inputs[0].tensor.shape.slice();
                this.output = new _Tensor.default([], outputShape);

                _ndarrayOps.default.sub(this.output.tensor, inputs[0].tensor, inputs[1].tensor);
            }

            _callGPU(inputs) {
                if (!this.mergeProgram) {
                    const shape = inputs[0].glTextureFragments ? inputs[0].glTextureFragmentShape : inputs[0].glTextureShape;
                    const mergeProgramSource = (0, _createGLSLProgram.default)('subtract', inputs.length, shape);
                    this.mergeProgram = _WebGL.webgl2.compileProgram(mergeProgramSource);
                }

                super._callGPU(inputs);
            }

        }

        exports.default = Subtract;
    }, {
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../webgl/dynamic/createGLSLProgram": 467,
        "./_Merge": 427,
        "ndarray-ops": "ndarray-ops"
    }],
    427: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _range2 = _interopRequireDefault(require("lodash/range"));

        var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class _Merge extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = '_Merge';
                this.isMergeLayer = true;
            }

            call(inputs) {
                if (this.gpu) {
                    this._callGPU(inputs);
                } else {
                    const valid = this._validateInputs(inputs);

                    if (!valid) {
                        this.throwError('Invalid inputs to call method.');
                    }

                    this._callCPU(inputs);
                }

                return this.output;
            }

            _validateInputs(inputs) {
                const shapes = inputs.map(x => x.tensor.shape.slice());

                if (['sum', 'diff', 'mul', 'ave', 'max', 'min'].indexOf(this.mode) > -1) {
                    if (!shapes.every(shape => (0, _isEqual2.default)(shape, shapes[0]))) {
                        this.throwError(`All input shapes must be the same for mode ${this.mode}.`);
                    }
                }

                if (this.mode === 'dot') {
                    if (inputs.length !== 2) {
                        this.throwError(`Exactly 2 inputs required for mode ${this.mode}.`);
                    }

                    if (this.dotAxes[0] < 0) {
                        this.dotAxes[0] = shapes[0].length + this.dotAxes[0];
                    }

                    if (this.dotAxes[1] < 0) {
                        this.dotAxes[1] = shapes[1].length + this.dotAxes[1];
                    }

                    if (shapes[0][this.dotAxes[0]] !== shapes[1][this.dotAxes[1]]) {
                        this.throwError('Dimensions incompatibility using dot mode.');
                    }
                } else if (this.mode === 'concat') {
                    let nonConcatShapes = shapes.slice();

                    let _concatAxis = this.concatAxis < 0 ? nonConcatShapes[0].length + this.concatAxis : this.concatAxis;

                    if (this.concatAxis === 0) _concatAxis = 0;
                    (0, _range2.default)(nonConcatShapes.length).forEach(i => {
                        nonConcatShapes[i].splice(_concatAxis, 1);
                    });

                    if (!nonConcatShapes.every(shape => (0, _isEqual2.default)(shape, nonConcatShapes[0]))) {
                        this.throwError('In concat mode, all shapes must be the same except along the concat axis.');
                    }
                }

                return true;
            }

            _callCPU() {
            }

            _callGPU(inputs) {
                inputs.forEach(input => {
                    if (!input.glTexture && !input.glTextureFragments) {
                        input.createGLTexture({
                            type: '2d',
                            format: 'float',
                            supportsTextureFragments: true
                        });
                    }
                });

                if (!this.output) {
                    this.output = new _Tensor.default([], inputs[0].glTextureShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });

                    if (inputs[0].is1D) {
                        this.output.is1D = inputs[0].is1D;
                    } else if (inputs[0].is2DReshaped || inputs[0].is2DSquareReshaped) {
                        if (inputs[0].is2DReshaped) {
                            this.output.is2DReshaped = inputs[0].is2DReshaped;
                        } else if (inputs[0].is2DSquareReshaped) {
                            this.output.is2DSquareReshaped = inputs[0].is2DSquareReshaped;
                        }

                        this.output.originalShape = inputs[0].originalShape.slice();
                        this.output.indicesForReshaped = inputs[0].indicesForReshaped;
                    }
                }

                _WebGL.webgl2.runProgram({
                    program: this.mergeProgram,
                    output: this.output,
                    inputs: inputs.map((input, i) => ({
                        input,
                        name: `inputs[${i}]`
                    })),
                    supportsTextureFragments: true
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else if (this.output.is2DSquareReshaped) {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = _Merge;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "lodash/isEqual": 613, "lodash/range": 627}],
    428: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "Add", {
            enumerable: true,
            get: function () {
                return _Add.default;
            }
        });
        Object.defineProperty(exports, "Subtract", {
            enumerable: true,
            get: function () {
                return _Subtract.default;
            }
        });
        Object.defineProperty(exports, "Multiply", {
            enumerable: true,
            get: function () {
                return _Multiply.default;
            }
        });
        Object.defineProperty(exports, "Average", {
            enumerable: true,
            get: function () {
                return _Average.default;
            }
        });
        Object.defineProperty(exports, "Maximum", {
            enumerable: true,
            get: function () {
                return _Maximum.default;
            }
        });
        Object.defineProperty(exports, "Minimum", {
            enumerable: true,
            get: function () {
                return _Minimum.default;
            }
        });
        Object.defineProperty(exports, "Concatenate", {
            enumerable: true,
            get: function () {
                return _Concatenate.default;
            }
        });
        Object.defineProperty(exports, "Dot", {
            enumerable: true,
            get: function () {
                return _Dot.default;
            }
        });

        var _Add = _interopRequireDefault(require("./Add"));

        var _Subtract = _interopRequireDefault(require("./Subtract"));

        var _Multiply = _interopRequireDefault(require("./Multiply"));

        var _Average = _interopRequireDefault(require("./Average"));

        var _Maximum = _interopRequireDefault(require("./Maximum"));

        var _Minimum = _interopRequireDefault(require("./Minimum"));

        var _Concatenate = _interopRequireDefault(require("./Concatenate"));

        var _Dot = _interopRequireDefault(require("./Dot"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }
    }, {
        "./Add": 419,
        "./Average": 420,
        "./Concatenate": 421,
        "./Dot": 422,
        "./Maximum": 423,
        "./Minimum": 424,
        "./Multiply": 425,
        "./Subtract": 426
    }],
    429: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class GaussianDropout extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'GaussianDropout';
                const {
                    rate = 0.5
                } = attrs;
                this.rate = Math.min(Math.max(0, rate), 1);
            }

            call(x) {
                this.output = x;
                return this.output;
            }

        }

        exports.default = GaussianDropout;
    }, {"../../Layer": 368}],
    430: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class GaussianNoise extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'GaussianNoise';
                const {
                    stddev = 0
                } = attrs;
                this.stddev = stddev;
            }

            call(x) {
                this.output = x;
                return this.output;
            }

        }

        exports.default = GaussianNoise;
    }, {"../../Layer": 368}],
    431: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "GaussianDropout", {
            enumerable: true,
            get: function () {
                return _GaussianDropout.default;
            }
        });
        Object.defineProperty(exports, "GaussianNoise", {
            enumerable: true,
            get: function () {
                return _GaussianNoise.default;
            }
        });

        var _GaussianDropout = _interopRequireDefault(require("./GaussianDropout"));

        var _GaussianNoise = _interopRequireDefault(require("./GaussianNoise"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }
    }, {"./GaussianDropout": 429, "./GaussianNoise": 430}],
    432: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const programSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D X;\nuniform isampler2D normAxisIndexMap;\nuniform sampler2D gamma;\nuniform sampler2D beta;\nuniform sampler2D mean;\nuniform sampler2D std;\nuniform float epsilon;\nuniform bool scale;\nuniform bool center;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(X, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\nint normAxisIndex = texelFetch(normAxisIndexMap, ivec2(out_x, out_y), 0).r;\n\n  float _x = texelFetch(X, ivec2(out_x, out_y), 0).r;\n  float _mean = texelFetch(mean, ivec2(normAxisIndex, 0), 0).r;\n  float _std = texelFetch(std, ivec2(normAxisIndex, 0), 0).r;\n\n  float _gamma = 1.0;\n  if (scale) {\n    _gamma = texelFetch(gamma, ivec2(normAxisIndex, 0), 0).r;\n  }\n\n  float _beta = 0.0;\n  if (center) {\n    _beta = texelFetch(beta, ivec2(normAxisIndex, 0), 0).r;\n  }\n\n  float sum = _beta + _gamma * (_x - _mean) / sqrt(_std + epsilon);\n\n  outColor = vec4(sum);\n}\n";

        class BatchNormalization extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'BatchNormalization';
                const {
                    epsilon = 0.001,
                    axis = -1,
                    center = true,
                    scale = true
                } = attrs;
                this.epsilon = epsilon;
                this.center = center;
                this.scale = scale;
                this.axis = axis;
                this.axisNormalized = false;
                this.params = [];

                if (this.scale) {
                    this.params.push('gamma');
                }

                if (this.center) {
                    this.params.push('beta');
                }

                this.params = this.params.concat(['moving_mean', 'moving_variance']);

                if (this.gpu) {
                    this.program = _WebGL.webgl2.compileProgram(programSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                if (!this.axisNormalized) {
                    this.axis = this.axis < 0 ? x.tensor.shape.length + this.axis : this.axis - 1;
                    this.axisNormalized = true;
                }

                let broadcast = [];

                for (let d = 0; d < x.tensor.shape.length; d++) {
                    if (d === this.axis) broadcast.push(1); else broadcast.push(null);
                }

                let _gamma = new _Tensor.default([], x.tensor.shape);

                let _beta = new _Tensor.default([], x.tensor.shape);

                for (let i = 0; i < x.tensor.shape[this.axis]; i++) {
                    broadcast[this.axis] = i;

                    if (this.scale) {
                        _ndarrayOps.default.assigns(_gamma.tensor.pick(...broadcast), this.weights['gamma'].tensor.get(i));
                    }

                    if (this.center) {
                        _ndarrayOps.default.assigns(_beta.tensor.pick(...broadcast), this.weights['beta'].tensor.get(i));
                    }
                }

                let _mean = new _Tensor.default([], x.tensor.shape);

                let _std = new _Tensor.default([], x.tensor.shape);

                for (let i = 0; i < x.tensor.shape[this.axis]; i++) {
                    broadcast[this.axis] = i;

                    _ndarrayOps.default.assigns(_mean.tensor.pick(...broadcast), this.weights['moving_mean'].tensor.get(i));

                    _ndarrayOps.default.assigns(_std.tensor.pick(...broadcast), this.weights['moving_variance'].tensor.get(i) + this.epsilon);
                }

                _ndarrayOps.default.sqrteq(_std.tensor);

                this.output = new _Tensor.default(x.tensor.data, x.tensor.shape);

                _ndarrayOps.default.subeq(this.output.tensor, _mean.tensor);

                _ndarrayOps.default.diveq(this.output.tensor, _std.tensor);

                if (this.scale) {
                    _ndarrayOps.default.muleq(this.output.tensor, _gamma.tensor);
                }

                if (this.center) {
                    _ndarrayOps.default.addeq(this.output.tensor, _beta.tensor);
                }
            }

            _createIndexMap(glTextureShape, indicesForReshaped) {
                if (this.normAxisIndexMap) {
                    return;
                }

                const _normAxisIndexMap = new _Tensor.default([], this.inputShape, {
                    type: Int32Array
                });

                this.normAxisIndexMap = new _Tensor.default([], glTextureShape, {
                    type: Int32Array
                });
                const slice = Array(this.inputShape.length).fill(null);

                for (let i = 0; i < this.inputShape[this.axis]; i++) {
                    slice[this.axis] = i;

                    _ndarrayOps.default.assigns(_normAxisIndexMap.tensor.pick(...slice), i);
                }

                if (indicesForReshaped) {
                    for (let i = 0; i < indicesForReshaped.data.length; i++) {
                        this.normAxisIndexMap.tensor.data[indicesForReshaped.data[i]] = _normAxisIndexMap.tensor.data[i];
                    }
                } else {
                    this.normAxisIndexMap = _normAxisIndexMap;
                }

                this.normAxisIndexMap.createGLTexture({
                    type: '2d',
                    format: 'int',
                    supportsTextureFragments: true
                });
            }

            _callGPU(x) {
                if (!this.axisNormalized) {
                    if (x.is2DReshaped || x.is2DSquareReshaped) {
                        this.inputShape = x.originalShape;
                    } else {
                        this.inputShape = x.tensor.shape;
                    }

                    this.axis = this.axis < 0 ? this.inputShape.length + this.axis : this.axis - 1;
                    this.axisNormalized = true;
                }

                if (!x.glTexture && !x.glTextureFragments) {
                    if (x.tensor.shape.length <= 2) {
                        x.createGLTexture({
                            type: '2d',
                            format: 'float',
                            supportsTextureFragments: true
                        });
                    } else if (x.tensor.shape.length > 2 && !x.is2DReshaped) {
                        x.reshapeTo2DSquare();
                        x.createGLTexture({
                            type: '2d',
                            format: 'float',
                            supportsTextureFragments: true
                        });
                    }
                }

                this._createIndexMap(x.glTextureShape, x.indicesForReshaped);

                if (!this.output) {
                    this.output = new _Tensor.default([], x.glTextureShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });

                    if (x.is1D) {
                        this.output.is1D = x.is1D;
                    } else if (x.is2DReshaped || x.is2DSquareReshaped) {
                        if (x.is2DReshaped) {
                            this.output.is2DReshaped = x.is2DReshaped;
                        } else if (x.is2DSquareReshaped) {
                            this.output.is2DSquareReshaped = x.is2DSquareReshaped;
                        }

                        this.output.originalShape = x.originalShape;
                        this.output.indicesForReshaped = x.indicesForReshaped;
                    }
                }

                const programInputs = [{
                    input: x,
                    name: 'X'
                }, {
                    input: this.normAxisIndexMap,
                    name: 'normAxisIndexMap'
                }];

                if (this.scale) {
                    programInputs.push({
                        input: this.weights['gamma'],
                        name: 'gamma'
                    });
                }

                if (this.center) {
                    programInputs.push({
                        input: this.weights['beta'],
                        name: 'beta'
                    });
                }

                programInputs.push({
                    input: this.weights['moving_mean'],
                    name: 'mean'
                });
                programInputs.push({
                    input: this.weights['moving_variance'],
                    name: 'std'
                });
                const programUniforms = [{
                    value: this.epsilon,
                    type: 'float',
                    name: 'epsilon'
                }, {
                    value: +this.scale,
                    type: 'bool',
                    name: 'scale'
                }, {
                    value: +this.center,
                    type: 'bool',
                    name: 'center'
                }];

                _WebGL.webgl2.runProgram({
                    program: this.program,
                    output: this.output,
                    inputs: programInputs,
                    uniforms: programUniforms,
                    supportsTextureFragments: true
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else if (this.output.is2DSquareReshaped) {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = BatchNormalization;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    433: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "BatchNormalization", {
            enumerable: true,
            get: function () {
                return _BatchNormalization.default;
            }
        });

        var _BatchNormalization = _interopRequireDefault(require("./BatchNormalization"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }
    }, {"./BatchNormalization": 432}],
    434: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Pooling1D2 = _interopRequireDefault(require("./_Pooling1D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class AveragePooling1D extends _Pooling1D2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'AveragePooling1D';
                this.poolingFunc = 'average';
            }

        }

        exports.default = AveragePooling1D;
    }, {"./_Pooling1D": 449}],
    435: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Pooling2D2 = _interopRequireDefault(require("./_Pooling2D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class AveragePooling2D extends _Pooling2D2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'AveragePooling2D';
                this.poolingFunc = 'average';
            }

        }

        exports.default = AveragePooling2D;
    }, {"./_Pooling2D": 450}],
    436: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Pooling3D2 = _interopRequireDefault(require("./_Pooling3D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class AveragePooling3D extends _Pooling3D2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'AveragePooling3D';
                this.poolingFunc = 'average';
            }

        }

        exports.default = AveragePooling3D;
    }, {"./_Pooling3D": 451}],
    437: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _GlobalPooling1D2 = _interopRequireDefault(require("./_GlobalPooling1D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class GlobalAveragePooling1D extends _GlobalPooling1D2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'GlobalAveragePooling1D';
                this.poolingFunc = 'average';
            }

        }

        exports.default = GlobalAveragePooling1D;
    }, {"./_GlobalPooling1D": 446}],
    438: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _GlobalPooling2D2 = _interopRequireDefault(require("./_GlobalPooling2D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class GlobalAveragePooling2D extends _GlobalPooling2D2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'GlobalAveragePooling2D';
                this.poolingFunc = 'average';
            }

        }

        exports.default = GlobalAveragePooling2D;
    }, {"./_GlobalPooling2D": 447}],
    439: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _GlobalPooling3D2 = _interopRequireDefault(require("./_GlobalPooling3D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class GlobalAveragePooling3D extends _GlobalPooling3D2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'GlobalAveragePooling3D';
                this.poolingFunc = 'average';
            }

        }

        exports.default = GlobalAveragePooling3D;
    }, {"./_GlobalPooling3D": 448}],
    440: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _GlobalPooling1D2 = _interopRequireDefault(require("./_GlobalPooling1D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class GlobalMaxPooling1D extends _GlobalPooling1D2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'GlobalMaxPooling1D';
                this.poolingFunc = 'max';
            }

        }

        exports.default = GlobalMaxPooling1D;
    }, {"./_GlobalPooling1D": 446}],
    441: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _GlobalPooling2D2 = _interopRequireDefault(require("./_GlobalPooling2D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class GlobalMaxPooling2D extends _GlobalPooling2D2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'GlobalMaxPooling2D';
                this.poolingFunc = 'max';
            }

        }

        exports.default = GlobalMaxPooling2D;
    }, {"./_GlobalPooling2D": 447}],
    442: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _GlobalPooling3D2 = _interopRequireDefault(require("./_GlobalPooling3D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class GlobalMaxPooling3D extends _GlobalPooling3D2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'GlobalMaxPooling3D';
                this.poolingFunc = 'max';
            }

        }

        exports.default = GlobalMaxPooling3D;
    }, {"./_GlobalPooling3D": 448}],
    443: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Pooling1D2 = _interopRequireDefault(require("./_Pooling1D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class MaxPooling1D extends _Pooling1D2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'MaxPooling1D';
                this.poolingFunc = 'max';
            }

        }

        exports.default = MaxPooling1D;
    }, {"./_Pooling1D": 449}],
    444: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Pooling2D2 = _interopRequireDefault(require("./_Pooling2D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class MaxPooling2D extends _Pooling2D2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'MaxPooling2D';
                this.poolingFunc = 'max';
            }

        }

        exports.default = MaxPooling2D;
    }, {"./_Pooling2D": 450}],
    445: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Pooling3D2 = _interopRequireDefault(require("./_Pooling3D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class MaxPooling3D extends _Pooling3D2.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'MaxPooling3D';
                this.poolingFunc = 'max';
            }

        }

        exports.default = MaxPooling3D;
    }, {"./_Pooling3D": 451}],
    446: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const poolingProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform int channelDataSize;\nuniform bool isMaxPooling;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(x, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  if (isMaxPooling) {\n    // GlobalMaxPooling\n    float maxval = 0.0;\n    for (int j = 0; j < size[1]; ++j) {\n      float val = texelFetch(x, ivec2(out_x, j), 0).r;\n      if (j == 0 || val > maxval) {\n        maxval = val;\n      }\n    }\n    outColor = vec4(maxval);\n  } else {\n    // GlobalAveragePooling\n    float sum = 0.0;\n    for (int j = 0; j < size[1]; ++j) {\n      float val = texelFetch(x, ivec2(out_x, j), 0).r;\n      sum += val;\n    }\n    outColor = vec4(sum / float(channelDataSize));\n  }\n}\n";

        class _GlobalPooling1D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = '_GlobalPooling1D';
                const {
                    data_format = 'channels_last'
                } = attrs;
                this.dataFormat = data_format;
                this.poolingFunc = 'max';

                if (this.gpu) {
                    this.poolingProgram = _WebGL.webgl2.compileProgram(poolingProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                const [steps, features] = x.tensor.shape;
                this.output = new _Tensor.default([], [features]);

                for (let i = 0, len = features; i < len; i++) {
                    if (this.poolingFunc === 'max') {
                        this.output.tensor.set(i, _ndarrayOps.default.sup(x.tensor.pick(null, i)));
                    } else if (this.poolingFunc === 'average') {
                        this.output.tensor.set(i, _ndarrayOps.default.sum(x.tensor.pick(null, i)) / steps);
                    }
                }
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                this.inputShape = x.tensor.shape;

                if (!this.output) {
                    this.output = new _Tensor.default([], [this.inputShape[1]]);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                const isMaxPooling = this.poolingFunc === 'max';

                _WebGL.webgl2.runProgram({
                    program: this.poolingProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }],
                    uniforms: [{
                        value: this.inputShape[0],
                        type: 'int',
                        name: 'channelDataSize'
                    }, {
                        value: +isMaxPooling,
                        type: 'bool',
                        name: 'isMaxPooling'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = _GlobalPooling1D;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    447: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const poolingProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform int channelDataSize;\nuniform bool isMaxPooling;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(x, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  if (isMaxPooling) {\n    // GlobalMaxPooling\n    float maxval = 0.0;\n    for (int j = 0; j < size[1]; ++j) {\n      float val = texelFetch(x, ivec2(out_x, j), 0).r;\n      if (j == 0 || val > maxval) {\n        maxval = val;\n      }\n    }\n    outColor = vec4(maxval);\n  } else {\n    // GlobalAveragePooling\n    float sum = 0.0;\n    for (int j = 0; j < size[1]; ++j) {\n      float val = texelFetch(x, ivec2(out_x, j), 0).r;\n      sum += val;\n    }\n    outColor = vec4(sum / float(channelDataSize));\n  }\n}\n";

        class _GlobalPooling2D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = '_GlobalPooling2D';
                const {
                    data_format = 'channels_last'
                } = attrs;
                this.dataFormat = data_format;
                this.poolingFunc = 'max';

                if (this.gpu) {
                    this.poolingProgram = _WebGL.webgl2.compileProgram(poolingProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(1, 2, 0);
                }

                const [rows, cols, channels] = x.tensor.shape;
                this.output = new _Tensor.default([], [channels]);

                for (let i = 0, len = channels; i < len; i++) {
                    if (this.poolingFunc === 'max') {
                        this.output.tensor.set(i, _ndarrayOps.default.sup(x.tensor.pick(null, null, i)));
                    } else if (this.poolingFunc === 'average') {
                        this.output.tensor.set(i, _ndarrayOps.default.sum(x.tensor.pick(null, null, i)) / (rows * cols));
                    }
                }
            }

            _callGPU(x) {
                if (x.is2DReshaped || x.is2DSquareReshaped) {
                    this.inputShape = x.originalShape;
                } else {
                    if (this.dataFormat === 'channels_first') {
                        x.tensor = x.tensor.transpose(1, 2, 0);
                    }

                    this.inputShape = x.tensor.shape;
                    x.reshapeTo2D();
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], [this.inputShape[2]]);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                const isMaxPooling = this.poolingFunc === 'max';

                _WebGL.webgl2.runProgram({
                    program: this.poolingProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }],
                    uniforms: [{
                        value: this.inputShape[0] * this.inputShape[1],
                        type: 'int',
                        name: 'channelDataSize'
                    }, {
                        value: +isMaxPooling,
                        type: 'bool',
                        name: 'isMaxPooling'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = _GlobalPooling2D;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    448: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const poolingProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform int channelDataSize;\nuniform bool isMaxPooling;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(x, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  if (isMaxPooling) {\n    // GlobalMaxPooling\n    float maxval = 0.0;\n    for (int j = 0; j < size[1]; ++j) {\n      float val = texelFetch(x, ivec2(out_x, j), 0).r;\n      if (j == 0 || val > maxval) {\n        maxval = val;\n      }\n    }\n    outColor = vec4(maxval);\n  } else {\n    // GlobalAveragePooling\n    float sum = 0.0;\n    for (int j = 0; j < size[1]; ++j) {\n      float val = texelFetch(x, ivec2(out_x, j), 0).r;\n      sum += val;\n    }\n    outColor = vec4(sum / float(channelDataSize));\n  }\n}\n";

        class _GlobalPooling3D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = '_GlobalPooling3D';
                const {
                    data_format = 'channels_last'
                } = attrs;
                this.dataFormat = data_format;
                this.poolingFunc = 'max';

                if (this.gpu) {
                    this.poolingProgram = _WebGL.webgl2.compileProgram(poolingProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(1, 2, 3, 0);
                }

                const [dim1, dim2, dim3, channels] = x.tensor.shape;
                this.output = new _Tensor.default([], [channels]);

                for (let i = 0, len = channels; i < len; i++) {
                    if (this.poolingFunc === 'max') {
                        this.output.tensor.set(i, _ndarrayOps.default.sup(x.tensor.pick(null, null, null, i)));
                    } else if (this.poolingFunc === 'average') {
                        this.output.tensor.set(i, _ndarrayOps.default.sum(x.tensor.pick(null, null, null, i)) / (dim1 * dim2 * dim3));
                    }
                }
            }

            _callGPU(x) {
                if (x.is2DReshaped || x.is2DSquareReshaped) {
                    this.inputShape = x.originalShape;
                } else {
                    if (this.dataFormat === 'channels_first') {
                        x.tensor = x.tensor.transpose(1, 2, 3, 0);
                    }

                    this.inputShape = x.tensor.shape;
                    x.reshapeTo2D();
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], [this.inputShape[3]]);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                const isMaxPooling = this.poolingFunc === 'max';

                _WebGL.webgl2.runProgram({
                    program: this.poolingProgram,
                    output: this.output,
                    inputs: [{
                        input: x,
                        name: 'x'
                    }],
                    uniforms: [{
                        value: this.inputShape[0] * this.inputShape[1] * this.inputShape[2],
                        type: 'int',
                        name: 'channelDataSize'
                    }, {
                        value: +isMaxPooling,
                        type: 'bool',
                        name: 'isMaxPooling'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = _GlobalPooling3D;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    449: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const poolingProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D poolIndexMap;\nuniform int channels;\nuniform int poolSize;\nuniform bool isMaxPooling;\nout vec4 outColor;\n\nvoid main() {\n  int out_x = int(float(channels) * outTex.x);\n  int out_y = int(float(textureSize(poolIndexMap, 0)[1]) * outTex.y);\n\n  float val = 0.;\n  int count = 0;\n  for (int i = 0; i < poolSize; ++i) {\n    int poolIndex = texelFetch(poolIndexMap, ivec2(i, out_y), 0).r;\n    if (poolIndex != -1) {\n      float val2 = texelFetch(x, ivec2(out_x, poolIndex), 0).r;\n      if (isMaxPooling) {\n        if (count == 0 || val2 > val) {\n          val = val2;\n        }\n      } else {\n        val += val2;\n      }\n      count += 1;\n    }\n  }\n\n  if (!isMaxPooling) {\n    val /= float(count);\n  }\n\n  outColor = vec4(val);\n}\n";
        const poolingFragmentsProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D poolIndexMap;\nuniform int channels;\nuniform int poolSize;\nuniform bool isMaxPooling;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 inputSize = textureSize(x, 0);\n  ivec2 outputSize = textureSize(poolIndexMap, 0);\n  int out_x = int(float(channels) * outTex.x);\n  int out_y = int(float(outputSize[1]) * outTex.y);\n\n  float val = 0.;\n  int count = 0;\n  for (int i = 0; i < poolSize; ++i) {\n    int poolIndex = texelFetch(poolIndexMap, ivec2(i, out_y), 0).r;\n    int fragmentIndex = int(floor(float(poolIndex) / float(inputSize[1])));\n    if (poolIndex != -1) {\n      poolIndex = int(mod(float(poolIndex), float(inputSize[1])));\n      float val2 = texelFetch(x, ivec2(fragmentIndex * channels + out_x, poolIndex), 0).r;\n      if (isMaxPooling) {\n        if (count == 0 || val2 > val) {\n          val = val2;\n        }\n      } else {\n        val += val2;\n      }\n      count += 1;\n    }\n  }\n\n  if (!isMaxPooling) {\n    val /= float(count);\n  }\n\n  outColor = vec4(val);\n}\n";

        class _Pooling1D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = '_Pooling1D';
                const {
                    pool_size = 2,
                    strides = null,
                    padding = 'valid'
                } = attrs;
                this.poolSize = pool_size;
                this.strides = strides === null ? this.poolSize : strides;
                this.padding = padding;
                this.poolingFunc = 'max';
                this.description = `pool size ${this.poolSize}`;
                this.description += this.strides > 1 ? `, striding ${this.strides} striding` : '';
                this.description += this.padding === 'valid' ? `, no border padding` : ', pad to same borders';

                if (this.gpu) {
                    this.poolingProgram = _WebGL.webgl2.compileProgram(poolingProgramSource);
                    this.poolingFragmentsProgram = _WebGL.webgl2.compileProgram(poolingFragmentsProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                const stepsNew = this.padding === 'valid' ? Math.floor((x.tensor.shape[0] - this.poolSize + this.strides) / this.strides) : Math.floor((x.tensor.shape[0] + this.strides - 1) / this.strides);
                this.output = new _Tensor.default([], [stepsNew, x.tensor.shape[1]]);
                const outputStep = new _Tensor.default([], [x.tensor.shape[1]]);
                let step = this.padding === 'valid' ? 0 : Math.min(0, Math.ceil((x.tensor.shape[0] - (stepsNew - 1) * this.strides - this.poolSize) / 2));

                for (let i = 0; i < stepsNew; i++) {
                    let _step = Math.max(0, step);

                    let limit = this.poolSize + Math.min(0, step);

                    _ndarrayOps.default.assign(outputStep.tensor, x.tensor.pick(_step, null));

                    let count = 1;

                    for (let j = 1; j < limit; j++) {
                        if (_step + j > x.tensor.shape[0] - 1) {
                            break;
                        }

                        if (this.poolingFunc === 'max') {
                            _ndarrayOps.default.maxeq(outputStep.tensor, x.tensor.pick(_step + j, null));
                        } else if (this.poolingFunc === 'average') {
                            _ndarrayOps.default.addeq(outputStep.tensor, x.tensor.pick(_step + j, null));
                        }

                        count += 1;
                    }

                    if (this.poolingFunc === 'average') {
                        _ndarrayOps.default.divseq(outputStep.tensor, count);
                    }

                    _ndarrayOps.default.assign(this.output.tensor.pick(i, null), outputStep.tensor);

                    step += this.strides;
                }
            }

            _createIndexMap() {
                if (this.poolIndexMap) {
                    return;
                }

                const stepsNew = this.padding === 'valid' ? Math.floor((this.inputShape[0] - this.poolSize + this.strides) / this.strides) : Math.floor((this.inputShape[0] + this.strides - 1) / this.strides);
                this.outputShape = [stepsNew, this.inputShape[1]];
                this.poolIndexMap = new _Tensor.default([], [stepsNew, this.poolSize], {
                    type: Int32Array
                });

                _ndarrayOps.default.assigns(this.poolIndexMap.tensor, -1);

                let step = this.padding === 'valid' ? 0 : Math.min(0, Math.ceil((this.inputShape[0] - (stepsNew - 1) * this.strides - this.poolSize) / 2));

                for (let i = 0; i < stepsNew; i++) {
                    let _step = Math.max(0, step);

                    let limit = this.poolSize + Math.min(0, step);
                    let inputIndex = _step;
                    this.poolIndexMap.tensor.set(i, 0, inputIndex);

                    for (let j = 1; j < limit; j++) {
                        inputIndex = _step + j;

                        if (inputIndex <= this.inputShape[0] - 1) {
                            this.poolIndexMap.tensor.set(i, j, inputIndex);
                        } else {
                            break;
                        }
                    }

                    step += this.strides;
                }

                this.poolIndexMap.createGLTexture({
                    type: '2d',
                    format: 'int',
                    supportsTextureFragments: true
                });
            }

            _callGPU(x) {
                if (!x.glTexture && !x.glTextureFragments) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                }

                this.inputShape = x.tensor.shape;

                this._createIndexMap();

                if (!this.output) {
                    this.output = new _Tensor.default([], this.outputShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                }

                const isMaxPooling = this.poolingFunc === 'max';
                const programUniforms = [{
                    value: this.output.glTextureShape[1],
                    type: 'int',
                    name: 'channels'
                }, {
                    value: this.poolSize,
                    type: 'int',
                    name: 'poolSize'
                }, {
                    value: +isMaxPooling,
                    type: 'bool',
                    name: 'isMaxPooling'
                }];

                if (x.glTextureFragments) {
                    x.convert2DRowFragmentedGLTextureToColStack();

                    _WebGL.webgl2.runProgram({
                        program: this.poolingFragmentsProgram,
                        output: this.output,
                        inputs: [{
                            input: x,
                            name: 'x'
                        }, {
                            input: this.poolIndexMap,
                            name: 'poolIndexMap'
                        }],
                        uniforms: programUniforms,
                        supportsTextureFragments: true
                    });

                    x.removeGLTextureFragmentsAsColStack();
                } else {
                    _WebGL.webgl2.runProgram({
                        program: this.poolingProgram,
                        output: this.output,
                        inputs: [{
                            input: x,
                            name: 'x'
                        }, {
                            input: this.poolIndexMap,
                            name: 'poolIndexMap'
                        }],
                        uniforms: programUniforms,
                        supportsTextureFragments: true
                    });
                }

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = _Pooling1D;
    }, {"../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    450: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var tensorUtils = _interopRequireWildcard(require("../../utils/tensorUtils"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const poolingProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D poolIndexMap;\nuniform int channels;\nuniform int poolSize;\nuniform bool isMaxPooling;\nout vec4 outColor;\n\nvoid main() {\n  int out_x = int(float(channels) * outTex.x);\n  int out_y = int(float(textureSize(poolIndexMap, 0)[1]) * outTex.y);\n\n  float val = 0.;\n  int count = 0;\n  for (int i = 0; i < poolSize; ++i) {\n    int poolIndex = texelFetch(poolIndexMap, ivec2(i, out_y), 0).r;\n    if (poolIndex != -1) {\n      float val2 = texelFetch(x, ivec2(out_x, poolIndex), 0).r;\n      if (isMaxPooling) {\n        if (count == 0 || val2 > val) {\n          val = val2;\n        }\n      } else {\n        val += val2;\n      }\n      count += 1;\n    }\n  }\n\n  if (!isMaxPooling) {\n    val /= float(count);\n  }\n\n  outColor = vec4(val);\n}\n";
        const poolingFragmentsProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D poolIndexMap;\nuniform int channels;\nuniform int poolSize;\nuniform bool isMaxPooling;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 inputSize = textureSize(x, 0);\n  ivec2 outputSize = textureSize(poolIndexMap, 0);\n  int out_x = int(float(channels) * outTex.x);\n  int out_y = int(float(outputSize[1]) * outTex.y);\n\n  float val = 0.;\n  int count = 0;\n  for (int i = 0; i < poolSize; ++i) {\n    int poolIndex = texelFetch(poolIndexMap, ivec2(i, out_y), 0).r;\n    int fragmentIndex = int(floor(float(poolIndex) / float(inputSize[1])));\n    if (poolIndex != -1) {\n      poolIndex = int(mod(float(poolIndex), float(inputSize[1])));\n      float val2 = texelFetch(x, ivec2(fragmentIndex * channels + out_x, poolIndex), 0).r;\n      if (isMaxPooling) {\n        if (count == 0 || val2 > val) {\n          val = val2;\n        }\n      } else {\n        val += val2;\n      }\n      count += 1;\n    }\n  }\n\n  if (!isMaxPooling) {\n    val /= float(count);\n  }\n\n  outColor = vec4(val);\n}\n";

        class _Pooling2D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = '_Pooling2D';
                const {
                    pool_size = [2, 2],
                    strides = null,
                    padding = 'valid',
                    data_format = 'channels_last'
                } = attrs;

                if (Array.isArray(pool_size)) {
                    this.poolSize = pool_size;
                } else {
                    this.poolSize = [pool_size, pool_size];
                }

                if (Array.isArray(strides)) {
                    this.strides = strides;
                } else if (strides !== null) {
                    this.strides = [strides, strides];
                } else {
                    this.strides = this.poolSize;
                }

                this.padding = padding;
                this.dataFormat = data_format;
                this.poolingFunc = 'max';
                this.description = `pool size ${this.poolSize.join('x')}`;
                this.description += this.strides.some(s => s > 1) ? `, ${this.strides.join('x')} striding` : '';
                this.description += this.padding === 'valid' ? `, no border padding` : ', pad to same borders';

                if (this.gpu) {
                    this.poolingProgram = _WebGL.webgl2.compileProgram(poolingProgramSource);
                    this.poolingFragmentsProgram = _WebGL.webgl2.compileProgram(poolingFragmentsProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _calcOutputShape(inputShape) {
                if (this.outputShape && this.inputPadding) {
                    return;
                }

                const [inputRows, inputCols, inputChannels] = inputShape;
                const [nbRow, nbCol] = this.poolSize;
                const outputRows = this.padding === 'same' ? Math.floor((inputRows + this.strides[0] - 1) / this.strides[0]) : Math.floor((inputRows - nbRow + this.strides[0]) / this.strides[0]);
                const outputCols = this.padding === 'same' ? Math.floor((inputCols + this.strides[1] - 1) / this.strides[1]) : Math.floor((inputCols - nbCol + this.strides[1]) / this.strides[1]);
                const paddingRow = this.padding === 'same' ? Math.max(0, Math.floor((outputRows - 1) * this.strides[0] + nbRow - inputRows)) : 0;
                const paddingCol = this.padding === 'same' ? Math.max(0, Math.floor((outputCols - 1) * this.strides[1] + nbCol - inputCols)) : 0;
                const paddingRowBefore = Math.floor(paddingRow / 2);
                const paddingRowAfter = paddingRow - paddingRowBefore;
                const paddingColBefore = Math.floor(paddingCol / 2);
                const paddingColAfter = paddingCol - paddingColBefore;
                this.outputShape = [outputRows, outputCols, inputChannels];
                this.inputPadding = [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter];
            }

            _padInput(x) {
                if (this.padding === 'same') {
                    const [inputRows, inputCols, inputChannels] = x.tensor.shape;
                    const [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter] = this.inputPadding;
                    const newRows = inputRows + paddingRowBefore + paddingRowAfter;
                    const newCols = inputCols + paddingColBefore + paddingColAfter;

                    const _x = new _Tensor.default([], [newRows, newCols, inputChannels]);

                    if (this.poolingFunc === 'max') {
                        _ndarrayOps.default.assigns(_x.tensor, Number.NEGATIVE_INFINITY);
                    }

                    _ndarrayOps.default.assign(_x.tensor.hi(inputRows + paddingRowBefore, inputCols + paddingColBefore, inputChannels).lo(paddingRowBefore, paddingColBefore, 0), x.tensor);

                    return _x;
                }

                return x;
            }

            _callCPU(x) {
                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(1, 2, 0);
                }

                this._calcOutputShape(x.tensor.shape);

                x = this._padInput(x);
                const [inputRows, inputCols, inputChannels] = x.tensor.shape;
                const [nbRow, nbCol] = this.poolSize;
                this.output = new _Tensor.default([], this.outputShape);
                const patch = new _Tensor.default([], [nbRow, nbCol, inputChannels]);
                const [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter] = this.inputPadding;

                for (let i = 0, _i = 0; i <= inputRows - nbRow; i += this.strides[0], _i++) {
                    let nbRowInPadding = 0;

                    if (i < paddingRowBefore) {
                        nbRowInPadding = paddingRowBefore - i;
                    } else if (i + nbRow > inputRows - paddingRowAfter) {
                        nbRowInPadding = i + nbRow - (inputRows - paddingRowAfter);
                    }

                    for (let j = 0, _j = 0; j <= inputCols - nbCol; j += this.strides[1], _j++) {
                        let nbColInPadding = 0;

                        if (j < paddingColBefore) {
                            nbColInPadding = paddingColBefore - j;
                        } else if (j + nbCol > inputCols - paddingColAfter) {
                            nbColInPadding = j + nbCol - (inputCols - paddingColAfter);
                        }

                        const nbCellsEffective = (nbRow - nbRowInPadding) * (nbCol - nbColInPadding);

                        _ndarrayOps.default.assign(patch.tensor, x.tensor.hi(i + nbRow, j + nbCol, inputChannels).lo(i, j, 0));

                        for (let c = 0; c < inputChannels; c++) {
                            if (this.poolingFunc === 'max') {
                                this.output.tensor.set(_i, _j, c, _ndarrayOps.default.sup(patch.tensor.pick(null, null, c)));
                            } else if (this.poolingFunc === 'average') {
                                this.output.tensor.set(_i, _j, c, _ndarrayOps.default.sum(patch.tensor.pick(null, null, c)) / nbCellsEffective);
                            }
                        }
                    }
                }

                if (this.dataFormat === 'channels_first') {
                    this.output.tensor = this.output.tensor.transpose(2, 0, 1);
                }
            }

            _im2col(x) {
                const [inputRows, inputCols, inputChannels] = x.tensor.shape;

                if (!this.tiledInput) {
                    this.tiledInput = new _Tensor.default([], [inputRows * inputCols, inputChannels]);
                }

                const patch = new _Tensor.default([], [inputRows, inputCols]);
                const patchRaveled = new _Tensor.default([], [inputRows * inputCols]);

                for (let c = 0; c < inputChannels; c++) {
                    _ndarrayOps.default.assign(patch.tensor, x.tensor.pick(null, null, c));

                    patchRaveled.replaceTensorData(patch.tensor.data);

                    _ndarrayOps.default.assign(this.tiledInput.tensor.pick(null, c), patchRaveled.tensor);
                }

                return this.tiledInput;
            }

            _createIndexMap() {
                if (this.poolIndexMap) {
                    return;
                }

                let inputRows = this.inputShape[0];
                let inputCols = this.inputShape[1];
                const rowIndices = new _Tensor.default([], [inputRows, inputCols]);
                let index = 0;

                for (let i = 0; i < inputRows; i++) {
                    for (let j = 0; j < inputCols; j++) {
                        rowIndices.tensor.set(i, j, index);
                        index += 1;
                    }
                }

                if (this.padding === 'same') {
                    const [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter] = this.inputPadding;
                    inputRows = inputRows + paddingRowBefore + paddingRowAfter;
                    inputCols = inputCols + paddingColBefore + paddingColAfter;

                    const _rowIndices = new _Tensor.default([], [inputRows, inputCols]);

                    _ndarrayOps.default.assigns(_rowIndices.tensor, -1);

                    _ndarrayOps.default.assign(_rowIndices.tensor.hi(this.inputShape[0] + paddingRowBefore, this.inputShape[1] + paddingColBefore).lo(paddingRowBefore, paddingColBefore), rowIndices.tensor);

                    rowIndices.tensor = _rowIndices.tensor;
                }

                const [nbRow, nbCol] = this.poolSize;
                const outputRows = this.outputShape[0];
                const outputCols = this.outputShape[1];
                this.poolIndexMap = new _Tensor.default([], [outputRows * outputCols, nbRow * nbCol], {
                    type: Int32Array
                });
                const patchRow = new _Tensor.default([], [nbRow, nbCol]);
                let offset = 0;

                for (let i = 0, limit = inputRows - nbRow; i <= limit; i += this.strides[0]) {
                    for (let j = 0, limit = inputCols - nbCol; j <= limit; j += this.strides[1]) {
                        _ndarrayOps.default.assign(patchRow.tensor, rowIndices.tensor.hi(i + nbRow, j + nbCol).lo(i, j));

                        this.poolIndexMap.tensor.data.set(patchRow.tensor.data, offset);
                        offset += nbRow * nbCol;
                    }
                }

                this.poolIndexMap.createGLTexture({
                    type: '2d',
                    format: 'int',
                    supportsTextureFragments: true
                });
            }

            _callGPU(x) {
                if (x.is2DReshaped || x.is2DSquareReshaped) {
                    this.inputShape = x.originalShape;
                } else {
                    if (this.dataFormat === 'channels_first') {
                        x.tensor = x.tensor.transpose(1, 2, 0);
                    }

                    this.inputShape = x.tensor.shape;

                    this._im2col(x);

                    this.tiledInput.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                }

                this._calcOutputShape(this.inputShape);

                this._createIndexMap();

                if (!this.output) {
                    const [outputRows, outputCols, inputChannels] = this.outputShape;
                    const outputTextureShape = [outputRows * outputCols, inputChannels];
                    this.output = new _Tensor.default([], outputTextureShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                    this.output.is2DReshaped = true;
                    this.output.originalShape = this.outputShape;
                    this.output.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(this.outputShape, false, -1);
                }

                const input = x.is2DReshaped || x.is2DSquareReshaped ? x : this.tiledInput;
                const poolSize = this.poolSize[0] * this.poolSize[1];
                const isMaxPooling = this.poolingFunc === 'max';
                const programUniforms = [{
                    value: this.output.glTextureShape[1],
                    type: 'int',
                    name: 'channels'
                }, {
                    value: poolSize,
                    type: 'int',
                    name: 'poolSize'
                }, {
                    value: +isMaxPooling,
                    type: 'bool',
                    name: 'isMaxPooling'
                }];

                if (input.glTextureFragments) {
                    input.convert2DRowFragmentedGLTextureToColStack();

                    _WebGL.webgl2.runProgram({
                        program: this.poolingFragmentsProgram,
                        output: this.output,
                        inputs: [{
                            input: input,
                            name: 'x'
                        }, {
                            input: this.poolIndexMap,
                            name: 'poolIndexMap'
                        }],
                        uniforms: programUniforms,
                        supportsTextureFragments: true
                    });

                    input.removeGLTextureFragmentsAsColStack();
                } else {
                    _WebGL.webgl2.runProgram({
                        program: this.poolingProgram,
                        output: this.output,
                        inputs: [{
                            input: input,
                            name: 'x'
                        }, {
                            input: this.poolIndexMap,
                            name: 'poolIndexMap'
                        }],
                        uniforms: programUniforms,
                        supportsTextureFragments: true
                    });
                }

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                    this.output.reshapeFrom2D();

                    if (this.dataFormat === 'channels_first') {
                        this.output.tensor = this.output.tensor.transpose(2, 0, 1);
                    }
                }
            }

        }

        exports.default = _Pooling2D;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../utils/tensorUtils": 461,
        "ndarray-ops": "ndarray-ops"
    }],
    451: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var tensorUtils = _interopRequireWildcard(require("../../utils/tensorUtils"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const poolingProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D poolIndexMap;\nuniform int channels;\nuniform int poolSize;\nuniform bool isMaxPooling;\nout vec4 outColor;\n\nvoid main() {\n  int out_x = int(float(channels) * outTex.x);\n  int out_y = int(float(textureSize(poolIndexMap, 0)[1]) * outTex.y);\n\n  float val = 0.;\n  int count = 0;\n  for (int i = 0; i < poolSize; ++i) {\n    int poolIndex = texelFetch(poolIndexMap, ivec2(i, out_y), 0).r;\n    if (poolIndex != -1) {\n      float val2 = texelFetch(x, ivec2(out_x, poolIndex), 0).r;\n      if (isMaxPooling) {\n        if (count == 0 || val2 > val) {\n          val = val2;\n        }\n      } else {\n        val += val2;\n      }\n      count += 1;\n    }\n  }\n\n  if (!isMaxPooling) {\n    val /= float(count);\n  }\n\n  outColor = vec4(val);\n}\n";
        const poolingFragmentsProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D poolIndexMap;\nuniform int channels;\nuniform int poolSize;\nuniform bool isMaxPooling;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 inputSize = textureSize(x, 0);\n  ivec2 outputSize = textureSize(poolIndexMap, 0);\n  int out_x = int(float(channels) * outTex.x);\n  int out_y = int(float(outputSize[1]) * outTex.y);\n\n  float val = 0.;\n  int count = 0;\n  for (int i = 0; i < poolSize; ++i) {\n    int poolIndex = texelFetch(poolIndexMap, ivec2(i, out_y), 0).r;\n    int fragmentIndex = int(floor(float(poolIndex) / float(inputSize[1])));\n    if (poolIndex != -1) {\n      poolIndex = int(mod(float(poolIndex), float(inputSize[1])));\n      float val2 = texelFetch(x, ivec2(fragmentIndex * channels + out_x, poolIndex), 0).r;\n      if (isMaxPooling) {\n        if (count == 0 || val2 > val) {\n          val = val2;\n        }\n      } else {\n        val += val2;\n      }\n      count += 1;\n    }\n  }\n\n  if (!isMaxPooling) {\n    val /= float(count);\n  }\n\n  outColor = vec4(val);\n}\n";

        class _Pooling3D extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = '_Pooling3D';
                const {
                    pool_size = [2, 2, 2],
                    strides = null,
                    padding = 'valid',
                    data_format = 'channels_last'
                } = attrs;

                if (Array.isArray(pool_size)) {
                    this.poolSize = pool_size;
                } else {
                    this.poolSize = [pool_size, pool_size, pool_size];
                }

                if (Array.isArray(strides)) {
                    this.strides = strides;
                } else if (strides !== null) {
                    this.strides = [strides, strides, strides];
                } else {
                    this.strides = this.poolSize;
                }

                this.padding = padding;
                this.dataFormat = data_format;
                this.poolingFunc = 'max';
                this.description = `pool size ${this.poolSize.join('x')}`;
                this.description += this.strides.some(s => s > 1) ? `, ${this.strides.join('x')} striding` : '';
                this.description += this.padding === 'valid' ? `, no border padding` : ', pad to same borders';

                if (this.gpu) {
                    this.poolingProgram = _WebGL.webgl2.compileProgram(poolingProgramSource);
                    this.poolingFragmentsProgram = _WebGL.webgl2.compileProgram(poolingFragmentsProgramSource);
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _calcOutputShape(inputShape) {
                if (this.outputShape && this.inputPadding) {
                    return;
                }

                const [inputDim1, inputDim2, inputDim3, inputChannels] = inputShape;
                const [poolDim1, poolDim2, poolDim3] = this.poolSize;
                const outputDim1 = this.padding === 'same' ? Math.floor((inputDim1 + this.strides[0] - 1) / this.strides[0]) : Math.floor((inputDim1 - poolDim1 + this.strides[0]) / this.strides[0]);
                const outputDim2 = this.padding === 'same' ? Math.floor((inputDim2 + this.strides[1] - 1) / this.strides[1]) : Math.floor((inputDim2 - poolDim2 + this.strides[1]) / this.strides[1]);
                const outputDim3 = this.padding === 'same' ? Math.floor((inputDim3 + this.strides[2] - 1) / this.strides[2]) : Math.floor((inputDim3 - poolDim3 + this.strides[2]) / this.strides[2]);
                const paddingDim1 = this.padding === 'same' ? Math.max(0, Math.floor((outputDim1 - 1) * this.strides[0] + poolDim1 - inputDim1)) : 0;
                const paddingDim2 = this.padding === 'same' ? Math.max(0, Math.floor((outputDim2 - 1) * this.strides[1] + poolDim2 - inputDim2)) : 0;
                const paddingDim3 = this.padding === 'same' ? Math.max(0, Math.floor((outputDim3 - 1) * this.strides[2] + poolDim3 - inputDim3)) : 0;
                const paddingDim1Before = Math.floor(paddingDim1 / 2);
                const paddingDim1After = paddingDim1 - paddingDim1Before;
                const paddingDim2Before = Math.floor(paddingDim2 / 2);
                const paddingDim2After = paddingDim2 - paddingDim2Before;
                const paddingDim3Before = Math.floor(paddingDim3 / 2);
                const paddingDim3After = paddingDim3 - paddingDim3Before;
                this.outputShape = [outputDim1, outputDim2, outputDim3, inputChannels];
                this.inputPadding = [paddingDim1Before, paddingDim1After, paddingDim2Before, paddingDim2After, paddingDim3Before, paddingDim3After];
            }

            _padInput(x) {
                if (this.padding === 'same') {
                    const [inputDim1, inputDim2, inputDim3, inputChannels] = x.tensor.shape;
                    const [paddingDim1Before, paddingDim1After, paddingDim2Before, paddingDim2After, paddingDim3Before, paddingDim3After] = this.inputPadding;
                    const newDim1 = inputDim1 + paddingDim1Before + paddingDim1After;
                    const newDim2 = inputDim2 + paddingDim2Before + paddingDim2After;
                    const newDim3 = inputDim3 + paddingDim3Before + paddingDim3After;

                    const _x = new _Tensor.default([], [newDim1, newDim2, newDim3, inputChannels]);

                    if (this.poolingFunc === 'max') {
                        _ndarrayOps.default.assigns(_x.tensor, Number.NEGATIVE_INFINITY);
                    }

                    _ndarrayOps.default.assign(_x.tensor.hi(inputDim1 + paddingDim1Before, inputDim2 + paddingDim2Before, inputDim3 + paddingDim3Before, inputChannels).lo(paddingDim1Before, paddingDim2Before, paddingDim3Before, 0), x.tensor);

                    return _x;
                }

                return x;
            }

            _callCPU(x) {
                if (this.dataFormat === 'channels_first') {
                    x.tensor = x.tensor.transpose(1, 2, 3, 0);
                }

                this._calcOutputShape(x.tensor.shape);

                x = this._padInput(x);
                const [inputDim1, inputDim2, inputDim3, inputChannels] = x.tensor.shape;
                const [poolDim1, poolDim2, poolDim3] = this.poolSize;
                this.output = new _Tensor.default([], this.outputShape);
                let patch = new _Tensor.default([], [poolDim1, poolDim2, poolDim3, inputChannels]);
                const [paddingDim1Before, paddingDim1After, paddingDim2Before, paddingDim2After, paddingDim3Before, paddingDim3After] = this.inputPadding;

                for (let i = 0, _i = 0; i <= inputDim1 - poolDim1; i += this.strides[0], _i++) {
                    let dim1InPadding = 0;

                    if (i < paddingDim1Before) {
                        dim1InPadding = paddingDim1Before - i;
                    } else if (i + poolDim1 > inputDim1 - paddingDim1After) {
                        dim1InPadding = i + poolDim1 - (inputDim1 - paddingDim1After);
                    }

                    for (let j = 0, _j = 0; j <= inputDim2 - poolDim2; j += this.strides[1], _j++) {
                        let dim2InPadding = 0;

                        if (j < paddingDim2Before) {
                            dim2InPadding = paddingDim2Before - j;
                        } else if (j + poolDim2 > inputDim2 - paddingDim2After) {
                            dim2InPadding = j + poolDim2 - (inputDim2 - paddingDim2After);
                        }

                        for (let k = 0, _k = 0; k <= inputDim3 - poolDim3; k += this.strides[2], _k++) {
                            let dim3InPadding = 0;

                            if (k < paddingDim3Before) {
                                dim3InPadding = paddingDim3Before - k;
                            } else if (k + poolDim3 > inputDim3 - paddingDim3After) {
                                dim3InPadding = k + poolDim3 - (inputDim3 - paddingDim3After);
                            }

                            const nbCellsEffective = (poolDim1 - dim1InPadding) * (poolDim2 - dim2InPadding) * (poolDim3 - dim3InPadding);

                            _ndarrayOps.default.assign(patch.tensor, x.tensor.hi(i + poolDim1, j + poolDim2, k + poolDim3, inputChannels).lo(i, j, k, 0));

                            for (let c = 0; c < inputChannels; c++) {
                                if (this.poolingFunc === 'max') {
                                    this.output.tensor.set(_i, _j, _k, c, _ndarrayOps.default.sup(patch.tensor.pick(null, null, null, c)));
                                } else if (this.poolingFunc === 'average') {
                                    this.output.tensor.set(_i, _j, _k, c, _ndarrayOps.default.sum(patch.tensor.pick(null, null, null, c)) / nbCellsEffective);
                                }
                            }
                        }
                    }
                }

                if (this.dataFormat === 'channels_first') {
                    this.output.tensor = this.output.tensor.transpose(3, 0, 1, 2);
                }
            }

            _vol2col(x) {
                const [inputDim1, inputDim2, inputDim3, inputChannels] = x.tensor.shape;

                if (!this.tiledInput) {
                    this.tiledInput = new _Tensor.default([], [inputDim1 * inputDim2 * inputDim3, inputChannels]);
                }

                const patch = new _Tensor.default([], [inputDim1, inputDim2, inputDim3]);
                const patchRaveled = new _Tensor.default([], [inputDim1 * inputDim2 * inputDim3]);

                for (let c = 0; c < inputChannels; c++) {
                    _ndarrayOps.default.assign(patch.tensor, x.tensor.pick(null, null, null, c));

                    patchRaveled.replaceTensorData(patch.tensor.data);

                    _ndarrayOps.default.assign(this.tiledInput.tensor.pick(null, c), patchRaveled.tensor);
                }

                return this.tiledInput;
            }

            _createIndexMap() {
                if (this.poolIndexMap) {
                    return;
                }

                let inputDim1 = this.inputShape[0];
                let inputDim2 = this.inputShape[1];
                let inputDim3 = this.inputShape[2];
                const rowIndices = new _Tensor.default([], [inputDim1, inputDim2, inputDim3]);
                let index = 0;

                for (let i = 0; i < inputDim1; i++) {
                    for (let j = 0; j < inputDim2; j++) {
                        for (let k = 0; k < inputDim3; k++) {
                            rowIndices.tensor.set(i, j, k, index);
                            index += 1;
                        }
                    }
                }

                if (this.padding === 'same') {
                    const [paddingDim1Before, paddingDim1After, paddingDim2Before, paddingDim2After, paddingDim3Before, paddingDim3After] = this.inputPadding;
                    inputDim1 = inputDim1 + paddingDim1Before + paddingDim1After;
                    inputDim2 = inputDim2 + paddingDim2Before + paddingDim2After;
                    inputDim3 = inputDim3 + paddingDim3Before + paddingDim3After;

                    const _rowIndices = new _Tensor.default([], [inputDim1, inputDim2, inputDim3]);

                    _ndarrayOps.default.assigns(_rowIndices.tensor, -1);

                    _ndarrayOps.default.assign(_rowIndices.tensor.hi(this.inputShape[0] + paddingDim1Before, this.inputShape[1] + paddingDim2Before, this.inputShape[2] + paddingDim3Before).lo(paddingDim1Before, paddingDim2Before, paddingDim3Before), rowIndices.tensor);

                    rowIndices.tensor = _rowIndices.tensor;
                }

                const [poolDim1, poolDim2, poolDim3] = this.poolSize;
                const outputDim1 = this.outputShape[0];
                const outputDim2 = this.outputShape[1];
                const outputDim3 = this.outputShape[2];
                this.poolIndexMap = new _Tensor.default([], [outputDim1 * outputDim2 * outputDim3, poolDim1 * poolDim2 * poolDim3], {
                    type: Int32Array
                });
                const patchRow = new _Tensor.default([], [poolDim1, poolDim2, poolDim3]);
                let offset = 0;

                for (let i = 0, limit = inputDim1 - poolDim1; i <= limit; i += this.strides[0]) {
                    for (let j = 0, limit = inputDim2 - poolDim2; j <= limit; j += this.strides[1]) {
                        for (let k = 0, limit = inputDim3 - poolDim3; k <= limit; k += this.strides[2]) {
                            _ndarrayOps.default.assign(patchRow.tensor, rowIndices.tensor.hi(i + poolDim1, j + poolDim2, k + poolDim3).lo(i, j, k));

                            this.poolIndexMap.tensor.data.set(patchRow.tensor.data, offset);
                            offset += poolDim1 * poolDim2 * poolDim3;
                        }
                    }
                }

                this.poolIndexMap.createGLTexture({
                    type: '2d',
                    format: 'int',
                    supportsTextureFragments: true
                });
            }

            _callGPU(x) {
                if (x.is2DReshaped || x.is2DSquareReshaped) {
                    this.inputShape = x.originalShape;
                } else {
                    if (this.dataFormat === 'channels_first') {
                        x.tensor = x.tensor.transpose(1, 2, 3, 0);
                    }

                    this.inputShape = x.tensor.shape;

                    this._vol2col(x);

                    this.tiledInput.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                }

                this._calcOutputShape(this.inputShape);

                this._createIndexMap();

                if (!this.output) {
                    const [outputDim1, outputDim2, outputDim3, inputChannels] = this.outputShape;
                    const outputTextureShape = [outputDim1 * outputDim2 * outputDim3, inputChannels];
                    this.output = new _Tensor.default([], outputTextureShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float',
                        supportsTextureFragments: true
                    });
                    this.output.is2DReshaped = true;
                    this.output.originalShape = this.outputShape;
                    this.output.indicesForReshaped = tensorUtils.createIndicesFor2DReshaped(this.outputShape, false, -1);
                }

                const input = x.is2DReshaped || x.is2DSquareReshaped ? x : this.tiledInput;
                const poolSize = this.poolSize[0] * this.poolSize[1] * this.poolSize[2];
                const isMaxPooling = this.poolingFunc === 'max';
                const programUniforms = [{
                    value: this.output.glTextureShape[1],
                    type: 'int',
                    name: 'channels'
                }, {
                    value: poolSize,
                    type: 'int',
                    name: 'poolSize'
                }, {
                    value: +isMaxPooling,
                    type: 'bool',
                    name: 'isMaxPooling'
                }];

                if (input.glTextureFragments) {
                    input.convert2DRowFragmentedGLTextureToColStack();

                    _WebGL.webgl2.runProgram({
                        program: this.poolingFragmentsProgram,
                        output: this.output,
                        inputs: [{
                            input: input,
                            name: 'x'
                        }, {
                            input: this.poolIndexMap,
                            name: 'poolIndexMap'
                        }],
                        uniforms: programUniforms,
                        supportsTextureFragments: true
                    });

                    input.removeGLTextureFragmentsAsColStack();
                } else {
                    _WebGL.webgl2.runProgram({
                        program: this.poolingProgram,
                        output: this.output,
                        inputs: [{
                            input: input,
                            name: 'x'
                        }, {
                            input: this.poolIndexMap,
                            name: 'poolIndexMap'
                        }],
                        uniforms: programUniforms
                    });
                }

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                    this.output.reshapeFrom2D();

                    if (this.dataFormat === 'channels_first') {
                        this.output.tensor = this.output.tensor.transpose(3, 0, 1, 2);
                    }
                }
            }

        }

        exports.default = _Pooling3D;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../utils/tensorUtils": 461,
        "ndarray-ops": "ndarray-ops"
    }],
    452: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "MaxPooling1D", {
            enumerable: true,
            get: function () {
                return _MaxPooling1D.default;
            }
        });
        Object.defineProperty(exports, "MaxPooling2D", {
            enumerable: true,
            get: function () {
                return _MaxPooling2D.default;
            }
        });
        Object.defineProperty(exports, "MaxPooling3D", {
            enumerable: true,
            get: function () {
                return _MaxPooling3D.default;
            }
        });
        Object.defineProperty(exports, "AveragePooling1D", {
            enumerable: true,
            get: function () {
                return _AveragePooling1D.default;
            }
        });
        Object.defineProperty(exports, "AveragePooling2D", {
            enumerable: true,
            get: function () {
                return _AveragePooling2D.default;
            }
        });
        Object.defineProperty(exports, "AveragePooling3D", {
            enumerable: true,
            get: function () {
                return _AveragePooling3D.default;
            }
        });
        Object.defineProperty(exports, "GlobalMaxPooling1D", {
            enumerable: true,
            get: function () {
                return _GlobalMaxPooling1D.default;
            }
        });
        Object.defineProperty(exports, "GlobalMaxPooling2D", {
            enumerable: true,
            get: function () {
                return _GlobalMaxPooling2D.default;
            }
        });
        Object.defineProperty(exports, "GlobalMaxPooling3D", {
            enumerable: true,
            get: function () {
                return _GlobalMaxPooling3D.default;
            }
        });
        Object.defineProperty(exports, "GlobalAveragePooling1D", {
            enumerable: true,
            get: function () {
                return _GlobalAveragePooling1D.default;
            }
        });
        Object.defineProperty(exports, "GlobalAveragePooling2D", {
            enumerable: true,
            get: function () {
                return _GlobalAveragePooling2D.default;
            }
        });
        Object.defineProperty(exports, "GlobalAveragePooling3D", {
            enumerable: true,
            get: function () {
                return _GlobalAveragePooling3D.default;
            }
        });

        var _MaxPooling1D = _interopRequireDefault(require("./MaxPooling1D"));

        var _MaxPooling2D = _interopRequireDefault(require("./MaxPooling2D"));

        var _MaxPooling3D = _interopRequireDefault(require("./MaxPooling3D"));

        var _AveragePooling1D = _interopRequireDefault(require("./AveragePooling1D"));

        var _AveragePooling2D = _interopRequireDefault(require("./AveragePooling2D"));

        var _AveragePooling3D = _interopRequireDefault(require("./AveragePooling3D"));

        var _GlobalMaxPooling1D = _interopRequireDefault(require("./GlobalMaxPooling1D"));

        var _GlobalMaxPooling2D = _interopRequireDefault(require("./GlobalMaxPooling2D"));

        var _GlobalMaxPooling3D = _interopRequireDefault(require("./GlobalMaxPooling3D"));

        var _GlobalAveragePooling1D = _interopRequireDefault(require("./GlobalAveragePooling1D"));

        var _GlobalAveragePooling2D = _interopRequireDefault(require("./GlobalAveragePooling2D"));

        var _GlobalAveragePooling3D = _interopRequireDefault(require("./GlobalAveragePooling3D"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }
    }, {
        "./AveragePooling1D": 434,
        "./AveragePooling2D": 435,
        "./AveragePooling3D": 436,
        "./GlobalAveragePooling1D": 437,
        "./GlobalAveragePooling2D": 438,
        "./GlobalAveragePooling3D": 439,
        "./GlobalMaxPooling1D": 440,
        "./GlobalMaxPooling2D": 441,
        "./GlobalMaxPooling3D": 442,
        "./MaxPooling1D": 443,
        "./MaxPooling2D": 444,
        "./MaxPooling3D": 445
    }],
    453: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var activations = _interopRequireWildcard(require("../../activations"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayBlasLevel = require("ndarray-blas-level2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var _cwise = _interopRequireDefault(require("cwise"));

        var activationProgramSources = _interopRequireWildcard(require("../../activations/programSources"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        const copyTextureProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D source;\nout vec4 outColor;\n\nvoid main(void) {\n  outColor = texture(source, vec2(outTex.x, outTex.y));\n}\n";
        const matMulProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D A;\nuniform sampler2D B;\nuniform sampler2D C;\nuniform bool addC;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 A_size = textureSize(A, 0);\n  ivec2 B_size = textureSize(B, 0);\n  int out_x = int(float(B_size[0]) * outTex.x);\n  int out_y = int(float(A_size[1]) * outTex.y);\n  int commonDim = A_size[0];\n\n  float sum = 0.;\n  for (int i = 0; i < commonDim; ++i) {\n    float a = texelFetch(A, ivec2(i, out_y), 0).r;\n    float b = texelFetch(B, ivec2(out_x, i), 0).r;\n    sum += a * b;\n  }\n\n  if (addC) {\n    sum += texelFetch(C, ivec2(out_x, 0), 0).r;\n  }\n\n  outColor = vec4(sum);\n}\n";
        const gateSummationProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D t1;\nuniform sampler2D t2;\nuniform sampler2D bias;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(bias, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  float t1_val = texelFetch(t1, ivec2(out_x, out_y), 0).r;\n  float t2_val = texelFetch(t2, ivec2(out_x, out_y), 0).r;\n  float bias_val = texelFetch(bias, ivec2(out_x, out_y), 0).r;\n\n  outColor = vec4(t1_val + t2_val + bias_val);\n}\n";
        const gateProductProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D t1;\nuniform sampler2D t2;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(t1, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  float t1_val = texelFetch(t1, ivec2(out_x, out_y), 0).r;\n  float t2_val = texelFetch(t2, ivec2(out_x, out_y), 0).r;\n\n  outColor = vec4(t1_val * t2_val);\n}\n";
        const timestepReadProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform int index;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(x, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n\n  outColor = vec4(texelFetch(x, ivec2(out_x, index), 0).r);\n}\n";
        const timestepWriteProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform sampler2D y;\nuniform int index;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(y, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  if (out_y == index) {\n    outColor = vec4(texelFetch(x, ivec2(out_x, 0), 0).r);\n  } else {\n    outColor = vec4(texelFetch(y, ivec2(out_x, out_y), 0).r);\n  }\n}\n";
        const updateProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D h;\nuniform sampler2D htm1;\nuniform sampler2D z;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(h, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  float h_val = texelFetch(h, ivec2(out_x, out_y), 0).r;\n  float htm1_val = texelFetch(htm1, ivec2(out_x, out_y), 0).r;\n  float z_val = texelFetch(z, ivec2(out_x, out_y), 0).r;\n\n  outColor = vec4(h_val * (float(1.0) - z_val) + htm1_val * z_val);\n}\n";

        class GRU extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                Object.defineProperty(this, "_combine", {
                    configurable: true,
                    enumerable: true,
                    writable: true,
                    value: (0, _cwise.default)({
                        args: ['array', 'array', 'array', 'array'],
                        body: function (_y, _x1, _x2, _b) {
                            _y = _x1 + _x2 + _b;
                        }
                    })
                });
                Object.defineProperty(this, "_update", {
                    configurable: true,
                    enumerable: true,
                    writable: true,
                    value: (0, _cwise.default)({
                        args: ['array', 'array', 'array'],
                        body: function (_h, _htm1, _z) {
                            _h = _h * (1 - _z) + _htm1 * _z;
                        }
                    })
                });
                this.layerClass = 'GRU';
                const {
                    units = 1,
                    activation = 'tanh',
                    use_bias = true,
                    recurrent_activation = 'hard_sigmoid',
                    return_sequences = false,
                    go_backwards = false,
                    stateful = false
                } = attrs;
                this.units = units;
                this.activation = activation;
                this.recurrentActivation = recurrent_activation;
                this.activationFunc = activations[activation];
                this.recurrentActivationFunc = activations[recurrent_activation];
                this.use_bias = use_bias;
                this.returnSequences = return_sequences;
                this.goBackwards = go_backwards;
                this.stateful = stateful;
                this.params = this.use_bias ? ['kernel', 'recurrent_kernel', 'bias'] : ['kernel', 'recurrent_kernel'];
                this.description = `output dimensions: ${this.units}`;
                this.description += this.activation !== 'linear' ? `, ${this.activation} activation` : '';
                this.description += this.recurrentActivation !== 'linear' ? `, ${this.recurrentActivation} recurrent activation` : '';
                this.description += this.returnSequences ? `, return sequences` : '';
                this.description += this.goBackwards ? `, backward direction` : '';
                this.description += this.stateful ? `, stateful` : '';

                if (this.gpu) {
                    this.copyTextureProgram = _WebGL.webgl2.compileProgram(copyTextureProgramSource);
                    this.matMulProgram = _WebGL.webgl2.compileProgram(matMulProgramSource);
                    this.activationProgram = _WebGL.webgl2.compileProgram(activationProgramSources[this.activation]);
                    this.recurrentActivationProgram = _WebGL.webgl2.compileProgram(activationProgramSources[this.recurrentActivation]);
                    this.gateSummationProgram = _WebGL.webgl2.compileProgram(gateSummationProgramSource);
                    this.gateProductProgram = _WebGL.webgl2.compileProgram(gateProductProgramSource);
                    this.timestepReadProgram = _WebGL.webgl2.compileProgram(timestepReadProgramSource);
                    this.timestepWriteProgram = _WebGL.webgl2.compileProgram(timestepWriteProgramSource);
                    this.updateProgram = _WebGL.webgl2.compileProgram(updateProgramSource);
                }
            }

            setWeights(weightsArr) {
                super.setWeights(weightsArr);
                const shape_W = this.weights['kernel'].tensor.shape;
                this.weights['W_z'] = new _Tensor.default([], [shape_W[0], this.units]);
                this.weights['W_r'] = new _Tensor.default([], [shape_W[0], this.units]);
                this.weights['W_h'] = new _Tensor.default([], [shape_W[0], this.units]);

                _ndarrayOps.default.assign(this.weights['W_z'].tensor, this.weights['kernel'].tensor.hi(shape_W[0], this.units).lo(0, 0));

                _ndarrayOps.default.assign(this.weights['W_r'].tensor, this.weights['kernel'].tensor.hi(shape_W[0], 2 * this.units).lo(0, this.units));

                _ndarrayOps.default.assign(this.weights['W_h'].tensor, this.weights['kernel'].tensor.hi(shape_W[0], 3 * this.units).lo(0, 2 * this.units));

                const shape_U = this.weights['recurrent_kernel'].tensor.shape;
                this.weights['U_z'] = new _Tensor.default([], [shape_U[0], this.units]);
                this.weights['U_r'] = new _Tensor.default([], [shape_U[0], this.units]);
                this.weights['U_h'] = new _Tensor.default([], [shape_U[0], this.units]);

                _ndarrayOps.default.assign(this.weights['U_z'].tensor, this.weights['recurrent_kernel'].tensor.hi(shape_U[0], this.units).lo(0, 0));

                _ndarrayOps.default.assign(this.weights['U_r'].tensor, this.weights['recurrent_kernel'].tensor.hi(shape_U[0], 2 * this.units).lo(0, this.units));

                _ndarrayOps.default.assign(this.weights['U_h'].tensor, this.weights['recurrent_kernel'].tensor.hi(shape_U[0], 3 * this.units).lo(0, 2 * this.units));

                this.weights['b_z'] = new _Tensor.default([], [this.units]);
                this.weights['b_r'] = new _Tensor.default([], [this.units]);
                this.weights['b_h'] = new _Tensor.default([], [this.units]);

                if (this.use_bias) {
                    _ndarrayOps.default.assign(this.weights['b_z'].tensor, this.weights['bias'].tensor.hi(this.units).lo(0));

                    _ndarrayOps.default.assign(this.weights['b_r'].tensor, this.weights['bias'].tensor.hi(2 * this.units).lo(this.units));

                    _ndarrayOps.default.assign(this.weights['b_h'].tensor, this.weights['bias'].tensor.hi(3 * this.units).lo(2 * this.units));
                }

                if (this.gpu) {
                    const names = ['W_z', 'W_r', 'W_h', 'U_z', 'U_r', 'U_h', 'b_z', 'b_r', 'b_h'];
                    names.forEach(name => {
                        this.weights[name].createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    });
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                const dimUpdateGate = this.weights['b_z'].tensor.shape[0];
                const dimResetGate = this.weights['b_r'].tensor.shape[0];
                const dimHiddenState = this.weights['b_h'].tensor.shape[0];
                const currentUpdateGateState = new _Tensor.default([], [dimUpdateGate]);
                const tempXZ = new _Tensor.default([], [dimUpdateGate]);
                const tempHZ = new _Tensor.default([], [dimUpdateGate]);
                const currentResetGateState = new _Tensor.default([], [dimResetGate]);
                const tempXR = new _Tensor.default([], [dimResetGate]);
                const tempHR = new _Tensor.default([], [dimResetGate]);
                const currentHiddenState = this.stateful && this.currentHiddenState ? this.currentHiddenState : new _Tensor.default([], [dimHiddenState]);
                const tempXH = new _Tensor.default([], [dimHiddenState]);
                const tempHH = new _Tensor.default([], [dimHiddenState]);
                const previousHiddenState = new _Tensor.default([], [dimHiddenState]);
                this.hiddenStateSequence = new _Tensor.default([], [x.tensor.shape[0], dimHiddenState]);
                const currentX = new _Tensor.default([], [x.tensor.shape[1]]);

                const _step = () => {
                    _ndarrayOps.default.assign(previousHiddenState.tensor, currentHiddenState.tensor);

                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['W_z'].tensor.transpose(1, 0), currentX.tensor, 1, tempXZ.tensor);
                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['U_z'].tensor.transpose(1, 0), previousHiddenState.tensor, 1, tempHZ.tensor);

                    this._combine(currentUpdateGateState.tensor, tempXZ.tensor, tempHZ.tensor, this.weights['b_z'].tensor);

                    this.recurrentActivationFunc(currentUpdateGateState);
                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['W_r'].tensor.transpose(1, 0), currentX.tensor, 1, tempXR.tensor);
                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['U_r'].tensor.transpose(1, 0), previousHiddenState.tensor, 1, tempHR.tensor);

                    this._combine(currentResetGateState.tensor, tempXR.tensor, tempHR.tensor, this.weights['b_r'].tensor);

                    this.recurrentActivationFunc(currentResetGateState);

                    _ndarrayOps.default.muleq(currentResetGateState.tensor, previousHiddenState.tensor);

                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['W_h'].tensor.transpose(1, 0), currentX.tensor, 1, tempXH.tensor);
                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['U_h'].tensor.transpose(1, 0), currentResetGateState.tensor, 1, tempHH.tensor);

                    this._combine(currentHiddenState.tensor, tempXH.tensor, tempHH.tensor, this.weights['b_h'].tensor);

                    this.activationFunc(currentHiddenState);

                    this._update(currentHiddenState.tensor, previousHiddenState.tensor, currentUpdateGateState.tensor);
                };

                for (let i = 0, len = x.tensor.shape[0]; i < len; i++) {
                    const inputIndex = this.goBackwards ? len - i - 1 : i;

                    _ndarrayOps.default.assign(currentX.tensor, x.tensor.pick(inputIndex, null));

                    const tempTensors = [tempXZ, tempHZ, tempXR, tempHR, tempXH, tempHH];
                    tempTensors.forEach(temp => _ndarrayOps.default.assigns(temp.tensor, 0));

                    _step();

                    if (this.returnSequences) {
                        _ndarrayOps.default.assign(this.hiddenStateSequence.tensor.pick(i, null), currentHiddenState.tensor);
                    }
                }

                if (this.returnSequences) {
                    this.output = this.hiddenStateSequence;
                } else {
                    this.output = currentHiddenState;
                }

                if (this.stateful) {
                    this.currentHiddenState = currentHiddenState;
                }
            }

            _stepGPU() {
                _WebGL.webgl2.runProgram({
                    program: this.copyTextureProgram,
                    output: this.previousHiddenState,
                    inputs: [{
                        input: this.currentHiddenState,
                        name: 'source'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempXZ,
                    inputs: [{
                        input: this.currentX,
                        name: 'A'
                    }, {
                        input: this.weights['W_z'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempHZ,
                    inputs: [{
                        input: this.previousHiddenState,
                        name: 'A'
                    }, {
                        input: this.weights['U_z'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.gateSummationProgram,
                    output: this.currentUpdateGateStatePreactiv,
                    inputs: [{
                        input: this.tempXZ,
                        name: 't1'
                    }, {
                        input: this.tempHZ,
                        name: 't2'
                    }, {
                        input: this.weights['b_z'],
                        name: 'bias'
                    }]
                });

                if (this.recurrentActivation !== 'linear') {
                    _WebGL.webgl2.runProgram({
                        program: this.recurrentActivationProgram,
                        output: this.currentUpdateGateState,
                        inputs: [{
                            input: this.currentUpdateGateStatePreactiv,
                            name: 'x'
                        }]
                    });
                } else {
                    this.currentUpdateGateState = this.currentUpdateGateStatePreactiv;
                }

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempXR,
                    inputs: [{
                        input: this.currentX,
                        name: 'A'
                    }, {
                        input: this.weights['W_r'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempHR,
                    inputs: [{
                        input: this.previousHiddenState,
                        name: 'A'
                    }, {
                        input: this.weights['U_r'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.gateSummationProgram,
                    output: this.currentResetGateStatePreactiv,
                    inputs: [{
                        input: this.tempXR,
                        name: 't1'
                    }, {
                        input: this.tempHR,
                        name: 't2'
                    }, {
                        input: this.weights['b_r'],
                        name: 'bias'
                    }]
                });

                if (this.recurrentActivation !== 'linear') {
                    _WebGL.webgl2.runProgram({
                        program: this.recurrentActivationProgram,
                        output: this.currentResetGateState,
                        inputs: [{
                            input: this.currentResetGateStatePreactiv,
                            name: 'x'
                        }]
                    });
                } else {
                    this.currentResetGateState = this.currentResetGateStatePreactiv;
                }

                _WebGL.webgl2.runProgram({
                    program: this.copyTextureProgram,
                    output: this.currentResetGateStateCopy,
                    inputs: [{
                        input: this.currentResetGateState,
                        name: 'source'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.gateProductProgram,
                    output: this.currentResetGateState,
                    inputs: [{
                        input: this.currentResetGateStateCopy,
                        name: 't1'
                    }, {
                        input: this.previousHiddenState,
                        name: 't2'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempXH,
                    inputs: [{
                        input: this.currentX,
                        name: 'A'
                    }, {
                        input: this.weights['W_h'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempHH,
                    inputs: [{
                        input: this.currentResetGateState,
                        name: 'A'
                    }, {
                        input: this.weights['U_h'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.gateSummationProgram,
                    output: this.currentHiddenStatePreactiv,
                    inputs: [{
                        input: this.tempXH,
                        name: 't1'
                    }, {
                        input: this.tempHH,
                        name: 't2'
                    }, {
                        input: this.weights['b_h'],
                        name: 'bias'
                    }]
                });

                if (this.activation !== 'linear') {
                    _WebGL.webgl2.runProgram({
                        program: this.activationProgram,
                        output: this.currentHiddenState,
                        inputs: [{
                            input: this.currentHiddenStatePreactiv,
                            name: 'x'
                        }]
                    });
                } else {
                    this.currentHiddenState = this.currentHiddenStatePreactiv;
                }

                _WebGL.webgl2.runProgram({
                    program: this.copyTextureProgram,
                    output: this.currentHiddenStateCopy,
                    inputs: [{
                        input: this.currentHiddenState,
                        name: 'source'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.updateProgram,
                    output: this.currentHiddenState,
                    inputs: [{
                        input: this.currentHiddenStateCopy,
                        name: 'h'
                    }, {
                        input: this.previousHiddenState,
                        name: 'htm1'
                    }, {
                        input: this.currentUpdateGateState,
                        name: 'z'
                    }]
                });
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                const dimUpdateGate = this.weights['b_z'].glTextureShape[1];
                const dimResetGate = this.weights['b_r'].glTextureShape[1];
                const dimHiddenState = this.weights['b_h'].glTextureShape[1];

                if (!this.currentHiddenState || !this.stateful) {
                    this.currentHiddenState = new _Tensor.default([], [dimHiddenState]);
                    this.currentHiddenState.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentHiddenStateCopy) {
                    this.currentHiddenStateCopy = new _Tensor.default([], [dimHiddenState]);
                    this.currentHiddenStateCopy.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentHiddenStatePreactiv) {
                    this.currentHiddenStatePreactiv = new _Tensor.default([], [dimHiddenState]);
                    this.currentHiddenStatePreactiv.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentUpdateGateState) {
                    this.currentUpdateGateState = new _Tensor.default([], [dimUpdateGate]);
                    this.currentUpdateGateState.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentUpdateGateStatePreactiv) {
                    this.currentUpdateGateStatePreactiv = new _Tensor.default([], [dimUpdateGate]);
                    this.currentUpdateGateStatePreactiv.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempXZ) {
                    this.tempXZ = new _Tensor.default([], [dimUpdateGate]);
                    this.tempXZ.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempHZ) {
                    this.tempHZ = new _Tensor.default([], [dimUpdateGate]);
                    this.tempHZ.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentResetGateState) {
                    this.currentResetGateState = new _Tensor.default([], [dimResetGate]);
                    this.currentResetGateState.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentResetGateStateCopy) {
                    this.currentResetGateStateCopy = new _Tensor.default([], [dimResetGate]);
                    this.currentResetGateStateCopy.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentResetGateStatePreactiv) {
                    this.currentResetGateStatePreactiv = new _Tensor.default([], [dimResetGate]);
                    this.currentResetGateStatePreactiv.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempXR) {
                    this.tempXR = new _Tensor.default([], [dimResetGate]);
                    this.tempXR.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempHR) {
                    this.tempHR = new _Tensor.default([], [dimResetGate]);
                    this.tempHR.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempXH) {
                    this.tempXH = new _Tensor.default([], [dimHiddenState]);
                    this.tempXH.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempHH) {
                    this.tempHH = new _Tensor.default([], [dimHiddenState]);
                    this.tempHH.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.previousHiddenState) {
                    this.previousHiddenState = new _Tensor.default([], [dimHiddenState]);
                    this.previousHiddenState.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.hiddenStateSequence) {
                    this.hiddenStateSequence = new _Tensor.default([], [x.glTextureShape[0], dimHiddenState]);
                    this.hiddenStateSequence.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.hiddenStateSequenceCopy) {
                    this.hiddenStateSequenceCopy = new _Tensor.default([], [x.glTextureShape[0], dimHiddenState]);
                    this.hiddenStateSequenceCopy.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentX) {
                    this.currentX = new _Tensor.default([], [x.glTextureShape[1]]);
                    this.currentX.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                for (let i = 0, len = x.glTextureShape[0]; i < len; i++) {
                    const inputIndex = this.goBackwards ? len - i - 1 : i;

                    _WebGL.webgl2.runProgram({
                        program: this.timestepReadProgram,
                        output: this.currentX,
                        inputs: [{
                            input: x,
                            name: 'x'
                        }],
                        uniforms: [{
                            value: inputIndex,
                            type: 'int',
                            name: 'index'
                        }]
                    });

                    this._stepGPU();

                    if (this.returnSequences) {
                        _WebGL.webgl2.runProgram({
                            program: this.copyTextureProgram,
                            output: this.hiddenStateSequenceCopy,
                            inputs: [{
                                input: this.hiddenStateSequence,
                                name: 'source'
                            }]
                        });

                        _WebGL.webgl2.runProgram({
                            program: this.timestepWriteProgram,
                            output: this.hiddenStateSequence,
                            inputs: [{
                                input: this.currentHiddenState,
                                name: 'x'
                            }, {
                                input: this.hiddenStateSequenceCopy,
                                name: 'y'
                            }],
                            uniforms: [{
                                value: i,
                                type: 'int',
                                name: 'index'
                            }]
                        });
                    }
                }

                if (this.returnSequences) {
                    this.output = this.hiddenStateSequence;
                } else {
                    this.output = this.currentHiddenState;
                }

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = GRU;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../activations": 374,
        "../../activations/programSources": 376,
        "cwise": 361,
        "ndarray-blas-level2": 650,
        "ndarray-ops": "ndarray-ops"
    }],
    454: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var activations = _interopRequireWildcard(require("../../activations"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayBlasLevel = require("ndarray-blas-level2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var _cwise = _interopRequireDefault(require("cwise"));

        var activationProgramSources = _interopRequireWildcard(require("../../activations/programSources"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        const copyTextureProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D source;\nout vec4 outColor;\n\nvoid main(void) {\n  outColor = texture(source, vec2(outTex.x, outTex.y));\n}\n";
        const matMulProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D A;\nuniform sampler2D B;\nuniform sampler2D C;\nuniform bool addC;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 A_size = textureSize(A, 0);\n  ivec2 B_size = textureSize(B, 0);\n  int out_x = int(float(B_size[0]) * outTex.x);\n  int out_y = int(float(A_size[1]) * outTex.y);\n  int commonDim = A_size[0];\n\n  float sum = 0.;\n  for (int i = 0; i < commonDim; ++i) {\n    float a = texelFetch(A, ivec2(i, out_y), 0).r;\n    float b = texelFetch(B, ivec2(out_x, i), 0).r;\n    sum += a * b;\n  }\n\n  if (addC) {\n    sum += texelFetch(C, ivec2(out_x, 0), 0).r;\n  }\n\n  outColor = vec4(sum);\n}\n";
        const gateSummationProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D t1;\nuniform sampler2D t2;\nuniform sampler2D bias;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(bias, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  float t1_val = texelFetch(t1, ivec2(out_x, out_y), 0).r;\n  float t2_val = texelFetch(t2, ivec2(out_x, out_y), 0).r;\n  float bias_val = texelFetch(bias, ivec2(out_x, out_y), 0).r;\n\n  outColor = vec4(t1_val + t2_val + bias_val);\n}\n";
        const gateProductProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D t1;\nuniform sampler2D t2;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(t1, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  float t1_val = texelFetch(t1, ivec2(out_x, out_y), 0).r;\n  float t2_val = texelFetch(t2, ivec2(out_x, out_y), 0).r;\n\n  outColor = vec4(t1_val * t2_val);\n}\n";
        const timestepReadProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform int index;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(x, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n\n  outColor = vec4(texelFetch(x, ivec2(out_x, index), 0).r);\n}\n";
        const timestepWriteProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform sampler2D y;\nuniform int index;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(y, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  if (out_y == index) {\n    outColor = vec4(texelFetch(x, ivec2(out_x, 0), 0).r);\n  } else {\n    outColor = vec4(texelFetch(y, ivec2(out_x, out_y), 0).r);\n  }\n}\n";
        const updateProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D c;\nuniform sampler2D ctm1;\nuniform sampler2D i;\nuniform sampler2D f;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(c, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  float c_val = texelFetch(c, ivec2(out_x, out_y), 0).r;\n  float ctm1_val = texelFetch(ctm1, ivec2(out_x, out_y), 0).r;\n  float i_val = texelFetch(i, ivec2(out_x, out_y), 0).r;\n  float f_val = texelFetch(f, ivec2(out_x, out_y), 0).r;\n\n  outColor = vec4(c_val * i_val + ctm1_val * f_val);\n}\n";

        class LSTM extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                Object.defineProperty(this, "_combine", {
                    configurable: true,
                    enumerable: true,
                    writable: true,
                    value: (0, _cwise.default)({
                        args: ['array', 'array', 'array', 'array'],
                        body: function (_y, _x1, _x2, _b) {
                            _y = _x1 + _x2 + _b;
                        }
                    })
                });
                Object.defineProperty(this, "_update", {
                    configurable: true,
                    enumerable: true,
                    writable: true,
                    value: (0, _cwise.default)({
                        args: ['array', 'array', 'array', 'array'],
                        body: function (_c, _ctm1, _i, _f) {
                            _c = _c * _i + _ctm1 * _f;
                        }
                    })
                });
                this.layerClass = 'LSTM';
                const {
                    units = 1,
                    activation = 'tanh',
                    use_bias = true,
                    recurrent_activation = 'hard_sigmoid',
                    return_sequences = false,
                    go_backwards = false,
                    stateful = false
                } = attrs;
                this.units = units;
                this.activation = activation;
                this.recurrentActivation = recurrent_activation;
                this.activationFunc = activations[activation];
                this.recurrentActivationFunc = activations[recurrent_activation];
                this.use_bias = use_bias;
                this.returnSequences = return_sequences;
                this.goBackwards = go_backwards;
                this.stateful = stateful;
                this.params = this.use_bias ? ['kernel', 'recurrent_kernel', 'bias'] : ['kernel', 'recurrent_kernel'];
                this.description = `output dimensions: ${this.units}`;
                this.description += this.activation !== 'linear' ? `, ${this.activation} activation` : '';
                this.description += this.recurrentActivation !== 'linear' ? `, ${this.recurrentActivation} recurrent activation` : '';
                this.description += this.returnSequences ? `, return sequences` : '';
                this.description += this.goBackwards ? `, backward direction` : '';
                this.description += this.stateful ? `, stateful` : '';

                if (this.gpu) {
                    this.copyTextureProgram = _WebGL.webgl2.compileProgram(copyTextureProgramSource);
                    this.matMulProgram = _WebGL.webgl2.compileProgram(matMulProgramSource);
                    this.activationProgram = _WebGL.webgl2.compileProgram(activationProgramSources[this.activation]);
                    this.recurrentActivationProgram = _WebGL.webgl2.compileProgram(activationProgramSources[this.recurrentActivation]);
                    this.gateSummationProgram = _WebGL.webgl2.compileProgram(gateSummationProgramSource);
                    this.gateProductProgram = _WebGL.webgl2.compileProgram(gateProductProgramSource);
                    this.timestepReadProgram = _WebGL.webgl2.compileProgram(timestepReadProgramSource);
                    this.timestepWriteProgram = _WebGL.webgl2.compileProgram(timestepWriteProgramSource);
                    this.updateProgram = _WebGL.webgl2.compileProgram(updateProgramSource);
                }
            }

            setWeights(weightsArr) {
                super.setWeights(weightsArr);
                const shape_W = this.weights['kernel'].tensor.shape;
                this.weights['W_i'] = new _Tensor.default([], [shape_W[0], this.units]);
                this.weights['W_f'] = new _Tensor.default([], [shape_W[0], this.units]);
                this.weights['W_c'] = new _Tensor.default([], [shape_W[0], this.units]);
                this.weights['W_o'] = new _Tensor.default([], [shape_W[0], this.units]);

                _ndarrayOps.default.assign(this.weights['W_i'].tensor, this.weights['kernel'].tensor.hi(shape_W[0], this.units).lo(0, 0));

                _ndarrayOps.default.assign(this.weights['W_f'].tensor, this.weights['kernel'].tensor.hi(shape_W[0], 2 * this.units).lo(0, this.units));

                _ndarrayOps.default.assign(this.weights['W_c'].tensor, this.weights['kernel'].tensor.hi(shape_W[0], 3 * this.units).lo(0, 2 * this.units));

                _ndarrayOps.default.assign(this.weights['W_o'].tensor, this.weights['kernel'].tensor.hi(shape_W[0], 4 * this.units).lo(0, 3 * this.units));

                const shape_U = this.weights['recurrent_kernel'].tensor.shape;
                this.weights['U_i'] = new _Tensor.default([], [shape_U[0], this.units]);
                this.weights['U_f'] = new _Tensor.default([], [shape_U[0], this.units]);
                this.weights['U_c'] = new _Tensor.default([], [shape_U[0], this.units]);
                this.weights['U_o'] = new _Tensor.default([], [shape_U[0], this.units]);

                _ndarrayOps.default.assign(this.weights['U_i'].tensor, this.weights['recurrent_kernel'].tensor.hi(shape_U[0], this.units).lo(0, 0));

                _ndarrayOps.default.assign(this.weights['U_f'].tensor, this.weights['recurrent_kernel'].tensor.hi(shape_U[0], 2 * this.units).lo(0, this.units));

                _ndarrayOps.default.assign(this.weights['U_c'].tensor, this.weights['recurrent_kernel'].tensor.hi(shape_U[0], 3 * this.units).lo(0, 2 * this.units));

                _ndarrayOps.default.assign(this.weights['U_o'].tensor, this.weights['recurrent_kernel'].tensor.hi(shape_U[0], 4 * this.units).lo(0, 3 * this.units));

                this.weights['b_i'] = new _Tensor.default([], [this.units]);
                this.weights['b_f'] = new _Tensor.default([], [this.units]);
                this.weights['b_c'] = new _Tensor.default([], [this.units]);
                this.weights['b_o'] = new _Tensor.default([], [this.units]);

                if (this.use_bias) {
                    _ndarrayOps.default.assign(this.weights['b_i'].tensor, this.weights['bias'].tensor.hi(this.units).lo(0));

                    _ndarrayOps.default.assign(this.weights['b_f'].tensor, this.weights['bias'].tensor.hi(2 * this.units).lo(this.units));

                    _ndarrayOps.default.assign(this.weights['b_c'].tensor, this.weights['bias'].tensor.hi(3 * this.units).lo(2 * this.units));

                    _ndarrayOps.default.assign(this.weights['b_o'].tensor, this.weights['bias'].tensor.hi(4 * this.units).lo(3 * this.units));
                }

                if (this.gpu) {
                    const names = ['W_i', 'W_f', 'W_c', 'W_o', 'U_i', 'U_f', 'U_c', 'U_o', 'b_i', 'b_f', 'b_c', 'b_o'];
                    names.forEach(name => {
                        this.weights[name].createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    });
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                const dimInputGate = this.weights['b_i'].tensor.shape[0];
                const dimCandidate = this.weights['b_c'].tensor.shape[0];
                const dimForgetGate = this.weights['b_f'].tensor.shape[0];
                const dimOutputGate = this.weights['b_o'].tensor.shape[0];
                const currentInputGateState = new _Tensor.default([], [dimInputGate]);
                const tempXI = new _Tensor.default([], [dimInputGate]);
                const tempHI = new _Tensor.default([], [dimInputGate]);
                const currentForgetGateState = new _Tensor.default([], [dimForgetGate]);
                const tempXF = new _Tensor.default([], [dimForgetGate]);
                const tempHF = new _Tensor.default([], [dimForgetGate]);
                const currentOutputGateState = new _Tensor.default([], [dimOutputGate]);
                const tempXO = new _Tensor.default([], [dimOutputGate]);
                const tempHO = new _Tensor.default([], [dimOutputGate]);
                const currentCandidate = new _Tensor.default([], [dimCandidate]);
                const tempXC = new _Tensor.default([], [dimCandidate]);
                const tempHC = new _Tensor.default([], [dimCandidate]);
                const previousCandidate = this.stateful && this.previousCandidate ? this.previousCandidate : new _Tensor.default([], [dimCandidate]);
                const currentHiddenState = this.stateful && this.currentHiddenState ? this.currentHiddenState : new _Tensor.default([], [dimCandidate]);
                const previousHiddenState = new _Tensor.default([], [dimCandidate]);
                this.hiddenStateSequence = new _Tensor.default([], [x.tensor.shape[0], dimCandidate]);
                const currentX = new _Tensor.default([], [x.tensor.shape[1]]);

                const _step = () => {
                    _ndarrayOps.default.assign(previousHiddenState.tensor, currentHiddenState.tensor);

                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['W_i'].tensor.transpose(1, 0), currentX.tensor, 1, tempXI.tensor);
                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['U_i'].tensor.transpose(1, 0), previousHiddenState.tensor, 1, tempHI.tensor);

                    this._combine(currentInputGateState.tensor, tempXI.tensor, tempHI.tensor, this.weights['b_i'].tensor);

                    this.recurrentActivationFunc(currentInputGateState);
                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['W_f'].tensor.transpose(1, 0), currentX.tensor, 1, tempXF.tensor);
                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['U_f'].tensor.transpose(1, 0), previousHiddenState.tensor, 1, tempHF.tensor);

                    this._combine(currentForgetGateState.tensor, tempXF.tensor, tempHF.tensor, this.weights['b_f'].tensor);

                    this.recurrentActivationFunc(currentForgetGateState);
                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['W_o'].tensor.transpose(1, 0), currentX.tensor, 1, tempXO.tensor);
                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['U_o'].tensor.transpose(1, 0), previousHiddenState.tensor, 1, tempHO.tensor);

                    this._combine(currentOutputGateState.tensor, tempXO.tensor, tempHO.tensor, this.weights['b_o'].tensor);

                    this.recurrentActivationFunc(currentOutputGateState);
                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['W_c'].tensor.transpose(1, 0), currentX.tensor, 1, tempXC.tensor);
                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['U_c'].tensor.transpose(1, 0), previousHiddenState.tensor, 1, tempHC.tensor);

                    this._combine(currentCandidate.tensor, tempXC.tensor, tempHC.tensor, this.weights['b_c'].tensor);

                    this.activationFunc(currentCandidate);

                    this._update(currentCandidate.tensor, previousCandidate.tensor, currentInputGateState.tensor, currentForgetGateState.tensor);

                    _ndarrayOps.default.assign(previousCandidate.tensor, currentCandidate.tensor);

                    this.activationFunc(currentCandidate);

                    _ndarrayOps.default.mul(currentHiddenState.tensor, currentOutputGateState.tensor, currentCandidate.tensor);
                };

                for (let i = 0, len = x.tensor.shape[0]; i < len; i++) {
                    const inputIndex = this.goBackwards ? len - i - 1 : i;

                    _ndarrayOps.default.assign(currentX.tensor, x.tensor.pick(inputIndex, null));

                    const tempTensors = [tempXI, tempHI, tempXF, tempHF, tempXO, tempHO, tempXC, tempHC];
                    tempTensors.forEach(temp => _ndarrayOps.default.assigns(temp.tensor, 0));

                    _step();

                    _ndarrayOps.default.assign(this.hiddenStateSequence.tensor.pick(i, null), currentHiddenState.tensor);
                }

                if (this.returnSequences) {
                    this.output = this.hiddenStateSequence;
                } else {
                    this.output = currentHiddenState;
                }

                if (this.stateful) {
                    this.previousCandidate = previousCandidate;
                    this.currentHiddenState = currentHiddenState;
                }
            }

            _stepGPU() {
                _WebGL.webgl2.runProgram({
                    program: this.copyTextureProgram,
                    output: this.previousHiddenState,
                    inputs: [{
                        input: this.currentHiddenState,
                        name: 'source'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempXI,
                    inputs: [{
                        input: this.currentX,
                        name: 'A'
                    }, {
                        input: this.weights['W_i'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempHI,
                    inputs: [{
                        input: this.previousHiddenState,
                        name: 'A'
                    }, {
                        input: this.weights['U_i'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.gateSummationProgram,
                    output: this.currentInputGateStatePreactiv,
                    inputs: [{
                        input: this.tempXI,
                        name: 't1'
                    }, {
                        input: this.tempHI,
                        name: 't2'
                    }, {
                        input: this.weights['b_i'],
                        name: 'bias'
                    }]
                });

                if (this.recurrentActivation !== 'linear') {
                    _WebGL.webgl2.runProgram({
                        program: this.recurrentActivationProgram,
                        output: this.currentInputGateState,
                        inputs: [{
                            input: this.currentInputGateStatePreactiv,
                            name: 'x'
                        }]
                    });
                } else {
                    this.currentInputGateState = this.currentInputGateStatePreactiv;
                }

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempXF,
                    inputs: [{
                        input: this.currentX,
                        name: 'A'
                    }, {
                        input: this.weights['W_f'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempHF,
                    inputs: [{
                        input: this.previousHiddenState,
                        name: 'A'
                    }, {
                        input: this.weights['U_f'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.gateSummationProgram,
                    output: this.currentForgetGateStatePreactiv,
                    inputs: [{
                        input: this.tempXF,
                        name: 't1'
                    }, {
                        input: this.tempHF,
                        name: 't2'
                    }, {
                        input: this.weights['b_f'],
                        name: 'bias'
                    }]
                });

                if (this.recurrentActivation !== 'linear') {
                    _WebGL.webgl2.runProgram({
                        program: this.recurrentActivationProgram,
                        output: this.currentForgetGateState,
                        inputs: [{
                            input: this.currentForgetGateStatePreactiv,
                            name: 'x'
                        }]
                    });
                } else {
                    this.currentForgetGateState = this.currentForgetGateStatePreactiv;
                }

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempXO,
                    inputs: [{
                        input: this.currentX,
                        name: 'A'
                    }, {
                        input: this.weights['W_o'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempHO,
                    inputs: [{
                        input: this.previousHiddenState,
                        name: 'A'
                    }, {
                        input: this.weights['U_o'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.gateSummationProgram,
                    output: this.currentOutputGateStatePreactiv,
                    inputs: [{
                        input: this.tempXO,
                        name: 't1'
                    }, {
                        input: this.tempHO,
                        name: 't2'
                    }, {
                        input: this.weights['b_o'],
                        name: 'bias'
                    }]
                });

                if (this.recurrentActivation !== 'linear') {
                    _WebGL.webgl2.runProgram({
                        program: this.recurrentActivationProgram,
                        output: this.currentOutputGateState,
                        inputs: [{
                            input: this.currentOutputGateStatePreactiv,
                            name: 'x'
                        }]
                    });
                } else {
                    this.currentOutputGateState = this.currentOutputGateStatePreactiv;
                }

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempXC,
                    inputs: [{
                        input: this.currentX,
                        name: 'A'
                    }, {
                        input: this.weights['W_c'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempHC,
                    inputs: [{
                        input: this.previousHiddenState,
                        name: 'A'
                    }, {
                        input: this.weights['U_c'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.gateSummationProgram,
                    output: this.currentCandidatePreactiv,
                    inputs: [{
                        input: this.tempXC,
                        name: 't1'
                    }, {
                        input: this.tempHC,
                        name: 't2'
                    }, {
                        input: this.weights['b_c'],
                        name: 'bias'
                    }]
                });

                if (this.activation !== 'linear') {
                    _WebGL.webgl2.runProgram({
                        program: this.activationProgram,
                        output: this.currentCandidate,
                        inputs: [{
                            input: this.currentCandidatePreactiv,
                            name: 'x'
                        }]
                    });
                } else {
                    this.currentCandidate = this.currentCandidatePreactiv;
                }

                _WebGL.webgl2.runProgram({
                    program: this.copyTextureProgram,
                    output: this.currentCandidateCopy,
                    inputs: [{
                        input: this.currentCandidate,
                        name: 'source'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.updateProgram,
                    output: this.currentCandidate,
                    inputs: [{
                        input: this.currentCandidateCopy,
                        name: 'c'
                    }, {
                        input: this.previousCandidate,
                        name: 'ctm1'
                    }, {
                        input: this.currentInputGateState,
                        name: 'i'
                    }, {
                        input: this.currentForgetGateState,
                        name: 'f'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.copyTextureProgram,
                    output: this.previousCandidate,
                    inputs: [{
                        input: this.currentCandidate,
                        name: 'source'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.copyTextureProgram,
                    output: this.currentCandidatePreactiv,
                    inputs: [{
                        input: this.currentCandidate,
                        name: 'source'
                    }]
                });

                if (this.activation !== 'linear') {
                    _WebGL.webgl2.runProgram({
                        program: this.activationProgram,
                        output: this.currentCandidate,
                        inputs: [{
                            input: this.currentCandidatePreactiv,
                            name: 'x'
                        }]
                    });
                } else {
                    this.currentCandidate = this.currentCandidatePreactiv;
                }

                _WebGL.webgl2.runProgram({
                    program: this.gateProductProgram,
                    output: this.currentHiddenState,
                    inputs: [{
                        input: this.currentOutputGateState,
                        name: 't1'
                    }, {
                        input: this.currentCandidate,
                        name: 't2'
                    }]
                });
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                const dimInputGate = this.weights['b_i'].glTextureShape[1];
                const dimCandidate = this.weights['b_c'].glTextureShape[1];
                const dimForgetGate = this.weights['b_f'].glTextureShape[1];
                const dimOutputGate = this.weights['b_o'].glTextureShape[1];

                if (!this.currentInputGateState) {
                    this.currentInputGateState = new _Tensor.default([], [dimInputGate]);
                    this.currentInputGateState.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentInputGateStatePreactiv) {
                    this.currentInputGateStatePreactiv = new _Tensor.default([], [dimInputGate]);
                    this.currentInputGateStatePreactiv.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempXI) {
                    this.tempXI = new _Tensor.default([], [dimInputGate]);
                    this.tempXI.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempHI) {
                    this.tempHI = new _Tensor.default([], [dimInputGate]);
                    this.tempHI.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentForgetGateState) {
                    this.currentForgetGateState = new _Tensor.default([], [dimForgetGate]);
                    this.currentForgetGateState.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentForgetGateStatePreactiv) {
                    this.currentForgetGateStatePreactiv = new _Tensor.default([], [dimForgetGate]);
                    this.currentForgetGateStatePreactiv.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempXF) {
                    this.tempXF = new _Tensor.default([], [dimForgetGate]);
                    this.tempXF.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempHF) {
                    this.tempHF = new _Tensor.default([], [dimForgetGate]);
                    this.tempHF.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentOutputGateState) {
                    this.currentOutputGateState = new _Tensor.default([], [dimOutputGate]);
                    this.currentOutputGateState.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentOutputGateStatePreactiv) {
                    this.currentOutputGateStatePreactiv = new _Tensor.default([], [dimOutputGate]);
                    this.currentOutputGateStatePreactiv.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempXO) {
                    this.tempXO = new _Tensor.default([], [dimOutputGate]);
                    this.tempXO.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempHO) {
                    this.tempHO = new _Tensor.default([], [dimOutputGate]);
                    this.tempHO.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentCandidate) {
                    this.currentCandidate = new _Tensor.default([], [dimCandidate]);
                    this.currentCandidate.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentCandidateCopy) {
                    this.currentCandidateCopy = new _Tensor.default([], [dimCandidate]);
                    this.currentCandidateCopy.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentCandidatePreactiv) {
                    this.currentCandidatePreactiv = new _Tensor.default([], [dimCandidate]);
                    this.currentCandidatePreactiv.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempXC) {
                    this.tempXC = new _Tensor.default([], [dimCandidate]);
                    this.tempXC.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempHC) {
                    this.tempHC = new _Tensor.default([], [dimCandidate]);
                    this.tempHC.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.previousCandidate || !this.stateful) {
                    this.previousCandidate = new _Tensor.default([], [dimCandidate]);
                    this.previousCandidate.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentHiddenState || !this.stateful) {
                    this.currentHiddenState = new _Tensor.default([], [dimCandidate]);
                    this.currentHiddenState.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.previousHiddenState) {
                    this.previousHiddenState = new _Tensor.default([], [dimCandidate]);
                    this.previousHiddenState.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.hiddenStateSequence) {
                    this.hiddenStateSequence = new _Tensor.default([], [x.glTextureShape[0], dimCandidate]);
                    this.hiddenStateSequence.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.hiddenStateSequenceCopy) {
                    this.hiddenStateSequenceCopy = new _Tensor.default([], [x.glTextureShape[0], dimCandidate]);
                    this.hiddenStateSequenceCopy.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentX) {
                    this.currentX = new _Tensor.default([], [x.glTextureShape[1]]);
                    this.currentX.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                for (let i = 0, len = x.glTextureShape[0]; i < len; i++) {
                    const inputIndex = this.goBackwards ? len - i - 1 : i;

                    _WebGL.webgl2.runProgram({
                        program: this.timestepReadProgram,
                        output: this.currentX,
                        inputs: [{
                            input: x,
                            name: 'x'
                        }],
                        uniforms: [{
                            value: inputIndex,
                            type: 'int',
                            name: 'index'
                        }]
                    });

                    this._stepGPU();

                    if (this.returnSequences) {
                        _WebGL.webgl2.runProgram({
                            program: this.copyTextureProgram,
                            output: this.hiddenStateSequenceCopy,
                            inputs: [{
                                input: this.hiddenStateSequence,
                                name: 'source'
                            }]
                        });

                        _WebGL.webgl2.runProgram({
                            program: this.timestepWriteProgram,
                            output: this.hiddenStateSequence,
                            inputs: [{
                                input: this.currentHiddenState,
                                name: 'x'
                            }, {
                                input: this.hiddenStateSequenceCopy,
                                name: 'y'
                            }],
                            uniforms: [{
                                value: i,
                                type: 'int',
                                name: 'index'
                            }]
                        });
                    }
                }

                if (this.returnSequences) {
                    this.output = this.hiddenStateSequence;
                } else {
                    this.output = this.currentHiddenState;
                }

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = LSTM;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../activations": 374,
        "../../activations/programSources": 376,
        "cwise": 361,
        "ndarray-blas-level2": 650,
        "ndarray-ops": "ndarray-ops"
    }],
    455: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var activations = _interopRequireWildcard(require("../../activations"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayBlasLevel = require("ndarray-blas-level2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var _cwise = _interopRequireDefault(require("cwise"));

        var activationProgramSources = _interopRequireWildcard(require("../../activations/programSources"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        const copyTextureProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D source;\nout vec4 outColor;\n\nvoid main(void) {\n  outColor = texture(source, vec2(outTex.x, outTex.y));\n}\n";
        const matMulProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D A;\nuniform sampler2D B;\nuniform sampler2D C;\nuniform bool addC;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 A_size = textureSize(A, 0);\n  ivec2 B_size = textureSize(B, 0);\n  int out_x = int(float(B_size[0]) * outTex.x);\n  int out_y = int(float(A_size[1]) * outTex.y);\n  int commonDim = A_size[0];\n\n  float sum = 0.;\n  for (int i = 0; i < commonDim; ++i) {\n    float a = texelFetch(A, ivec2(i, out_y), 0).r;\n    float b = texelFetch(B, ivec2(out_x, i), 0).r;\n    sum += a * b;\n  }\n\n  if (addC) {\n    sum += texelFetch(C, ivec2(out_x, 0), 0).r;\n  }\n\n  outColor = vec4(sum);\n}\n";
        const gateSummationProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D t1;\nuniform sampler2D t2;\nuniform sampler2D bias;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(bias, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  float t1_val = texelFetch(t1, ivec2(out_x, out_y), 0).r;\n  float t2_val = texelFetch(t2, ivec2(out_x, out_y), 0).r;\n  float bias_val = texelFetch(bias, ivec2(out_x, out_y), 0).r;\n\n  outColor = vec4(t1_val + t2_val + bias_val);\n}\n";
        const timestepReadProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform int index;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(x, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n\n  outColor = vec4(texelFetch(x, ivec2(out_x, index), 0).r);\n}\n";
        const timestepWriteProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform sampler2D y;\nuniform int index;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(y, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  if (out_y == index) {\n    outColor = vec4(texelFetch(x, ivec2(out_x, 0), 0).r);\n  } else {\n    outColor = vec4(texelFetch(y, ivec2(out_x, out_y), 0).r);\n  }\n}\n";

        class SimpleRNN extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                Object.defineProperty(this, "_combine", {
                    configurable: true,
                    enumerable: true,
                    writable: true,
                    value: (0, _cwise.default)({
                        args: ['array', 'array', 'array', 'array'],
                        body: function (_y, _x1, _x2, _b) {
                            _y = _x1 + _x2 + _b;
                        }
                    })
                });
                this.layerClass = 'SimpleRNN';
                const {
                    units = 1,
                    activation = 'tanh',
                    use_bias = true,
                    return_sequences = false,
                    go_backwards = false,
                    stateful = false
                } = attrs;
                this.units = units;
                this.activation = activation;
                this.activationFunc = activations[activation];
                this.use_bias = use_bias;
                this.returnSequences = return_sequences;
                this.goBackwards = go_backwards;
                this.stateful = stateful;
                this.params = this.use_bias ? ['kernel', 'recurrent_kernel', 'bias'] : ['kernel', 'recurrent_kernel'];
                this.description = `output dimensions: ${this.units}`;
                this.description += this.activation !== 'linear' ? `, ${this.activation} activation` : '';
                this.description += this.returnSequences ? `, return sequences` : '';
                this.description += this.goBackwards ? `, backward direction` : '';
                this.description += this.stateful ? `, stateful` : '';

                if (this.gpu) {
                    this.copyTextureProgram = _WebGL.webgl2.compileProgram(copyTextureProgramSource);
                    this.matMulProgram = _WebGL.webgl2.compileProgram(matMulProgramSource);
                    this.activationProgram = _WebGL.webgl2.compileProgram(activationProgramSources[this.activation]);
                    this.gateSummationProgram = _WebGL.webgl2.compileProgram(gateSummationProgramSource);
                    this.timestepReadProgram = _WebGL.webgl2.compileProgram(timestepReadProgramSource);
                    this.timestepWriteProgram = _WebGL.webgl2.compileProgram(timestepWriteProgramSource);
                }
            }

            setWeights(weightsArr) {
                super.setWeights(weightsArr);

                if (!this.use_bias) {
                    this.weights['bias'] = new _Tensor.default([], [this.units]);

                    if (this.gpu) {
                        this.weights['bias'].createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    }
                }
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                const dimHiddenState = this.units;
                const currentHiddenState = this.stateful && this.currentHiddenState ? this.currentHiddenState : new _Tensor.default([], [dimHiddenState]);
                const tempXH = new _Tensor.default([], [dimHiddenState]);
                const tempHH = new _Tensor.default([], [dimHiddenState]);
                const previousHiddenState = new _Tensor.default([], [dimHiddenState]);
                this.hiddenStateSequence = new _Tensor.default([], [x.tensor.shape[0], dimHiddenState]);
                const currentX = new _Tensor.default([], [x.tensor.shape[1]]);

                const _step = () => {
                    _ndarrayOps.default.assign(previousHiddenState.tensor, currentHiddenState.tensor);

                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['kernel'].tensor.transpose(1, 0), currentX.tensor, 1, tempXH.tensor);
                    (0, _ndarrayBlasLevel.gemv)(1, this.weights['recurrent_kernel'].tensor.transpose(1, 0), previousHiddenState.tensor, 1, tempHH.tensor);

                    this._combine(currentHiddenState.tensor, tempXH.tensor, tempHH.tensor, this.weights['bias'].tensor);

                    this.activationFunc(currentHiddenState);
                };

                for (let i = 0, len = x.tensor.shape[0]; i < len; i++) {
                    const inputIndex = this.goBackwards ? len - i - 1 : i;

                    _ndarrayOps.default.assign(currentX.tensor, x.tensor.pick(inputIndex, null));

                    const tempTensors = [tempXH, tempHH];
                    tempTensors.forEach(temp => _ndarrayOps.default.assigns(temp.tensor, 0));

                    _step();

                    if (this.returnSequences) {
                        _ndarrayOps.default.assign(this.hiddenStateSequence.tensor.pick(i, null), currentHiddenState.tensor);
                    }
                }

                if (this.returnSequences) {
                    this.output = this.hiddenStateSequence;
                } else {
                    this.output = currentHiddenState;
                }

                if (this.stateful) {
                    this.currentHiddenState = currentHiddenState;
                }
            }

            _stepGPU() {
                _WebGL.webgl2.runProgram({
                    program: this.copyTextureProgram,
                    output: this.previousHiddenState,
                    inputs: [{
                        input: this.currentHiddenState,
                        name: 'source'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempXH,
                    inputs: [{
                        input: this.currentX,
                        name: 'A'
                    }, {
                        input: this.weights['kernel'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.matMulProgram,
                    output: this.tempHH,
                    inputs: [{
                        input: this.previousHiddenState,
                        name: 'A'
                    }, {
                        input: this.weights['recurrent_kernel'],
                        name: 'B'
                    }],
                    uniforms: [{
                        value: 0,
                        type: 'bool',
                        name: 'addC'
                    }]
                });

                _WebGL.webgl2.runProgram({
                    program: this.gateSummationProgram,
                    output: this.currentHiddenStatePreactiv,
                    inputs: [{
                        input: this.tempXH,
                        name: 't1'
                    }, {
                        input: this.tempHH,
                        name: 't2'
                    }, {
                        input: this.weights['bias'],
                        name: 'bias'
                    }]
                });

                if (this.activation !== 'linear') {
                    _WebGL.webgl2.runProgram({
                        program: this.activationProgram,
                        output: this.currentHiddenState,
                        inputs: [{
                            input: this.currentHiddenStatePreactiv,
                            name: 'x'
                        }]
                    });
                } else {
                    this.currentHiddenState = this.currentHiddenStatePreactiv;
                }
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                const dimHiddenState = this.units;

                if (!this.currentHiddenState || !this.stateful) {
                    this.currentHiddenState = new _Tensor.default([], [dimHiddenState]);
                    this.currentHiddenState.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentHiddenStatePreactiv) {
                    this.currentHiddenStatePreactiv = new _Tensor.default([], [dimHiddenState]);
                    this.currentHiddenStatePreactiv.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempXH) {
                    this.tempXH = new _Tensor.default([], [dimHiddenState]);
                    this.tempXH.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.tempHH) {
                    this.tempHH = new _Tensor.default([], [dimHiddenState]);
                    this.tempHH.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.previousHiddenState) {
                    this.previousHiddenState = new _Tensor.default([], [dimHiddenState]);
                    this.previousHiddenState.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.hiddenStateSequence) {
                    this.hiddenStateSequence = new _Tensor.default([], [x.glTextureShape[0], dimHiddenState]);
                    this.hiddenStateSequence.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.hiddenStateSequenceCopy) {
                    this.hiddenStateSequenceCopy = new _Tensor.default([], [x.glTextureShape[0], dimHiddenState]);
                    this.hiddenStateSequenceCopy.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.currentX) {
                    this.currentX = new _Tensor.default([], [x.glTextureShape[1]]);
                    this.currentX.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                for (let i = 0, len = x.glTextureShape[0]; i < len; i++) {
                    const inputIndex = this.goBackwards ? len - i - 1 : i;

                    _WebGL.webgl2.runProgram({
                        program: this.timestepReadProgram,
                        output: this.currentX,
                        inputs: [{
                            input: x,
                            name: 'x'
                        }],
                        uniforms: [{
                            value: inputIndex,
                            type: 'int',
                            name: 'index'
                        }]
                    });

                    this._stepGPU();

                    if (this.returnSequences) {
                        _WebGL.webgl2.runProgram({
                            program: this.copyTextureProgram,
                            output: this.hiddenStateSequenceCopy,
                            inputs: [{
                                input: this.hiddenStateSequence,
                                name: 'source'
                            }]
                        });

                        _WebGL.webgl2.runProgram({
                            program: this.timestepWriteProgram,
                            output: this.hiddenStateSequence,
                            inputs: [{
                                input: this.currentHiddenState,
                                name: 'x'
                            }, {
                                input: this.hiddenStateSequenceCopy,
                                name: 'y'
                            }],
                            uniforms: [{
                                value: i,
                                type: 'int',
                                name: 'index'
                            }]
                        });
                    }
                }

                if (this.returnSequences) {
                    this.output = this.hiddenStateSequence;
                } else {
                    this.output = this.currentHiddenState;
                }

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = SimpleRNN;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../../activations": 374,
        "../../activations/programSources": 376,
        "cwise": 361,
        "ndarray-blas-level2": 650,
        "ndarray-ops": "ndarray-ops"
    }],
    456: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "SimpleRNN", {
            enumerable: true,
            get: function () {
                return _SimpleRNN.default;
            }
        });
        Object.defineProperty(exports, "LSTM", {
            enumerable: true,
            get: function () {
                return _LSTM.default;
            }
        });
        Object.defineProperty(exports, "GRU", {
            enumerable: true,
            get: function () {
                return _GRU.default;
            }
        });

        var _SimpleRNN = _interopRequireDefault(require("./SimpleRNN"));

        var _LSTM = _interopRequireDefault(require("./LSTM"));

        var _GRU = _interopRequireDefault(require("./GRU"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }
    }, {"./GRU": 453, "./LSTM": 454, "./SimpleRNN": 455}],
    457: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var recurrentLayers = _interopRequireWildcard(require("../recurrent"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const copyTextureProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D source;\nout vec4 outColor;\n\nvoid main(void) {\n  outColor = texture(source, vec2(outTex.x, outTex.y));\n}\n";
        const concatMergeProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D forward;\nuniform sampler2D backward;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(forward, 0);\n  int out_x = int(float(size[0] * 2) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  if (out_x >= 0 && out_x < size[0]) {\n    outColor = vec4(texelFetch(forward, ivec2(out_x, out_y), 0).r);\n  } else {\n    outColor = vec4(texelFetch(backward, ivec2(out_x - size[0], size[1] - out_y - 1), 0).r);\n  }\n}\n";
        const sumMergeProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D forward;\nuniform sampler2D backward;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(forward, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  float forward_val = texelFetch(forward, ivec2(out_x, out_y), 0).r;\n  float backward_val = texelFetch(backward, ivec2(out_x, size[1] - out_y - 1), 0).r;\n\n  outColor = vec4(forward_val + backward_val);\n}\n";
        const mulMergeProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D forward;\nuniform sampler2D backward;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(forward, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  float forward_val = texelFetch(forward, ivec2(out_x, out_y), 0).r;\n  float backward_val = texelFetch(backward, ivec2(out_x, size[1] - out_y - 1), 0).r;\n\n  outColor = vec4(forward_val * backward_val);\n}\n";
        const aveMergeProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D forward;\nuniform sampler2D backward;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(forward, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  float forward_val = texelFetch(forward, ivec2(out_x, out_y), 0).r;\n  float backward_val = texelFetch(backward, ivec2(out_x, size[1] - out_y - 1), 0).r;\n\n  outColor = vec4(0.5 * (forward_val + backward_val));\n}\n";

        class Bidirectional extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'Bidirectional';
                const {
                    layer,
                    merge_mode = 'concat'
                } = attrs;

                if (!layer) {
                    this.throwError('wrapped layer is undefined.');
                }

                if (!['SimpleRNN', 'GRU', 'LSTM'].includes(layer.class_name)) {
                    this.throwError(`cannot wrap ${layer.class_name} layer.`);
                }

                if (!['concat', 'sum', 'mul', 'ave'].includes(merge_mode)) {
                    this.throwError(`merge_mode ${merge_mode} not supported.`);
                }

                const forwardLayerAttrs = Object.assign({}, layer.config, {
                    gpu: attrs.gpu
                });
                const backwardLayerAttrs = Object.assign({}, layer.config, {
                    gpu: attrs.gpu
                });
                backwardLayerAttrs.go_backwards = !backwardLayerAttrs.go_backwards;
                this.forwardLayer = new recurrentLayers[layer.class_name](forwardLayerAttrs);
                this.backwardLayer = new recurrentLayers[layer.class_name](backwardLayerAttrs);
                this.forwardLayer.outbound = [null];
                this.backwardLayer.outbound = [null];
                this.mergeMode = merge_mode;
                this.returnSequences = layer.config.return_sequences;

                if (this.gpu) {
                    this.copyTextureProgram = _WebGL.webgl2.compileProgram(copyTextureProgramSource);

                    if (this.mergeMode === 'concat') {
                        this.mergeProgram = _WebGL.webgl2.compileProgram(concatMergeProgramSource);
                    } else if (this.mergeMode === 'sum') {
                        this.mergeProgram = _WebGL.webgl2.compileProgram(sumMergeProgramSource);
                    } else if (this.mergeMode === 'mul') {
                        this.mergeProgram = _WebGL.webgl2.compileProgram(mulMergeProgramSource);
                    } else if (this.mergeMode === 'ave') {
                        this.mergeProgram = _WebGL.webgl2.compileProgram(aveMergeProgramSource);
                    }
                }
            }

            setWeights(weightsArr) {
                this.forwardLayer.setWeights(weightsArr.slice(0, weightsArr.length / 2));
                this.backwardLayer.setWeights(weightsArr.slice(weightsArr.length / 2));
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                this.forwardLayer._callCPU(new _Tensor.default(x.tensor.data, x.tensor.shape));

                this.backwardLayer._callCPU(new _Tensor.default(x.tensor.data, x.tensor.shape));

                const forwardOutput = this.forwardLayer.output;
                const backwardOutput = this.backwardLayer.output;

                if (this.returnSequences) {
                    backwardOutput.tensor = backwardOutput.tensor.step(-1);
                }

                const outShape = forwardOutput.tensor.shape.slice();

                if (this.mergeMode === 'concat') {
                    outShape[outShape.length - 1] += backwardOutput.tensor.shape[outShape.length - 1];
                }

                this.output = new _Tensor.default([], outShape);

                if (this.mergeMode === 'concat') {
                    if (this.returnSequences) {
                        _ndarrayOps.default.assign(this.output.tensor.hi(outShape[0], forwardOutput.tensor.shape[1]).lo(0, 0), forwardOutput.tensor);

                        _ndarrayOps.default.assign(this.output.tensor.hi(outShape[0], outShape[1]).lo(0, forwardOutput.tensor.shape[1]), backwardOutput.tensor);
                    } else {
                        _ndarrayOps.default.assign(this.output.tensor.hi(forwardOutput.tensor.shape[0]).lo(0), forwardOutput.tensor);

                        _ndarrayOps.default.assign(this.output.tensor.hi(outShape[0]).lo(forwardOutput.tensor.shape[0]), backwardOutput.tensor);
                    }
                } else if (this.mergeMode === 'sum') {
                    _ndarrayOps.default.addeq(this.output.tensor, forwardOutput.tensor);

                    _ndarrayOps.default.addeq(this.output.tensor, backwardOutput.tensor);
                } else if (this.mergeMode === 'mul') {
                    _ndarrayOps.default.assigns(this.output.tensor, 1);

                    _ndarrayOps.default.muleq(this.output.tensor, forwardOutput.tensor);

                    _ndarrayOps.default.muleq(this.output.tensor, backwardOutput.tensor);
                } else if (this.mergeMode === 'ave') {
                    _ndarrayOps.default.addeq(this.output.tensor, forwardOutput.tensor);

                    _ndarrayOps.default.addeq(this.output.tensor, backwardOutput.tensor);

                    _ndarrayOps.default.divseq(this.output.tensor, 2);
                }
            }

            _callGPU(x) {
                if (!x.glTexture) {
                    x.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                if (!this.inputCopy) {
                    this.inputCopy = new _Tensor.default([], x.glTextureShape);
                    this.inputCopy.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                _WebGL.webgl2.runProgram({
                    program: this.copyTextureProgram,
                    output: this.inputCopy,
                    inputs: [{
                        input: x,
                        name: 'source'
                    }]
                });

                this.forwardLayer._callGPU(x);

                this.backwardLayer._callGPU(this.inputCopy);

                const forwardOutput = this.forwardLayer.output;
                const backwardOutput = this.backwardLayer.output;
                const outShape = forwardOutput.glTextureShape.slice();

                if (this.mergeMode === 'concat') {
                    outShape[1] += backwardOutput.glTextureShape[1];
                }

                if (!this.output) {
                    this.output = new _Tensor.default([], outShape);
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });

                    if (!this.returnSequences) {
                        this.output.is1D = true;
                    }
                }

                _WebGL.webgl2.runProgram({
                    program: this.mergeProgram,
                    output: this.output,
                    inputs: [{
                        input: forwardOutput,
                        name: 'forward'
                    }, {
                        input: backwardOutput,
                        name: 'backward'
                    }]
                });

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();
                }
            }

        }

        exports.default = Bidirectional;
    }, {
        "../../Layer": 368,
        "../../Tensor": 370,
        "../../WebGL2": 371,
        "../recurrent": 456,
        "ndarray-ops": "ndarray-ops"
    }],
    458: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Layer = _interopRequireDefault(require("../../Layer"));

        var _Tensor = _interopRequireDefault(require("../../Tensor"));

        var _WebGL = require("../../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var layers = _interopRequireWildcard(require("../"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const copyTextureProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D source;\nout vec4 outColor;\n\nvoid main(void) {\n  outColor = texture(source, vec2(outTex.x, outTex.y));\n}\n";
        const mapInputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform isampler2D indexMap;\nuniform int inputCols;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(indexMap, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(inputCols)));\n    int colIndex = int(mod(float(index), float(inputCols)));\n    float val = texelFetch(x, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = vec4(0.0);\n  }\n}\n";
        const selectSliceProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D x;\nuniform int t;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(x, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n\n  outColor = vec4(texelFetch(x, ivec2(out_x, t), 0).r);\n}\n";
        const copySliceOutputProgramSource = "#version 300 es\nprecision highp float;\n\nin vec2 outTex;\nuniform sampler2D outputCopy;\nuniform sampler2D sliceOutput;\nuniform int t;\nuniform int timesteps;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(sliceOutput, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(timesteps) * outTex.y);\n\n  if (t == out_y) {\n    outColor = vec4(texelFetch(sliceOutput, ivec2(out_x, 0), 0).r);\n  } else {\n    outColor = texelFetch(outputCopy, ivec2(out_x, out_y), 0);\n  }\n}\n";
        const mapSliceOutputProgramSource = "#version 300 es\nprecision highp float;\nprecision highp isampler2D;\n\nin vec2 outTex;\nuniform sampler2D outputCopy;\nuniform sampler2D sliceOutput;\nuniform isampler2D indexMap;\nout vec4 outColor;\n\nvoid main() {\n  ivec2 size = textureSize(outputCopy, 0);\n  int out_x = int(float(size[0]) * outTex.x);\n  int out_y = int(float(size[1]) * outTex.y);\n\n  int index = texelFetch(indexMap, ivec2(out_x, out_y), 0).r;\n\n  if (index != -1) {\n    int rowIndex = int(floor(float(index) / float(textureSize(sliceOutput, 0)[0])));\n    int colIndex = int(mod(float(index), float(textureSize(sliceOutput, 0)[0])));\n    float val = texelFetch(sliceOutput, ivec2(colIndex, rowIndex), 0).r;\n    outColor = vec4(val);\n  } else {\n    outColor = texelFetch(outputCopy, ivec2(out_x, out_y), 0);\n  }\n}\n";

        class TimeDistributed extends _Layer.default {
            constructor(attrs = {}) {
                super(attrs);
                this.layerClass = 'TimeDistributed';
                const {
                    layer
                } = attrs;

                if (!layer) {
                    this.throwError('wrapped layer is undefined.');
                }

                const wrappedLayerAttrs = Object.assign({}, layer.config, {
                    gpu: attrs.gpu
                });
                this.wrappedLayer = new layers[layer.class_name](wrappedLayerAttrs);
                this.wrappedLayer.outbound = [null];

                if (this.gpu) {
                    this.copyTextureProgram = _WebGL.webgl2.compileProgram(copyTextureProgramSource);
                    this.mapInputProgram = _WebGL.webgl2.compileProgram(mapInputProgramSource);
                    this.selectSliceProgram = _WebGL.webgl2.compileProgram(selectSliceProgramSource);
                    this.copySliceOutputProgram = _WebGL.webgl2.compileProgram(copySliceOutputProgramSource);
                    this.mapSliceOutputProgram = _WebGL.webgl2.compileProgram(mapSliceOutputProgramSource);
                }
            }

            setWeights(weightsArr) {
                this.wrappedLayer.setWeights(weightsArr);
            }

            call(x) {
                if (this.gpu) {
                    this._callGPU(x);
                } else {
                    this._callCPU(x);
                }

                return this.output;
            }

            _callCPU(x) {
                const stepShape = [...x.tensor.shape.slice(1)];
                const step = new _Tensor.default([], stepShape);

                _ndarrayOps.default.assign(step.tensor, x.tensor.pick(0, ...Array(stepShape.length).fill(null)));

                let stepOutput = this.wrappedLayer.call(step);
                const stepOutputShape = stepOutput.tensor.shape.slice();
                this.output = new _Tensor.default([], [x.tensor.shape[0], ...stepOutputShape]);

                _ndarrayOps.default.assign(this.output.tensor.pick(0, ...Array(stepOutputShape.length).fill(null)), stepOutput.tensor);

                for (let i = 1, timesteps = x.tensor.shape[0]; i < timesteps; i++) {
                    _ndarrayOps.default.assign(step.tensor, x.tensor.pick(i, ...Array(stepShape.length).fill(null)));

                    stepOutput = this.wrappedLayer.call(step);

                    _ndarrayOps.default.assign(this.output.tensor.pick(i, ...Array(stepOutputShape.length).fill(null)), stepOutput.tensor);
                }
            }

            _createIndexMap(indicesForReshaped) {
                if (this.indexMaps) {
                    return;
                }

                const indices = new _Tensor.default(indicesForReshaped.data, indicesForReshaped.shape, {
                    type: Int32Array
                });
                this.indexMaps = [];
                const timesteps = this.inputShape[0];
                const sliceShape = this.inputShape.slice(1);

                for (let t = 0; t < timesteps; t++) {
                    const sliceIndices = new _Tensor.default([], sliceShape, {
                        type: Int32Array
                    });

                    _ndarrayOps.default.assign(sliceIndices.tensor, indices.tensor.pick(t, ...Array(sliceShape.length).fill(null)));

                    sliceIndices.reshapeTo2DSquare();
                    sliceIndices.createGLTexture({
                        type: '2d',
                        format: 'int'
                    });
                    this.indexMaps.push(sliceIndices);
                }
            }

            _createOutputIndexMap(indicesForReshaped) {
                if (this.outputIndexMaps) {
                    return;
                }

                const outputSliceIndices = new _Tensor.default(indicesForReshaped.data, indicesForReshaped.shape, {
                    type: Int32Array
                });
                this.outputIndexMaps = [];
                const timesteps = this.outputShape[0];
                const sliceShape = this.outputShape.slice(1);

                for (let t = 0; t < timesteps; t++) {
                    const outputIndices = new _Tensor.default([], this.outputShape, {
                        type: Int32Array
                    });

                    _ndarrayOps.default.assigns(outputIndices.tensor, -1);

                    _ndarrayOps.default.assign(outputIndices.tensor.pick(t, ...Array(sliceShape.length).fill(null)), outputSliceIndices.tensor);

                    outputIndices.reshapeTo2DSquare();
                    outputIndices.createGLTexture({
                        type: '2d',
                        format: 'int'
                    });
                    this.outputIndexMaps.push(outputIndices);
                }
            }

            _callGPU(x) {
                if (x.is2DReshaped || x.is2DSquareReshaped) {
                    this.inputShape = x.originalShape;
                } else {
                    this.inputShape = x.tensor.shape;
                }

                if (!x.glTexture) {
                    if (x.tensor.shape.length <= 2) {
                        x.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    } else if (x.tensor.shape.length > 2 && !x.is2DReshaped) {
                        x.reshapeTo2DSquare();
                        x.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    }
                }

                if (this.inputShape.length > 2) {
                    this._createIndexMap(x.indicesForReshaped);
                }

                const timesteps = this.inputShape[0];
                const sliceShape = this.inputShape.slice(1);

                if (!this.slice) {
                    this.slice = new _Tensor.default([], sliceShape);

                    if (sliceShape.length <= 2) {
                        this.slice.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    } else {
                        this.slice.reshapeTo2DSquare();
                        this.slice.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    }
                }

                if (this.inputShape.length <= 2) {
                    _WebGL.webgl2.runProgram({
                        program: this.selectSliceProgram,
                        output: this.slice,
                        inputs: [{
                            input: x,
                            name: 'x'
                        }],
                        uniforms: [{
                            value: 0,
                            type: 'int',
                            name: 't'
                        }]
                    });
                } else {
                    _WebGL.webgl2.runProgram({
                        program: this.mapInputProgram,
                        output: this.slice,
                        inputs: [{
                            input: x,
                            name: 'x'
                        }, {
                            input: this.indexMaps[0],
                            name: 'indexMap'
                        }],
                        uniforms: [{
                            value: x.glTextureShape[1],
                            type: 'int',
                            name: 'inputCols'
                        }]
                    });
                }

                this.wrappedLayer._callGPU(this.slice);

                this.sliceOutput = this.wrappedLayer.output;

                if (!this.output) {
                    if (this.inputShape.length <= 2) {
                        this.outputShape = [timesteps, this.sliceOutput.glTextureShape[1]];
                        this.output = new _Tensor.default([], this.outputShape);
                        this.outputCopy = new _Tensor.default([], this.outputShape);
                        this.output.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                        this.outputCopy.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                    } else {
                        this.outputShape = [timesteps, ...this.sliceOutput.originalShape];
                        this.output = new _Tensor.default([], this.outputShape);
                        this.outputCopy = new _Tensor.default([], this.outputShape);
                        this.output.reshapeTo2DSquare();
                        this.outputCopy.reshapeTo2DSquare();
                        this.output.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });
                        this.outputCopy.createGLTexture({
                            type: '2d',
                            format: 'float'
                        });

                        this._createOutputIndexMap(this.sliceOutput.indicesForReshaped);
                    }
                }

                _WebGL.webgl2.runProgram({
                    program: this.copyTextureProgram,
                    output: this.outputCopy,
                    inputs: [{
                        input: this.output,
                        name: 'source'
                    }]
                });

                if (this.inputShape.length <= 2) {
                    _WebGL.webgl2.runProgram({
                        program: this.copySliceOutputProgram,
                        output: this.output,
                        inputs: [{
                            input: this.outputCopy,
                            name: 'outputCopy'
                        }, {
                            input: this.sliceOutput,
                            name: 'sliceOutput'
                        }],
                        uniforms: [{
                            value: 0,
                            type: 'int',
                            name: 't'
                        }, {
                            value: timesteps,
                            type: 'int',
                            name: 'timesteps'
                        }]
                    });
                } else {
                    _WebGL.webgl2.runProgram({
                        program: this.mapSliceOutputProgram,
                        output: this.output,
                        inputs: [{
                            input: this.outputCopy,
                            name: 'outputCopy'
                        }, {
                            input: this.sliceOutput,
                            name: 'sliceOutput'
                        }, {
                            input: this.outputIndexMaps[0],
                            name: 'indexMap'
                        }]
                    });
                }

                for (let i = 1; i < timesteps; i++) {
                    if (this.inputShape.length <= 2) {
                        _WebGL.webgl2.runProgram({
                            program: this.selectSliceProgram,
                            output: this.slice,
                            inputs: [{
                                input: x,
                                name: 'x'
                            }],
                            uniforms: [{
                                value: i,
                                type: 'int',
                                name: 't'
                            }]
                        });
                    } else {
                        _WebGL.webgl2.runProgram({
                            program: this.mapInputProgram,
                            output: this.slice,
                            inputs: [{
                                input: x,
                                name: 'x'
                            }, {
                                input: this.indexMaps[i],
                                name: 'indexMap'
                            }],
                            uniforms: [{
                                value: x.glTextureShape[1],
                                type: 'int',
                                name: 'inputCols'
                            }]
                        });
                    }

                    this.wrappedLayer._callGPU(this.slice);

                    this.sliceOutput = this.wrappedLayer.output;

                    _WebGL.webgl2.runProgram({
                        program: this.copyTextureProgram,
                        output: this.outputCopy,
                        inputs: [{
                            input: this.output,
                            name: 'source'
                        }]
                    });

                    if (this.inputShape.length <= 2) {
                        _WebGL.webgl2.runProgram({
                            program: this.copySliceOutputProgram,
                            output: this.output,
                            inputs: [{
                                input: this.outputCopy,
                                name: 'outputCopy'
                            }, {
                                input: this.sliceOutput,
                                name: 'sliceOutput'
                            }],
                            uniforms: [{
                                value: i,
                                type: 'int',
                                name: 't'
                            }, {
                                value: timesteps,
                                type: 'int',
                                name: 'timesteps'
                            }]
                        });
                    } else {
                        _WebGL.webgl2.runProgram({
                            program: this.mapSliceOutputProgram,
                            output: this.output,
                            inputs: [{
                                input: this.outputCopy,
                                name: 'outputCopy'
                            }, {
                                input: this.sliceOutput,
                                name: 'sliceOutput'
                            }, {
                                input: this.outputIndexMaps[i],
                                name: 'indexMap'
                            }]
                        });
                    }
                }

                if (this.outbound.length === 0) {
                    this.output.transferFromGLTexture();

                    if (this.output.is2DReshaped) {
                        this.output.reshapeFrom2D();
                    } else if (this.output.is2DSquareReshaped) {
                        this.output.reshapeFrom2DSquare();
                    }
                }
            }

        }

        exports.default = TimeDistributed;
    }, {"../": 418, "../../Layer": 368, "../../Tensor": 370, "../../WebGL2": 371, "ndarray-ops": "ndarray-ops"}],
    459: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "TimeDistributed", {
            enumerable: true,
            get: function () {
                return _TimeDistributed.default;
            }
        });
        Object.defineProperty(exports, "Bidirectional", {
            enumerable: true,
            get: function () {
                return _Bidirectional.default;
            }
        });

        var _TimeDistributed = _interopRequireDefault(require("./TimeDistributed"));

        var _Bidirectional = _interopRequireDefault(require("./Bidirectional"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }
    }, {"./Bidirectional": 457, "./TimeDistributed": 458}],
    460: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = exports.Model = exports.Weights = void 0;

        var $protobuf = _interopRequireWildcard(require("protobufjs/minimal"));

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        const $Reader = $protobuf.Reader,
            $Writer = $protobuf.Writer,
            $util = $protobuf.util;
        const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
        exports.default = $root;

        const Weights = $root.Weights = (() => {
            function Weights(properties) {
                this.shape = [];
                if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
            }

            Weights.prototype.layerName = "";
            Weights.prototype.weightName = "";
            Weights.prototype.shape = $util.emptyArray;
            Weights.prototype.type = "";
            Weights.prototype.data = $util.newBuffer([]);
            Weights.prototype.quantizeMin = 0;
            Weights.prototype.quantizeMax = 0;

            Weights.create = function create(properties) {
                return new Weights(properties);
            };

            Weights.encode = function encode(message, writer) {
                if (!writer) writer = $Writer.create();
                if (message.layerName != null && message.hasOwnProperty("layerName")) writer.uint32(10).string(message.layerName);
                if (message.weightName != null && message.hasOwnProperty("weightName")) writer.uint32(18).string(message.weightName);

                if (message.shape != null && message.shape.length) {
                    writer.uint32(26).fork();

                    for (let i = 0; i < message.shape.length; ++i) writer.uint32(message.shape[i]);

                    writer.ldelim();
                }

                if (message.type != null && message.hasOwnProperty("type")) writer.uint32(34).string(message.type);
                if (message.data != null && message.hasOwnProperty("data")) writer.uint32(42).bytes(message.data);
                if (message.quantizeMin != null && message.hasOwnProperty("quantizeMin")) writer.uint32(53).float(message.quantizeMin);
                if (message.quantizeMax != null && message.hasOwnProperty("quantizeMax")) writer.uint32(61).float(message.quantizeMax);
                return writer;
            };

            Weights.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            Weights.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length,
                    message = new $root.Weights();

                while (reader.pos < end) {
                    let tag = reader.uint32();

                    switch (tag >>> 3) {
                        case 1:
                            message.layerName = reader.string();
                            break;

                        case 2:
                            message.weightName = reader.string();
                            break;

                        case 3:
                            if (!(message.shape && message.shape.length)) message.shape = [];

                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;

                                while (reader.pos < end2) message.shape.push(reader.uint32());
                            } else message.shape.push(reader.uint32());

                            break;

                        case 4:
                            message.type = reader.string();
                            break;

                        case 5:
                            message.data = reader.bytes();
                            break;

                        case 6:
                            message.quantizeMin = reader.float();
                            break;

                        case 7:
                            message.quantizeMax = reader.float();
                            break;

                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }

                return message;
            };

            Weights.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader)) reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            Weights.verify = function verify(message) {
                if (typeof message !== "object" || message === null) return "object expected";
                if (message.layerName != null && message.hasOwnProperty("layerName")) if (!$util.isString(message.layerName)) return "layerName: string expected";
                if (message.weightName != null && message.hasOwnProperty("weightName")) if (!$util.isString(message.weightName)) return "weightName: string expected";

                if (message.shape != null && message.hasOwnProperty("shape")) {
                    if (!Array.isArray(message.shape)) return "shape: array expected";

                    for (let i = 0; i < message.shape.length; ++i) if (!$util.isInteger(message.shape[i])) return "shape: integer[] expected";
                }

                if (message.type != null && message.hasOwnProperty("type")) if (!$util.isString(message.type)) return "type: string expected";
                if (message.data != null && message.hasOwnProperty("data")) if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data))) return "data: buffer expected";
                if (message.quantizeMin != null && message.hasOwnProperty("quantizeMin")) if (typeof message.quantizeMin !== "number") return "quantizeMin: number expected";
                if (message.quantizeMax != null && message.hasOwnProperty("quantizeMax")) if (typeof message.quantizeMax !== "number") return "quantizeMax: number expected";
                return null;
            };

            Weights.fromObject = function fromObject(object) {
                if (object instanceof $root.Weights) return object;
                let message = new $root.Weights();
                if (object.layerName != null) message.layerName = String(object.layerName);
                if (object.weightName != null) message.weightName = String(object.weightName);

                if (object.shape) {
                    if (!Array.isArray(object.shape)) throw TypeError(".Weights.shape: array expected");
                    message.shape = [];

                    for (let i = 0; i < object.shape.length; ++i) message.shape[i] = object.shape[i] >>> 0;
                }

                if (object.type != null) message.type = String(object.type);
                if (object.data != null) if (typeof object.data === "string") $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0); else if (object.data.length) message.data = object.data;
                if (object.quantizeMin != null) message.quantizeMin = Number(object.quantizeMin);
                if (object.quantizeMax != null) message.quantizeMax = Number(object.quantizeMax);
                return message;
            };

            Weights.toObject = function toObject(message, options) {
                if (!options) options = {};
                let object = {};
                if (options.arrays || options.defaults) object.shape = [];

                if (options.defaults) {
                    object.layerName = "";
                    object.weightName = "";
                    object.type = "";
                    object.data = options.bytes === String ? "" : [];
                    object.quantizeMin = 0;
                    object.quantizeMax = 0;
                }

                if (message.layerName != null && message.hasOwnProperty("layerName")) object.layerName = message.layerName;
                if (message.weightName != null && message.hasOwnProperty("weightName")) object.weightName = message.weightName;

                if (message.shape && message.shape.length) {
                    object.shape = [];

                    for (let j = 0; j < message.shape.length; ++j) object.shape[j] = message.shape[j];
                }

                if (message.type != null && message.hasOwnProperty("type")) object.type = message.type;
                if (message.data != null && message.hasOwnProperty("data")) object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.quantizeMin != null && message.hasOwnProperty("quantizeMin")) object.quantizeMin = options.json && !isFinite(message.quantizeMin) ? String(message.quantizeMin) : message.quantizeMin;
                if (message.quantizeMax != null && message.hasOwnProperty("quantizeMax")) object.quantizeMax = options.json && !isFinite(message.quantizeMax) ? String(message.quantizeMax) : message.quantizeMax;
                return object;
            };

            Weights.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Weights;
        })();

        exports.Weights = Weights;

        const Model = $root.Model = (() => {
            function Model(properties) {
                this.modelWeights = [];
                if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
            }

            Model.prototype.id = "";
            Model.prototype.name = "";
            Model.prototype.kerasVersion = "";
            Model.prototype.backend = "";
            Model.prototype.modelConfig = "";
            Model.prototype.modelWeights = $util.emptyArray;

            Model.create = function create(properties) {
                return new Model(properties);
            };

            Model.encode = function encode(message, writer) {
                if (!writer) writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id")) writer.uint32(10).string(message.id);
                if (message.name != null && message.hasOwnProperty("name")) writer.uint32(18).string(message.name);
                if (message.kerasVersion != null && message.hasOwnProperty("kerasVersion")) writer.uint32(26).string(message.kerasVersion);
                if (message.backend != null && message.hasOwnProperty("backend")) writer.uint32(34).string(message.backend);
                if (message.modelConfig != null && message.hasOwnProperty("modelConfig")) writer.uint32(42).string(message.modelConfig);
                if (message.modelWeights != null && message.modelWeights.length) for (let i = 0; i < message.modelWeights.length; ++i) $root.Weights.encode(message.modelWeights[i], writer.uint32(50).fork()).ldelim();
                return writer;
            };

            Model.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            Model.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length,
                    message = new $root.Model();

                while (reader.pos < end) {
                    let tag = reader.uint32();

                    switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;

                        case 2:
                            message.name = reader.string();
                            break;

                        case 3:
                            message.kerasVersion = reader.string();
                            break;

                        case 4:
                            message.backend = reader.string();
                            break;

                        case 5:
                            message.modelConfig = reader.string();
                            break;

                        case 6:
                            if (!(message.modelWeights && message.modelWeights.length)) message.modelWeights = [];
                            message.modelWeights.push($root.Weights.decode(reader, reader.uint32()));
                            break;

                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }

                return message;
            };

            Model.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader)) reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            Model.verify = function verify(message) {
                if (typeof message !== "object" || message === null) return "object expected";
                if (message.id != null && message.hasOwnProperty("id")) if (!$util.isString(message.id)) return "id: string expected";
                if (message.name != null && message.hasOwnProperty("name")) if (!$util.isString(message.name)) return "name: string expected";
                if (message.kerasVersion != null && message.hasOwnProperty("kerasVersion")) if (!$util.isString(message.kerasVersion)) return "kerasVersion: string expected";
                if (message.backend != null && message.hasOwnProperty("backend")) if (!$util.isString(message.backend)) return "backend: string expected";
                if (message.modelConfig != null && message.hasOwnProperty("modelConfig")) if (!$util.isString(message.modelConfig)) return "modelConfig: string expected";

                if (message.modelWeights != null && message.hasOwnProperty("modelWeights")) {
                    if (!Array.isArray(message.modelWeights)) return "modelWeights: array expected";

                    for (let i = 0; i < message.modelWeights.length; ++i) {
                        let error = $root.Weights.verify(message.modelWeights[i]);
                        if (error) return "modelWeights." + error;
                    }
                }

                return null;
            };

            Model.fromObject = function fromObject(object) {
                if (object instanceof $root.Model) return object;
                let message = new $root.Model();
                if (object.id != null) message.id = String(object.id);
                if (object.name != null) message.name = String(object.name);
                if (object.kerasVersion != null) message.kerasVersion = String(object.kerasVersion);
                if (object.backend != null) message.backend = String(object.backend);
                if (object.modelConfig != null) message.modelConfig = String(object.modelConfig);

                if (object.modelWeights) {
                    if (!Array.isArray(object.modelWeights)) throw TypeError(".Model.modelWeights: array expected");
                    message.modelWeights = [];

                    for (let i = 0; i < object.modelWeights.length; ++i) {
                        if (typeof object.modelWeights[i] !== "object") throw TypeError(".Model.modelWeights: object expected");
                        message.modelWeights[i] = $root.Weights.fromObject(object.modelWeights[i]);
                    }
                }

                return message;
            };

            Model.toObject = function toObject(message, options) {
                if (!options) options = {};
                let object = {};
                if (options.arrays || options.defaults) object.modelWeights = [];

                if (options.defaults) {
                    object.id = "";
                    object.name = "";
                    object.kerasVersion = "";
                    object.backend = "";
                    object.modelConfig = "";
                }

                if (message.id != null && message.hasOwnProperty("id")) object.id = message.id;
                if (message.name != null && message.hasOwnProperty("name")) object.name = message.name;
                if (message.kerasVersion != null && message.hasOwnProperty("kerasVersion")) object.kerasVersion = message.kerasVersion;
                if (message.backend != null && message.hasOwnProperty("backend")) object.backend = message.backend;
                if (message.modelConfig != null && message.hasOwnProperty("modelConfig")) object.modelConfig = message.modelConfig;

                if (message.modelWeights && message.modelWeights.length) {
                    object.modelWeights = [];

                    for (let j = 0; j < message.modelWeights.length; ++j) object.modelWeights[j] = $root.Weights.toObject(message.modelWeights[j], options);
                }

                return object;
            };

            Model.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Model;
        })();

        exports.Model = Model;
    }, {"protobufjs/minimal": 672}],
    461: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.checkShape = checkShape;
        exports.data3DLayoutForGL = data3DLayoutForGL;
        exports.createIndicesFor2DReshaped = createIndicesFor2DReshaped;

        var _range2 = _interopRequireDefault(require("lodash/range"));

        var _ndarray = _interopRequireDefault(require("ndarray"));

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function checkShape(data, shape) {
            if (data.length && shape.length && data.length !== shape.reduce((a, b) => a * b, 1)) {
                throw new Error('[Tensor] specified shape incompatible with data.');
            }
        }

        function data3DLayoutForGL(typedarrayConstructor, arr, shape) {
            const data = new typedarrayConstructor(arr.data.length);
            const slice = (0, _ndarray.default)(new typedarrayConstructor(shape[0] * shape[1]), [shape[0], shape[1]]);
            let offset = 0;

            for (let i = 0; i < shape[2]; i++) {
                _ndarrayOps.default.assign(slice, arr.pick(null, null, i));

                data.set(slice.data, offset);
                offset += shape[0] * shape[1];
            }

            return data;
        }

        function createIndicesFor2DReshaped(shape, square = false, axis = -1) {
            const size = shape.reduce((a, b) => a * b, 1);
            const indicesArr = (0, _ndarray.default)(new Int32Array(size), shape);

            if (square) {
                const squareDim = Math.ceil(Math.sqrt(size));
                const indicesRowArrReshaped = (0, _ndarray.default)(new Int32Array(squareDim ** 2), [squareDim, squareDim]);
                const indicesColArrReshaped = (0, _ndarray.default)(new Int32Array(squareDim ** 2), [squareDim, squareDim]);
                const indicesArrReshaped = (0, _ndarray.default)(new Int32Array(squareDim ** 2), [squareDim, squareDim]);

                for (let i = 0; i < squareDim; i++) {
                    _ndarrayOps.default.assigns(indicesRowArrReshaped.pick(i, null), i);
                }

                for (let j = 0; j < squareDim; j++) {
                    _ndarrayOps.default.assigns(indicesColArrReshaped.pick(null, j), j);
                }

                _ndarrayOps.default.muls(indicesArrReshaped, indicesRowArrReshaped, squareDim);

                _ndarrayOps.default.addeq(indicesArrReshaped, indicesColArrReshaped);

                indicesArr.data.set(indicesArrReshaped.data.subarray(0, indicesArr.size));
            } else {
                if (axis < 0) {
                    axis = shape.length + axis;
                }

                const axisSize = shape[axis];
                const indicesRowArr = (0, _ndarray.default)(new Int32Array(size), shape);
                const indicesColArr = (0, _ndarray.default)(new Int32Array(size), shape);
                const otherAxes = [...shape.slice(0, axis), ...shape.slice(axis + 1)];
                const otherAxesSize = otherAxes.reduce((a, b) => a * b, 1);
                const indicesRowArrSlice = (0, _ndarray.default)(new Int32Array((0, _range2.default)(otherAxesSize)), otherAxes);
                const axisSlices = Array(shape.length).fill(null);

                for (let n = 0; n < axisSize; n++) {
                    axisSlices[axis] = n;

                    _ndarrayOps.default.assign(indicesRowArr.pick(...axisSlices), indicesRowArrSlice);

                    _ndarrayOps.default.assigns(indicesColArr.pick(...axisSlices), n);
                }

                _ndarrayOps.default.muls(indicesArr, indicesRowArr, axisSize);

                _ndarrayOps.default.addeq(indicesArr, indicesColArr);
            }

            return indicesArr;
        }
    }, {"lodash/range": 627, "ndarray": "ndarray", "ndarray-ops": "ndarray-ops"}],
    462: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.approxEquals = approxEquals;

        var _isFinite2 = _interopRequireDefault(require("lodash/isFinite"));

        var _flattenDeep2 = _interopRequireDefault(require("lodash/flattenDeep"));

        var _ndarrayUnpack = _interopRequireDefault(require("ndarray-unpack"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function approxEquals(ndarrayOut, dataExpected, tol = 0.0001) {
            const a = (0, _flattenDeep2.default)((0, _ndarrayUnpack.default)(ndarrayOut));
            const b = dataExpected;

            if (a.length !== b.length) {
                return false;
            }

            for (let i = 0; i < a.length; i++) {
                if (!(0, _isFinite2.default)(a[i])) {
                    return false;
                }

                if (a[i] < b[i] - tol || a[i] > b[i] + tol) {
                    return false;
                }
            }

            return true;
        }
    }, {"lodash/flattenDeep": 605, "lodash/isFinite": 614, "ndarray-unpack": 669}],
    463: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;

        var _Tensor = _interopRequireDefault(require("../Tensor"));

        var _WebGL = require("../WebGL2");

        var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

        var _ndarrayBlasLevel = require("ndarray-blas-level2");

        var _ndarrayGemm = _interopRequireDefault(require("ndarray-gemm"));

        var _createGLSLProgram = _interopRequireDefault(require("../webgl/dynamic/createGLSLProgram"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        class CAM {
            constructor(attrs = {}) {
                this.modelLayersMap = attrs.modelLayersMap;
                this.gpu = attrs.gpu;

                if (!this.modelLayersMap) {
                    throw new Error(`[CAM] modelLayersMap is required`);
                }
            }

            initialize() {
                this.modelLayersMap.forEach(layer => {
                    if (layer.layerClass === 'GlobalAveragePooling2D') {
                        this.enabled = true;
                        this.poolLayer = layer;
                    }
                });

                if (this.enabled && !this.data) {
                    this.featureMaps = this.modelLayersMap.get(this.poolLayer.inbound[0]).output;
                    let traversingLayer = this.poolLayer;

                    if (!traversingLayer.outbound.length) {
                        this.weights = this.poolLayer.output;
                    }

                    while (traversingLayer.outbound.length) {
                        traversingLayer = this.modelLayersMap.get(traversingLayer.outbound[0]);

                        if (traversingLayer.weights['kernel']) {
                            this.weights = traversingLayer.weights['kernel'];
                        } else {
                            this.weights = this.poolLayer.output;
                        }
                    }

                    if (this.featureMaps.is2DReshaped) {
                        this.inputShape = this.featureMaps.originalShape.slice(0, 2);
                    } else {
                        this.inputShape = this.featureMaps.tensor.shape.slice(0, 2);
                    }

                    if (this.weights.tensor.shape.length === 1) {
                        this.shape = this.inputShape;
                    } else {
                        const numOutputClasses = this.weights.tensor.shape[1];
                        this.shape = [...this.inputShape, numOutputClasses];
                    }

                    this.data = new Float32Array(this.shape.reduce((a, b) => a * b, 1));
                }
            }

            update() {
                if (!this.enabled) return;
                this.featureMaps = this.modelLayersMap.get(this.poolLayer.inbound[0]).output;

                if (this.gpu) {
                    this._updateGPU();
                } else {
                    this._updateCPU();
                }

                const outputMin = _ndarrayOps.default.inf(this.output.tensor);

                const outputMax = _ndarrayOps.default.sup(this.output.tensor);

                _ndarrayOps.default.divseq(_ndarrayOps.default.subseq(this.output.tensor, outputMin), outputMax - outputMin);

                this.data = this.output.tensor.data;
            }

            _updateCPU() {
                if (!this.featureMaps.is2DReshaped) {
                    this.featureMaps.reshapeTo2D();
                }

                if (this.weights.tensor.shape.length === 1) {
                    if (!this.output) {
                        this.output = new _Tensor.default([], this.shape);
                    }

                    const matVec = new _Tensor.default([], [this.shape[0] * this.shape[1]]);
                    (0, _ndarrayBlasLevel.gemv)(1, this.featureMaps.tensor, this.weights.tensor, 1, matVec.tensor);
                    this.output.replaceTensorData(matVec.tensor.data);
                } else {
                    if (!this.output) {
                        this.output = new _Tensor.default([], this.shape);
                    }

                    this.output.reshapeTo2D();
                    (0, _ndarrayGemm.default)(this.output.tensor, this.featureMaps.tensor, this.weights.tensor, 1, 1);
                    this.output.reshapeFrom2D();
                }

                _ndarrayOps.default.maxseq(this.output.tensor, 0);

                if (this.featureMaps.is2DReshaped) {
                    this.featureMaps.reshapeFrom2D();
                }
            }

            _updateGPU() {
                if (!this.output) {
                    this.output = new _Tensor.default([], this.shape);
                }

                const isWeights1D = this.weights.is1D;

                if (!this.output.glTexture && isWeights1D) {
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                } else {
                    this.output.reshapeTo2D();
                    this.output.createGLTexture({
                        type: '2d',
                        format: 'float'
                    });
                }

                const numFeatures = isWeights1D ? this.weights.glTextureShape[1] : this.weights.glTextureShape[0];

                if (!this.program) {
                    const programSource = (0, _createGLSLProgram.default)('cam', this.output.glTextureShape, numFeatures, isWeights1D);
                    this.program = _WebGL.webgl2.compileProgram(programSource);
                }

                _WebGL.webgl2.runProgram({
                    program: this.program,
                    output: this.output,
                    inputs: [{
                        input: this.featureMaps,
                        name: 'featureMaps'
                    }, {
                        input: this.weights,
                        name: 'weights'
                    }]
                });

                this.output.transferFromGLTexture();

                if (this.output.is2DReshaped) {
                    this.output.reshapeFrom2D();
                }
            }

        }

        exports.default = CAM;
    }, {
        "../Tensor": 370,
        "../WebGL2": 371,
        "../webgl/dynamic/createGLSLProgram": 467,
        "ndarray-blas-level2": 650,
        "ndarray-gemm": 664,
        "ndarray-ops": "ndarray-ops"
    }],
    464: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "CAM", {
            enumerable: true,
            get: function () {
                return _CAM.default;
            }
        });

        var _CAM = _interopRequireDefault(require("./CAM"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }
    }, {"./CAM": 463}],
    465: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = conv2d;

        function conv2d(outputShape, inputShape, indexMapShape, useBias, hasFragments) {
            const addBias = useBias ? `sum += texelFetch(bias, ivec2(out_x, 0), 0).r;` : '';
            const adjustIndicesForFragments = hasFragments ? `int fragmentIndex = int(floor(float(rowIndex) / float(${inputShape[0]})));
      rowIndex = int(mod(float(rowIndex), float(${inputShape[0]})));
      colIndex += fragmentIndex * ${inputShape[1]};` : '';
            const source = `#version 300 es
precision highp float;
precision highp isampler2D;

in vec2 outTex;
uniform sampler2D x;
uniform isampler2D indexMap;
uniform sampler2D kernel;
uniform sampler2D bias;
out vec4 outColor;

void main() {
  int out_y = int(float(${outputShape[0]}) * outTex.y);
  int out_x = int(float(${outputShape[1]}) * outTex.x);

  float sum = 0.;
  for (int i = 0; i < ${indexMapShape[1]}; ++i) {
    int index = texelFetch(indexMap, ivec2(i, out_y), 0).r;    
    if (index != -1) {
      int rowIndex = int(floor(float(index) / float(${inputShape[1]})));
      int colIndex = int(mod(float(index), float(${inputShape[1]})));
      ${adjustIndicesForFragments}
      sum += texelFetch(x, ivec2(colIndex, rowIndex), 0).r * texelFetch(kernel, ivec2(out_x, i), 0).r;
    }
  }

  ${addBias}
  outColor = vec4(sum);
}   
`;
            return source;
        }
    }, {}],
    466: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = conv2dTranspose;

        function conv2dTranspose(outputShape, inputShape, indexMapShape, useBias, hasFragments) {
            const addBias = useBias ? `sum += texelFetch(bias, ivec2(out_x, 0), 0).r;` : '';
            const adjustIndicesForFragments = hasFragments ? `int fragmentIndex = int(floor(float(rowIndex) / float(${inputShape[0]})));
      rowIndex = int(mod(float(rowIndex), float(${inputShape[0]})));
      colIndex += fragmentIndex * ${inputShape[1]};` : '';
            const source = `#version 300 es
precision highp float;
precision highp isampler2D;

in vec2 outTex;
uniform sampler2D matMulResult;
uniform isampler2D indexMap;
uniform sampler2D bias;
out vec4 outColor;

void main() {
  int out_y = int(float(${outputShape[0]}) * outTex.y);
  int out_x = int(float(${outputShape[1]}) * outTex.x);

  float sum = 0.;
  for (int n = 0; n < ${indexMapShape[1]}; ++n) {
    int index = texelFetch(indexMap, ivec2(n, out_y), 0).r;
    if (index != -1) {
      int rowIndex = int(floor(float(index) / float(${inputShape[1]})));
      int colIndex = int(mod(float(index), float(${inputShape[1]})));
      ${adjustIndicesForFragments}
      sum += texelFetch(matMulResult, ivec2(colIndex + out_x, rowIndex), 0).r;
    }
  }

  ${addBias}
  outColor = vec4(sum);
}  
`;
            return source;
        }
    }, {}],
    467: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createGLSLProgram;

        var _add = _interopRequireDefault(require("./merge/add"));

        var _average = _interopRequireDefault(require("./merge/average"));

        var _concatenate = _interopRequireDefault(require("./merge/concatenate"));

        var _maximum = _interopRequireDefault(require("./merge/maximum"));

        var _minimum = _interopRequireDefault(require("./merge/minimum"));

        var _multiply = _interopRequireDefault(require("./merge/multiply"));

        var _subtract = _interopRequireDefault(require("./merge/subtract"));

        var _conv2d = _interopRequireDefault(require("./convolutional/conv2d"));

        var _conv2dTranspose = _interopRequireDefault(require("./convolutional/conv2dTranspose"));

        var _cam = _interopRequireDefault(require("./visualizations/cam"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function createGLSLProgram(program, ...args) {
            switch (program) {
                case 'add':
                    return (0, _add.default)(...args);

                case 'average':
                    return (0, _average.default)(...args);

                case 'concatenate':
                    return (0, _concatenate.default)(...args);

                case 'maximum':
                    return (0, _maximum.default)(...args);

                case 'minimum':
                    return (0, _minimum.default)(...args);

                case 'multiply':
                    return (0, _multiply.default)(...args);

                case 'subtract':
                    return (0, _subtract.default)(...args);

                case 'conv2d':
                    return (0, _conv2d.default)(...args);

                case 'conv2dTranspose':
                    return (0, _conv2dTranspose.default)(...args);

                case 'cam':
                    return (0, _cam.default)(...args);

                default:
                    throw new Error('GLSL program not found');
            }
        }
    }, {
        "./convolutional/conv2d": 465,
        "./convolutional/conv2dTranspose": 466,
        "./merge/add": 468,
        "./merge/average": 469,
        "./merge/concatenate": 470,
        "./merge/maximum": 471,
        "./merge/minimum": 472,
        "./merge/multiply": 473,
        "./merge/subtract": 474,
        "./visualizations/cam": 475
    }],
    468: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = add;

        var _range2 = _interopRequireDefault(require("lodash/range"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function add(numInputs, shape) {
            const source = `#version 300 es
precision highp float;

in vec2 outTex;
uniform sampler2D inputs[${numInputs}];
out vec4 outColor;

void main() {
  int out_y = int(float(${shape[0]}) * outTex.y);
  int out_x = int(float(${shape[1]}) * outTex.x);
  
  outColor = vec4(${(0, _range2.default)(numInputs).map(i => `texelFetch(inputs[${i}], ivec2(out_x, out_y), 0).r`).join(' + ')});
}
`;
            return source;
        }
    }, {"lodash/range": 627}],
    469: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = average;

        var _range2 = _interopRequireDefault(require("lodash/range"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function average(numInputs, shape) {
            const source = `#version 300 es
precision highp float;

in vec2 outTex;
uniform sampler2D inputs[${numInputs}];
out vec4 outColor;

void main() {
  int out_y = int(float(${shape[0]}) * outTex.y);
  int out_x = int(float(${shape[1]}) * outTex.x);
  
  outColor = vec4((${(0, _range2.default)(numInputs).map(i => `texelFetch(inputs[${i}], ivec2(out_x, out_y), 0).r`).join(' + ')}) / float(${numInputs}));
}
`;
            return source;
        }
    }, {"lodash/range": 627}],
    470: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = concatenate;

        var _take2 = _interopRequireDefault(require("lodash/take"));

        var _sum2 = _interopRequireDefault(require("lodash/sum"));

        var _range2 = _interopRequireDefault(require("lodash/range"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function concatenate(numInputs, inputShapes, outputShape, concatAxis) {
            const dims = inputShapes.map(shape => shape[concatAxis]);
            const offsets = (0, _range2.default)(numInputs + 1).map(i => (0, _sum2.default)((0, _take2.default)(dims, i)));
            const outVar = concatAxis === 0 ? 'out_y' : 'out_x';
            let getOffset = `
  int n = 0;
  int offset = 0;
  if (${outVar} >= ${offsets[1]} && ${outVar} < ${offsets[2]}) {
    n = 1;
    offset = ${offsets[1]};
  }`;

            if (numInputs > 2) {
                getOffset += `${(0, _range2.default)(2, numInputs).map(i => ` else if (${outVar} >= ${offsets[i]} && ${outVar} < ${offsets[i + 1]}) {
    n = ${i};
    offset = ${offsets[i]};
  }`).join('')}
`;
            }

            let outBlock = 'outColor = vec4(0.0);';

            if (concatAxis === 0 || concatAxis === 1) {
                const xCoord = i => `out_x${concatAxis === 1 ? ` - ${offsets[i]}` : ''}`;

                const yCoord = i => `out_y${concatAxis === 0 ? ` - ${offsets[i]}` : ''}`;

                outBlock = `
  if (n == 0) {
    outColor = vec4(texelFetch(inputs[0], ivec2(out_x, out_y), 0).r);
  }${(0, _range2.default)(1, numInputs).map(i => ` else if (n == ${i}) {
    outColor = vec4(texelFetch(inputs[${i}], ivec2(${xCoord(i)}, ${yCoord(i)}), 0).r);
  }`).join('')}
`;
            }

            const source = `#version 300 es
precision highp float;

in vec2 outTex;
uniform sampler2D inputs[${numInputs}];
out vec4 outColor;

void main() {
  int out_y = int(float(${outputShape[0]}) * outTex.y);
  int out_x = int(float(${outputShape[1]}) * outTex.x);
${getOffset}
${outBlock}
}
`;
            return source;
        }
    }, {"lodash/range": 627, "lodash/sum": 630, "lodash/take": 631}],
    471: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = maximum;

        function maximum(numInputs, shape) {
            const source = `#version 300 es
precision highp float;

in vec2 outTex;
uniform sampler2D inputs[${numInputs}];
out vec4 outColor;

void main() {
  int out_y = int(float(${shape[0]}) * outTex.y);
  int out_x = int(float(${shape[1]}) * outTex.x);

  float val = texelFetch(inputs[0], ivec2(out_x, out_y), 0).r;
  for (int i = 1; i < ${numInputs}; i++) {
    val = max(val, texelFetch(inputs[i], ivec2(out_x, out_y), 0).r);
  }

  outColor = vec4(val);
}
`;
            return source;
        }
    }, {}],
    472: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = minimum;

        function minimum(numInputs, shape) {
            const source = `#version 300 es
precision highp float;

in vec2 outTex;
uniform sampler2D inputs[${numInputs}];
out vec4 outColor;

void main() {
  int out_y = int(float(${shape[0]}) * outTex.y);
  int out_x = int(float(${shape[1]}) * outTex.x);

  float val = texelFetch(inputs[0], ivec2(out_x, out_y), 0).r;
  for (int i = 1; i < ${numInputs}; i++) {
    val = min(val, texelFetch(inputs[i], ivec2(out_x, out_y), 0).r);
  }

  outColor = vec4(val);
}
`;
            return source;
        }
    }, {}],
    473: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = multiply;

        var _range2 = _interopRequireDefault(require("lodash/range"));

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function multiply(numInputs, shape) {
            const source = `#version 300 es
precision highp float;

in vec2 outTex;
uniform sampler2D inputs[${numInputs}];
out vec4 outColor;

void main() {
  int out_y = int(float(${shape[0]}) * outTex.y);
  int out_x = int(float(${shape[1]}) * outTex.x);

  outColor = vec4(${(0, _range2.default)(numInputs).map(i => `texelFetch(inputs[${i}], ivec2(out_x, out_y), 0).r`).join(' * ')});
}
`;
            return source;
        }
    }, {"lodash/range": 627}],
    474: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = subtract;

        function subtract(numInputs, shape) {
            const source = `#version 300 es
precision highp float;

in vec2 outTex;
uniform sampler2D inputs[2];
out vec4 outColor;

void main() {
  int out_y = int(float(${shape[0]}) * outTex.y);
  int out_x = int(float(${shape[1]}) * outTex.x);
  
  outColor = vec4(texelFetch(inputs[0], ivec2(out_x, out_y), 0).r - texelFetch(inputs[1], ivec2(out_x, out_y), 0).r);
}
`;
            return source;
        }
    }, {}],
    475: [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = cam;

        function cam(outputShape, numFeatures, weightsIs1D) {
            let source;

            if (weightsIs1D) {
                source = `#version 300 es
precision highp float;

in vec2 outTex;
uniform sampler2D featureMaps;
uniform sampler2D weights;
out vec4 outColor;

void main() {
  int out_y = int(float(${outputShape[0]}) * outTex.y);
  int out_x = int(float(${outputShape[1]}) * outTex.x);

  int featureMapsRow = out_x + ${outputShape[0]} * out_y;

  float sum = 0.;
  for (int k = 0; k < ${numFeatures}; ++k) {
    float f = texelFetch(featureMaps, ivec2(k, featureMapsRow), 0).r;
    float w = texelFetch(weights, ivec2(k, 0), 0).r;
    sum += f * w;
  }

  outColor = vec4(max(sum, 0.0));
}  
`;
            } else {
                source = `#version 300 es
precision highp float;

in vec2 outTex;
uniform sampler2D featureMaps;
uniform sampler2D weights;
out vec4 outColor;

void main() {
  int out_y = int(float(${outputShape[0]}) * outTex.y);
  int out_x = int(float(${outputShape[1]}) * outTex.x);

  float sum = 0.;
  for (int k = 0; k < ${numFeatures}; ++k) {
    float f = texelFetch(featureMaps, ivec2(k, out_y), 0).r;
    float w = texelFetch(weights, ivec2(out_x, k), 0).r;
    sum += f * w;
  }

  outColor = vec4(max(sum, 0.0));
}  
`;
            }

            return source;
        }
    }, {}],
    476: [function (require, module, exports) {
        var getNative = require('./_getNative'),
            root = require('./_root');

        /* Built-in method references that are verified to be native. */
        var DataView = getNative(root, 'DataView');

        module.exports = DataView;

    }, {"./_getNative": 547, "./_root": 585}],
    477: [function (require, module, exports) {
        var hashClear = require('./_hashClear'),
            hashDelete = require('./_hashDelete'),
            hashGet = require('./_hashGet'),
            hashHas = require('./_hashHas'),
            hashSet = require('./_hashSet');

        /**
         * Creates a hash object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Hash(entries) {
            var index = -1,
                length = entries == null ? 0 : entries.length;

            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }

// Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;

        module.exports = Hash;

    }, {"./_hashClear": 553, "./_hashDelete": 554, "./_hashGet": 555, "./_hashHas": 556, "./_hashSet": 557}],
    478: [function (require, module, exports) {
        var listCacheClear = require('./_listCacheClear'),
            listCacheDelete = require('./_listCacheDelete'),
            listCacheGet = require('./_listCacheGet'),
            listCacheHas = require('./_listCacheHas'),
            listCacheSet = require('./_listCacheSet');

        /**
         * Creates an list cache object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function ListCache(entries) {
            var index = -1,
                length = entries == null ? 0 : entries.length;

            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }

// Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;

        module.exports = ListCache;

    }, {
        "./_listCacheClear": 566,
        "./_listCacheDelete": 567,
        "./_listCacheGet": 568,
        "./_listCacheHas": 569,
        "./_listCacheSet": 570
    }],
    479: [function (require, module, exports) {
        var getNative = require('./_getNative'),
            root = require('./_root');

        /* Built-in method references that are verified to be native. */
        var Map = getNative(root, 'Map');

        module.exports = Map;

    }, {"./_getNative": 547, "./_root": 585}],
    480: [function (require, module, exports) {
        var mapCacheClear = require('./_mapCacheClear'),
            mapCacheDelete = require('./_mapCacheDelete'),
            mapCacheGet = require('./_mapCacheGet'),
            mapCacheHas = require('./_mapCacheHas'),
            mapCacheSet = require('./_mapCacheSet');

        /**
         * Creates a map cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function MapCache(entries) {
            var index = -1,
                length = entries == null ? 0 : entries.length;

            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }

// Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;

        module.exports = MapCache;

    }, {
        "./_mapCacheClear": 571,
        "./_mapCacheDelete": 572,
        "./_mapCacheGet": 573,
        "./_mapCacheHas": 574,
        "./_mapCacheSet": 575
    }],
    481: [function (require, module, exports) {
        var getNative = require('./_getNative'),
            root = require('./_root');

        /* Built-in method references that are verified to be native. */
        var Promise = getNative(root, 'Promise');

        module.exports = Promise;

    }, {"./_getNative": 547, "./_root": 585}],
    482: [function (require, module, exports) {
        var getNative = require('./_getNative'),
            root = require('./_root');

        /* Built-in method references that are verified to be native. */
        var Set = getNative(root, 'Set');

        module.exports = Set;

    }, {"./_getNative": 547, "./_root": 585}],
    483: [function (require, module, exports) {
        var MapCache = require('./_MapCache'),
            setCacheAdd = require('./_setCacheAdd'),
            setCacheHas = require('./_setCacheHas');

        /**
         *
         * Creates an array cache object to store unique values.
         *
         * @private
         * @constructor
         * @param {Array} [values] The values to cache.
         */
        function SetCache(values) {
            var index = -1,
                length = values == null ? 0 : values.length;

            this.__data__ = new MapCache;
            while (++index < length) {
                this.add(values[index]);
            }
        }

// Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;

        module.exports = SetCache;

    }, {"./_MapCache": 480, "./_setCacheAdd": 586, "./_setCacheHas": 587}],
    484: [function (require, module, exports) {
        var ListCache = require('./_ListCache'),
            stackClear = require('./_stackClear'),
            stackDelete = require('./_stackDelete'),
            stackGet = require('./_stackGet'),
            stackHas = require('./_stackHas'),
            stackSet = require('./_stackSet');

        /**
         * Creates a stack cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
        }

// Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;

        module.exports = Stack;

    }, {
        "./_ListCache": 478,
        "./_stackClear": 591,
        "./_stackDelete": 592,
        "./_stackGet": 593,
        "./_stackHas": 594,
        "./_stackSet": 595
    }],
    485: [function (require, module, exports) {
        var root = require('./_root');

        /** Built-in value references. */
        var Symbol = root.Symbol;

        module.exports = Symbol;

    }, {"./_root": 585}],
    486: [function (require, module, exports) {
        var root = require('./_root');

        /** Built-in value references. */
        var Uint8Array = root.Uint8Array;

        module.exports = Uint8Array;

    }, {"./_root": 585}],
    487: [function (require, module, exports) {
        var getNative = require('./_getNative'),
            root = require('./_root');

        /* Built-in method references that are verified to be native. */
        var WeakMap = getNative(root, 'WeakMap');

        module.exports = WeakMap;

    }, {"./_getNative": 547, "./_root": 585}],
    488: [function (require, module, exports) {
        /**
         * A faster alternative to `Function#apply`, this function invokes `func`
         * with the `this` binding of `thisArg` and the arguments of `args`.
         *
         * @private
         * @param {Function} func The function to invoke.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} args The arguments to invoke `func` with.
         * @returns {*} Returns the result of `func`.
         */
        function apply(func, thisArg, args) {
            switch (args.length) {
                case 0:
                    return func.call(thisArg);
                case 1:
                    return func.call(thisArg, args[0]);
                case 2:
                    return func.call(thisArg, args[0], args[1]);
                case 3:
                    return func.call(thisArg, args[0], args[1], args[2]);
            }
            return func.apply(thisArg, args);
        }

        module.exports = apply;

    }, {}],
    489: [function (require, module, exports) {
        /**
         * A specialized version of `_.every` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         */
        function arrayEvery(array, predicate) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                if (!predicate(array[index], index, array)) {
                    return false;
                }
            }
            return true;
        }

        module.exports = arrayEvery;

    }, {}],
    490: [function (require, module, exports) {
        /**
         * A specialized version of `_.filter` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function arrayFilter(array, predicate) {
            var index = -1,
                length = array == null ? 0 : array.length,
                resIndex = 0,
                result = [];

            while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result[resIndex++] = value;
                }
            }
            return result;
        }

        module.exports = arrayFilter;

    }, {}],
    491: [function (require, module, exports) {
        var baseTimes = require('./_baseTimes'),
            isArguments = require('./isArguments'),
            isArray = require('./isArray'),
            isBuffer = require('./isBuffer'),
            isIndex = require('./_isIndex'),
            isTypedArray = require('./isTypedArray');

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */
        function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value),
                isArg = !isArr && isArguments(value),
                isBuff = !isArr && !isArg && isBuffer(value),
                isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                skipIndexes = isArr || isArg || isBuff || isType,
                result = skipIndexes ? baseTimes(value.length, String) : [],
                length = result.length;

            for (var key in value) {
                if ((inherited || hasOwnProperty.call(value, key)) &&
                    !(skipIndexes && (
                        // Safari 9 has enumerable `arguments.length` in strict mode.
                        key == 'length' ||
                        // Node.js 0.10 has enumerable non-index properties on buffers.
                        (isBuff && (key == 'offset' || key == 'parent')) ||
                        // PhantomJS 2 has enumerable non-index properties on typed arrays.
                        (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                        // Skip index properties.
                        isIndex(key, length)
                    ))) {
                    result.push(key);
                }
            }
            return result;
        }

        module.exports = arrayLikeKeys;

    }, {
        "./_baseTimes": 528,
        "./_isIndex": 559,
        "./isArguments": 609,
        "./isArray": 610,
        "./isBuffer": 612,
        "./isTypedArray": 620
    }],
    492: [function (require, module, exports) {
        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function arrayMap(array, iteratee) {
            var index = -1,
                length = array == null ? 0 : array.length,
                result = Array(length);

            while (++index < length) {
                result[index] = iteratee(array[index], index, array);
            }
            return result;
        }

        module.exports = arrayMap;

    }, {}],
    493: [function (require, module, exports) {
        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */
        function arrayPush(array, values) {
            var index = -1,
                length = values.length,
                offset = array.length;

            while (++index < length) {
                array[offset + index] = values[index];
            }
            return array;
        }

        module.exports = arrayPush;

    }, {}],
    494: [function (require, module, exports) {
        /**
         * A specialized version of `_.some` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function arraySome(array, predicate) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                if (predicate(array[index], index, array)) {
                    return true;
                }
            }
            return false;
        }

        module.exports = arraySome;

    }, {}],
    495: [function (require, module, exports) {
        var baseAssignValue = require('./_baseAssignValue'),
            eq = require('./eq');

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Assigns `value` to `key` of `object` if the existing value is not equivalent
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                (value === undefined && !(key in object))) {
                baseAssignValue(object, key, value);
            }
        }

        module.exports = assignValue;

    }, {"./_baseAssignValue": 497, "./eq": 600}],
    496: [function (require, module, exports) {
        var eq = require('./eq');

        /**
         * Gets the index at which the `key` is found in `array` of key-value pairs.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} key The key to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
                if (eq(array[length][0], key)) {
                    return length;
                }
            }
            return -1;
        }

        module.exports = assocIndexOf;

    }, {"./eq": 600}],
    497: [function (require, module, exports) {
        var defineProperty = require('./_defineProperty');

        /**
         * The base implementation of `assignValue` and `assignMergeValue` without
         * value checks.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function baseAssignValue(object, key, value) {
            if (key == '__proto__' && defineProperty) {
                defineProperty(object, key, {
                    'configurable': true,
                    'enumerable': true,
                    'value': value,
                    'writable': true
                });
            } else {
                object[key] = value;
            }
        }

        module.exports = baseAssignValue;

    }, {"./_defineProperty": 538}],
    498: [function (require, module, exports) {
        var baseForOwn = require('./_baseForOwn'),
            createBaseEach = require('./_createBaseEach');

        /**
         * The base implementation of `_.forEach` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         */
        var baseEach = createBaseEach(baseForOwn);

        module.exports = baseEach;

    }, {"./_baseForOwn": 503, "./_createBaseEach": 534}],
    499: [function (require, module, exports) {
        var baseEach = require('./_baseEach');

        /**
         * The base implementation of `_.every` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`
         */
        function baseEvery(collection, predicate) {
            var result = true;
            baseEach(collection, function (value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
            });
            return result;
        }

        module.exports = baseEvery;

    }, {"./_baseEach": 498}],
    500: [function (require, module, exports) {
        /**
         * The base implementation of `_.findIndex` and `_.findLastIndex` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {number} fromIndex The index to search from.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length,
                index = fromIndex + (fromRight ? 1 : -1);

            while ((fromRight ? index-- : ++index < length)) {
                if (predicate(array[index], index, array)) {
                    return index;
                }
            }
            return -1;
        }

        module.exports = baseFindIndex;

    }, {}],
    501: [function (require, module, exports) {
        var arrayPush = require('./_arrayPush'),
            isFlattenable = require('./_isFlattenable');

        /**
         * The base implementation of `_.flatten` with support for restricting flattening.
         *
         * @private
         * @param {Array} array The array to flatten.
         * @param {number} depth The maximum recursion depth.
         * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
         * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
         * @param {Array} [result=[]] The initial result value.
         * @returns {Array} Returns the new flattened array.
         */
        function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1,
                length = array.length;

            predicate || (predicate = isFlattenable);
            result || (result = []);

            while (++index < length) {
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                    if (depth > 1) {
                        // Recursively flatten arrays (susceptible to call stack limits).
                        baseFlatten(value, depth - 1, predicate, isStrict, result);
                    } else {
                        arrayPush(result, value);
                    }
                } else if (!isStrict) {
                    result[result.length] = value;
                }
            }
            return result;
        }

        module.exports = baseFlatten;

    }, {"./_arrayPush": 493, "./_isFlattenable": 558}],
    502: [function (require, module, exports) {
        var createBaseFor = require('./_createBaseFor');

        /**
         * The base implementation of `baseForOwn` which iterates over `object`
         * properties returned by `keysFunc` and invokes `iteratee` for each property.
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseFor = createBaseFor();

        module.exports = baseFor;

    }, {"./_createBaseFor": 535}],
    503: [function (require, module, exports) {
        var baseFor = require('./_baseFor'),
            keys = require('./keys');

        /**
         * The base implementation of `_.forOwn` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
        }

        module.exports = baseForOwn;

    }, {"./_baseFor": 502, "./keys": 621}],
    504: [function (require, module, exports) {
        var castPath = require('./_castPath'),
            toKey = require('./_toKey');

        /**
         * The base implementation of `_.get` without support for default values.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @returns {*} Returns the resolved value.
         */
        function baseGet(object, path) {
            path = castPath(path, object);

            var index = 0,
                length = path.length;

            while (object != null && index < length) {
                object = object[toKey(path[index++])];
            }
            return (index && index == length) ? object : undefined;
        }

        module.exports = baseGet;

    }, {"./_castPath": 532, "./_toKey": 597}],
    505: [function (require, module, exports) {
        var arrayPush = require('./_arrayPush'),
            isArray = require('./isArray');

        /**
         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @param {Function} symbolsFunc The function to get the symbols of `object`.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }

        module.exports = baseGetAllKeys;

    }, {"./_arrayPush": 493, "./isArray": 610}],
    506: [function (require, module, exports) {
        var Symbol = require('./_Symbol'),
            getRawTag = require('./_getRawTag'),
            objectToString = require('./_objectToString');

        /** `Object#toString` result references. */
        var nullTag = '[object Null]',
            undefinedTag = '[object Undefined]';

        /** Built-in value references. */
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        function baseGetTag(value) {
            if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
            }
            return (symToStringTag && symToStringTag in Object(value))
                ? getRawTag(value)
                : objectToString(value);
        }

        module.exports = baseGetTag;

    }, {"./_Symbol": 485, "./_getRawTag": 548, "./_objectToString": 582}],
    507: [function (require, module, exports) {
        /**
         * The base implementation of `_.hasIn` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHasIn(object, key) {
            return object != null && key in Object(object);
        }

        module.exports = baseHasIn;

    }, {}],
    508: [function (require, module, exports) {
        var baseGetTag = require('./_baseGetTag'),
            isObjectLike = require('./isObjectLike');

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]';

        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */
        function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
        }

        module.exports = baseIsArguments;

    }, {"./_baseGetTag": 506, "./isObjectLike": 618}],
    509: [function (require, module, exports) {
        var baseIsEqualDeep = require('./_baseIsEqualDeep'),
            isObjectLike = require('./isObjectLike');

        /**
         * The base implementation of `_.isEqual` which supports partial comparisons
         * and tracks traversed objects.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Unordered comparison
         *  2 - Partial comparison
         * @param {Function} [customizer] The function to customize comparisons.
         * @param {Object} [stack] Tracks traversed `value` and `other` objects.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         */
        function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
                return true;
            }
            if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }

        module.exports = baseIsEqual;

    }, {"./_baseIsEqualDeep": 510, "./isObjectLike": 618}],
    510: [function (require, module, exports) {
        var Stack = require('./_Stack'),
            equalArrays = require('./_equalArrays'),
            equalByTag = require('./_equalByTag'),
            equalObjects = require('./_equalObjects'),
            getTag = require('./_getTag'),
            isArray = require('./isArray'),
            isBuffer = require('./isBuffer'),
            isTypedArray = require('./isTypedArray');

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1;

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]',
            arrayTag = '[object Array]',
            objectTag = '[object Object]';

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * A specialized version of `baseIsEqual` for arrays and objects which performs
         * deep comparisons and tracks traversed objects enabling objects with circular
         * references to be compared.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} [stack] Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object),
                othIsArr = isArray(other),
                objTag = objIsArr ? arrayTag : getTag(object),
                othTag = othIsArr ? arrayTag : getTag(other);

            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;

            var objIsObj = objTag == objectTag,
                othIsObj = othTag == objectTag,
                isSameTag = objTag == othTag;

            if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) {
                    return false;
                }
                objIsArr = true;
                objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack);
                return (objIsArr || isTypedArray(object))
                    ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                    : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                    othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object,
                        othUnwrapped = othIsWrapped ? other.value() : other;

                    stack || (stack = new Stack);
                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
            }
            if (!isSameTag) {
                return false;
            }
            stack || (stack = new Stack);
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }

        module.exports = baseIsEqualDeep;

    }, {
        "./_Stack": 484,
        "./_equalArrays": 539,
        "./_equalByTag": 540,
        "./_equalObjects": 541,
        "./_getTag": 550,
        "./isArray": 610,
        "./isBuffer": 612,
        "./isTypedArray": 620
    }],
    511: [function (require, module, exports) {
        var Stack = require('./_Stack'),
            baseIsEqual = require('./_baseIsEqual');

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

        /**
         * The base implementation of `_.isMatch` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Array} matchData The property names, values, and compare flags to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         */
        function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length,
                length = index,
                noCustomizer = !customizer;

            if (object == null) {
                return !length;
            }
            object = Object(object);
            while (index--) {
                var data = matchData[index];
                if ((noCustomizer && data[2])
                    ? data[1] !== object[data[0]]
                    : !(data[0] in object)
                ) {
                    return false;
                }
            }
            while (++index < length) {
                data = matchData[index];
                var key = data[0],
                    objValue = object[key],
                    srcValue = data[1];

                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) {
                        return false;
                    }
                } else {
                    var stack = new Stack;
                    if (customizer) {
                        var result = customizer(objValue, srcValue, key, object, source, stack);
                    }
                    if (!(result === undefined
                            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                            : result
                    )) {
                        return false;
                    }
                }
            }
            return true;
        }

        module.exports = baseIsMatch;

    }, {"./_Stack": 484, "./_baseIsEqual": 509}],
    512: [function (require, module, exports) {
        var isFunction = require('./isFunction'),
            isMasked = require('./_isMasked'),
            isObject = require('./isObject'),
            toSource = require('./_toSource');

        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

        /** Used to detect host constructors (Safari). */
        var reIsHostCtor = /^\[object .+?Constructor\]$/;

        /** Used for built-in method references. */
        var funcProto = Function.prototype,
            objectProto = Object.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Used to detect if a method is native. */
        var reIsNative = RegExp('^' +
            funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
        );

        /**
         * The base implementation of `_.isNative` without bad shim checks.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         */
        function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
                return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }

        module.exports = baseIsNative;

    }, {"./_isMasked": 563, "./_toSource": 598, "./isFunction": 615, "./isObject": 617}],
    513: [function (require, module, exports) {
        var baseGetTag = require('./_baseGetTag'),
            isLength = require('./isLength'),
            isObjectLike = require('./isObjectLike');

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]',
            arrayTag = '[object Array]',
            boolTag = '[object Boolean]',
            dateTag = '[object Date]',
            errorTag = '[object Error]',
            funcTag = '[object Function]',
            mapTag = '[object Map]',
            numberTag = '[object Number]',
            objectTag = '[object Object]',
            regexpTag = '[object RegExp]',
            setTag = '[object Set]',
            stringTag = '[object String]',
            weakMapTag = '[object WeakMap]';

        var arrayBufferTag = '[object ArrayBuffer]',
            dataViewTag = '[object DataView]',
            float32Tag = '[object Float32Array]',
            float64Tag = '[object Float64Array]',
            int8Tag = '[object Int8Array]',
            int16Tag = '[object Int16Array]',
            int32Tag = '[object Int32Array]',
            uint8Tag = '[object Uint8Array]',
            uint8ClampedTag = '[object Uint8ClampedArray]',
            uint16Tag = '[object Uint16Array]',
            uint32Tag = '[object Uint32Array]';

        /** Used to identify `toStringTag` values of typed arrays. */
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
            typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
                typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                        typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
            typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
                typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
                    typedArrayTags[errorTag] = typedArrayTags[funcTag] =
                        typedArrayTags[mapTag] = typedArrayTags[numberTag] =
                            typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
                                typedArrayTags[setTag] = typedArrayTags[stringTag] =
                                    typedArrayTags[weakMapTag] = false;

        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */
        function baseIsTypedArray(value) {
            return isObjectLike(value) &&
                isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }

        module.exports = baseIsTypedArray;

    }, {"./_baseGetTag": 506, "./isLength": 616, "./isObjectLike": 618}],
    514: [function (require, module, exports) {
        var baseMatches = require('./_baseMatches'),
            baseMatchesProperty = require('./_baseMatchesProperty'),
            identity = require('./identity'),
            isArray = require('./isArray'),
            property = require('./property');

        /**
         * The base implementation of `_.iteratee`.
         *
         * @private
         * @param {*} [value=_.identity] The value to convert to an iteratee.
         * @returns {Function} Returns the iteratee.
         */
        function baseIteratee(value) {
            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
            if (typeof value == 'function') {
                return value;
            }
            if (value == null) {
                return identity;
            }
            if (typeof value == 'object') {
                return isArray(value)
                    ? baseMatchesProperty(value[0], value[1])
                    : baseMatches(value);
            }
            return property(value);
        }

        module.exports = baseIteratee;

    }, {"./_baseMatches": 517, "./_baseMatchesProperty": 518, "./identity": 608, "./isArray": 610, "./property": 626}],
    515: [function (require, module, exports) {
        var isPrototype = require('./_isPrototype'),
            nativeKeys = require('./_nativeKeys');

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeys(object) {
            if (!isPrototype(object)) {
                return nativeKeys(object);
            }
            var result = [];
            for (var key in Object(object)) {
                if (hasOwnProperty.call(object, key) && key != 'constructor') {
                    result.push(key);
                }
            }
            return result;
        }

        module.exports = baseKeys;

    }, {"./_isPrototype": 564, "./_nativeKeys": 580}],
    516: [function (require, module, exports) {
        var baseEach = require('./_baseEach'),
            isArrayLike = require('./isArrayLike');

        /**
         * The base implementation of `_.map` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function baseMap(collection, iteratee) {
            var index = -1,
                result = isArrayLike(collection) ? Array(collection.length) : [];

            baseEach(collection, function (value, key, collection) {
                result[++index] = iteratee(value, key, collection);
            });
            return result;
        }

        module.exports = baseMap;

    }, {"./_baseEach": 498, "./isArrayLike": 611}],
    517: [function (require, module, exports) {
        var baseIsMatch = require('./_baseIsMatch'),
            getMatchData = require('./_getMatchData'),
            matchesStrictComparable = require('./_matchesStrictComparable');

        /**
         * The base implementation of `_.matches` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function (object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }

        module.exports = baseMatches;

    }, {"./_baseIsMatch": 511, "./_getMatchData": 546, "./_matchesStrictComparable": 577}],
    518: [function (require, module, exports) {
        var baseIsEqual = require('./_baseIsEqual'),
            get = require('./get'),
            hasIn = require('./hasIn'),
            isKey = require('./_isKey'),
            isStrictComparable = require('./_isStrictComparable'),
            matchesStrictComparable = require('./_matchesStrictComparable'),
            toKey = require('./_toKey');

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

        /**
         * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
         *
         * @private
         * @param {string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(toKey(path), srcValue);
            }
            return function (object) {
                var objValue = get(object, path);
                return (objValue === undefined && objValue === srcValue)
                    ? hasIn(object, path)
                    : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
        }

        module.exports = baseMatchesProperty;

    }, {
        "./_baseIsEqual": 509,
        "./_isKey": 561,
        "./_isStrictComparable": 565,
        "./_matchesStrictComparable": 577,
        "./_toKey": 597,
        "./get": 606,
        "./hasIn": 607
    }],
    519: [function (require, module, exports) {
        var basePickBy = require('./_basePickBy'),
            hasIn = require('./hasIn');

        /**
         * The base implementation of `_.pick` without support for individual
         * property identifiers.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @returns {Object} Returns the new object.
         */
        function basePick(object, paths) {
            return basePickBy(object, paths, function (value, path) {
                return hasIn(object, path);
            });
        }

        module.exports = basePick;

    }, {"./_basePickBy": 520, "./hasIn": 607}],
    520: [function (require, module, exports) {
        var baseGet = require('./_baseGet'),
            baseSet = require('./_baseSet'),
            castPath = require('./_castPath');

        /**
         * The base implementation of  `_.pickBy` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @param {Function} predicate The function invoked per property.
         * @returns {Object} Returns the new object.
         */
        function basePickBy(object, paths, predicate) {
            var index = -1,
                length = paths.length,
                result = {};

            while (++index < length) {
                var path = paths[index],
                    value = baseGet(object, path);

                if (predicate(value, path)) {
                    baseSet(result, castPath(path, object), value);
                }
            }
            return result;
        }

        module.exports = basePickBy;

    }, {"./_baseGet": 504, "./_baseSet": 524, "./_castPath": 532}],
    521: [function (require, module, exports) {
        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function baseProperty(key) {
            return function (object) {
                return object == null ? undefined : object[key];
            };
        }

        module.exports = baseProperty;

    }, {}],
    522: [function (require, module, exports) {
        var baseGet = require('./_baseGet');

        /**
         * A specialized version of `baseProperty` which supports deep paths.
         *
         * @private
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyDeep(path) {
            return function (object) {
                return baseGet(object, path);
            };
        }

        module.exports = basePropertyDeep;

    }, {"./_baseGet": 504}],
    523: [function (require, module, exports) {
        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeCeil = Math.ceil,
            nativeMax = Math.max;

        /**
         * The base implementation of `_.range` and `_.rangeRight` which doesn't
         * coerce arguments.
         *
         * @private
         * @param {number} start The start of the range.
         * @param {number} end The end of the range.
         * @param {number} step The value to increment or decrement by.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Array} Returns the range of numbers.
         */
        function baseRange(start, end, step, fromRight) {
            var index = -1,
                length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                result = Array(length);

            while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
            }
            return result;
        }

        module.exports = baseRange;

    }, {}],
    524: [function (require, module, exports) {
        var assignValue = require('./_assignValue'),
            castPath = require('./_castPath'),
            isIndex = require('./_isIndex'),
            isObject = require('./isObject'),
            toKey = require('./_toKey');

        /**
         * The base implementation of `_.set`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @param {Function} [customizer] The function to customize path creation.
         * @returns {Object} Returns `object`.
         */
        function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
                return object;
            }
            path = castPath(path, object);

            var index = -1,
                length = path.length,
                lastIndex = length - 1,
                nested = object;

            while (nested != null && ++index < length) {
                var key = toKey(path[index]),
                    newValue = value;

                if (index != lastIndex) {
                    var objValue = nested[key];
                    newValue = customizer ? customizer(objValue, key, nested) : undefined;
                    if (newValue === undefined) {
                        newValue = isObject(objValue)
                            ? objValue
                            : (isIndex(path[index + 1]) ? [] : {});
                    }
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
            }
            return object;
        }

        module.exports = baseSet;

    }, {"./_assignValue": 495, "./_castPath": 532, "./_isIndex": 559, "./_toKey": 597, "./isObject": 617}],
    525: [function (require, module, exports) {
        var constant = require('./constant'),
            defineProperty = require('./_defineProperty'),
            identity = require('./identity');

        /**
         * The base implementation of `setToString` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var baseSetToString = !defineProperty ? identity : function (func, string) {
            return defineProperty(func, 'toString', {
                'configurable': true,
                'enumerable': false,
                'value': constant(string),
                'writable': true
            });
        };

        module.exports = baseSetToString;

    }, {"./_defineProperty": 538, "./constant": 599, "./identity": 608}],
    526: [function (require, module, exports) {
        /**
         * The base implementation of `_.slice` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseSlice(array, start, end) {
            var index = -1,
                length = array.length;

            if (start < 0) {
                start = -start > length ? 0 : (length + start);
            }
            end = end > length ? length : end;
            if (end < 0) {
                end += length;
            }
            length = start > end ? 0 : ((end - start) >>> 0);
            start >>>= 0;

            var result = Array(length);
            while (++index < length) {
                result[index] = array[index + start];
            }
            return result;
        }

        module.exports = baseSlice;

    }, {}],
    527: [function (require, module, exports) {
        /**
         * The base implementation of `_.sum` and `_.sumBy` without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the sum.
         */
        function baseSum(array, iteratee) {
            var result,
                index = -1,
                length = array.length;

            while (++index < length) {
                var current = iteratee(array[index]);
                if (current !== undefined) {
                    result = result === undefined ? current : (result + current);
                }
            }
            return result;
        }

        module.exports = baseSum;

    }, {}],
    528: [function (require, module, exports) {
        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */
        function baseTimes(n, iteratee) {
            var index = -1,
                result = Array(n);

            while (++index < n) {
                result[index] = iteratee(index);
            }
            return result;
        }

        module.exports = baseTimes;

    }, {}],
    529: [function (require, module, exports) {
        var Symbol = require('./_Symbol'),
            arrayMap = require('./_arrayMap'),
            isArray = require('./isArray'),
            isSymbol = require('./isSymbol');

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolToString = symbolProto ? symbolProto.toString : undefined;

        /**
         * The base implementation of `_.toString` which doesn't convert nullish
         * values to empty strings.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {string} Returns the string.
         */
        function baseToString(value) {
            // Exit early for strings to avoid a performance hit in some environments.
            if (typeof value == 'string') {
                return value;
            }
            if (isArray(value)) {
                // Recursively convert values (susceptible to call stack limits).
                return arrayMap(value, baseToString) + '';
            }
            if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : '';
            }
            var result = (value + '');
            return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }

        module.exports = baseToString;

    }, {"./_Symbol": 485, "./_arrayMap": 492, "./isArray": 610, "./isSymbol": 619}],
    530: [function (require, module, exports) {
        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */
        function baseUnary(func) {
            return function (value) {
                return func(value);
            };
        }

        module.exports = baseUnary;

    }, {}],
    531: [function (require, module, exports) {
        /**
         * Checks if a `cache` value for `key` exists.
         *
         * @private
         * @param {Object} cache The cache to query.
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function cacheHas(cache, key) {
            return cache.has(key);
        }

        module.exports = cacheHas;

    }, {}],
    532: [function (require, module, exports) {
        var isArray = require('./isArray'),
            isKey = require('./_isKey'),
            stringToPath = require('./_stringToPath'),
            toString = require('./toString');

        /**
         * Casts `value` to a path array if it's not one.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {Object} [object] The object to query keys on.
         * @returns {Array} Returns the cast property path array.
         */
        function castPath(value, object) {
            if (isArray(value)) {
                return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString(value));
        }

        module.exports = castPath;

    }, {"./_isKey": 561, "./_stringToPath": 596, "./isArray": 610, "./toString": 635}],
    533: [function (require, module, exports) {
        var root = require('./_root');

        /** Used to detect overreaching core-js shims. */
        var coreJsData = root['__core-js_shared__'];

        module.exports = coreJsData;

    }, {"./_root": 585}],
    534: [function (require, module, exports) {
        var isArrayLike = require('./isArrayLike');

        /**
         * Creates a `baseEach` or `baseEachRight` function.
         *
         * @private
         * @param {Function} eachFunc The function to iterate over a collection.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseEach(eachFunc, fromRight) {
            return function (collection, iteratee) {
                if (collection == null) {
                    return collection;
                }
                if (!isArrayLike(collection)) {
                    return eachFunc(collection, iteratee);
                }
                var length = collection.length,
                    index = fromRight ? length : -1,
                    iterable = Object(collection);

                while ((fromRight ? index-- : ++index < length)) {
                    if (iteratee(iterable[index], index, iterable) === false) {
                        break;
                    }
                }
                return collection;
            };
        }

        module.exports = createBaseEach;

    }, {"./isArrayLike": 611}],
    535: [function (require, module, exports) {
        /**
         * Creates a base function for methods like `_.forIn` and `_.forOwn`.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseFor(fromRight) {
            return function (object, iteratee, keysFunc) {
                var index = -1,
                    iterable = Object(object),
                    props = keysFunc(object),
                    length = props.length;

                while (length--) {
                    var key = props[fromRight ? length : ++index];
                    if (iteratee(iterable[key], key, iterable) === false) {
                        break;
                    }
                }
                return object;
            };
        }

        module.exports = createBaseFor;

    }, {}],
    536: [function (require, module, exports) {
        var baseIteratee = require('./_baseIteratee'),
            isArrayLike = require('./isArrayLike'),
            keys = require('./keys');

        /**
         * Creates a `_.find` or `_.findLast` function.
         *
         * @private
         * @param {Function} findIndexFunc The function to find the collection index.
         * @returns {Function} Returns the new find function.
         */
        function createFind(findIndexFunc) {
            return function (collection, predicate, fromIndex) {
                var iterable = Object(collection);
                if (!isArrayLike(collection)) {
                    var iteratee = baseIteratee(predicate, 3);
                    collection = keys(collection);
                    predicate = function (key) {
                        return iteratee(iterable[key], key, iterable);
                    };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
            };
        }

        module.exports = createFind;

    }, {"./_baseIteratee": 514, "./isArrayLike": 611, "./keys": 621}],
    537: [function (require, module, exports) {
        var baseRange = require('./_baseRange'),
            isIterateeCall = require('./_isIterateeCall'),
            toFinite = require('./toFinite');

        /**
         * Creates a `_.range` or `_.rangeRight` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new range function.
         */
        function createRange(fromRight) {
            return function (start, end, step) {
                if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                    end = step = undefined;
                }
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                    end = start;
                    start = 0;
                } else {
                    end = toFinite(end);
                }
                step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                return baseRange(start, end, step, fromRight);
            };
        }

        module.exports = createRange;

    }, {"./_baseRange": 523, "./_isIterateeCall": 560, "./toFinite": 632}],
    538: [function (require, module, exports) {
        var getNative = require('./_getNative');

        var defineProperty = (function () {
            try {
                var func = getNative(Object, 'defineProperty');
                func({}, '', {});
                return func;
            } catch (e) {
            }
        }());

        module.exports = defineProperty;

    }, {"./_getNative": 547}],
    539: [function (require, module, exports) {
        var SetCache = require('./_SetCache'),
            arraySome = require('./_arraySome'),
            cacheHas = require('./_cacheHas');

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

        /**
         * A specialized version of `baseIsEqualDeep` for arrays with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Array} array The array to compare.
         * @param {Array} other The other array to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `array` and `other` objects.
         * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
         */
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                arrLength = array.length,
                othLength = other.length;

            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                return false;
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(array);
            if (stacked && stack.get(other)) {
                return stacked == other;
            }
            var index = -1,
                result = true,
                seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

            stack.set(array, other);
            stack.set(other, array);

            // Ignore non-index properties.
            while (++index < arrLength) {
                var arrValue = array[index],
                    othValue = other[index];

                if (customizer) {
                    var compared = isPartial
                        ? customizer(othValue, arrValue, index, other, array, stack)
                        : customizer(arrValue, othValue, index, array, other, stack);
                }
                if (compared !== undefined) {
                    if (compared) {
                        continue;
                    }
                    result = false;
                    break;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (seen) {
                    if (!arraySome(other, function (othValue, othIndex) {
                        if (!cacheHas(seen, othIndex) &&
                            (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                            return seen.push(othIndex);
                        }
                    })) {
                        result = false;
                        break;
                    }
                } else if (!(
                    arrValue === othValue ||
                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                )) {
                    result = false;
                    break;
                }
            }
            stack['delete'](array);
            stack['delete'](other);
            return result;
        }

        module.exports = equalArrays;

    }, {"./_SetCache": 483, "./_arraySome": 494, "./_cacheHas": 531}],
    540: [function (require, module, exports) {
        var Symbol = require('./_Symbol'),
            Uint8Array = require('./_Uint8Array'),
            eq = require('./eq'),
            equalArrays = require('./_equalArrays'),
            mapToArray = require('./_mapToArray'),
            setToArray = require('./_setToArray');

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

        /** `Object#toString` result references. */
        var boolTag = '[object Boolean]',
            dateTag = '[object Date]',
            errorTag = '[object Error]',
            mapTag = '[object Map]',
            numberTag = '[object Number]',
            regexpTag = '[object RegExp]',
            setTag = '[object Set]',
            stringTag = '[object String]',
            symbolTag = '[object Symbol]';

        var arrayBufferTag = '[object ArrayBuffer]',
            dataViewTag = '[object DataView]';

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

        /**
         * A specialized version of `baseIsEqualDeep` for comparing objects of
         * the same `toStringTag`.
         *
         * **Note:** This function only supports comparing values with tags of
         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {string} tag The `toStringTag` of the objects to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
                case dataViewTag:
                    if ((object.byteLength != other.byteLength) ||
                        (object.byteOffset != other.byteOffset)) {
                        return false;
                    }
                    object = object.buffer;
                    other = other.buffer;

                case arrayBufferTag:
                    if ((object.byteLength != other.byteLength) ||
                        !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                        return false;
                    }
                    return true;

                case boolTag:
                case dateTag:
                case numberTag:
                    // Coerce booleans to `1` or `0` and dates to milliseconds.
                    // Invalid dates are coerced to `NaN`.
                    return eq(+object, +other);

                case errorTag:
                    return object.name == other.name && object.message == other.message;

                case regexpTag:
                case stringTag:
                    // Coerce regexes to strings and treat strings, primitives and objects,
                    // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                    // for more details.
                    return object == (other + '');

                case mapTag:
                    var convert = mapToArray;

                case setTag:
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                    convert || (convert = setToArray);

                    if (object.size != other.size && !isPartial) {
                        return false;
                    }
                    // Assume cyclic values are equal.
                    var stacked = stack.get(object);
                    if (stacked) {
                        return stacked == other;
                    }
                    bitmask |= COMPARE_UNORDERED_FLAG;

                    // Recursively compare objects (susceptible to call stack limits).
                    stack.set(object, other);
                    var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                    stack['delete'](object);
                    return result;

                case symbolTag:
                    if (symbolValueOf) {
                        return symbolValueOf.call(object) == symbolValueOf.call(other);
                    }
            }
            return false;
        }

        module.exports = equalByTag;

    }, {
        "./_Symbol": 485,
        "./_Uint8Array": 486,
        "./_equalArrays": 539,
        "./_mapToArray": 576,
        "./_setToArray": 588,
        "./eq": 600
    }],
    541: [function (require, module, exports) {
        var getAllKeys = require('./_getAllKeys');

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1;

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * A specialized version of `baseIsEqualDeep` for objects with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                objProps = getAllKeys(object),
                objLength = objProps.length,
                othProps = getAllKeys(other),
                othLength = othProps.length;

            if (objLength != othLength && !isPartial) {
                return false;
            }
            var index = objLength;
            while (index--) {
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                    return false;
                }
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked && stack.get(other)) {
                return stacked == other;
            }
            var result = true;
            stack.set(object, other);
            stack.set(other, object);

            var skipCtor = isPartial;
            while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key],
                    othValue = other[key];

                if (customizer) {
                    var compared = isPartial
                        ? customizer(othValue, objValue, key, other, object, stack)
                        : customizer(objValue, othValue, key, object, other, stack);
                }
                // Recursively compare objects (susceptible to call stack limits).
                if (!(compared === undefined
                        ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                        : compared
                )) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == 'constructor');
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor,
                    othCtor = other.constructor;

                // Non `Object` object instances with different constructors are not equal.
                if (objCtor != othCtor &&
                    ('constructor' in object && 'constructor' in other) &&
                    !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                        typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                    result = false;
                }
            }
            stack['delete'](object);
            stack['delete'](other);
            return result;
        }

        module.exports = equalObjects;

    }, {"./_getAllKeys": 544}],
    542: [function (require, module, exports) {
        var flatten = require('./flatten'),
            overRest = require('./_overRest'),
            setToString = require('./_setToString');

        /**
         * A specialized version of `baseRest` which flattens the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @returns {Function} Returns the new function.
         */
        function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + '');
        }

        module.exports = flatRest;

    }, {"./_overRest": 584, "./_setToString": 589, "./flatten": 604}],
    543: [function (require, module, exports) {
        (function (global) {
            /** Detect free variable `global` from Node.js. */
            var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

            module.exports = freeGlobal;

        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {}],
    544: [function (require, module, exports) {
        var baseGetAllKeys = require('./_baseGetAllKeys'),
            getSymbols = require('./_getSymbols'),
            keys = require('./keys');

        /**
         * Creates an array of own enumerable property names and symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }

        module.exports = getAllKeys;

    }, {"./_baseGetAllKeys": 505, "./_getSymbols": 549, "./keys": 621}],
    545: [function (require, module, exports) {
        var isKeyable = require('./_isKeyable');

        /**
         * Gets the data for `map`.
         *
         * @private
         * @param {Object} map The map to query.
         * @param {string} key The reference key.
         * @returns {*} Returns the map data.
         */
        function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key)
                ? data[typeof key == 'string' ? 'string' : 'hash']
                : data.map;
        }

        module.exports = getMapData;

    }, {"./_isKeyable": 562}],
    546: [function (require, module, exports) {
        var isStrictComparable = require('./_isStrictComparable'),
            keys = require('./keys');

        /**
         * Gets the property names, values, and compare flags of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the match data of `object`.
         */
        function getMatchData(object) {
            var result = keys(object),
                length = result.length;

            while (length--) {
                var key = result[length],
                    value = object[key];

                result[length] = [key, value, isStrictComparable(value)];
            }
            return result;
        }

        module.exports = getMatchData;

    }, {"./_isStrictComparable": 565, "./keys": 621}],
    547: [function (require, module, exports) {
        var baseIsNative = require('./_baseIsNative'),
            getValue = require('./_getValue');

        /**
         * Gets the native function at `key` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the method to get.
         * @returns {*} Returns the function if it's native, else `undefined`.
         */
        function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
        }

        module.exports = getNative;

    }, {"./_baseIsNative": 512, "./_getValue": 551}],
    548: [function (require, module, exports) {
        var Symbol = require('./_Symbol');

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /** Built-in value references. */
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */
        function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag),
                tag = value[symToStringTag];

            try {
                value[symToStringTag] = undefined;
                var unmasked = true;
            } catch (e) {
            }

            var result = nativeObjectToString.call(value);
            if (unmasked) {
                if (isOwn) {
                    value[symToStringTag] = tag;
                } else {
                    delete value[symToStringTag];
                }
            }
            return result;
        }

        module.exports = getRawTag;

    }, {"./_Symbol": 485}],
    549: [function (require, module, exports) {
        var arrayFilter = require('./_arrayFilter'),
            stubArray = require('./stubArray');

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Built-in value references. */
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeGetSymbols = Object.getOwnPropertySymbols;

        /**
         * Creates an array of the own enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
            if (object == null) {
                return [];
            }
            object = Object(object);
            return arrayFilter(nativeGetSymbols(object), function (symbol) {
                return propertyIsEnumerable.call(object, symbol);
            });
        };

        module.exports = getSymbols;

    }, {"./_arrayFilter": 490, "./stubArray": 628}],
    550: [function (require, module, exports) {
        var DataView = require('./_DataView'),
            Map = require('./_Map'),
            Promise = require('./_Promise'),
            Set = require('./_Set'),
            WeakMap = require('./_WeakMap'),
            baseGetTag = require('./_baseGetTag'),
            toSource = require('./_toSource');

        /** `Object#toString` result references. */
        var mapTag = '[object Map]',
            objectTag = '[object Object]',
            promiseTag = '[object Promise]',
            setTag = '[object Set]',
            weakMapTag = '[object WeakMap]';

        var dataViewTag = '[object DataView]';

        /** Used to detect maps, sets, and weakmaps. */
        var dataViewCtorString = toSource(DataView),
            mapCtorString = toSource(Map),
            promiseCtorString = toSource(Promise),
            setCtorString = toSource(Set),
            weakMapCtorString = toSource(WeakMap);

        /**
         * Gets the `toStringTag` of `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
            (Map && getTag(new Map) != mapTag) ||
            (Promise && getTag(Promise.resolve()) != promiseTag) ||
            (Set && getTag(new Set) != setTag) ||
            (WeakMap && getTag(new WeakMap) != weakMapTag)) {
            getTag = function (value) {
                var result = baseGetTag(value),
                    Ctor = result == objectTag ? value.constructor : undefined,
                    ctorString = Ctor ? toSource(Ctor) : '';

                if (ctorString) {
                    switch (ctorString) {
                        case dataViewCtorString:
                            return dataViewTag;
                        case mapCtorString:
                            return mapTag;
                        case promiseCtorString:
                            return promiseTag;
                        case setCtorString:
                            return setTag;
                        case weakMapCtorString:
                            return weakMapTag;
                    }
                }
                return result;
            };
        }

        module.exports = getTag;

    }, {
        "./_DataView": 476,
        "./_Map": 479,
        "./_Promise": 481,
        "./_Set": 482,
        "./_WeakMap": 487,
        "./_baseGetTag": 506,
        "./_toSource": 598
    }],
    551: [function (require, module, exports) {
        /**
         * Gets the value at `key` of `object`.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function getValue(object, key) {
            return object == null ? undefined : object[key];
        }

        module.exports = getValue;

    }, {}],
    552: [function (require, module, exports) {
        var castPath = require('./_castPath'),
            isArguments = require('./isArguments'),
            isArray = require('./isArray'),
            isIndex = require('./_isIndex'),
            isLength = require('./isLength'),
            toKey = require('./_toKey');

        /**
         * Checks if `path` exists on `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @param {Function} hasFunc The function to check properties.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         */
        function hasPath(object, path, hasFunc) {
            path = castPath(path, object);

            var index = -1,
                length = path.length,
                result = false;

            while (++index < length) {
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) {
                    break;
                }
                object = object[key];
            }
            if (result || ++index != length) {
                return result;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) &&
                (isArray(object) || isArguments(object));
        }

        module.exports = hasPath;

    }, {
        "./_castPath": 532,
        "./_isIndex": 559,
        "./_toKey": 597,
        "./isArguments": 609,
        "./isArray": 610,
        "./isLength": 616
    }],
    553: [function (require, module, exports) {
        var nativeCreate = require('./_nativeCreate');

        /**
         * Removes all key-value entries from the hash.
         *
         * @private
         * @name clear
         * @memberOf Hash
         */
        function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
        }

        module.exports = hashClear;

    }, {"./_nativeCreate": 579}],
    554: [function (require, module, exports) {
        /**
         * Removes `key` and its value from the hash.
         *
         * @private
         * @name delete
         * @memberOf Hash
         * @param {Object} hash The hash to modify.
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        }

        module.exports = hashDelete;

    }, {}],
    555: [function (require, module, exports) {
        var nativeCreate = require('./_nativeCreate');

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Gets the hash value for `key`.
         *
         * @private
         * @name get
         * @memberOf Hash
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }

        module.exports = hashGet;

    }, {"./_nativeCreate": 579}],
    556: [function (require, module, exports) {
        var nativeCreate = require('./_nativeCreate');

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Checks if a hash value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Hash
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
        }

        module.exports = hashHas;

    }, {"./_nativeCreate": 579}],
    557: [function (require, module, exports) {
        var nativeCreate = require('./_nativeCreate');

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';

        /**
         * Sets the hash `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Hash
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the hash instance.
         */
        function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
            return this;
        }

        module.exports = hashSet;

    }, {"./_nativeCreate": 579}],
    558: [function (require, module, exports) {
        var Symbol = require('./_Symbol'),
            isArguments = require('./isArguments'),
            isArray = require('./isArray');

        /** Built-in value references. */
        var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

        /**
         * Checks if `value` is a flattenable `arguments` object or array.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
         */
        function isFlattenable(value) {
            return isArray(value) || isArguments(value) ||
                !!(spreadableSymbol && value && value[spreadableSymbol]);
        }

        module.exports = isFlattenable;

    }, {"./_Symbol": 485, "./isArguments": 609, "./isArray": 610}],
    559: [function (require, module, exports) {
        /** Used as references for various `Number` constants. */
        var MAX_SAFE_INTEGER = 9007199254740991;

        /** Used to detect unsigned integer values. */
        var reIsUint = /^(?:0|[1-9]\d*)$/;

        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */
        function isIndex(value, length) {
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length &&
                (typeof value == 'number' || reIsUint.test(value)) &&
                (value > -1 && value % 1 == 0 && value < length);
        }

        module.exports = isIndex;

    }, {}],
    560: [function (require, module, exports) {
        var eq = require('./eq'),
            isArrayLike = require('./isArrayLike'),
            isIndex = require('./_isIndex'),
            isObject = require('./isObject');

        /**
         * Checks if the given arguments are from an iteratee call.
         *
         * @private
         * @param {*} value The potential iteratee value argument.
         * @param {*} index The potential iteratee index or key argument.
         * @param {*} object The potential iteratee object argument.
         * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
         *  else `false`.
         */
        function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
                return false;
            }
            var type = typeof index;
            if (type == 'number'
                ? (isArrayLike(object) && isIndex(index, object.length))
                : (type == 'string' && index in object)
            ) {
                return eq(object[index], value);
            }
            return false;
        }

        module.exports = isIterateeCall;

    }, {"./_isIndex": 559, "./eq": 600, "./isArrayLike": 611, "./isObject": 617}],
    561: [function (require, module, exports) {
        var isArray = require('./isArray'),
            isSymbol = require('./isSymbol');

        /** Used to match property names within property paths. */
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            reIsPlainProp = /^\w*$/;

        /**
         * Checks if `value` is a property name and not a property path.
         *
         * @private
         * @param {*} value The value to check.
         * @param {Object} [object] The object to query keys on.
         * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
         */
        function isKey(value, object) {
            if (isArray(value)) {
                return false;
            }
            var type = typeof value;
            if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                value == null || isSymbol(value)) {
                return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                (object != null && value in Object(object));
        }

        module.exports = isKey;

    }, {"./isArray": 610, "./isSymbol": 619}],
    562: [function (require, module, exports) {
        /**
         * Checks if `value` is suitable for use as unique object key.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
         */
        function isKeyable(value) {
            var type = typeof value;
            return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                ? (value !== '__proto__')
                : (value === null);
        }

        module.exports = isKeyable;

    }, {}],
    563: [function (require, module, exports) {
        var coreJsData = require('./_coreJsData');

        /** Used to detect methods masquerading as native. */
        var maskSrcKey = (function () {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
            return uid ? ('Symbol(src)_1.' + uid) : '';
        }());

        /**
         * Checks if `func` has its source masked.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
         */
        function isMasked(func) {
            return !!maskSrcKey && (maskSrcKey in func);
        }

        module.exports = isMasked;

    }, {"./_coreJsData": 533}],
    564: [function (require, module, exports) {
        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */
        function isPrototype(value) {
            var Ctor = value && value.constructor,
                proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

            return value === proto;
        }

        module.exports = isPrototype;

    }, {}],
    565: [function (require, module, exports) {
        var isObject = require('./isObject');

        /**
         * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` if suitable for strict
         *  equality comparisons, else `false`.
         */
        function isStrictComparable(value) {
            return value === value && !isObject(value);
        }

        module.exports = isStrictComparable;

    }, {"./isObject": 617}],
    566: [function (require, module, exports) {
        /**
         * Removes all key-value entries from the list cache.
         *
         * @private
         * @name clear
         * @memberOf ListCache
         */
        function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
        }

        module.exports = listCacheClear;

    }, {}],
    567: [function (require, module, exports) {
        var assocIndexOf = require('./_assocIndexOf');

        /** Used for built-in method references. */
        var arrayProto = Array.prototype;

        /** Built-in value references. */
        var splice = arrayProto.splice;

        /**
         * Removes `key` and its value from the list cache.
         *
         * @private
         * @name delete
         * @memberOf ListCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function listCacheDelete(key) {
            var data = this.__data__,
                index = assocIndexOf(data, key);

            if (index < 0) {
                return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
                data.pop();
            } else {
                splice.call(data, index, 1);
            }
            --this.size;
            return true;
        }

        module.exports = listCacheDelete;

    }, {"./_assocIndexOf": 496}],
    568: [function (require, module, exports) {
        var assocIndexOf = require('./_assocIndexOf');

        /**
         * Gets the list cache value for `key`.
         *
         * @private
         * @name get
         * @memberOf ListCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function listCacheGet(key) {
            var data = this.__data__,
                index = assocIndexOf(data, key);

            return index < 0 ? undefined : data[index][1];
        }

        module.exports = listCacheGet;

    }, {"./_assocIndexOf": 496}],
    569: [function (require, module, exports) {
        var assocIndexOf = require('./_assocIndexOf');

        /**
         * Checks if a list cache value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf ListCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
        }

        module.exports = listCacheHas;

    }, {"./_assocIndexOf": 496}],
    570: [function (require, module, exports) {
        var assocIndexOf = require('./_assocIndexOf');

        /**
         * Sets the list cache `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf ListCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the list cache instance.
         */
        function listCacheSet(key, value) {
            var data = this.__data__,
                index = assocIndexOf(data, key);

            if (index < 0) {
                ++this.size;
                data.push([key, value]);
            } else {
                data[index][1] = value;
            }
            return this;
        }

        module.exports = listCacheSet;

    }, {"./_assocIndexOf": 496}],
    571: [function (require, module, exports) {
        var Hash = require('./_Hash'),
            ListCache = require('./_ListCache'),
            Map = require('./_Map');

        /**
         * Removes all key-value entries from the map.
         *
         * @private
         * @name clear
         * @memberOf MapCache
         */
        function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
                'hash': new Hash,
                'map': new (Map || ListCache),
                'string': new Hash
            };
        }

        module.exports = mapCacheClear;

    }, {"./_Hash": 477, "./_ListCache": 478, "./_Map": 479}],
    572: [function (require, module, exports) {
        var getMapData = require('./_getMapData');

        /**
         * Removes `key` and its value from the map.
         *
         * @private
         * @name delete
         * @memberOf MapCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function mapCacheDelete(key) {
            var result = getMapData(this, key)['delete'](key);
            this.size -= result ? 1 : 0;
            return result;
        }

        module.exports = mapCacheDelete;

    }, {"./_getMapData": 545}],
    573: [function (require, module, exports) {
        var getMapData = require('./_getMapData');

        /**
         * Gets the map value for `key`.
         *
         * @private
         * @name get
         * @memberOf MapCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function mapCacheGet(key) {
            return getMapData(this, key).get(key);
        }

        module.exports = mapCacheGet;

    }, {"./_getMapData": 545}],
    574: [function (require, module, exports) {
        var getMapData = require('./_getMapData');

        /**
         * Checks if a map value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf MapCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function mapCacheHas(key) {
            return getMapData(this, key).has(key);
        }

        module.exports = mapCacheHas;

    }, {"./_getMapData": 545}],
    575: [function (require, module, exports) {
        var getMapData = require('./_getMapData');

        /**
         * Sets the map `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf MapCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the map cache instance.
         */
        function mapCacheSet(key, value) {
            var data = getMapData(this, key),
                size = data.size;

            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        }

        module.exports = mapCacheSet;

    }, {"./_getMapData": 545}],
    576: [function (require, module, exports) {
        /**
         * Converts `map` to its key-value pairs.
         *
         * @private
         * @param {Object} map The map to convert.
         * @returns {Array} Returns the key-value pairs.
         */
        function mapToArray(map) {
            var index = -1,
                result = Array(map.size);

            map.forEach(function (value, key) {
                result[++index] = [key, value];
            });
            return result;
        }

        module.exports = mapToArray;

    }, {}],
    577: [function (require, module, exports) {
        /**
         * A specialized version of `matchesProperty` for source values suitable
         * for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function matchesStrictComparable(key, srcValue) {
            return function (object) {
                if (object == null) {
                    return false;
                }
                return object[key] === srcValue &&
                    (srcValue !== undefined || (key in Object(object)));
            };
        }

        module.exports = matchesStrictComparable;

    }, {}],
    578: [function (require, module, exports) {
        var memoize = require('./memoize');

        /** Used as the maximum memoize cache size. */
        var MAX_MEMOIZE_SIZE = 500;

        /**
         * A specialized version of `_.memoize` which clears the memoized function's
         * cache when it exceeds `MAX_MEMOIZE_SIZE`.
         *
         * @private
         * @param {Function} func The function to have its output memoized.
         * @returns {Function} Returns the new memoized function.
         */
        function memoizeCapped(func) {
            var result = memoize(func, function (key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                    cache.clear();
                }
                return key;
            });

            var cache = result.cache;
            return result;
        }

        module.exports = memoizeCapped;

    }, {"./memoize": 624}],
    579: [function (require, module, exports) {
        var getNative = require('./_getNative');

        /* Built-in method references that are verified to be native. */
        var nativeCreate = getNative(Object, 'create');

        module.exports = nativeCreate;

    }, {"./_getNative": 547}],
    580: [function (require, module, exports) {
        var overArg = require('./_overArg');

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeKeys = overArg(Object.keys, Object);

        module.exports = nativeKeys;

    }, {"./_overArg": 583}],
    581: [function (require, module, exports) {
        var freeGlobal = require('./_freeGlobal');

        /** Detect free variable `exports`. */
        var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Detect free variable `process` from Node.js. */
        var freeProcess = moduleExports && freeGlobal.process;

        /** Used to access faster Node.js helpers. */
        var nodeUtil = (function () {
            try {
                return freeProcess && freeProcess.binding && freeProcess.binding('util');
            } catch (e) {
            }
        }());

        module.exports = nodeUtil;

    }, {"./_freeGlobal": 543}],
    582: [function (require, module, exports) {
        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */
        function objectToString(value) {
            return nativeObjectToString.call(value);
        }

        module.exports = objectToString;

    }, {}],
    583: [function (require, module, exports) {
        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */
        function overArg(func, transform) {
            return function (arg) {
                return func(transform(arg));
            };
        }

        module.exports = overArg;

    }, {}],
    584: [function (require, module, exports) {
        var apply = require('./_apply');

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * A specialized version of `baseRest` which transforms the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @param {Function} transform The rest array transform.
         * @returns {Function} Returns the new function.
         */
        function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
            return function () {
                var args = arguments,
                    index = -1,
                    length = nativeMax(args.length - start, 0),
                    array = Array(length);

                while (++index < length) {
                    array[index] = args[start + index];
                }
                index = -1;
                var otherArgs = Array(start + 1);
                while (++index < start) {
                    otherArgs[index] = args[index];
                }
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
            };
        }

        module.exports = overRest;

    }, {"./_apply": 488}],
    585: [function (require, module, exports) {
        var freeGlobal = require('./_freeGlobal');

        /** Detect free variable `self`. */
        var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

        /** Used as a reference to the global object. */
        var root = freeGlobal || freeSelf || Function('return this')();

        module.exports = root;

    }, {"./_freeGlobal": 543}],
    586: [function (require, module, exports) {
        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';

        /**
         * Adds `value` to the array cache.
         *
         * @private
         * @name add
         * @memberOf SetCache
         * @alias push
         * @param {*} value The value to cache.
         * @returns {Object} Returns the cache instance.
         */
        function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
        }

        module.exports = setCacheAdd;

    }, {}],
    587: [function (require, module, exports) {
        /**
         * Checks if `value` is in the array cache.
         *
         * @private
         * @name has
         * @memberOf SetCache
         * @param {*} value The value to search for.
         * @returns {number} Returns `true` if `value` is found, else `false`.
         */
        function setCacheHas(value) {
            return this.__data__.has(value);
        }

        module.exports = setCacheHas;

    }, {}],
    588: [function (require, module, exports) {
        /**
         * Converts `set` to an array of its values.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the values.
         */
        function setToArray(set) {
            var index = -1,
                result = Array(set.size);

            set.forEach(function (value) {
                result[++index] = value;
            });
            return result;
        }

        module.exports = setToArray;

    }, {}],
    589: [function (require, module, exports) {
        var baseSetToString = require('./_baseSetToString'),
            shortOut = require('./_shortOut');

        /**
         * Sets the `toString` method of `func` to return `string`.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var setToString = shortOut(baseSetToString);

        module.exports = setToString;

    }, {"./_baseSetToString": 525, "./_shortOut": 590}],
    590: [function (require, module, exports) {
        /** Used to detect hot functions by number of calls within a span of milliseconds. */
        var HOT_COUNT = 800,
            HOT_SPAN = 16;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeNow = Date.now;

        /**
         * Creates a function that'll short out and invoke `identity` instead
         * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
         * milliseconds.
         *
         * @private
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new shortable function.
         */
        function shortOut(func) {
            var count = 0,
                lastCalled = 0;

            return function () {
                var stamp = nativeNow(),
                    remaining = HOT_SPAN - (stamp - lastCalled);

                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) {
                        return arguments[0];
                    }
                } else {
                    count = 0;
                }
                return func.apply(undefined, arguments);
            };
        }

        module.exports = shortOut;

    }, {}],
    591: [function (require, module, exports) {
        var ListCache = require('./_ListCache');

        /**
         * Removes all key-value entries from the stack.
         *
         * @private
         * @name clear
         * @memberOf Stack
         */
        function stackClear() {
            this.__data__ = new ListCache;
            this.size = 0;
        }

        module.exports = stackClear;

    }, {"./_ListCache": 478}],
    592: [function (require, module, exports) {
        /**
         * Removes `key` and its value from the stack.
         *
         * @private
         * @name delete
         * @memberOf Stack
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function stackDelete(key) {
            var data = this.__data__,
                result = data['delete'](key);

            this.size = data.size;
            return result;
        }

        module.exports = stackDelete;

    }, {}],
    593: [function (require, module, exports) {
        /**
         * Gets the stack value for `key`.
         *
         * @private
         * @name get
         * @memberOf Stack
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function stackGet(key) {
            return this.__data__.get(key);
        }

        module.exports = stackGet;

    }, {}],
    594: [function (require, module, exports) {
        /**
         * Checks if a stack value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Stack
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function stackHas(key) {
            return this.__data__.has(key);
        }

        module.exports = stackHas;

    }, {}],
    595: [function (require, module, exports) {
        var ListCache = require('./_ListCache'),
            Map = require('./_Map'),
            MapCache = require('./_MapCache');

        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200;

        /**
         * Sets the stack `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Stack
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the stack cache instance.
         */
        function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                    pairs.push([key, value]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        }

        module.exports = stackSet;

    }, {"./_ListCache": 478, "./_Map": 479, "./_MapCache": 480}],
    596: [function (require, module, exports) {
        var memoizeCapped = require('./_memoizeCapped');

        /** Used to match property names within property paths. */
        var reLeadingDot = /^\./,
            rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

        /** Used to match backslashes in property paths. */
        var reEscapeChar = /\\(\\)?/g;

        /**
         * Converts `string` to a property path array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the property path array.
         */
        var stringToPath = memoizeCapped(function (string) {
            var result = [];
            if (reLeadingDot.test(string)) {
                result.push('');
            }
            string.replace(rePropName, function (match, number, quote, string) {
                result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
            });
            return result;
        });

        module.exports = stringToPath;

    }, {"./_memoizeCapped": 578}],
    597: [function (require, module, exports) {
        var isSymbol = require('./isSymbol');

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /**
         * Converts `value` to a string key if it's not a string or symbol.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {string|symbol} Returns the key.
         */
        function toKey(value) {
            if (typeof value == 'string' || isSymbol(value)) {
                return value;
            }
            var result = (value + '');
            return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }

        module.exports = toKey;

    }, {"./isSymbol": 619}],
    598: [function (require, module, exports) {
        /** Used for built-in method references. */
        var funcProto = Function.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /**
         * Converts `func` to its source code.
         *
         * @private
         * @param {Function} func The function to convert.
         * @returns {string} Returns the source code.
         */
        function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {
                }
                try {
                    return (func + '');
                } catch (e) {
                }
            }
            return '';
        }

        module.exports = toSource;

    }, {}],
    599: [function (require, module, exports) {
        /**
         * Creates a function that returns `value`.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {*} value The value to return from the new function.
         * @returns {Function} Returns the new constant function.
         * @example
         *
         * var objects = _.times(2, _.constant({ 'a': 1 }));
         *
         * console.log(objects);
         * // => [{ 'a': 1 }, { 'a': 1 }]
         *
         * console.log(objects[0] === objects[1]);
         * // => true
         */
        function constant(value) {
            return function () {
                return value;
            };
        }

        module.exports = constant;

    }, {}],
    600: [function (require, module, exports) {
        /**
         * Performs a
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * comparison between two values to determine if they are equivalent.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.eq(object, object);
         * // => true
         *
         * _.eq(object, other);
         * // => false
         *
         * _.eq('a', 'a');
         * // => true
         *
         * _.eq('a', Object('a'));
         * // => false
         *
         * _.eq(NaN, NaN);
         * // => true
         */
        function eq(value, other) {
            return value === other || (value !== value && other !== other);
        }

        module.exports = eq;

    }, {}],
    601: [function (require, module, exports) {
        var arrayEvery = require('./_arrayEvery'),
            baseEvery = require('./_baseEvery'),
            baseIteratee = require('./_baseIteratee'),
            isArray = require('./isArray'),
            isIterateeCall = require('./_isIterateeCall');

        /**
         * Checks if `predicate` returns truthy for **all** elements of `collection`.
         * Iteration is stopped once `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index|key, collection).
         *
         * **Note:** This method returns `true` for
         * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
         * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
         * elements of empty collections.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         * @example
         *
         * _.every([true, 1, null, 'yes'], Boolean);
         * // => false
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.every(users, { 'user': 'barney', 'active': false });
         * // => false
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.every(users, ['active', false]);
         * // => true
         *
         * // The `_.property` iteratee shorthand.
         * _.every(users, 'active');
         * // => false
         */
        function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
            }
            return func(collection, baseIteratee(predicate, 3));
        }

        module.exports = every;

    }, {"./_arrayEvery": 489, "./_baseEvery": 499, "./_baseIteratee": 514, "./_isIterateeCall": 560, "./isArray": 610}],
    602: [function (require, module, exports) {
        var createFind = require('./_createFind'),
            findIndex = require('./findIndex');

        /**
         * Iterates over elements of `collection`, returning the first element
         * `predicate` returns truthy for. The predicate is invoked with three
         * arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36, 'active': true },
         *   { 'user': 'fred',    'age': 40, 'active': false },
         *   { 'user': 'pebbles', 'age': 1,  'active': true }
         * ];
         *
         * _.find(users, function(o) { return o.age < 40; });
         * // => object for 'barney'
         *
         * // The `_.matches` iteratee shorthand.
         * _.find(users, { 'age': 1, 'active': true });
         * // => object for 'pebbles'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.find(users, ['active', false]);
         * // => object for 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.find(users, 'active');
         * // => object for 'barney'
         */
        var find = createFind(findIndex);

        module.exports = find;

    }, {"./_createFind": 536, "./findIndex": 603}],
    603: [function (require, module, exports) {
        var baseFindIndex = require('./_baseFindIndex'),
            baseIteratee = require('./_baseIteratee'),
            toInteger = require('./toInteger');

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * This method is like `_.find` except that it returns the index of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.findIndex(users, function(o) { return o.user == 'barney'; });
         * // => 0
         *
         * // The `_.matches` iteratee shorthand.
         * _.findIndex(users, { 'user': 'fred', 'active': false });
         * // => 1
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findIndex(users, ['active', false]);
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.findIndex(users, 'active');
         * // => 2
         */
        function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
                index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, baseIteratee(predicate, 3), index);
        }

        module.exports = findIndex;

    }, {"./_baseFindIndex": 500, "./_baseIteratee": 514, "./toInteger": 633}],
    604: [function (require, module, exports) {
        var baseFlatten = require('./_baseFlatten');

        /**
         * Flattens `array` a single level deep.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flatten([1, [2, [3, [4]], 5]]);
         * // => [1, 2, [3, [4]], 5]
         */
        function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
        }

        module.exports = flatten;

    }, {"./_baseFlatten": 501}],
    605: [function (require, module, exports) {
        var baseFlatten = require('./_baseFlatten');

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /**
         * Recursively flattens `array`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flattenDeep([1, [2, [3, [4]], 5]]);
         * // => [1, 2, 3, 4, 5]
         */
        function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
        }

        module.exports = flattenDeep;

    }, {"./_baseFlatten": 501}],
    606: [function (require, module, exports) {
        var baseGet = require('./_baseGet');

        /**
         * Gets the value at `path` of `object`. If the resolved value is
         * `undefined`, the `defaultValue` is returned in its place.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.get(object, 'a[0].b.c');
         * // => 3
         *
         * _.get(object, ['a', '0', 'b', 'c']);
         * // => 3
         *
         * _.get(object, 'a.b.c', 'default');
         * // => 'default'
         */
        function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }

        module.exports = get;

    }, {"./_baseGet": 504}],
    607: [function (require, module, exports) {
        var baseHasIn = require('./_baseHasIn'),
            hasPath = require('./_hasPath');

        /**
         * Checks if `path` is a direct or inherited property of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.hasIn(object, 'a');
         * // => true
         *
         * _.hasIn(object, 'a.b');
         * // => true
         *
         * _.hasIn(object, ['a', 'b']);
         * // => true
         *
         * _.hasIn(object, 'b');
         * // => false
         */
        function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }

        module.exports = hasIn;

    }, {"./_baseHasIn": 507, "./_hasPath": 552}],
    608: [function (require, module, exports) {
        /**
         * This method returns the first argument it receives.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {*} value Any value.
         * @returns {*} Returns `value`.
         * @example
         *
         * var object = { 'a': 1 };
         *
         * console.log(_.identity(object) === object);
         * // => true
         */
        function identity(value) {
            return value;
        }

        module.exports = identity;

    }, {}],
    609: [function (require, module, exports) {
        var baseIsArguments = require('./_baseIsArguments'),
            isObjectLike = require('./isObjectLike');

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Built-in value references. */
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;

        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */
        var isArguments = baseIsArguments(function () {
            return arguments;
        }()) ? baseIsArguments : function (value) {
            return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                !propertyIsEnumerable.call(value, 'callee');
        };

        module.exports = isArguments;

    }, {"./_baseIsArguments": 508, "./isObjectLike": 618}],
    610: [function (require, module, exports) {
        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */
        var isArray = Array.isArray;

        module.exports = isArray;

    }, {}],
    611: [function (require, module, exports) {
        var isFunction = require('./isFunction'),
            isLength = require('./isLength');

        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */
        function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
        }

        module.exports = isArrayLike;

    }, {"./isFunction": 615, "./isLength": 616}],
    612: [function (require, module, exports) {
        var root = require('./_root'),
            stubFalse = require('./stubFalse');

        /** Detect free variable `exports`. */
        var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Built-in value references. */
        var Buffer = moduleExports ? root.Buffer : undefined;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */
        var isBuffer = nativeIsBuffer || stubFalse;

        module.exports = isBuffer;

    }, {"./_root": 585, "./stubFalse": 629}],
    613: [function (require, module, exports) {
        var baseIsEqual = require('./_baseIsEqual');

        /**
         * Performs a deep comparison between two values to determine if they are
         * equivalent.
         *
         * **Note:** This method supports comparing arrays, array buffers, booleans,
         * date objects, error objects, maps, numbers, `Object` objects, regexes,
         * sets, strings, symbols, and typed arrays. `Object` objects are compared
         * by their own, not inherited, enumerable properties. Functions and DOM
         * nodes are compared by strict equality, i.e. `===`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.isEqual(object, other);
         * // => true
         *
         * object === other;
         * // => false
         */
        function isEqual(value, other) {
            return baseIsEqual(value, other);
        }

        module.exports = isEqual;

    }, {"./_baseIsEqual": 509}],
    614: [function (require, module, exports) {
        var root = require('./_root');

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeIsFinite = root.isFinite;

        /**
         * Checks if `value` is a finite primitive number.
         *
         * **Note:** This method is based on
         * [`Number.isFinite`](https://mdn.io/Number/isFinite).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
         * @example
         *
         * _.isFinite(3);
         * // => true
         *
         * _.isFinite(Number.MIN_VALUE);
         * // => true
         *
         * _.isFinite(Infinity);
         * // => false
         *
         * _.isFinite('3');
         * // => false
         */
        function isFinite(value) {
            return typeof value == 'number' && nativeIsFinite(value);
        }

        module.exports = isFinite;

    }, {"./_root": 585}],
    615: [function (require, module, exports) {
        var baseGetTag = require('./_baseGetTag'),
            isObject = require('./isObject');

        /** `Object#toString` result references. */
        var asyncTag = '[object AsyncFunction]',
            funcTag = '[object Function]',
            genTag = '[object GeneratorFunction]',
            proxyTag = '[object Proxy]';

        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction(value) {
            if (!isObject(value)) {
                return false;
            }
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 9 which returns 'object' for typed arrays and other constructors.
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }

        module.exports = isFunction;

    }, {"./_baseGetTag": 506, "./isObject": 617}],
    616: [function (require, module, exports) {
        /** Used as references for various `Number` constants. */
        var MAX_SAFE_INTEGER = 9007199254740991;

        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */
        function isLength(value) {
            return typeof value == 'number' &&
                value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }

        module.exports = isLength;

    }, {}],
    617: [function (require, module, exports) {
        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject(value) {
            var type = typeof value;
            return value != null && (type == 'object' || type == 'function');
        }

        module.exports = isObject;

    }, {}],
    618: [function (require, module, exports) {
        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */
        function isObjectLike(value) {
            return value != null && typeof value == 'object';
        }

        module.exports = isObjectLike;

    }, {}],
    619: [function (require, module, exports) {
        var baseGetTag = require('./_baseGetTag'),
            isObjectLike = require('./isObjectLike');

        /** `Object#toString` result references. */
        var symbolTag = '[object Symbol]';

        /**
         * Checks if `value` is classified as a `Symbol` primitive or object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
         * @example
         *
         * _.isSymbol(Symbol.iterator);
         * // => true
         *
         * _.isSymbol('abc');
         * // => false
         */
        function isSymbol(value) {
            return typeof value == 'symbol' ||
                (isObjectLike(value) && baseGetTag(value) == symbolTag);
        }

        module.exports = isSymbol;

    }, {"./_baseGetTag": 506, "./isObjectLike": 618}],
    620: [function (require, module, exports) {
        var baseIsTypedArray = require('./_baseIsTypedArray'),
            baseUnary = require('./_baseUnary'),
            nodeUtil = require('./_nodeUtil');

        /* Node.js helper references. */
        var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

        module.exports = isTypedArray;

    }, {"./_baseIsTypedArray": 513, "./_baseUnary": 530, "./_nodeUtil": 581}],
    621: [function (require, module, exports) {
        var arrayLikeKeys = require('./_arrayLikeKeys'),
            baseKeys = require('./_baseKeys'),
            isArrayLike = require('./isArrayLike');

        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */
        function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }

        module.exports = keys;

    }, {"./_arrayLikeKeys": 491, "./_baseKeys": 515, "./isArrayLike": 611}],
    622: [function (require, module, exports) {
        /**
         * Gets the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the last element of `array`.
         * @example
         *
         * _.last([1, 2, 3]);
         * // => 3
         */
        function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined;
        }

        module.exports = last;

    }, {}],
    623: [function (require, module, exports) {
        var arrayMap = require('./_arrayMap'),
            baseIteratee = require('./_baseIteratee'),
            baseMap = require('./_baseMap'),
            isArray = require('./isArray');

        /**
         * Creates an array of values by running each element in `collection` thru
         * `iteratee`. The iteratee is invoked with three arguments:
         * (value, index|key, collection).
         *
         * Many lodash methods are guarded to work as iteratees for methods like
         * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
         *
         * The guarded methods are:
         * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
         * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
         * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
         * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * _.map([4, 8], square);
         * // => [16, 64]
         *
         * _.map({ 'a': 4, 'b': 8 }, square);
         * // => [16, 64] (iteration order is not guaranteed)
         *
         * var users = [
         *   { 'user': 'barney' },
         *   { 'user': 'fred' }
         * ];
         *
         * // The `_.property` iteratee shorthand.
         * _.map(users, 'user');
         * // => ['barney', 'fred']
         */
        function map(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, baseIteratee(iteratee, 3));
        }

        module.exports = map;

    }, {"./_arrayMap": 492, "./_baseIteratee": 514, "./_baseMap": 516, "./isArray": 610}],
    624: [function (require, module, exports) {
        var MapCache = require('./_MapCache');

        /** Error message constants. */
        var FUNC_ERROR_TEXT = 'Expected a function';

        /**
         * Creates a function that memoizes the result of `func`. If `resolver` is
         * provided, it determines the cache key for storing the result based on the
         * arguments provided to the memoized function. By default, the first argument
         * provided to the memoized function is used as the map cache key. The `func`
         * is invoked with the `this` binding of the memoized function.
         *
         * **Note:** The cache is exposed as the `cache` property on the memoized
         * function. Its creation may be customized by replacing the `_.memoize.Cache`
         * constructor with one whose instances implement the
         * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
         * method interface of `clear`, `delete`, `get`, `has`, and `set`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to have its output memoized.
         * @param {Function} [resolver] The function to resolve the cache key.
         * @returns {Function} Returns the new memoized function.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         * var other = { 'c': 3, 'd': 4 };
         *
         * var values = _.memoize(_.values);
         * values(object);
         * // => [1, 2]
         *
         * values(other);
         * // => [3, 4]
         *
         * object.a = 2;
         * values(object);
         * // => [1, 2]
         *
         * // Modify the result cache.
         * values.cache.set(object, ['a', 'b']);
         * values(object);
         * // => ['a', 'b']
         *
         * // Replace `_.memoize.Cache`.
         * _.memoize.Cache = WeakMap;
         */
        function memoize(func, resolver) {
            if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            var memoized = function () {
                var args = arguments,
                    key = resolver ? resolver.apply(this, args) : args[0],
                    cache = memoized.cache;

                if (cache.has(key)) {
                    return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
            };
            memoized.cache = new (memoize.Cache || MapCache);
            return memoized;
        }

// Expose `MapCache`.
        memoize.Cache = MapCache;

        module.exports = memoize;

    }, {"./_MapCache": 480}],
    625: [function (require, module, exports) {
        var basePick = require('./_basePick'),
            flatRest = require('./_flatRest');

        /**
         * Creates an object composed of the picked `object` properties.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.pick(object, ['a', 'c']);
         * // => { 'a': 1, 'c': 3 }
         */
        var pick = flatRest(function (object, paths) {
            return object == null ? {} : basePick(object, paths);
        });

        module.exports = pick;

    }, {"./_basePick": 519, "./_flatRest": 542}],
    626: [function (require, module, exports) {
        var baseProperty = require('./_baseProperty'),
            basePropertyDeep = require('./_basePropertyDeep'),
            isKey = require('./_isKey'),
            toKey = require('./_toKey');

        /**
         * Creates a function that returns the value at `path` of a given object.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': 2 } },
         *   { 'a': { 'b': 1 } }
         * ];
         *
         * _.map(objects, _.property('a.b'));
         * // => [2, 1]
         *
         * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
         * // => [1, 2]
         */
        function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }

        module.exports = property;

    }, {"./_baseProperty": 521, "./_basePropertyDeep": 522, "./_isKey": 561, "./_toKey": 597}],
    627: [function (require, module, exports) {
        var createRange = require('./_createRange');

        /**
         * Creates an array of numbers (positive and/or negative) progressing from
         * `start` up to, but not including, `end`. A step of `-1` is used if a negative
         * `start` is specified without an `end` or `step`. If `end` is not specified,
         * it's set to `start` with `start` then set to `0`.
         *
         * **Note:** JavaScript follows the IEEE-754 standard for resolving
         * floating-point values which can produce unexpected results.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @param {number} [step=1] The value to increment or decrement by.
         * @returns {Array} Returns the range of numbers.
         * @see _.inRange, _.rangeRight
         * @example
         *
         * _.range(4);
         * // => [0, 1, 2, 3]
         *
         * _.range(-4);
         * // => [0, -1, -2, -3]
         *
         * _.range(1, 5);
         * // => [1, 2, 3, 4]
         *
         * _.range(0, 20, 5);
         * // => [0, 5, 10, 15]
         *
         * _.range(0, -4, -1);
         * // => [0, -1, -2, -3]
         *
         * _.range(1, 4, 0);
         * // => [1, 1, 1]
         *
         * _.range(0);
         * // => []
         */
        var range = createRange();

        module.exports = range;

    }, {"./_createRange": 537}],
    628: [function (require, module, exports) {
        /**
         * This method returns a new empty array.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Array} Returns the new empty array.
         * @example
         *
         * var arrays = _.times(2, _.stubArray);
         *
         * console.log(arrays);
         * // => [[], []]
         *
         * console.log(arrays[0] === arrays[1]);
         * // => false
         */
        function stubArray() {
            return [];
        }

        module.exports = stubArray;

    }, {}],
    629: [function (require, module, exports) {
        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */
        function stubFalse() {
            return false;
        }

        module.exports = stubFalse;

    }, {}],
    630: [function (require, module, exports) {
        var baseSum = require('./_baseSum'),
            identity = require('./identity');

        /**
         * Computes the sum of the values in `array`.
         *
         * @static
         * @memberOf _
         * @since 3.4.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {number} Returns the sum.
         * @example
         *
         * _.sum([4, 2, 8, 6]);
         * // => 20
         */
        function sum(array) {
            return (array && array.length)
                ? baseSum(array, identity)
                : 0;
        }

        module.exports = sum;

    }, {"./_baseSum": 527, "./identity": 608}],
    631: [function (require, module, exports) {
        var baseSlice = require('./_baseSlice'),
            toInteger = require('./toInteger');

        /**
         * Creates a slice of `array` with `n` elements taken from the beginning.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.take([1, 2, 3]);
         * // => [1]
         *
         * _.take([1, 2, 3], 2);
         * // => [1, 2]
         *
         * _.take([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.take([1, 2, 3], 0);
         * // => []
         */
        function take(array, n, guard) {
            if (!(array && array.length)) {
                return [];
            }
            n = (guard || n === undefined) ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }

        module.exports = take;

    }, {"./_baseSlice": 526, "./toInteger": 633}],
    632: [function (require, module, exports) {
        var toNumber = require('./toNumber');

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0,
            MAX_INTEGER = 1.7976931348623157e+308;

        /**
         * Converts `value` to a finite number.
         *
         * @static
         * @memberOf _
         * @since 4.12.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted number.
         * @example
         *
         * _.toFinite(3.2);
         * // => 3.2
         *
         * _.toFinite(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toFinite(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toFinite('3.2');
         * // => 3.2
         */
        function toFinite(value) {
            if (!value) {
                return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
                var sign = (value < 0 ? -1 : 1);
                return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
        }

        module.exports = toFinite;

    }, {"./toNumber": 634}],
    633: [function (require, module, exports) {
        var toFinite = require('./toFinite');

        /**
         * Converts `value` to an integer.
         *
         * **Note:** This method is loosely based on
         * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toInteger(3.2);
         * // => 3
         *
         * _.toInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toInteger(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toInteger('3.2');
         * // => 3
         */
        function toInteger(value) {
            var result = toFinite(value),
                remainder = result % 1;

            return result === result ? (remainder ? result - remainder : result) : 0;
        }

        module.exports = toInteger;

    }, {"./toFinite": 632}],
    634: [function (require, module, exports) {
        var isObject = require('./isObject'),
            isSymbol = require('./isSymbol');

        /** Used as references for various `Number` constants. */
        var NAN = 0 / 0;

        /** Used to match leading and trailing whitespace. */
        var reTrim = /^\s+|\s+$/g;

        /** Used to detect bad signed hexadecimal string values. */
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

        /** Used to detect binary string values. */
        var reIsBinary = /^0b[01]+$/i;

        /** Used to detect octal string values. */
        var reIsOctal = /^0o[0-7]+$/i;

        /** Built-in method references without a dependency on `root`. */
        var freeParseInt = parseInt;

        /**
         * Converts `value` to a number.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to process.
         * @returns {number} Returns the number.
         * @example
         *
         * _.toNumber(3.2);
         * // => 3.2
         *
         * _.toNumber(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toNumber(Infinity);
         * // => Infinity
         *
         * _.toNumber('3.2');
         * // => 3.2
         */
        function toNumber(value) {
            if (typeof value == 'number') {
                return value;
            }
            if (isSymbol(value)) {
                return NAN;
            }
            if (isObject(value)) {
                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                value = isObject(other) ? (other + '') : other;
            }
            if (typeof value != 'string') {
                return value === 0 ? value : +value;
            }
            value = value.replace(reTrim, '');
            var isBinary = reIsBinary.test(value);
            return (isBinary || reIsOctal.test(value))
                ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                : (reIsBadHex.test(value) ? NAN : +value);
        }

        module.exports = toNumber;

    }, {"./isObject": 617, "./isSymbol": 619}],
    635: [function (require, module, exports) {
        var baseToString = require('./_baseToString');

        /**
         * Converts `value` to a string. An empty string is returned for `null`
         * and `undefined` values. The sign of `-0` is preserved.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.toString(null);
         * // => ''
         *
         * _.toString(-0);
         * // => '-0'
         *
         * _.toString([1, 2, 3]);
         * // => '1,2,3'
         */
        function toString(value) {
            return value == null ? '' : baseToString(value);
        }

        module.exports = toString;

    }, {"./_baseToString": 529}],
    636: [function (require, module, exports) {
        'use strict';

        module.exports = function asum(x) {
            var i;
            var dx = x.data;
            var ox = x.stride[0];
            var px = x.offset;
            var sum = 0;
            for (i = x.shape[0] - 1; i >= 0; i--, px += ox) {
                sum += Math.abs(dx[px]);
            }
            return sum;
        };

    }, {}],
    637: [function (require, module, exports) {
        'use strict';

        module.exports = function axpy(alpha, x, y) {
            var i;
            var dx = x.data;
            var dy = y.data;
            var ox = x.stride[0];
            var oy = y.stride[0];
            var px = x.offset;
            var py = y.offset;
            for (i = x.shape[0] - 1; i >= 0; i--, px += ox, py += oy) {
                dy[py] += alpha * dx[px];
            }
        };

    }, {}],
    638: [function (require, module, exports) {
        'use strict';

        module.exports = function copy(x, y) {
            var i;
            var dx = x.data;
            var dy = y.data;
            var ox = x.stride[0];
            var oy = y.stride[0];
            var px = x.offset;
            var py = y.offset;
            for (i = x.shape[0] - 1; i >= 0; i--, px += ox, py += oy) {
                dy[py] = dx[px];
            }
        };

    }, {}],
    639: [function (require, module, exports) {
        'use strict';

        module.exports = function cpsc(alpha, x, y) {
            var i;
            var dx = x.data;
            var dy = y.data;
            var ox = x.stride[0];
            var oy = y.stride[0];
            var px = x.offset;
            var py = y.offset;
            for (i = x.shape[0] - 1; i >= 0; i--, px += ox, py += oy) {
                dy[py] = alpha * dx[px];
            }
        };

    }, {}],
    640: [function (require, module, exports) {
        'use strict';

        module.exports = function dot(x, y) {
            var i, tmp;
            var dx = x.data;
            var ox = x.stride[0];
            var px = x.offset;

            var sum = 0;
            if (x === y) {
                for (i = x.shape[0] - 1; i >= 0; i--, px += ox) {
                    tmp = dx[px];
                    sum += tmp * tmp;
                }
            } else {
                var dy = y.data;
                var oy = y.stride[0];
                var py = y.offset;
                for (i = x.shape[0] - 1; i >= 0; i--, px += ox, py += oy) {
                    sum += dy[py] * dx[px];
                }
            }
            return sum;
        };

    }, {}],
    641: [function (require, module, exports) {
        'use strict';

        module.exports = function iamax(x) {
            var i, tmp, imax;
            var xmax = -Infinity;
            var dx = x.data;
            var ox = x.stride[0];
            var px = x.offset;
            var l = x.shape[0];
            for (i = 0; i < l; i++, px += ox) {
                tmp = Math.abs(dx[px]);
                if (tmp > xmax) {
                    xmax = tmp;
                    imax = i;
                }
            }
            return imax;
        };

    }, {}],
    642: [function (require, module, exports) {
        'use strict';

        module.exports.swap = require('./swap');
        module.exports.scal = require('./scal');
        module.exports.copy = require('./copy');
        module.exports.axpy = require('./axpy');
        module.exports.dot = require('./dot');
        module.exports.cpsc = require('./cpsc');
        module.exports.nrm2 = require('./nrm2');
        module.exports.asum = require('./asum');
        module.exports.iamax = require('./iamax');
        module.exports.rotg = require('./rotg');

    }, {
        "./asum": 636,
        "./axpy": 637,
        "./copy": 638,
        "./cpsc": 639,
        "./dot": 640,
        "./iamax": 641,
        "./nrm2": 643,
        "./rotg": 644,
        "./scal": 645,
        "./swap": 646
    }],
    643: [function (require, module, exports) {
        'use strict';

        var hypot = function hypot(a, b) {
            if (a === 0 && b === 0) {
                return 0;
            }
            var x = Math.abs(a);
            var y = Math.abs(b);
            var t = Math.min(x, y);
            var u = Math.max(x, y);
            t = t / u;
            return u * Math.sqrt(1 + t * t);
        };

        module.exports = function nrm2(x) {
            var i, tmp;
            var dx = x.data;
            var ox = x.stride[0];
            var px = x.offset;
            var sum = 0;
            for (i = x.shape[0] - 1; i >= 0; i--, px += ox) {
                tmp = dx[px];
                sum = hypot(sum, tmp);
            }
            return sum;
        };

    }, {}],
    644: [function (require, module, exports) {
        'use strict';

        Math.sign = Math.sign || function (x) {
            x = +x; // convert to a number
            if (x === 0 || isNaN(x)) {
                return x;
            }
            return x > 0 ? 1 : -1;
        };

        module.exports = function rotg(a, b, csr) {
            // Based on Algorithm 4 from "Discontinuous Plane
            // Rotations and the Symmetric Eigenvalue Problem"
            // by Anderson, 2000.
            var c = 0;
            var s = 0;
            var r = 0;
            var t = 0;
            var u = 0;

            if (b === 0) {
                c = Math.sign(a);
                s = 0;
                r = Math.abs(a);
            } else if (a === 0) {
                c = 0;
                s = Math.sign(b);
                r = Math.abs(b);
            } else if (Math.abs(a) > Math.abs(b)) {
                t = b / a;
                u = Math.sign(a) * Math.sqrt(1 + t * t);
                c = 1 / u;
                s = t * c;
                r = a * u;
            } else {
                t = a / b;
                u = Math.sign(a) * Math.sqrt(1 + t * t);
                s = 1 / u;
                c = t * s;
                r = b * u;
            }
            // try to save some unnecessary object creation
            if (csr !== undefined && csr.length > 2) {
                csr[0] = c;
                csr[1] = s;
                csr[2] = r;
            } else {
                return [c, s, r];
            }
        };


    }, {}],
    645: [function (require, module, exports) {
        'use strict';

        module.exports = function scal(alpha, x) {
            var i;
            var dx = x.data;
            var ox = x.stride[0];
            var px = x.offset;
            for (i = x.shape[0] - 1; i >= 0; i--, px += ox) {
                dx[px] *= alpha;
            }
        };

    }, {}],
    646: [function (require, module, exports) {
        'use strict';

        module.exports = function swap(x, y) {
            var i, tmp;
            var dx = x.data;
            var dy = y.data;

            var ox = x.stride[0];
            var oy = y.stride[0];
            var px = x.offset;
            var py = y.offset;

            for (i = x.shape[0] - 1; i >= 0; i--, px += ox, py += oy) {
                tmp = dx[px];
                dx[px] = dy[py];
                dy[py] = tmp;
            }
        };

    }, {}],
    647: [function (require, module, exports) {
        'use strict';

        module.exports = gbmv;

        function gbmv(A, kl, ku, x, y, alpha, beta) {
            var r = 0;
            var i = 0;
            var c = 0;
            var sum = 0;
            var idx = 0;
            var m = A.shape[0];
            var n = A.shape[1];
            var Kl = Math.min(kl, m - 1);
            var Ku = Math.min(ku, n - 1);

            var alpha0 = alpha === undefined ? 1 : alpha;
            var beta0 = beta === undefined ? 0 : beta;

            while (r <= Kl) {
                sum = 0;
                var max = Math.min(r + Ku, n - 1);
                for (c = 0; c <= max; c++) {
                    sum += A.get(r, c) * x.get(c);
                }
                y.set(r, sum * alpha0 + beta0 * y.get(r));
                r++;
            }
            if (r < m) {
                i = 0;
                while (r + Ku < n) {
                    sum = 0;
                    for (c = 0; c <= Kl + Ku; c++) {
                        idx = i + c + 1;
                        sum += A.get(r, idx) * x.get(idx);
                    }
                    y.set(r, sum * alpha0 + beta0 * y.get(r));
                    r++;
                    i++;
                    if (r === m) {
                        break;
                    }
                }
            }
            if (r < m) {
                i++;
                while (r - Kl < n) {
                    sum = 0;
                    for (c = i; c < n; c++) {
                        sum += A.get(r, c) * x.get(c);
                    }
                    y.set(r, sum * alpha0 + beta0 * y.get(r));
                    r++;
                    i++;
                    if (r === m) {
                        break;
                    }
                }
            }
            return true;
        }

    }, {}],
    648: [function (require, module, exports) {
        'use strict';

        var blas1 = require('ndarray-blas-level1');

        module.exports = gemv;

        function gemv(alpha, A, x, beta, y) {
            var dot = blas1.dot;
            for (var i = A.shape[0] - 1; i >= 0; i--) {
                y.set(i, y.get(i) * beta + alpha * dot(A.pick(i, null), x));
            }
            return true;
        }

    }, {"ndarray-blas-level1": 642}],
    649: [function (require, module, exports) {
        'use strict';

        module.exports = ger;

        function ger() {
            console.error('GER (rank 1 operation A := alpha*x*y\' + A) not yet implemented');
        }

    }, {}],
    650: [function (require, module, exports) {
        'use strict';

        module.exports.gemv = require('./gemv');
        module.exports.gbmv = require('./gbmv');
        module.exports.symv = require('./symv');
        module.exports.sbmv = require('./sbmv');
        module.exports.spmv = require('./spmv');
        module.exports.trmv = require('./trmv');
        module.exports.tbmv = require('./tbmv');
        module.exports.trsv = require('./trsv');
        module.exports.tbsv = require('./tbsv');
        module.exports.tpsv = require('./tpsv');
        module.exports.ger = require('./ger');
        module.exports.syr = require('./syr');
        module.exports.spr = require('./spr');
        module.exports.syr2 = require('./syr2');
        module.exports.spr2 = require('./spr2');

        module.exports.trmv_lower = function (A, x) {
            console.warn('trmv_lower is deprecated. Please use the \'isLower\' flag with trmv.');
            return module.exports.trmv(A, x, true);
        };

        module.exports.trsv_lower = function (A, x) {
            console.warn('trsv_lower is deprecated. Please use the \'isLower\' flag with trsv.');
            return module.exports.trsv(A, x, true);
        };

    }, {
        "./gbmv": 647,
        "./gemv": 648,
        "./ger": 649,
        "./sbmv": 651,
        "./spmv": 652,
        "./spr": 653,
        "./spr2": 654,
        "./symv": 655,
        "./syr": 656,
        "./syr2": 657,
        "./tbmv": 658,
        "./tbsv": 659,
        "./tpsv": 660,
        "./trmv": 661,
        "./trsv": 662
    }],
    651: [function (require, module, exports) {
        'use strict';

        module.exports = sbmv;

        function sbmv() {
            console.error('SBMV (symmetric banded matrix vector multiply) not yet implemented');
        }

    }, {}],
    652: [function (require, module, exports) {
        'use strict';

        module.exporst = spmv;

        function spmv() {
            console.error('SPMV (symmetric packed matrix vector multiply) not yet implemented');
        }

    }, {}],
    653: [function (require, module, exports) {
        'use strict';

        module.exports = spr;

        function spr() {
            console.error('SPR (symmetric packed rank 1 operation A := alpha*x*y\' + A) not yet implemented');
        }

    }, {}],
    654: [function (require, module, exports) {
        'use strict';

        module.exports = spr2;

        function spr2() {
            console.error('SPR (symmetric packed rank 2 operation A := alpha*x*y\' + alpha*y*x\' + A) not yet implemented');
        }

    }, {}],
    655: [function (require, module, exports) {
        'use strict';

        var blas1 = require('ndarray-blas-level1');

        module.exports = symv;

        function symv(A, x, y, fromLower, alpha, beta) {
            var n = A.shape[0];

            var lower = fromLower || true;
            var alpha0 = alpha === undefined ? 1 : alpha;
            var beta0 = beta === undefined ? 0 : beta;

            var i = 0;
            var j = 0;
            var t1 = 0;
            var t2 = 0;

            if (beta0 === 0) {
                for (i = 0; i < y.shape[0]; ++i) {
                    y.set(i, 0);
                }
            } else if (beta0 !== 1) {
                blas1.scal(beta0, y);
            }
            if (alpha0 === 0) {
                return true;
            } else if (alpha0 === 1) {
                if (lower) {
                    for (j = 0; j < n; ++j) {
                        t1 = x.get(j);
                        t2 = 0;
                        y.set(j, y.get(j) + t1 * A.get(j, j));
                        for (i = j + 1; i < n; ++i) {
                            y.set(i, y.get(i) + t1 * A.get(i, j));
                            t2 = t2 + A.get(i, j) * x.get(i);
                        }
                        y.set(j, y.get(j) + t2);
                    }
                } else {
                    for (j = 0; j < n; ++j) {
                        t1 = x.get(j);
                        t2 = 0;
                        for (i = 0; i <= j - 1; ++i) {
                            y.set(i, y.get(i) + t1 * A.get(i, j));
                            t2 = t2 + A.get(i, j) * x.get(i);
                        }
                        y.set(j, y.get(j) + t1 * A.get(j, j) + t2);
                    }
                }
            } else {
                if (lower) {
                    for (j = 0; j < n; ++j) {
                        t1 = alpha0 * x.get(j);
                        t2 = 0;
                        y.set(j, y.get(j) + t1 * A.get(j, j));
                        for (i = j + 1; i < n; ++i) {
                            y.set(i, y.get(i) + t1 * A.get(i, j));
                            t2 = t2 + A.get(i, j) * x.get(i);
                        }
                        y.set(j, y.get(j) + alpha0 * t2);
                    }
                } else {
                    for (j = 0; j < n; ++j) {
                        t1 = alpha0 * x.get(j);
                        t2 = 0;
                        for (i = 0; i <= j - 1; ++i) {
                            y.set(i, y.get(i) + t1 * A.get(i, j));
                            t2 = t2 + A.get(i, j) * x.get(i);
                        }
                        y.set(j, y.get(j) + t1 * A.get(j, j) + alpha0 * t2);
                    }
                }
            }

            return true;
        }

    }, {"ndarray-blas-level1": 642}],
    656: [function (require, module, exports) {
        'use strict';

        module.exports = syr;

        function syr() {
            console.error('SYR (symmetric rank 1 operation A := alpha*x*y\' + A) not yet implemented');
        }

    }, {}],
    657: [function (require, module, exports) {
        'use strict';

        module.exports = syr2;

        function syr2() {
            console.error('SYR (symmetric rank 2 operation A := alpha*x*y\' + alpha*y*x\' + A) not yet implemented');
        }

    }, {}],
    658: [function (require, module, exports) {
        'use strict';

        module.exports = tbmv;

        function tbmv() {
            console.error('TBMV (triangular banded matrix vector multiply) not yet implemented');
        }

    }, {}],
    659: [function (require, module, exports) {
        'use strict';

        module.exporst = tbsv;

        function tbsv() {
            console.error('TBSV (triangular banded matrix solver) not yet implemented');
        }

    }, {}],
    660: [function (require, module, exports) {
        'use strict';

        module.exports = tpsv;

        function tpsv() {
            console.error('TPSV (triangular packed matrix solver) not yet implemented');
        }

    }, {}],
    661: [function (require, module, exports) {
        'use strict';

        var blas1 = require('ndarray-blas-level1');

        module.exports = trmv;

// Compute the product of an upper triangular matrix with a vector
        function trmv(A, x, isLower) {
            var dot = blas1.dot;
            var n = A.shape[1];
            var i = 0;
            if (isLower) {
                for (i = n - 1; i >= 0; i--) {
                    x.set(i, dot(A.pick(i, null).hi(i + 1), x.hi(i + 1)));
                }
            } else {
                for (i = 0; i < n; i++) {
                    x.set(i, dot(A.pick(i, null).lo(i), x.lo(i)));
                }
            }
            return true;
        }

    }, {"ndarray-blas-level1": 642}],
    662: [function (require, module, exports) {
        'use strict';

        var blas1 = require('ndarray-blas-level1');

        module.exports = trsv;

// Solve Ax=b where A is upper triangular
        function trsv(A, x, isLower) {
            var dot = blas1.dot;
            var n = A.shape[1];
            var i = 0;
            if (isLower) {
                x.set(0, x.get(0) / A.get(0, 0));
                for (i = 1; i < n; i++) {
                    x.set(i, (x.get(i) - dot(A.pick(i, null).hi(i), x.hi(i))) / A.get(i, i));
                }
            } else {
                x.set(n - 1, x.get(n - 1) / A.get(n - 1, n - 1));
                for (i = n - 2; i >= 0; i--) {
                    x.set(i, (x.get(i) - dot(A.pick(i, null).lo(i + 1), x.lo(i + 1))) / A.get(i, i));
                }
            }
            return true;
        }

    }, {"ndarray-blas-level1": 642}],
    663: [function (require, module, exports) {
        'use strict'

        module.exports = concatRows
        var extend = require('util-extend')
        var ops = require('ndarray-ops')
        var pool = require('ndarray-scratch')

        var defaults = {
            dtype: 'double'
        }

        function concatRows() {
            var output, input, inputs, options, d, i, shape, idx, l, slice

            options = extend({}, defaults)

            if (arguments.length === 0) {
                throw new Error('Array of ndarrays to concatenate must not be empty')
            }

            if (Array.isArray(arguments[0])) {
                // If the first argument is an array, then assume it's the list
                // of arrays to concatenate:
                inputs = arguments[0]
                extend(options, arguments[1] || {})
            } else if (arguments.length === 2) {
                // Otherwise assume the first argument is the output array:
                inputs = arguments[1]
                output = arguments[0]
                extend(options, arguments[2] || {})
            }

            if (inputs.length === 0) {
                throw new Error('Array of ndarrays to concatenate must not be empty')
            }

            for (d = 0; d < inputs.length; d++) {
                // Verify the other dimensions:
                if (!shape) {
                    // If no shape is set, set it:
                    shape = inputs[d].shape.slice(0)
                } else {
                    // At the very least, all arrays must share teh same dimensionality:
                    if (inputs[d].dimension !== shape.length) {
                        throw new Error('all arrays must have the same dimensionality')
                    }
                    // If shape is set, then this shape must match:
                    for (i = 1; i < inputs[d].shape.length; i++) {
                        if (inputs[d].shape[i] !== shape[i]) {
                            throw new Error('last n-1 dimensions of concatenated rows must have the same size')
                        }
                    }

                    // Add to the size of the concatenated dimension:
                    shape[0] += inputs[d].shape[0]
                }
            }

            if (output) {
                if (shape[0] !== output.shape[0]) {
                    throw new Error('first dimension of output array must match the total number of concatenated rows')
                }
            } else {
                // NB: Nothing after this can fail, otherwise we leak memory. So all
                // assertions MUST happen before this.
                output = pool.zeros(shape, options.dtype)
            }

            for (i = 0, idx = 0; i < inputs.length; i++) {
                input = inputs[i]
                l = input.shape[0]
                slice = output.lo(idx).hi(l)
                ops.assign(slice, input)
                idx += l
            }

            return output
        }

    }, {"ndarray-ops": "ndarray-ops", "ndarray-scratch": 666, "util-extend": 686}],
    664: [function (require, module, exports) {
        "use strict"

        module.exports = matrixProduct

        var generatePlan = require("./lib/planner.js")

        function shape(arr) {
            if (Array.isArray(arr)) {
                return [arr.length, arr[0].length]
            } else {
                return arr.shape
            }
        }

        function checkShapes(out, a, b) {
            var os = shape(out)
            var as = shape(a)
            var bs = shape(b)
            if (os[0] !== as[0] || os[1] !== bs[1] || as[1] !== bs[0]) {
                throw new Error("Mismatched array shapes for matrix product")
            }
        }

        function classifyType(m) {
            if (Array.isArray(m)) {
                if (Array.isArray(m)) {
                    return ["r", "native"]
                }
            } else if (m.shape && (m.shape.length === 2)) {
                if (m.order[0]) {
                    return ["r", m.dtype]
                } else {
                    return ["c", m.dtype]
                }
            }
            throw new Error("Unrecognized data type")
        }

        var CACHE = {}

        function matrixProduct(out, a, b, alpha, beta) {
            if (alpha === undefined) {
                alpha = 1.0
            }
            if (beta === undefined) {
                beta = 0.0
            }
            var useAlpha = (alpha !== 1.0)
            var useBeta = (beta !== 0.0)
            var outType = classifyType(out)
            var aType = classifyType(a)
            var bType = classifyType(b)

            checkShapes(out, a, b)

            var typeSig = [outType, aType, bType, useAlpha, useBeta].join(":")
            var proc = CACHE[typeSig]
            if (!proc) {
                proc = CACHE[typeSig] = generatePlan(outType, aType, bType, useAlpha, useBeta)
            }
            return proc(out, a, b, alpha, beta)
        }
    }, {"./lib/planner.js": 665}],
    665: [function (require, module, exports) {
        "use strict"

        module.exports = generateMatrixProduct

        var BLOCK_SIZE = 32

        function unpackOrder(order) {
            return order === "r" ? [1, 0] : [0, 1]
        }

        function unpackShape(name, type) {
            if (type[1] === "native") {
                return [
                    name, "d0=", name, ".length,",
                    name, "d1=", name, "[0].length,"
                ].join("")
            } else {
                return [
                    name, "d0=", name, ".shape[0],",
                    name, "d1=", name, ".shape[1],",
                    name, "s0=", name, ".stride[0],",
                    name, "s1=", name, ".stride[1],",
                    name, "o=", name, ".offset,",
                    name, "d=", name, ".data,"
                ].join("")
            }
        }

        function start(order, name, type, i, j, w) {
            var code = []
            if (type[1] === "native") {
                if (order[0]) {
                    if (i) {
                        code.push("var ", name, "p=", name, "[", i, "];")
                    } else {
                        code.push("var ", name, "p=", name, "[0];")
                    }
                }
            } else {
                if (i && j) {
                    if (w) {
                        code.push(
                            "var ", name, "t0=", name, "s", order[0], ",",
                            name, "t1=", name, "s", order[1], "-", name, "s", order[0], "*", w, ",",
                            name, "p=", name, "o+", i, "*", name, "s0+", j, "*", name, "s1;")
                    } else {
                        code.push(
                            "var ", name, "t0=", name, "s", order[0], ",",
                            name, "p=", name, "o+", i, "*", name, "s0+", j, "*", name, "s1;")
                    }
                } else if (i) {
                    code.push(
                        "var ", name, "t0=", name, "s", order[0], ",",
                        name, "p=", name, "o+", i, "*", name, "s0;")
                } else if (j) {
                    code.push(
                        "var ", name, "t0=", name, "s", order[0], ",",
                        name, "p=", name, "o+", j, "*", name, "s1;")
                } else {
                    code.push(
                        "var ", name, "t0=", name, "s", order[0], ",",
                        name, "t1=", name, "s", order[1], "-", name, "s", order[0], "*", name, "d", order[0], ",",
                        name, "p=", name, "o;")
                }
            }
            return code
        }

        function walk(order, name, type, d, i) {
            var code = []
            if (type[1] === "native") {
                if (order[0] && d === 1) {
                    code.push(name, "p=", name, "[", i, "+1]")
                }
            } else {
                code.push(name, "p+=", name, "t", d, ";")
            }
            return code
        }

        function write(order, name, type, i, j, w) {
            var code = []
            if (type[1] === "native") {
                if (order[0]) {
                    code.push(name, "p[", j, "]=", w, ";")
                } else {
                    code.push(name, "[", i, "][", j, "]=", w, ";")
                }
            } else if (type[1] === "generic") {
                code.push(name, "d.set(", name, "p,", w, ");")
            } else {
                code.push(name, "d[", name, "p]=", w, ";")
            }
            return code
        }

        function read(order, name, type, i, j) {
            var code = []
            if (type[1] === "native") {
                if (order[0]) {
                    code.push(name, "p[", j, "]")
                } else {
                    code.push(name, "[", i, "][", j, "]")
                }
            } else if (type[1] === "generic") {
                code.push(name, "d.get(", name, "p)")
            } else {
                code.push(name, "d[", name, "p]")
            }
            return code.join("")
        }

        function generateRowColumnLoop(oType, aType, bType, useAlpha, useBeta) {
            var code = []
            var oOrd = oType[0] === "r" ? [1, 0] : [0, 1], aOrd = [1, 0], bOrd = [0, 1]
            var symbols = ["i", "j"]

            code.push.apply(code, start(oOrd, "o", oType))

            if (oOrd[1]) {
                code.push("for(j=0;j<od1;++j){")
                code.push("for(i=0;i<od0;++i){")
            } else {
                code.push("for(i=0;i<od0;++i){")
                code.push("for(j=0;j<od1;++j){")
            }

            code.push.apply(code, start(aOrd, "a", aType, "i"))
            code.push.apply(code, start(bOrd, "b", bType, undefined, "j"))

            code.push(
                "var r=0.0;",
                "for(k=0;k<ad1;++k){",
                "r+=",
                read(aOrd, "a", aType, "i", "k"), "*",
                read(bOrd, "b", bType, "k", "j"), ";")

            //Terminate k loop
            code.push.apply(code, walk(aOrd, "a", aType, 0, "k"))
            code.push.apply(code, walk(bOrd, "b", bType, 0, "k"))
            code.push("}")

            //Write r to output
            if (useAlpha) {
                code.push("r*=A;")
            }
            if (useBeta) {
                code.push("r+=B*", read(oOrd, "o", oType, "i", "j"), ";")
            }
            code.push.apply(code, write(oOrd, "o", oType, "i", "j", "r"))

            //Terminate j loop loop
            code.push.apply(code, walk(oOrd, "o", oType, 0, symbols[1]))
            code.push("}")

            //Terminate i loop
            code.push.apply(code, walk(oOrd, "o", oType, 1, symbols[0]))
            code.push("}")

            return code
        }

        function generateBetaPass(oType, useBeta) {
            var code = []
            var oOrd = oType[0] === "r" ? [1, 0] : [0, 1], symbols
            if (useBeta) {
                code.push("if(B!==1.0){")
            }
            code.push.apply(code, start(oOrd, "o", oType))
            if (oOrd[0]) {
                code.push("for(i=0;i<od0;++i){for(j=0;j<od1;++j){")
                symbols = ["i", "j"]
            } else {
                code.push("for(j=0;j<od1;++j){for(i=0;i<od0;++i){")
                symbols = ["j", "i"]
            }
            if (useBeta) {
                code.push.apply(code, write(oOrd, "o", oType, "i", "j",
                    "B*" + read(oOrd, "o", oType, "i", "j")))
            } else {
                code.push.apply(code, write(oOrd, "o", oType, "i", "j", "0"))
            }
            code.push.apply(code, walk(oOrd, "o", oType, 0, symbols[1]))
            code.push("}")
            code.push.apply(code, walk(oOrd, "o", oType, 1, symbols[0]))
            code.push("}")
            if (useBeta) {
                code.push("}")
            }
            return code
        }

        function generateBlockLoop(oType, aType, bType, useAlpha, useBeta) {
            var code = []
            var shapes = ["od0", "od1", "ad1"]
            var oOrd = [1, 0]
            var aOrd = [1, 0]
            var bOrd = [0, 1]

            //Do pass over output to zero it out
            code.push.apply(code, generateBetaPass(oType, useBeta))

            for (var i = 0; i < 3; ++i) {
                code.push(
                    "for(var i", i, "=", shapes[i], ";i", i, ">0;){",
                    "var w", i, "=", BLOCK_SIZE, ";",
                    "if(i", i, "<", BLOCK_SIZE, "){",
                    "w", i, "=i", i, ";",
                    "i", i, "=0;",
                    "}else{",
                    "i", i, "-=", BLOCK_SIZE, ";",
                    "}")
            }

            code.push.apply(code, start(oOrd, "o", oType, "i0", "i1", "w1"))

            code.push("for(i=0;i<w0;++i){\
for(j=0;j<w1;++j){\
var r=0.0;")

            code.push.apply(code, start(aOrd, "a", aType, "(i0+i)", "i2"))
            code.push.apply(code, start(bOrd, "b", bType, "i2", "(i1+j)"))

            code.push("for(k=0;k<w2;++k){")

            code.push("r+=",
                read(aOrd, "a", aType, "(i0+i)", "(i2+k)"), "*",
                read(bOrd, "b", bType, "(i2+k)", "(i1+j)"), ";")

            //Close off k-loop
            code.push.apply(code, walk(aOrd, "a", aType, 0, "(i2+k)"))
            code.push.apply(code, walk(bOrd, "b", bType, 0, "(i2+k)"))
            code.push("}")

            //Write r back to output array
            var sym = "r"
            if (useAlpha) {
                sym = "A*r"
            }
            code.push.apply(code, write(oOrd, "o", oType, "(i0+i)", "(i1+j)",
                sym + "+" + read(oOrd, "o", oType, "(i0+i)", "(i1+j)")))

            //Close off j-loop
            code.push.apply(code, walk(oOrd, "o", oType, 0, "(i1+j)"))
            code.push("}")

            //Close off i-loop
            code.push.apply(code, walk(oOrd, "o", oType, 1, "(i0+i)"))
            code.push("}}}}")

            return code
        }

        function generateMatrixProduct(outType, aType, bType, useAlpha, useBeta) {
            var funcName = ["gemm", outType[0], outType[1],
                "a", aType[0], aType[1],
                "b", bType[0], bType[1],
                useAlpha ? "alpha" : "",
                useBeta ? "beta" : ""].join("")
            var code = [
                "function ", funcName, "(o,a,b,A,B){",
                "var ", unpackShape("o", outType),
                unpackShape("a", aType),
                unpackShape("b", bType),
                "i,j,k;"
            ]

            if (aType[0] === "r" && bType[0] === "c") {
                code.push.apply(code, generateRowColumnLoop(outType, aType, bType, useAlpha, useBeta))
            } else {
                code.push.apply(code, generateBlockLoop(outType, aType, bType, useAlpha, useBeta))
            }

            code.push("}return ", funcName)

            //Compile function
            var proc = new Function(code.join(""))
            return proc()
        }
    }, {}],
    666: [function (require, module, exports) {
        "use strict"

        var ndarray = require("ndarray")
        var ops = require("ndarray-ops")
        var pool = require("typedarray-pool")

        function clone(array) {
            var dtype = array.dtype
            if (dtype === "generic" || dtype === "array") {
                dtype = "double"
            }
            var data = pool.malloc(array.size, dtype)
            var result = ndarray(data, array.shape)
            ops.assign(result, array)
            return result
        }

        exports.clone = clone

        function malloc(shape, dtype) {
            if (!dtype) {
                dtype = "double"
            }
            var sz = 1
            var stride = new Array(shape.length)
            for (var i = shape.length - 1; i >= 0; --i) {
                stride[i] = sz
                sz *= shape[i]
            }
            return ndarray(pool.malloc(sz, dtype), shape, stride, 0)
        }

        exports.malloc = malloc

        function free(array) {
            if (array.dtype === "generic" || array.dtype === "array") {
                return
            }
            pool.free(array.data)
        }

        exports.free = free

        function zeros(shape, dtype) {
            if (!dtype) {
                dtype = "double"
            }

            var sz = 1
            var stride = new Array(shape.length)
            for (var i = shape.length - 1; i >= 0; --i) {
                stride[i] = sz
                sz *= shape[i]
            }
            var buf = pool.malloc(sz, dtype)
            for (var i = 0; i < sz; ++i) {
                buf[i] = 0
            }
            return ndarray(buf, shape, stride, 0)
        }

        exports.zeros = zeros

        function ones(shape, dtype) {
            if (!dtype) {
                dtype = "double"
            }

            var sz = 1
            var stride = new Array(shape.length)
            for (var i = shape.length - 1; i >= 0; --i) {
                stride[i] = sz
                sz *= shape[i]
            }
            var buf = pool.malloc(sz, dtype)
            for (var i = 0; i < sz; ++i) {
                buf[i] = 1
            }
            return ndarray(buf, shape, stride, 0)
        }

        exports.ones = ones

        function eye(shape, dtype) {
            var i, offset
            if (!dtype) {
                dtype = "double"
            }

            var sz = 1
            var stride = new Array(shape.length)
            for (i = shape.length - 1; i >= 0; --i) {
                stride[i] = sz
                sz *= shape[i]
            }
            var buf = pool.malloc(sz, dtype)
            for (i = 0; i < sz; ++i) {
                buf[i] = 0
            }
            var mindim = Infinity
            var offsum = 0
            for (i = shape.length - 1; i >= 0; i--) {
                offsum += stride[i]
                mindim = Math.min(mindim, shape[i])
            }
            for (i = 0, offset = 0; i < mindim; i++, offset += offsum) {
                buf[offset] = 1
            }
            return ndarray(buf, shape, stride, 0)
        }

        exports.eye = eye

    }, {"ndarray": "ndarray", "ndarray-ops": "ndarray-ops", "typedarray-pool": 684}],
    667: [function (require, module, exports) {
        'use strict'

        var ndarray = require('ndarray')

        module.exports = squeeze

        function squeeze(a, axes) {
            var i
            var shape = []
            var stride = []

            if (axes !== undefined && !Array.isArray(axes)) {
                throw new Error('axes must be an Array list of dimensions to squeeze')
            }

            for (i = 0; i < a.shape.length; i++) {
                if (a.shape[i] !== 1 || (axes !== undefined && axes.indexOf(i) === -1)) {
                    shape.push(a.shape[i])
                    stride.push(a.stride[i])
                }
            }

            return ndarray(a.data, shape, stride, a.offset)
        }

    }, {"ndarray": "ndarray"}],
    668: [function (require, module, exports) {
        'use strict'

        var pool = require('ndarray-scratch')
        var ops = require('ndarray-ops')

        module.exports = ndarrayTile

        function ndarrayTile() {
            var i, input, output, reps

            if (arguments.length === 2) {
                // With allocation (output not specified):
                input = arguments[0]
                reps = arguments[1]
            } else if (arguments.length === 3) {
                // Without allocation (output specified):
                output = arguments[0]
                input = arguments[1]
                reps = arguments[2]
            }

            if (!Array.isArray(reps)) {
                throw new Error('second argument of tile must be an array of repetition counts for each dimension')
            }

            // Calculate the output dimensions:
            var inputShape = input.shape.slice(0)
            var newShape = inputShape.slice(0)
            var newDim = Math.max(newShape.length, reps.length)

            for (i = 0; i < newDim; i++) {
                // Assume unspecified dimensions has length 1:
                inputShape[i] = inputShape[i] === undefined ? 1 : inputShape[i]

                // Unspecified reps have shape 1:
                reps[i] = reps[i] === undefined ? 1 : reps[i]

                // Calculate the new total shape:
                newShape[i] = (newShape[i] === undefined ? 1 : newShape[i]) * reps[i]

                // Disallow zero:
                if (newShape[i] === 0) {
                    throw new Error('Number of tiles must be greater than zero')
                }
            }

            // Allocate output:
            if (!output) {
                output = pool.zeros(newShape, input.dtype)
            }

            // Calculate the total number of repetitions:
            var repProd = 1
            for (i = 0; i < reps.length; i++) {
                repProd *= reps[i]
            }

            // Allocate an array that stores the current offset in each dim:
            var origin = new Array(reps.length)
            for (i = 0; i < reps.length; i++) {
                origin[i] = 0
            }

            // Create an array that will do the slicing:
            var toPick = newShape.slice(0)
            for (d = 0; d < newShape.length; d++) {
                toPick[d] = d < input.dimension ? null : 0
            }

            // Iterate over the n-dimensional repetitions:
            for (i = 0; i < repProd; i++) {
                // Only the additional tacked on dimensions need to be sliced:
                for (d = input.dimension; d < newShape.length; d++) {
                    toPick[d] = origin[d]
                }

                // Slice to reduce dimsionality to that of the input:
                var slice = output.pick.apply(output, toPick)

                // Take a section of same shape as input:
                slice = slice.lo.apply(slice, origin)
                slice = slice.hi.apply(slice, input.shape)

                // Copy input to output:
                ops.assign(slice, input)

                // Skip origin update on last iteration:
                if (i === repProd - 1) break

                // Increment the origin in the trailing dimension. Cascade that
                // to the next dimension if we're at the end. (In othre words,
                // loop over the tiles in n-dimensions):
                var d = newDim - 1
                while (d >= 0) {
                    origin[d] += inputShape[d]
                    if (origin[d] === newShape[d]) {
                        origin[d] = 0
                        d--
                    } else break
                }
            }

            return output
        }

    }, {"ndarray-ops": "ndarray-ops", "ndarray-scratch": 666}],
    669: [function (require, module, exports) {
        "use strict"

        var dup = require("dup")


        var do_unpack = require('cwise/lib/wrapper')({
            "args": ["array", "scalar", "index"],
            "pre": {"body": "{}", "args": [], "thisVars": [], "localVars": []},
            "body": {
                "body": "{var _inline_1_a,_inline_1_e=_inline_1_arg1_;for(_inline_1_a=0;_inline_1_a<_inline_1_arg2_.length-1;++_inline_1_a)_inline_1_e=_inline_1_e[_inline_1_arg2_[_inline_1_a]];_inline_1_e[_inline_1_arg2_[_inline_1_arg2_.length-1]]=_inline_1_arg0_}",
                "args": [{
                    "name": "_inline_1_arg0_",
                    "lvalue": false,
                    "rvalue": true,
                    "count": 1
                }, {"name": "_inline_1_arg1_", "lvalue": false, "rvalue": true, "count": 1}, {
                    "name": "_inline_1_arg2_",
                    "lvalue": false,
                    "rvalue": true,
                    "count": 4
                }],
                "thisVars": [],
                "localVars": ["_inline_1_a", "_inline_1_e"]
            },
            "post": {"body": "{}", "args": [], "thisVars": [], "localVars": []},
            "debug": false,
            "funcName": "unpackCwise",
            "blockSize": 64
        })

        module.exports = function unpack(arr) {
            var result = dup(arr.shape)
            do_unpack(arr, result)
            return result
        }

    }, {"cwise/lib/wrapper": 362, "dup": 363}],
    670: [function (require, module, exports) {
        'use strict'

        var ndarray = require('ndarray')

        module.exports = unsqueeze

        function unsqueeze(a, axis) {
            var shape, stride

            if (axis !== undefined && (!Number.isFinite(axis) || (axis % 1 !== axis))) {
                throw new Error('axis of dimension to unsqueeze must be an integer')
            }
            axis = axis === undefined ? a.shape.length : axis

            shape = a.shape.slice(0)
            stride = a.stride.slice(0)
            shape.splice(axis || 0, 0, 1)
            stride.splice(axis || 0, 0, (stride[axis] || 1) * (shape[axis + 1] || 1))

            return ndarray(a.data, shape, stride, a.offset)
        }

    }, {"ndarray": "ndarray"}],
    671: [function (require, module, exports) {
        (function (process) {
// Generated by CoffeeScript 1.12.2
            (function () {
                var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

                if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
                    module.exports = function () {
                        return performance.now();
                    };
                } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
                    module.exports = function () {
                        return (getNanoSeconds() - nodeLoadTime) / 1e6;
                    };
                    hrtime = process.hrtime;
                    getNanoSeconds = function () {
                        var hr;
                        hr = hrtime();
                        return hr[0] * 1e9 + hr[1];
                    };
                    moduleLoadTime = getNanoSeconds();
                    upTime = process.uptime() * 1e9;
                    nodeLoadTime = moduleLoadTime - upTime;
                } else if (Date.now) {
                    module.exports = function () {
                        return Date.now() - loadTime;
                    };
                    loadTime = Date.now();
                } else {
                    module.exports = function () {
                        return new Date().getTime() - loadTime;
                    };
                    loadTime = new Date().getTime();
                }

            }).call(this);


        }).call(this, require('_process'))
    }, {"_process": 691}],
    672: [function (require, module, exports) {
// minimal library entry point.

        "use strict";
        module.exports = require("./src/index-minimal");

    }, {"./src/index-minimal": 673}],
    673: [function (require, module, exports) {
        "use strict";
        var protobuf = exports;

        /**
         * Build type, one of `"full"`, `"light"` or `"minimal"`.
         * @name build
         * @type {string}
         * @const
         */
        protobuf.build = "minimal";

// Serialization
        protobuf.Writer = require("./writer");
        protobuf.BufferWriter = require("./writer_buffer");
        protobuf.Reader = require("./reader");
        protobuf.BufferReader = require("./reader_buffer");

// Utility
        protobuf.util = require("./util/minimal");
        protobuf.rpc = require("./rpc");
        protobuf.roots = require("./roots");
        protobuf.configure = configure;

        /* istanbul ignore next */
        /**
         * Reconfigures the library according to the environment.
         * @returns {undefined}
         */
        function configure() {
            protobuf.Reader._configure(protobuf.BufferReader);
            protobuf.util._configure();
        }

// Configure serialization
        protobuf.Writer._configure(protobuf.BufferWriter);
        configure();

    }, {
        "./reader": 674,
        "./reader_buffer": 675,
        "./roots": 676,
        "./rpc": 677,
        "./util/minimal": 680,
        "./writer": 681,
        "./writer_buffer": 682
    }],
    674: [function (require, module, exports) {
        "use strict";
        module.exports = Reader;

        var util = require("./util/minimal");

        var BufferReader; // cyclic

        var LongBits = util.LongBits,
            utf8 = util.utf8;

        /* istanbul ignore next */
        function indexOutOfRange(reader, writeLength) {
            return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
        }

        /**
         * Constructs a new reader instance using the specified buffer.
         * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
         * @constructor
         * @param {Uint8Array} buffer Buffer to read from
         */
        function Reader(buffer) {

            /**
             * Read buffer.
             * @type {Uint8Array}
             */
            this.buf = buffer;

            /**
             * Read buffer position.
             * @type {number}
             */
            this.pos = 0;

            /**
             * Read buffer length.
             * @type {number}
             */
            this.len = buffer.length;
        }

        var create_array = typeof Uint8Array !== "undefined"
            ? function create_typed_array(buffer) {
                if (buffer instanceof Uint8Array || Array.isArray(buffer))
                    return new Reader(buffer);
                throw Error("illegal buffer");
            }
            /* istanbul ignore next */
            : function create_array(buffer) {
                if (Array.isArray(buffer))
                    return new Reader(buffer);
                throw Error("illegal buffer");
            };

        /**
         * Creates a new reader using the specified buffer.
         * @function
         * @param {Uint8Array|Buffer} buffer Buffer to read from
         * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
         * @throws {Error} If `buffer` is not a valid buffer
         */
        Reader.create = util.Buffer
            ? function create_buffer_setup(buffer) {
                return (Reader.create = function create_buffer(buffer) {
                    return util.Buffer.isBuffer(buffer)
                        ? new BufferReader(buffer)
                        /* istanbul ignore next */
                        : create_array(buffer);
                })(buffer);
            }
            /* istanbul ignore next */
            : create_array;

        Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

        /**
         * Reads a varint as an unsigned 32 bit value.
         * @function
         * @returns {number} Value read
         */
        Reader.prototype.uint32 = (function read_uint32_setup() {
            var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
            return function read_uint32() {
                value = (this.buf[this.pos] & 127) >>> 0;
                if (this.buf[this.pos++] < 128) return value;
                value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
                if (this.buf[this.pos++] < 128) return value;
                value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
                if (this.buf[this.pos++] < 128) return value;
                value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
                if (this.buf[this.pos++] < 128) return value;
                value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
                if (this.buf[this.pos++] < 128) return value;

                /* istanbul ignore if */
                if ((this.pos += 5) > this.len) {
                    this.pos = this.len;
                    throw indexOutOfRange(this, 10);
                }
                return value;
            };
        })();

        /**
         * Reads a varint as a signed 32 bit value.
         * @returns {number} Value read
         */
        Reader.prototype.int32 = function read_int32() {
            return this.uint32() | 0;
        };

        /**
         * Reads a zig-zag encoded varint as a signed 32 bit value.
         * @returns {number} Value read
         */
        Reader.prototype.sint32 = function read_sint32() {
            var value = this.uint32();
            return value >>> 1 ^ -(value & 1) | 0;
        };

        /* eslint-disable no-invalid-this */

        function readLongVarint() {
            // tends to deopt with local vars for octet etc.
            var bits = new LongBits(0, 0);
            var i = 0;
            if (this.len - this.pos > 4) { // fast route (lo)
                for (; i < 4; ++i) {
                    // 1st..4th
                    bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
                    if (this.buf[this.pos++] < 128)
                        return bits;
                }
                // 5th
                bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
                bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
                if (this.buf[this.pos++] < 128)
                    return bits;
                i = 0;
            } else {
                for (; i < 3; ++i) {
                    /* istanbul ignore if */
                    if (this.pos >= this.len)
                        throw indexOutOfRange(this);
                    // 1st..3th
                    bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
                    if (this.buf[this.pos++] < 128)
                        return bits;
                }
                // 4th
                bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
                return bits;
            }
            if (this.len - this.pos > 4) { // fast route (hi)
                for (; i < 5; ++i) {
                    // 6th..10th
                    bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
                    if (this.buf[this.pos++] < 128)
                        return bits;
                }
            } else {
                for (; i < 5; ++i) {
                    /* istanbul ignore if */
                    if (this.pos >= this.len)
                        throw indexOutOfRange(this);
                    // 6th..10th
                    bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
                    if (this.buf[this.pos++] < 128)
                        return bits;
                }
            }
            /* istanbul ignore next */
            throw Error("invalid varint encoding");
        }

        /* eslint-enable no-invalid-this */

        /**
         * Reads a varint as a signed 64 bit value.
         * @name Reader#int64
         * @function
         * @returns {Long} Value read
         */

        /**
         * Reads a varint as an unsigned 64 bit value.
         * @name Reader#uint64
         * @function
         * @returns {Long} Value read
         */

        /**
         * Reads a zig-zag encoded varint as a signed 64 bit value.
         * @name Reader#sint64
         * @function
         * @returns {Long} Value read
         */

        /**
         * Reads a varint as a boolean.
         * @returns {boolean} Value read
         */
        Reader.prototype.bool = function read_bool() {
            return this.uint32() !== 0;
        };

        function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
            return (buf[end - 4]
                | buf[end - 3] << 8
                | buf[end - 2] << 16
                | buf[end - 1] << 24) >>> 0;
        }

        /**
         * Reads fixed 32 bits as an unsigned 32 bit integer.
         * @returns {number} Value read
         */
        Reader.prototype.fixed32 = function read_fixed32() {

            /* istanbul ignore if */
            if (this.pos + 4 > this.len)
                throw indexOutOfRange(this, 4);

            return readFixed32_end(this.buf, this.pos += 4);
        };

        /**
         * Reads fixed 32 bits as a signed 32 bit integer.
         * @returns {number} Value read
         */
        Reader.prototype.sfixed32 = function read_sfixed32() {

            /* istanbul ignore if */
            if (this.pos + 4 > this.len)
                throw indexOutOfRange(this, 4);

            return readFixed32_end(this.buf, this.pos += 4) | 0;
        };

        /* eslint-disable no-invalid-this */

        function readFixed64(/* this: Reader */) {

            /* istanbul ignore if */
            if (this.pos + 8 > this.len)
                throw indexOutOfRange(this, 8);

            return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
        }

        /* eslint-enable no-invalid-this */

        /**
         * Reads fixed 64 bits.
         * @name Reader#fixed64
         * @function
         * @returns {Long} Value read
         */

        /**
         * Reads zig-zag encoded fixed 64 bits.
         * @name Reader#sfixed64
         * @function
         * @returns {Long} Value read
         */

        /**
         * Reads a float (32 bit) as a number.
         * @function
         * @returns {number} Value read
         */
        Reader.prototype.float = function read_float() {

            /* istanbul ignore if */
            if (this.pos + 4 > this.len)
                throw indexOutOfRange(this, 4);

            var value = util.float.readFloatLE(this.buf, this.pos);
            this.pos += 4;
            return value;
        };

        /**
         * Reads a double (64 bit float) as a number.
         * @function
         * @returns {number} Value read
         */
        Reader.prototype.double = function read_double() {

            /* istanbul ignore if */
            if (this.pos + 8 > this.len)
                throw indexOutOfRange(this, 4);

            var value = util.float.readDoubleLE(this.buf, this.pos);
            this.pos += 8;
            return value;
        };

        /**
         * Reads a sequence of bytes preceeded by its length as a varint.
         * @returns {Uint8Array} Value read
         */
        Reader.prototype.bytes = function read_bytes() {
            var length = this.uint32(),
                start = this.pos,
                end = this.pos + length;

            /* istanbul ignore if */
            if (end > this.len)
                throw indexOutOfRange(this, length);

            this.pos += length;
            if (Array.isArray(this.buf)) // plain array
                return this.buf.slice(start, end);
            return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
                ? new this.buf.constructor(0)
                : this._slice.call(this.buf, start, end);
        };

        /**
         * Reads a string preceeded by its byte length as a varint.
         * @returns {string} Value read
         */
        Reader.prototype.string = function read_string() {
            var bytes = this.bytes();
            return utf8.read(bytes, 0, bytes.length);
        };

        /**
         * Skips the specified number of bytes if specified, otherwise skips a varint.
         * @param {number} [length] Length if known, otherwise a varint is assumed
         * @returns {Reader} `this`
         */
        Reader.prototype.skip = function skip(length) {
            if (typeof length === "number") {
                /* istanbul ignore if */
                if (this.pos + length > this.len)
                    throw indexOutOfRange(this, length);
                this.pos += length;
            } else {
                do {
                    /* istanbul ignore if */
                    if (this.pos >= this.len)
                        throw indexOutOfRange(this);
                } while (this.buf[this.pos++] & 128);
            }
            return this;
        };

        /**
         * Skips the next element of the specified wire type.
         * @param {number} wireType Wire type received
         * @returns {Reader} `this`
         */
        Reader.prototype.skipType = function (wireType) {
            switch (wireType) {
                case 0:
                    this.skip();
                    break;
                case 1:
                    this.skip(8);
                    break;
                case 2:
                    this.skip(this.uint32());
                    break;
                case 3:
                    do { // eslint-disable-line no-constant-condition
                        if ((wireType = this.uint32() & 7) === 4)
                            break;
                        this.skipType(wireType);
                    } while (true);
                    break;
                case 5:
                    this.skip(4);
                    break;

                /* istanbul ignore next */
                default:
                    throw Error("invalid wire type " + wireType + " at offset " + this.pos);
            }
            return this;
        };

        Reader._configure = function (BufferReader_) {
            BufferReader = BufferReader_;

            var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
            util.merge(Reader.prototype, {

                int64: function read_int64() {
                    return readLongVarint.call(this)[fn](false);
                },

                uint64: function read_uint64() {
                    return readLongVarint.call(this)[fn](true);
                },

                sint64: function read_sint64() {
                    return readLongVarint.call(this).zzDecode()[fn](false);
                },

                fixed64: function read_fixed64() {
                    return readFixed64.call(this)[fn](true);
                },

                sfixed64: function read_sfixed64() {
                    return readFixed64.call(this)[fn](false);
                }

            });
        };

    }, {"./util/minimal": 680}],
    675: [function (require, module, exports) {
        "use strict";
        module.exports = BufferReader;

// extends Reader
        var Reader = require("./reader");
        (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

        var util = require("./util/minimal");

        /**
         * Constructs a new buffer reader instance.
         * @classdesc Wire format reader using node buffers.
         * @extends Reader
         * @constructor
         * @param {Buffer} buffer Buffer to read from
         */
        function BufferReader(buffer) {
            Reader.call(this, buffer);

            /**
             * Read buffer.
             * @name BufferReader#buf
             * @type {Buffer}
             */
        }

        /* istanbul ignore else */
        if (util.Buffer)
            BufferReader.prototype._slice = util.Buffer.prototype.slice;

        /**
         * @override
         */
        BufferReader.prototype.string = function read_string_buffer() {
            var len = this.uint32(); // modifies pos
            return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));
        };

        /**
         * Reads a sequence of bytes preceeded by its length as a varint.
         * @name BufferReader#bytes
         * @function
         * @returns {Buffer} Value read
         */

    }, {"./reader": 674, "./util/minimal": 680}],
    676: [function (require, module, exports) {
        "use strict";
        module.exports = {};

        /**
         * Named roots.
         * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
         * Can also be used manually to make roots available accross modules.
         * @name roots
         * @type {Object.<string,Root>}
         * @example
         * // pbjs -r myroot -o compiled.js ...
         *
         * // in another module:
         * require("./compiled.js");
         *
         * // in any subsequent module:
         * var root = protobuf.roots["myroot"];
         */

    }, {}],
    677: [function (require, module, exports) {
        "use strict";

        /**
         * Streaming RPC helpers.
         * @namespace
         */
        var rpc = exports;

        /**
         * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
         * @typedef RPCImpl
         * @type {function}
         * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
         * @param {Uint8Array} requestData Request data
         * @param {RPCImplCallback} callback Callback function
         * @returns {undefined}
         * @example
         * function rpcImpl(method, requestData, callback) {
         *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
         *         throw Error("no such method");
         *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
         *         callback(err, responseData);
         *     });
         * }
         */

        /**
         * Node-style callback as used by {@link RPCImpl}.
         * @typedef RPCImplCallback
         * @type {function}
         * @param {Error|null} error Error, if any, otherwise `null`
         * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
         * @returns {undefined}
         */

        rpc.Service = require("./rpc/service");

    }, {"./rpc/service": 678}],
    678: [function (require, module, exports) {
        "use strict";
        module.exports = Service;

        var util = require("../util/minimal");

// Extends EventEmitter
        (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

        /**
         * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
         *
         * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
         * @typedef rpc.ServiceMethodCallback
         * @template TRes extends Message<TRes>
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {TRes} [response] Response message
         * @returns {undefined}
         */

        /**
         * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
         * @typedef rpc.ServiceMethod
         * @template TReq extends Message<TReq>
         * @template TRes extends Message<TRes>
         * @type {function}
         * @param {TReq|Properties<TReq>} request Request message or plain object
         * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
         * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
         */

        /**
         * Constructs a new RPC service instance.
         * @classdesc An RPC service as returned by {@link Service#create}.
         * @exports rpc.Service
         * @extends util.EventEmitter
         * @constructor
         * @param {RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function Service(rpcImpl, requestDelimited, responseDelimited) {

            if (typeof rpcImpl !== "function")
                throw TypeError("rpcImpl must be a function");

            util.EventEmitter.call(this);

            /**
             * RPC implementation. Becomes `null` once the service is ended.
             * @type {RPCImpl|null}
             */
            this.rpcImpl = rpcImpl;

            /**
             * Whether requests are length-delimited.
             * @type {boolean}
             */
            this.requestDelimited = Boolean(requestDelimited);

            /**
             * Whether responses are length-delimited.
             * @type {boolean}
             */
            this.responseDelimited = Boolean(responseDelimited);
        }

        /**
         * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
         * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
         * @param {Constructor<TReq>} requestCtor Request constructor
         * @param {Constructor<TRes>} responseCtor Response constructor
         * @param {TReq|Properties<TReq>} request Request message or plain object
         * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
         * @returns {undefined}
         * @template TReq extends Message<TReq>
         * @template TRes extends Message<TRes>
         */
        Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

            if (!request)
                throw TypeError("request must be specified");

            var self = this;
            if (!callback)
                return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

            if (!self.rpcImpl) {
                setTimeout(function () {
                    callback(Error("already ended"));
                }, 0);
                return undefined;
            }

            try {
                return self.rpcImpl(
                    method,
                    requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
                    function rpcCallback(err, response) {

                        if (err) {
                            self.emit("error", err, method);
                            return callback(err);
                        }

                        if (response === null) {
                            self.end(/* endedByRPC */ true);
                            return undefined;
                        }

                        if (!(response instanceof responseCtor)) {
                            try {
                                response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                            } catch (err) {
                                self.emit("error", err, method);
                                return callback(err);
                            }
                        }

                        self.emit("data", response, method);
                        return callback(null, response);
                    }
                );
            } catch (err) {
                self.emit("error", err, method);
                setTimeout(function () {
                    callback(err);
                }, 0);
                return undefined;
            }
        };

        /**
         * Ends this service and emits the `end` event.
         * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
         * @returns {rpc.Service} `this`
         */
        Service.prototype.end = function end(endedByRPC) {
            if (this.rpcImpl) {
                if (!endedByRPC) // signal end to rpcImpl
                    this.rpcImpl(null, null, null);
                this.rpcImpl = null;
                this.emit("end").off();
            }
            return this;
        };

    }, {"../util/minimal": 680}],
    679: [function (require, module, exports) {
        "use strict";
        module.exports = LongBits;

        var util = require("../util/minimal");

        /**
         * Constructs new long bits.
         * @classdesc Helper class for working with the low and high bits of a 64 bit value.
         * @memberof util
         * @constructor
         * @param {number} lo Low 32 bits, unsigned
         * @param {number} hi High 32 bits, unsigned
         */
        function LongBits(lo, hi) {

            // note that the casts below are theoretically unnecessary as of today, but older statically
            // generated converter code might still call the ctor with signed 32bits. kept for compat.

            /**
             * Low bits.
             * @type {number}
             */
            this.lo = lo >>> 0;

            /**
             * High bits.
             * @type {number}
             */
            this.hi = hi >>> 0;
        }

        /**
         * Zero bits.
         * @memberof util.LongBits
         * @type {util.LongBits}
         */
        var zero = LongBits.zero = new LongBits(0, 0);

        zero.toNumber = function () {
            return 0;
        };
        zero.zzEncode = zero.zzDecode = function () {
            return this;
        };
        zero.length = function () {
            return 1;
        };

        /**
         * Zero hash.
         * @memberof util.LongBits
         * @type {string}
         */
        var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

        /**
         * Constructs new long bits from the specified number.
         * @param {number} value Value
         * @returns {util.LongBits} Instance
         */
        LongBits.fromNumber = function fromNumber(value) {
            if (value === 0)
                return zero;
            var sign = value < 0;
            if (sign)
                value = -value;
            var lo = value >>> 0,
                hi = (value - lo) / 4294967296 >>> 0;
            if (sign) {
                hi = ~hi >>> 0;
                lo = ~lo >>> 0;
                if (++lo > 4294967295) {
                    lo = 0;
                    if (++hi > 4294967295)
                        hi = 0;
                }
            }
            return new LongBits(lo, hi);
        };

        /**
         * Constructs new long bits from a number, long or string.
         * @param {Long|number|string} value Value
         * @returns {util.LongBits} Instance
         */
        LongBits.from = function from(value) {
            if (typeof value === "number")
                return LongBits.fromNumber(value);
            if (util.isString(value)) {
                /* istanbul ignore else */
                if (util.Long)
                    value = util.Long.fromString(value);
                else
                    return LongBits.fromNumber(parseInt(value, 10));
            }
            return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
        };

        /**
         * Converts this long bits to a possibly unsafe JavaScript number.
         * @param {boolean} [unsigned=false] Whether unsigned or not
         * @returns {number} Possibly unsafe number
         */
        LongBits.prototype.toNumber = function toNumber(unsigned) {
            if (!unsigned && this.hi >>> 31) {
                var lo = ~this.lo + 1 >>> 0,
                    hi = ~this.hi >>> 0;
                if (!lo)
                    hi = hi + 1 >>> 0;
                return -(lo + hi * 4294967296);
            }
            return this.lo + this.hi * 4294967296;
        };

        /**
         * Converts this long bits to a long.
         * @param {boolean} [unsigned=false] Whether unsigned or not
         * @returns {Long} Long
         */
        LongBits.prototype.toLong = function toLong(unsigned) {
            return util.Long
                ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
                /* istanbul ignore next */
                : {low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned)};
        };

        var charCodeAt = String.prototype.charCodeAt;

        /**
         * Constructs new long bits from the specified 8 characters long hash.
         * @param {string} hash Hash
         * @returns {util.LongBits} Bits
         */
        LongBits.fromHash = function fromHash(hash) {
            if (hash === zeroHash)
                return zero;
            return new LongBits(
                (charCodeAt.call(hash, 0)
                    | charCodeAt.call(hash, 1) << 8
                    | charCodeAt.call(hash, 2) << 16
                    | charCodeAt.call(hash, 3) << 24) >>> 0
                ,
                (charCodeAt.call(hash, 4)
                    | charCodeAt.call(hash, 5) << 8
                    | charCodeAt.call(hash, 6) << 16
                    | charCodeAt.call(hash, 7) << 24) >>> 0
            );
        };

        /**
         * Converts this long bits to a 8 characters long hash.
         * @returns {string} Hash
         */
        LongBits.prototype.toHash = function toHash() {
            return String.fromCharCode(
                this.lo & 255,
                this.lo >>> 8 & 255,
                this.lo >>> 16 & 255,
                this.lo >>> 24,
                this.hi & 255,
                this.hi >>> 8 & 255,
                this.hi >>> 16 & 255,
                this.hi >>> 24
            );
        };

        /**
         * Zig-zag encodes this long bits.
         * @returns {util.LongBits} `this`
         */
        LongBits.prototype.zzEncode = function zzEncode() {
            var mask = this.hi >> 31;
            this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
            this.lo = (this.lo << 1 ^ mask) >>> 0;
            return this;
        };

        /**
         * Zig-zag decodes this long bits.
         * @returns {util.LongBits} `this`
         */
        LongBits.prototype.zzDecode = function zzDecode() {
            var mask = -(this.lo & 1);
            this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
            this.hi = (this.hi >>> 1 ^ mask) >>> 0;
            return this;
        };

        /**
         * Calculates the length of this longbits when encoded as a varint.
         * @returns {number} Length
         */
        LongBits.prototype.length = function length() {
            var part0 = this.lo,
                part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
                part2 = this.hi >>> 24;
            return part2 === 0
                ? part1 === 0
                    ? part0 < 16384
                        ? part0 < 128 ? 1 : 2
                        : part0 < 2097152 ? 3 : 4
                    : part1 < 16384
                        ? part1 < 128 ? 5 : 6
                        : part1 < 2097152 ? 7 : 8
                : part2 < 128 ? 9 : 10;
        };

    }, {"../util/minimal": 680}],
    680: [function (require, module, exports) {
        (function (global) {
            "use strict";
            var util = exports;

// used to return a Promise where callback is omitted
            util.asPromise = require("@protobufjs/aspromise");

// converts to / from base64 encoded strings
            util.base64 = require("@protobufjs/base64");

// base class of rpc.Service
            util.EventEmitter = require("@protobufjs/eventemitter");

// float handling accross browsers
            util.float = require("@protobufjs/float");

// requires modules optionally and hides the call from bundlers
            util.inquire = require("@protobufjs/inquire");

// converts to / from utf8 encoded strings
            util.utf8 = require("@protobufjs/utf8");

// provides a node-like buffer pool in the browser
            util.pool = require("@protobufjs/pool");

// utility to work with the low and high bits of a 64 bit value
            util.LongBits = require("./longbits");

            /**
             * An immuable empty array.
             * @memberof util
             * @type {Array.<*>}
             * @const
             */
            util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

            /**
             * An immutable empty object.
             * @type {Object}
             * @const
             */
            util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

            /**
             * Whether running within node or not.
             * @memberof util
             * @type {boolean}
             * @const
             */
            util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);

            /**
             * Tests if the specified value is an integer.
             * @function
             * @param {*} value Value to test
             * @returns {boolean} `true` if the value is an integer
             */
            util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
                return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
            };

            /**
             * Tests if the specified value is a string.
             * @param {*} value Value to test
             * @returns {boolean} `true` if the value is a string
             */
            util.isString = function isString(value) {
                return typeof value === "string" || value instanceof String;
            };

            /**
             * Tests if the specified value is a non-null object.
             * @param {*} value Value to test
             * @returns {boolean} `true` if the value is a non-null object
             */
            util.isObject = function isObject(value) {
                return value && typeof value === "object";
            };

            /**
             * Checks if a property on a message is considered to be present.
             * This is an alias of {@link util.isSet}.
             * @function
             * @param {Object} obj Plain object or message instance
             * @param {string} prop Property name
             * @returns {boolean} `true` if considered to be present, otherwise `false`
             */
            util.isset =

                /**
                 * Checks if a property on a message is considered to be present.
                 * @param {Object} obj Plain object or message instance
                 * @param {string} prop Property name
                 * @returns {boolean} `true` if considered to be present, otherwise `false`
                 */
                util.isSet = function isSet(obj, prop) {
                    var value = obj[prop];
                    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
                        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
                    return false;
                };

            /**
             * Any compatible Buffer instance.
             * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
             * @interface Buffer
             * @extends Uint8Array
             */

            /**
             * Node's Buffer class if available.
             * @type {Constructor<Buffer>}
             */
            util.Buffer = (function () {
                try {
                    var Buffer = util.inquire("buffer").Buffer;
                    // refuse to use non-node buffers if not explicitly assigned (perf reasons):
                    return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
                } catch (e) {
                    /* istanbul ignore next */
                    return null;
                }
            })();

// Internal alias of or polyfull for Buffer.from.
            util._Buffer_from = null;

// Internal alias of or polyfill for Buffer.allocUnsafe.
            util._Buffer_allocUnsafe = null;

            /**
             * Creates a new buffer of whatever type supported by the environment.
             * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
             * @returns {Uint8Array|Buffer} Buffer
             */
            util.newBuffer = function newBuffer(sizeOrArray) {
                /* istanbul ignore next */
                return typeof sizeOrArray === "number"
                    ? util.Buffer
                        ? util._Buffer_allocUnsafe(sizeOrArray)
                        : new util.Array(sizeOrArray)
                    : util.Buffer
                        ? util._Buffer_from(sizeOrArray)
                        : typeof Uint8Array === "undefined"
                            ? sizeOrArray
                            : new Uint8Array(sizeOrArray);
            };

            /**
             * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
             * @type {Constructor<Uint8Array>}
             */
            util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

            /**
             * Any compatible Long instance.
             * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
             * @interface Long
             * @property {number} low Low bits
             * @property {number} high High bits
             * @property {boolean} unsigned Whether unsigned or not
             */

            /**
             * Long.js's Long class if available.
             * @type {Constructor<Long>}
             */
            util.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire("long");

            /**
             * Regular expression used to verify 2 bit (`bool`) map keys.
             * @type {RegExp}
             * @const
             */
            util.key2Re = /^true|false|0|1$/;

            /**
             * Regular expression used to verify 32 bit (`int32` etc.) map keys.
             * @type {RegExp}
             * @const
             */
            util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

            /**
             * Regular expression used to verify 64 bit (`int64` etc.) map keys.
             * @type {RegExp}
             * @const
             */
            util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

            /**
             * Converts a number or long to an 8 characters long hash string.
             * @param {Long|number} value Value to convert
             * @returns {string} Hash
             */
            util.longToHash = function longToHash(value) {
                return value
                    ? util.LongBits.from(value).toHash()
                    : util.LongBits.zeroHash;
            };

            /**
             * Converts an 8 characters long hash string to a long or number.
             * @param {string} hash Hash
             * @param {boolean} [unsigned=false] Whether unsigned or not
             * @returns {Long|number} Original value
             */
            util.longFromHash = function longFromHash(hash, unsigned) {
                var bits = util.LongBits.fromHash(hash);
                if (util.Long)
                    return util.Long.fromBits(bits.lo, bits.hi, unsigned);
                return bits.toNumber(Boolean(unsigned));
            };

            /**
             * Merges the properties of the source object into the destination object.
             * @memberof util
             * @param {Object.<string,*>} dst Destination object
             * @param {Object.<string,*>} src Source object
             * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
             * @returns {Object.<string,*>} Destination object
             */
            function merge(dst, src, ifNotSet) { // used by converters
                for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
                    if (dst[keys[i]] === undefined || !ifNotSet)
                        dst[keys[i]] = src[keys[i]];
                return dst;
            }

            util.merge = merge;

            /**
             * Converts the first character of a string to lower case.
             * @param {string} str String to convert
             * @returns {string} Converted string
             */
            util.lcFirst = function lcFirst(str) {
                return str.charAt(0).toLowerCase() + str.substring(1);
            };

            /**
             * Creates a custom error constructor.
             * @memberof util
             * @param {string} name Error name
             * @returns {Constructor<Error>} Custom error constructor
             */
            function newError(name) {

                function CustomError(message, properties) {

                    if (!(this instanceof CustomError))
                        return new CustomError(message, properties);

                    // Error.call(this, message);
                    // ^ just returns a new error instance because the ctor can be called as a function

                    Object.defineProperty(this, "message", {
                        get: function () {
                            return message;
                        }
                    });

                    /* istanbul ignore next */
                    if (Error.captureStackTrace) // node
                        Error.captureStackTrace(this, CustomError);
                    else
                        Object.defineProperty(this, "stack", {value: (new Error()).stack || ""});

                    if (properties)
                        merge(this, properties);
                }

                (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

                Object.defineProperty(CustomError.prototype, "name", {
                    get: function () {
                        return name;
                    }
                });

                CustomError.prototype.toString = function toString() {
                    return this.name + ": " + this.message;
                };

                return CustomError;
            }

            util.newError = newError;

            /**
             * Constructs a new protocol error.
             * @classdesc Error subclass indicating a protocol specifc error.
             * @memberof util
             * @extends Error
             * @template T extends Message<T>
             * @constructor
             * @param {string} message Error message
             * @param {Object.<string,*>} [properties] Additional properties
             * @example
             * try {
             *     MyMessage.decode(someBuffer); // throws if required fields are missing
             * } catch (e) {
             *     if (e instanceof ProtocolError && e.instance)
             *         console.log("decoded so far: " + JSON.stringify(e.instance));
             * }
             */
            util.ProtocolError = newError("ProtocolError");

            /**
             * So far decoded message instance.
             * @name util.ProtocolError#instance
             * @type {Message<T>}
             */

            /**
             * A OneOf getter as returned by {@link util.oneOfGetter}.
             * @typedef OneOfGetter
             * @type {function}
             * @returns {string|undefined} Set field name, if any
             */

            /**
             * Builds a getter for a oneof's present field name.
             * @param {string[]} fieldNames Field names
             * @returns {OneOfGetter} Unbound getter
             */
            util.oneOfGetter = function getOneOf(fieldNames) {
                var fieldMap = {};
                for (var i = 0; i < fieldNames.length; ++i)
                    fieldMap[fieldNames[i]] = 1;

                /**
                 * @returns {string|undefined} Set field name, if any
                 * @this Object
                 * @ignore
                 */
                return function () { // eslint-disable-line consistent-return
                    for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
                        if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
                            return keys[i];
                };
            };

            /**
             * A OneOf setter as returned by {@link util.oneOfSetter}.
             * @typedef OneOfSetter
             * @type {function}
             * @param {string|undefined} value Field name
             * @returns {undefined}
             */

            /**
             * Builds a setter for a oneof's present field name.
             * @param {string[]} fieldNames Field names
             * @returns {OneOfSetter} Unbound setter
             */
            util.oneOfSetter = function setOneOf(fieldNames) {

                /**
                 * @param {string} name Field name
                 * @returns {undefined}
                 * @this Object
                 * @ignore
                 */
                return function (name) {
                    for (var i = 0; i < fieldNames.length; ++i)
                        if (fieldNames[i] !== name)
                            delete this[fieldNames[i]];
                };
            };

            /**
             * Default conversion options used for {@link Message#toJSON} implementations.
             *
             * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
             *
             * - Longs become strings
             * - Enums become string keys
             * - Bytes become base64 encoded strings
             * - (Sub-)Messages become plain objects
             * - Maps become plain objects with all string keys
             * - Repeated fields become arrays
             * - NaN and Infinity for float and double fields become strings
             *
             * @type {IConversionOptions}
             * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
             */
            util.toJSONOptions = {
                longs: String,
                enums: String,
                bytes: String,
                json: true
            };

            util._configure = function () {
                var Buffer = util.Buffer;
                /* istanbul ignore if */
                if (!Buffer) {
                    util._Buffer_from = util._Buffer_allocUnsafe = null;
                    return;
                }
                // because node 4.x buffers are incompatible & immutable
                // see: https://github.com/dcodeIO/protobuf.js/pull/665
                util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
                    /* istanbul ignore next */
                    function Buffer_from(value, encoding) {
                        return new Buffer(value, encoding);
                    };
                util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
                    /* istanbul ignore next */
                    function Buffer_allocUnsafe(size) {
                        return new Buffer(size);
                    };
            };

        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        "./longbits": 679,
        "@protobufjs/aspromise": 2,
        "@protobufjs/base64": 3,
        "@protobufjs/eventemitter": 4,
        "@protobufjs/float": 5,
        "@protobufjs/inquire": 6,
        "@protobufjs/pool": 7,
        "@protobufjs/utf8": 8
    }],
    681: [function (require, module, exports) {
        "use strict";
        module.exports = Writer;

        var util = require("./util/minimal");

        var BufferWriter; // cyclic

        var LongBits = util.LongBits,
            base64 = util.base64,
            utf8 = util.utf8;

        /**
         * Constructs a new writer operation instance.
         * @classdesc Scheduled writer operation.
         * @constructor
         * @param {function(*, Uint8Array, number)} fn Function to call
         * @param {number} len Value byte length
         * @param {*} val Value to write
         * @ignore
         */
        function Op(fn, len, val) {

            /**
             * Function to call.
             * @type {function(Uint8Array, number, *)}
             */
            this.fn = fn;

            /**
             * Value byte length.
             * @type {number}
             */
            this.len = len;

            /**
             * Next operation.
             * @type {Writer.Op|undefined}
             */
            this.next = undefined;

            /**
             * Value to write.
             * @type {*}
             */
            this.val = val; // type varies
        }

        /* istanbul ignore next */
        function noop() {
        } // eslint-disable-line no-empty-function

        /**
         * Constructs a new writer state instance.
         * @classdesc Copied writer state.
         * @memberof Writer
         * @constructor
         * @param {Writer} writer Writer to copy state from
         * @ignore
         */
        function State(writer) {

            /**
             * Current head.
             * @type {Writer.Op}
             */
            this.head = writer.head;

            /**
             * Current tail.
             * @type {Writer.Op}
             */
            this.tail = writer.tail;

            /**
             * Current buffer length.
             * @type {number}
             */
            this.len = writer.len;

            /**
             * Next state.
             * @type {State|null}
             */
            this.next = writer.states;
        }

        /**
         * Constructs a new writer instance.
         * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
         * @constructor
         */
        function Writer() {

            /**
             * Current length.
             * @type {number}
             */
            this.len = 0;

            /**
             * Operations head.
             * @type {Object}
             */
            this.head = new Op(noop, 0, 0);

            /**
             * Operations tail
             * @type {Object}
             */
            this.tail = this.head;

            /**
             * Linked forked states.
             * @type {Object|null}
             */
            this.states = null;

            // When a value is written, the writer calculates its byte length and puts it into a linked
            // list of operations to perform when finish() is called. This both allows us to allocate
            // buffers of the exact required size and reduces the amount of work we have to do compared
            // to first calculating over objects and then encoding over objects. In our case, the encoding
            // part is just a linked list walk calling operations with already prepared values.
        }

        /**
         * Creates a new writer.
         * @function
         * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
         */
        Writer.create = util.Buffer
            ? function create_buffer_setup() {
                return (Writer.create = function create_buffer() {
                    return new BufferWriter();
                })();
            }
            /* istanbul ignore next */
            : function create_array() {
                return new Writer();
            };

        /**
         * Allocates a buffer of the specified size.
         * @param {number} size Buffer size
         * @returns {Uint8Array} Buffer
         */
        Writer.alloc = function alloc(size) {
            return new util.Array(size);
        };

// Use Uint8Array buffer pool in the browser, just like node does with buffers
        /* istanbul ignore else */
        if (util.Array !== Array)
            Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

        /**
         * Pushes a new operation to the queue.
         * @param {function(Uint8Array, number, *)} fn Function to call
         * @param {number} len Value byte length
         * @param {number} val Value to write
         * @returns {Writer} `this`
         * @private
         */
        Writer.prototype._push = function push(fn, len, val) {
            this.tail = this.tail.next = new Op(fn, len, val);
            this.len += len;
            return this;
        };

        function writeByte(val, buf, pos) {
            buf[pos] = val & 255;
        }

        function writeVarint32(val, buf, pos) {
            while (val > 127) {
                buf[pos++] = val & 127 | 128;
                val >>>= 7;
            }
            buf[pos] = val;
        }

        /**
         * Constructs a new varint writer operation instance.
         * @classdesc Scheduled varint writer operation.
         * @extends Op
         * @constructor
         * @param {number} len Value byte length
         * @param {number} val Value to write
         * @ignore
         */
        function VarintOp(len, val) {
            this.len = len;
            this.next = undefined;
            this.val = val;
        }

        VarintOp.prototype = Object.create(Op.prototype);
        VarintOp.prototype.fn = writeVarint32;

        /**
         * Writes an unsigned 32 bit value as a varint.
         * @param {number} value Value to write
         * @returns {Writer} `this`
         */
        Writer.prototype.uint32 = function write_uint32(value) {
            // here, the call to this.push has been inlined and a varint specific Op subclass is used.
            // uint32 is by far the most frequently used operation and benefits significantly from this.
            this.len += (this.tail = this.tail.next = new VarintOp(
                (value = value >>> 0)
                < 128 ? 1
                    : value < 16384 ? 2
                    : value < 2097152 ? 3
                        : value < 268435456 ? 4
                            : 5,
                value)).len;
            return this;
        };

        /**
         * Writes a signed 32 bit value as a varint.
         * @function
         * @param {number} value Value to write
         * @returns {Writer} `this`
         */
        Writer.prototype.int32 = function write_int32(value) {
            return value < 0
                ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
                : this.uint32(value);
        };

        /**
         * Writes a 32 bit value as a varint, zig-zag encoded.
         * @param {number} value Value to write
         * @returns {Writer} `this`
         */
        Writer.prototype.sint32 = function write_sint32(value) {
            return this.uint32((value << 1 ^ value >> 31) >>> 0);
        };

        function writeVarint64(val, buf, pos) {
            while (val.hi) {
                buf[pos++] = val.lo & 127 | 128;
                val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
                val.hi >>>= 7;
            }
            while (val.lo > 127) {
                buf[pos++] = val.lo & 127 | 128;
                val.lo = val.lo >>> 7;
            }
            buf[pos++] = val.lo;
        }

        /**
         * Writes an unsigned 64 bit value as a varint.
         * @param {Long|number|string} value Value to write
         * @returns {Writer} `this`
         * @throws {TypeError} If `value` is a string and no long library is present.
         */
        Writer.prototype.uint64 = function write_uint64(value) {
            var bits = LongBits.from(value);
            return this._push(writeVarint64, bits.length(), bits);
        };

        /**
         * Writes a signed 64 bit value as a varint.
         * @function
         * @param {Long|number|string} value Value to write
         * @returns {Writer} `this`
         * @throws {TypeError} If `value` is a string and no long library is present.
         */
        Writer.prototype.int64 = Writer.prototype.uint64;

        /**
         * Writes a signed 64 bit value as a varint, zig-zag encoded.
         * @param {Long|number|string} value Value to write
         * @returns {Writer} `this`
         * @throws {TypeError} If `value` is a string and no long library is present.
         */
        Writer.prototype.sint64 = function write_sint64(value) {
            var bits = LongBits.from(value).zzEncode();
            return this._push(writeVarint64, bits.length(), bits);
        };

        /**
         * Writes a boolish value as a varint.
         * @param {boolean} value Value to write
         * @returns {Writer} `this`
         */
        Writer.prototype.bool = function write_bool(value) {
            return this._push(writeByte, 1, value ? 1 : 0);
        };

        function writeFixed32(val, buf, pos) {
            buf[pos] = val & 255;
            buf[pos + 1] = val >>> 8 & 255;
            buf[pos + 2] = val >>> 16 & 255;
            buf[pos + 3] = val >>> 24;
        }

        /**
         * Writes an unsigned 32 bit value as fixed 32 bits.
         * @param {number} value Value to write
         * @returns {Writer} `this`
         */
        Writer.prototype.fixed32 = function write_fixed32(value) {
            return this._push(writeFixed32, 4, value >>> 0);
        };

        /**
         * Writes a signed 32 bit value as fixed 32 bits.
         * @function
         * @param {number} value Value to write
         * @returns {Writer} `this`
         */
        Writer.prototype.sfixed32 = Writer.prototype.fixed32;

        /**
         * Writes an unsigned 64 bit value as fixed 64 bits.
         * @param {Long|number|string} value Value to write
         * @returns {Writer} `this`
         * @throws {TypeError} If `value` is a string and no long library is present.
         */
        Writer.prototype.fixed64 = function write_fixed64(value) {
            var bits = LongBits.from(value);
            return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
        };

        /**
         * Writes a signed 64 bit value as fixed 64 bits.
         * @function
         * @param {Long|number|string} value Value to write
         * @returns {Writer} `this`
         * @throws {TypeError} If `value` is a string and no long library is present.
         */
        Writer.prototype.sfixed64 = Writer.prototype.fixed64;

        /**
         * Writes a float (32 bit).
         * @function
         * @param {number} value Value to write
         * @returns {Writer} `this`
         */
        Writer.prototype.float = function write_float(value) {
            return this._push(util.float.writeFloatLE, 4, value);
        };

        /**
         * Writes a double (64 bit float).
         * @function
         * @param {number} value Value to write
         * @returns {Writer} `this`
         */
        Writer.prototype.double = function write_double(value) {
            return this._push(util.float.writeDoubleLE, 8, value);
        };

        var writeBytes = util.Array.prototype.set
            ? function writeBytes_set(val, buf, pos) {
                buf.set(val, pos); // also works for plain array values
            }
            /* istanbul ignore next */
            : function writeBytes_for(val, buf, pos) {
                for (var i = 0; i < val.length; ++i)
                    buf[pos + i] = val[i];
            };

        /**
         * Writes a sequence of bytes.
         * @param {Uint8Array|string} value Buffer or base64 encoded string to write
         * @returns {Writer} `this`
         */
        Writer.prototype.bytes = function write_bytes(value) {
            var len = value.length >>> 0;
            if (!len)
                return this._push(writeByte, 1, 0);
            if (util.isString(value)) {
                var buf = Writer.alloc(len = base64.length(value));
                base64.decode(value, buf, 0);
                value = buf;
            }
            return this.uint32(len)._push(writeBytes, len, value);
        };

        /**
         * Writes a string.
         * @param {string} value Value to write
         * @returns {Writer} `this`
         */
        Writer.prototype.string = function write_string(value) {
            var len = utf8.length(value);
            return len
                ? this.uint32(len)._push(utf8.write, len, value)
                : this._push(writeByte, 1, 0);
        };

        /**
         * Forks this writer's state by pushing it to a stack.
         * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
         * @returns {Writer} `this`
         */
        Writer.prototype.fork = function fork() {
            this.states = new State(this);
            this.head = this.tail = new Op(noop, 0, 0);
            this.len = 0;
            return this;
        };

        /**
         * Resets this instance to the last state.
         * @returns {Writer} `this`
         */
        Writer.prototype.reset = function reset() {
            if (this.states) {
                this.head = this.states.head;
                this.tail = this.states.tail;
                this.len = this.states.len;
                this.states = this.states.next;
            } else {
                this.head = this.tail = new Op(noop, 0, 0);
                this.len = 0;
            }
            return this;
        };

        /**
         * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
         * @returns {Writer} `this`
         */
        Writer.prototype.ldelim = function ldelim() {
            var head = this.head,
                tail = this.tail,
                len = this.len;
            this.reset().uint32(len);
            if (len) {
                this.tail.next = head.next; // skip noop
                this.tail = tail;
                this.len += len;
            }
            return this;
        };

        /**
         * Finishes the write operation.
         * @returns {Uint8Array} Finished buffer
         */
        Writer.prototype.finish = function finish() {
            var head = this.head.next, // skip noop
                buf = this.constructor.alloc(this.len),
                pos = 0;
            while (head) {
                head.fn(head.val, buf, pos);
                pos += head.len;
                head = head.next;
            }
            // this.head = this.tail = null;
            return buf;
        };

        Writer._configure = function (BufferWriter_) {
            BufferWriter = BufferWriter_;
        };

    }, {"./util/minimal": 680}],
    682: [function (require, module, exports) {
        "use strict";
        module.exports = BufferWriter;

// extends Writer
        var Writer = require("./writer");
        (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

        var util = require("./util/minimal");

        var Buffer = util.Buffer;

        /**
         * Constructs a new buffer writer instance.
         * @classdesc Wire format writer using node buffers.
         * @extends Writer
         * @constructor
         */
        function BufferWriter() {
            Writer.call(this);
        }

        /**
         * Allocates a buffer of the specified size.
         * @param {number} size Buffer size
         * @returns {Buffer} Buffer
         */
        BufferWriter.alloc = function alloc_buffer(size) {
            return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);
        };

        var writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === "set"
            ? function writeBytesBuffer_set(val, buf, pos) {
                buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
                                   // also works for plain array values
            }
            /* istanbul ignore next */
            : function writeBytesBuffer_copy(val, buf, pos) {
                if (val.copy) // Buffer values
                    val.copy(buf, pos, 0, val.length);
                else for (var i = 0; i < val.length;) // plain array values
                    buf[pos++] = val[i++];
            };

        /**
         * @override
         */
        BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
            if (util.isString(value))
                value = util._Buffer_from(value, "base64");
            var len = value.length >>> 0;
            this.uint32(len);
            if (len)
                this._push(writeBytesBuffer, len, value);
            return this;
        };

        function writeStringBuffer(val, buf, pos) {
            if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
                util.utf8.write(val, buf, pos);
            else
                buf.utf8Write(val, pos);
        }

        /**
         * @override
         */
        BufferWriter.prototype.string = function write_string_buffer(value) {
            var len = Buffer.byteLength(value);
            this.uint32(len);
            if (len)
                this._push(writeStringBuffer, len, value);
            return this;
        };


        /**
         * Finishes the write operation.
         * @name BufferWriter#finish
         * @function
         * @returns {Buffer} Finished buffer
         */

    }, {"./util/minimal": 680, "./writer": 681}],
    683: [function (require, module, exports) {
        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        !(function (global) {
            "use strict";

            var Op = Object.prototype;
            var hasOwn = Op.hasOwnProperty;
            var undefined; // More compressible than void 0.
            var $Symbol = typeof Symbol === "function" ? Symbol : {};
            var iteratorSymbol = $Symbol.iterator || "@@iterator";
            var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
            var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

            var inModule = typeof module === "object";
            var runtime = global.regeneratorRuntime;
            if (runtime) {
                if (inModule) {
                    // If regeneratorRuntime is defined globally and we're in a module,
                    // make the exports object identical to regeneratorRuntime.
                    module.exports = runtime;
                }
                // Don't bother evaluating the rest of this file if the runtime was
                // already defined globally.
                return;
            }

            // Define the runtime globally (as expected by generated code) as either
            // module.exports (if we're in a module) or a new, empty object.
            runtime = global.regeneratorRuntime = inModule ? module.exports : {};

            function wrap(innerFn, outerFn, self, tryLocsList) {
                // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []);

                // The ._invoke method unifies the implementations of the .next,
                // .throw, and .return methods.
                generator._invoke = makeInvokeMethod(innerFn, self, context);

                return generator;
            }

            runtime.wrap = wrap;

            // Try/catch helper to minimize deoptimizations. Returns a completion
            // record like context.tryEntries[i].completion. This interface could
            // have been (and was previously) designed to take a closure to be
            // invoked without arguments, but in all the cases we care about we
            // already have an existing method we want to call, so there's no need
            // to create a new function object. We can even get away with assuming
            // the method takes exactly one argument, since that happens to be true
            // in every case, so we don't have to touch the arguments object. The
            // only additional allocation required is the completion record, which
            // has a stable shape and so hopefully should be cheap to allocate.
            function tryCatch(fn, obj, arg) {
                try {
                    return {type: "normal", arg: fn.call(obj, arg)};
                } catch (err) {
                    return {type: "throw", arg: err};
                }
            }

            var GenStateSuspendedStart = "suspendedStart";
            var GenStateSuspendedYield = "suspendedYield";
            var GenStateExecuting = "executing";
            var GenStateCompleted = "completed";

            // Returning this object from the innerFn has the same effect as
            // breaking out of the dispatch switch statement.
            var ContinueSentinel = {};

            // Dummy constructor functions that we use as the .constructor and
            // .constructor.prototype properties for functions that return Generator
            // objects. For full spec compliance, you may wish to configure your
            // minifier not to mangle the names of these two functions.
            function Generator() {
            }

            function GeneratorFunction() {
            }

            function GeneratorFunctionPrototype() {
            }

            // This is a polyfill for %IteratorPrototype% for environments that
            // don't natively support it.
            var IteratorPrototype = {};
            IteratorPrototype[iteratorSymbol] = function () {
                return this;
            };

            var getProto = Object.getPrototypeOf;
            var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
            if (NativeIteratorPrototype &&
                NativeIteratorPrototype !== Op &&
                hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                // This environment has a native %IteratorPrototype%; use it instead
                // of the polyfill.
                IteratorPrototype = NativeIteratorPrototype;
            }

            var Gp = GeneratorFunctionPrototype.prototype =
                Generator.prototype = Object.create(IteratorPrototype);
            GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
            GeneratorFunctionPrototype.constructor = GeneratorFunction;
            GeneratorFunctionPrototype[toStringTagSymbol] =
                GeneratorFunction.displayName = "GeneratorFunction";

            // Helper for defining the .next, .throw, and .return methods of the
            // Iterator interface in terms of a single ._invoke method.
            function defineIteratorMethods(prototype) {
                ["next", "throw", "return"].forEach(function (method) {
                    prototype[method] = function (arg) {
                        return this._invoke(method, arg);
                    };
                });
            }

            runtime.isGeneratorFunction = function (genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor
                    ? ctor === GeneratorFunction ||
                    // For the native GeneratorFunction constructor, the best we can
                    // do is to check its .name property.
                    (ctor.displayName || ctor.name) === "GeneratorFunction"
                    : false;
            };

            runtime.mark = function (genFun) {
                if (Object.setPrototypeOf) {
                    Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                } else {
                    genFun.__proto__ = GeneratorFunctionPrototype;
                    if (!(toStringTagSymbol in genFun)) {
                        genFun[toStringTagSymbol] = "GeneratorFunction";
                    }
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
            };

            // Within the body of any async function, `await x` is transformed to
            // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
            // `hasOwn.call(value, "__await")` to determine if the yielded value is
            // meant to be awaited.
            runtime.awrap = function (arg) {
                return {__await: arg};
            };

            function AsyncIterator(generator) {
                function invoke(method, arg, resolve, reject) {
                    var record = tryCatch(generator[method], generator, arg);
                    if (record.type === "throw") {
                        reject(record.arg);
                    } else {
                        var result = record.arg;
                        var value = result.value;
                        if (value &&
                            typeof value === "object" &&
                            hasOwn.call(value, "__await")) {
                            return Promise.resolve(value.__await).then(function (value) {
                                invoke("next", value, resolve, reject);
                            }, function (err) {
                                invoke("throw", err, resolve, reject);
                            });
                        }

                        return Promise.resolve(value).then(function (unwrapped) {
                            // When a yielded Promise is resolved, its final value becomes
                            // the .value of the Promise<{value,done}> result for the
                            // current iteration. If the Promise is rejected, however, the
                            // result for this iteration will be rejected with the same
                            // reason. Note that rejections of yielded Promises are not
                            // thrown back into the generator function, as is the case
                            // when an awaited Promise is rejected. This difference in
                            // behavior between yield and await is important, because it
                            // allows the consumer to decide what to do with the yielded
                            // rejection (swallow it and continue, manually .throw it back
                            // into the generator, abandon iteration, whatever). With
                            // await, by contrast, there is no opportunity to examine the
                            // rejection reason outside the generator function, so the
                            // only option is to throw it from the await expression, and
                            // let the generator function handle the exception.
                            result.value = unwrapped;
                            resolve(result);
                        }, reject);
                    }
                }

                var previousPromise;

                function enqueue(method, arg) {
                    function callInvokeWithMethodAndArg() {
                        return new Promise(function (resolve, reject) {
                            invoke(method, arg, resolve, reject);
                        });
                    }

                    return previousPromise =
                        // If enqueue has been called before, then we want to wait until
                        // all previous Promises have been resolved before calling invoke,
                        // so that results are always delivered in the correct order. If
                        // enqueue has not been called before, then it is important to
                        // call invoke immediately, without waiting on a callback to fire,
                        // so that the async generator function has the opportunity to do
                        // any necessary setup in a predictable way. This predictability
                        // is why the Promise constructor synchronously invokes its
                        // executor callback, and why async functions synchronously
                        // execute code before the first await. Since we implement simple
                        // async functions in terms of async generators, it is especially
                        // important to get this right, even though it requires care.
                        previousPromise ? previousPromise.then(
                            callInvokeWithMethodAndArg,
                            // Avoid propagating failures to Promises returned by later
                            // invocations of the iterator.
                            callInvokeWithMethodAndArg
                        ) : callInvokeWithMethodAndArg();
                }

                // Define the unified helper method that is used to implement .next,
                // .throw, and .return (see defineIteratorMethods).
                this._invoke = enqueue;
            }

            defineIteratorMethods(AsyncIterator.prototype);
            AsyncIterator.prototype[asyncIteratorSymbol] = function () {
                return this;
            };
            runtime.AsyncIterator = AsyncIterator;

            // Note that simple async functions are implemented on top of
            // AsyncIterator objects; they just return a Promise for the value of
            // the final result produced by the iterator.
            runtime.async = function (innerFn, outerFn, self, tryLocsList) {
                var iter = new AsyncIterator(
                    wrap(innerFn, outerFn, self, tryLocsList)
                );

                return runtime.isGeneratorFunction(outerFn)
                    ? iter // If outerFn is a generator, return the full iterator.
                    : iter.next().then(function (result) {
                        return result.done ? result.value : iter.next();
                    });
            };

            function makeInvokeMethod(innerFn, self, context) {
                var state = GenStateSuspendedStart;

                return function invoke(method, arg) {
                    if (state === GenStateExecuting) {
                        throw new Error("Generator is already running");
                    }

                    if (state === GenStateCompleted) {
                        if (method === "throw") {
                            throw arg;
                        }

                        // Be forgiving, per 25.3.3.3.3 of the spec:
                        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                        return doneResult();
                    }

                    context.method = method;
                    context.arg = arg;

                    while (true) {
                        var delegate = context.delegate;
                        if (delegate) {
                            var delegateResult = maybeInvokeDelegate(delegate, context);
                            if (delegateResult) {
                                if (delegateResult === ContinueSentinel) continue;
                                return delegateResult;
                            }
                        }

                        if (context.method === "next") {
                            // Setting context._sent for legacy support of Babel's
                            // function.sent implementation.
                            context.sent = context._sent = context.arg;

                        } else if (context.method === "throw") {
                            if (state === GenStateSuspendedStart) {
                                state = GenStateCompleted;
                                throw context.arg;
                            }

                            context.dispatchException(context.arg);

                        } else if (context.method === "return") {
                            context.abrupt("return", context.arg);
                        }

                        state = GenStateExecuting;

                        var record = tryCatch(innerFn, self, context);
                        if (record.type === "normal") {
                            // If an exception is thrown from innerFn, we leave state ===
                            // GenStateExecuting and loop back for another invocation.
                            state = context.done
                                ? GenStateCompleted
                                : GenStateSuspendedYield;

                            if (record.arg === ContinueSentinel) {
                                continue;
                            }

                            return {
                                value: record.arg,
                                done: context.done
                            };

                        } else if (record.type === "throw") {
                            state = GenStateCompleted;
                            // Dispatch the exception by looping back around to the
                            // context.dispatchException(context.arg) call above.
                            context.method = "throw";
                            context.arg = record.arg;
                        }
                    }
                };
            }

            // Call delegate.iterator[context.method](context.arg) and handle the
            // result, either by returning a { value, done } result from the
            // delegate iterator, or by modifying context.method and context.arg,
            // setting context.delegate to null, and returning the ContinueSentinel.
            function maybeInvokeDelegate(delegate, context) {
                var method = delegate.iterator[context.method];
                if (method === undefined) {
                    // A .throw or .return when the delegate iterator has no .throw
                    // method always terminates the yield* loop.
                    context.delegate = null;

                    if (context.method === "throw") {
                        if (delegate.iterator.return) {
                            // If the delegate iterator has a return method, give it a
                            // chance to clean up.
                            context.method = "return";
                            context.arg = undefined;
                            maybeInvokeDelegate(delegate, context);

                            if (context.method === "throw") {
                                // If maybeInvokeDelegate(context) changed context.method from
                                // "return" to "throw", let that override the TypeError below.
                                return ContinueSentinel;
                            }
                        }

                        context.method = "throw";
                        context.arg = new TypeError(
                            "The iterator does not provide a 'throw' method");
                    }

                    return ContinueSentinel;
                }

                var record = tryCatch(method, delegate.iterator, context.arg);

                if (record.type === "throw") {
                    context.method = "throw";
                    context.arg = record.arg;
                    context.delegate = null;
                    return ContinueSentinel;
                }

                var info = record.arg;

                if (!info) {
                    context.method = "throw";
                    context.arg = new TypeError("iterator result is not an object");
                    context.delegate = null;
                    return ContinueSentinel;
                }

                if (info.done) {
                    // Assign the result of the finished delegate to the temporary
                    // variable specified by delegate.resultName (see delegateYield).
                    context[delegate.resultName] = info.value;

                    // Resume execution at the desired location (see delegateYield).
                    context.next = delegate.nextLoc;

                    // If context.method was "throw" but the delegate handled the
                    // exception, let the outer generator proceed normally. If
                    // context.method was "next", forget context.arg since it has been
                    // "consumed" by the delegate iterator. If context.method was
                    // "return", allow the original .return call to continue in the
                    // outer generator.
                    if (context.method !== "return") {
                        context.method = "next";
                        context.arg = undefined;
                    }

                } else {
                    // Re-yield the result returned by the delegate method.
                    return info;
                }

                // The delegate iterator is finished, so forget it and continue with
                // the outer generator.
                context.delegate = null;
                return ContinueSentinel;
            }

            // Define Generator.prototype.{next,throw,return} in terms of the
            // unified ._invoke helper method.
            defineIteratorMethods(Gp);

            Gp[toStringTagSymbol] = "Generator";

            // A Generator should always return itself as the iterator object when the
            // @@iterator function is called on it. Some browsers' implementations of the
            // iterator prototype chain incorrectly implement this, causing the Generator
            // object to not be returned from this call. This ensures that doesn't happen.
            // See https://github.com/facebook/regenerator/issues/274 for more details.
            Gp[iteratorSymbol] = function () {
                return this;
            };

            Gp.toString = function () {
                return "[object Generator]";
            };

            function pushTryEntry(locs) {
                var entry = {tryLoc: locs[0]};

                if (1 in locs) {
                    entry.catchLoc = locs[1];
                }

                if (2 in locs) {
                    entry.finallyLoc = locs[2];
                    entry.afterLoc = locs[3];
                }

                this.tryEntries.push(entry);
            }

            function resetTryEntry(entry) {
                var record = entry.completion || {};
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
            }

            function Context(tryLocsList) {
                // The root entry object (effectively a try statement without a catch
                // or a finally block) gives us a place to store values thrown from
                // locations where there is no enclosing try statement.
                this.tryEntries = [{tryLoc: "root"}];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
            }

            runtime.keys = function (object) {
                var keys = [];
                for (var key in object) {
                    keys.push(key);
                }
                keys.reverse();

                // Rather than returning an object with a next method, we keep
                // things simple and return the next function itself.
                return function next() {
                    while (keys.length) {
                        var key = keys.pop();
                        if (key in object) {
                            next.value = key;
                            next.done = false;
                            return next;
                        }
                    }

                    // To avoid creating an additional object, we just hang the .value
                    // and .done properties off the next function object itself. This
                    // also ensures that the minifier will not anonymize the function.
                    next.done = true;
                    return next;
                };
            };

            function values(iterable) {
                if (iterable) {
                    var iteratorMethod = iterable[iteratorSymbol];
                    if (iteratorMethod) {
                        return iteratorMethod.call(iterable);
                    }

                    if (typeof iterable.next === "function") {
                        return iterable;
                    }

                    if (!isNaN(iterable.length)) {
                        var i = -1, next = function next() {
                            while (++i < iterable.length) {
                                if (hasOwn.call(iterable, i)) {
                                    next.value = iterable[i];
                                    next.done = false;
                                    return next;
                                }
                            }

                            next.value = undefined;
                            next.done = true;

                            return next;
                        };

                        return next.next = next;
                    }
                }

                // Return an iterator with no values.
                return {next: doneResult};
            }

            runtime.values = values;

            function doneResult() {
                return {value: undefined, done: true};
            }

            Context.prototype = {
                constructor: Context,

                reset: function (skipTempReset) {
                    this.prev = 0;
                    this.next = 0;
                    // Resetting context._sent for legacy support of Babel's
                    // function.sent implementation.
                    this.sent = this._sent = undefined;
                    this.done = false;
                    this.delegate = null;

                    this.method = "next";
                    this.arg = undefined;

                    this.tryEntries.forEach(resetTryEntry);

                    if (!skipTempReset) {
                        for (var name in this) {
                            // Not sure about the optimal order of these conditions:
                            if (name.charAt(0) === "t" &&
                                hasOwn.call(this, name) &&
                                !isNaN(+name.slice(1))) {
                                this[name] = undefined;
                            }
                        }
                    }
                },

                stop: function () {
                    this.done = true;

                    var rootEntry = this.tryEntries[0];
                    var rootRecord = rootEntry.completion;
                    if (rootRecord.type === "throw") {
                        throw rootRecord.arg;
                    }

                    return this.rval;
                },

                dispatchException: function (exception) {
                    if (this.done) {
                        throw exception;
                    }

                    var context = this;

                    function handle(loc, caught) {
                        record.type = "throw";
                        record.arg = exception;
                        context.next = loc;

                        if (caught) {
                            // If the dispatched exception was caught by a catch block,
                            // then let that catch block handle the exception normally.
                            context.method = "next";
                            context.arg = undefined;
                        }

                        return !!caught;
                    }

                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        var record = entry.completion;

                        if (entry.tryLoc === "root") {
                            // Exception thrown outside of any try block that could handle
                            // it, so set the completion value of the entire function to
                            // throw the exception.
                            return handle("end");
                        }

                        if (entry.tryLoc <= this.prev) {
                            var hasCatch = hasOwn.call(entry, "catchLoc");
                            var hasFinally = hasOwn.call(entry, "finallyLoc");

                            if (hasCatch && hasFinally) {
                                if (this.prev < entry.catchLoc) {
                                    return handle(entry.catchLoc, true);
                                } else if (this.prev < entry.finallyLoc) {
                                    return handle(entry.finallyLoc);
                                }

                            } else if (hasCatch) {
                                if (this.prev < entry.catchLoc) {
                                    return handle(entry.catchLoc, true);
                                }

                            } else if (hasFinally) {
                                if (this.prev < entry.finallyLoc) {
                                    return handle(entry.finallyLoc);
                                }

                            } else {
                                throw new Error("try statement without catch or finally");
                            }
                        }
                    }
                },

                abrupt: function (type, arg) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc <= this.prev &&
                            hasOwn.call(entry, "finallyLoc") &&
                            this.prev < entry.finallyLoc) {
                            var finallyEntry = entry;
                            break;
                        }
                    }

                    if (finallyEntry &&
                        (type === "break" ||
                            type === "continue") &&
                        finallyEntry.tryLoc <= arg &&
                        arg <= finallyEntry.finallyLoc) {
                        // Ignore the finally entry if control is not jumping to a
                        // location outside the try/catch block.
                        finallyEntry = null;
                    }

                    var record = finallyEntry ? finallyEntry.completion : {};
                    record.type = type;
                    record.arg = arg;

                    if (finallyEntry) {
                        this.method = "next";
                        this.next = finallyEntry.finallyLoc;
                        return ContinueSentinel;
                    }

                    return this.complete(record);
                },

                complete: function (record, afterLoc) {
                    if (record.type === "throw") {
                        throw record.arg;
                    }

                    if (record.type === "break" ||
                        record.type === "continue") {
                        this.next = record.arg;
                    } else if (record.type === "return") {
                        this.rval = this.arg = record.arg;
                        this.method = "return";
                        this.next = "end";
                    } else if (record.type === "normal" && afterLoc) {
                        this.next = afterLoc;
                    }

                    return ContinueSentinel;
                },

                finish: function (finallyLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.finallyLoc === finallyLoc) {
                            this.complete(entry.completion, entry.afterLoc);
                            resetTryEntry(entry);
                            return ContinueSentinel;
                        }
                    }
                },

                "catch": function (tryLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc === tryLoc) {
                            var record = entry.completion;
                            if (record.type === "throw") {
                                var thrown = record.arg;
                                resetTryEntry(entry);
                            }
                            return thrown;
                        }
                    }

                    // The context.catch method must only be called with a location
                    // argument that corresponds to a known catch block.
                    throw new Error("illegal catch attempt");
                },

                delegateYield: function (iterable, resultName, nextLoc) {
                    this.delegate = {
                        iterator: values(iterable),
                        resultName: resultName,
                        nextLoc: nextLoc
                    };

                    if (this.method === "next") {
                        // Deliberately forget the last sent value so that we don't
                        // accidentally pass it on to the delegate.
                        this.arg = undefined;
                    }

                    return ContinueSentinel;
                }
            };
        })(
            // In sloppy mode, unbound `this` refers to the global object, fallback to
            // Function constructor if we're in global strict mode. That is sadly a form
            // of indirect eval which violates Content Security Policy.
            (function () {
                return this
            })() || Function("return this")()
        );

    }, {}],
    684: [function (require, module, exports) {
        (function (global, Buffer) {
            'use strict'

            var bits = require('bit-twiddle')
            var dup = require('dup')

//Legacy pool support
            if (!global.__TYPEDARRAY_POOL) {
                global.__TYPEDARRAY_POOL = {
                    UINT8: dup([32, 0])
                    , UINT16: dup([32, 0])
                    , UINT32: dup([32, 0])
                    , INT8: dup([32, 0])
                    , INT16: dup([32, 0])
                    , INT32: dup([32, 0])
                    , FLOAT: dup([32, 0])
                    , DOUBLE: dup([32, 0])
                    , DATA: dup([32, 0])
                    , UINT8C: dup([32, 0])
                    , BUFFER: dup([32, 0])
                }
            }

            var hasUint8C = (typeof Uint8ClampedArray) !== 'undefined'
            var POOL = global.__TYPEDARRAY_POOL

//Upgrade pool
            if (!POOL.UINT8C) {
                POOL.UINT8C = dup([32, 0])
            }
            if (!POOL.BUFFER) {
                POOL.BUFFER = dup([32, 0])
            }

//New technique: Only allocate from ArrayBufferView and Buffer
            var DATA = POOL.DATA
                , BUFFER = POOL.BUFFER

            exports.free = function free(array) {
                if (Buffer.isBuffer(array)) {
                    BUFFER[bits.log2(array.length)].push(array)
                } else {
                    if (Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {
                        array = array.buffer
                    }
                    if (!array) {
                        return
                    }
                    var n = array.length || array.byteLength
                    var log_n = bits.log2(n) | 0
                    DATA[log_n].push(array)
                }
            }

            function freeArrayBuffer(buffer) {
                if (!buffer) {
                    return
                }
                var n = buffer.length || buffer.byteLength
                var log_n = bits.log2(n)
                DATA[log_n].push(buffer)
            }

            function freeTypedArray(array) {
                freeArrayBuffer(array.buffer)
            }

            exports.freeUint8 =
                exports.freeUint16 =
                    exports.freeUint32 =
                        exports.freeInt8 =
                            exports.freeInt16 =
                                exports.freeInt32 =
                                    exports.freeFloat32 =
                                        exports.freeFloat =
                                            exports.freeFloat64 =
                                                exports.freeDouble =
                                                    exports.freeUint8Clamped =
                                                        exports.freeDataView = freeTypedArray

            exports.freeArrayBuffer = freeArrayBuffer

            exports.freeBuffer = function freeBuffer(array) {
                BUFFER[bits.log2(array.length)].push(array)
            }

            exports.malloc = function malloc(n, dtype) {
                if (dtype === undefined || dtype === 'arraybuffer') {
                    return mallocArrayBuffer(n)
                } else {
                    switch (dtype) {
                        case 'uint8':
                            return mallocUint8(n)
                        case 'uint16':
                            return mallocUint16(n)
                        case 'uint32':
                            return mallocUint32(n)
                        case 'int8':
                            return mallocInt8(n)
                        case 'int16':
                            return mallocInt16(n)
                        case 'int32':
                            return mallocInt32(n)
                        case 'float':
                        case 'float32':
                            return mallocFloat(n)
                        case 'double':
                        case 'float64':
                            return mallocDouble(n)
                        case 'uint8_clamped':
                            return mallocUint8Clamped(n)
                        case 'buffer':
                            return mallocBuffer(n)
                        case 'data':
                        case 'dataview':
                            return mallocDataView(n)

                        default:
                            return null
                    }
                }
                return null
            }

            function mallocArrayBuffer(n) {
                var n = bits.nextPow2(n)
                var log_n = bits.log2(n)
                var d = DATA[log_n]
                if (d.length > 0) {
                    return d.pop()
                }
                return new ArrayBuffer(n)
            }

            exports.mallocArrayBuffer = mallocArrayBuffer

            function mallocUint8(n) {
                return new Uint8Array(mallocArrayBuffer(n), 0, n)
            }

            exports.mallocUint8 = mallocUint8

            function mallocUint16(n) {
                return new Uint16Array(mallocArrayBuffer(2 * n), 0, n)
            }

            exports.mallocUint16 = mallocUint16

            function mallocUint32(n) {
                return new Uint32Array(mallocArrayBuffer(4 * n), 0, n)
            }

            exports.mallocUint32 = mallocUint32

            function mallocInt8(n) {
                return new Int8Array(mallocArrayBuffer(n), 0, n)
            }

            exports.mallocInt8 = mallocInt8

            function mallocInt16(n) {
                return new Int16Array(mallocArrayBuffer(2 * n), 0, n)
            }

            exports.mallocInt16 = mallocInt16

            function mallocInt32(n) {
                return new Int32Array(mallocArrayBuffer(4 * n), 0, n)
            }

            exports.mallocInt32 = mallocInt32

            function mallocFloat(n) {
                return new Float32Array(mallocArrayBuffer(4 * n), 0, n)
            }

            exports.mallocFloat32 = exports.mallocFloat = mallocFloat

            function mallocDouble(n) {
                return new Float64Array(mallocArrayBuffer(8 * n), 0, n)
            }

            exports.mallocFloat64 = exports.mallocDouble = mallocDouble

            function mallocUint8Clamped(n) {
                if (hasUint8C) {
                    return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n)
                } else {
                    return mallocUint8(n)
                }
            }

            exports.mallocUint8Clamped = mallocUint8Clamped

            function mallocDataView(n) {
                return new DataView(mallocArrayBuffer(n), 0, n)
            }

            exports.mallocDataView = mallocDataView

            function mallocBuffer(n) {
                n = bits.nextPow2(n)
                var log_n = bits.log2(n)
                var cache = BUFFER[log_n]
                if (cache.length > 0) {
                    return cache.pop()
                }
                return new Buffer(n)
            }

            exports.mallocBuffer = mallocBuffer

            exports.clearCache = function clearCache() {
                for (var i = 0; i < 32; ++i) {
                    POOL.UINT8[i].length = 0
                    POOL.UINT16[i].length = 0
                    POOL.UINT32[i].length = 0
                    POOL.INT8[i].length = 0
                    POOL.INT16[i].length = 0
                    POOL.INT32[i].length = 0
                    POOL.FLOAT[i].length = 0
                    POOL.DOUBLE[i].length = 0
                    POOL.UINT8C[i].length = 0
                    DATA[i].length = 0
                    BUFFER[i].length = 0
                }
            }
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("buffer").Buffer)
    }, {"bit-twiddle": 34, "buffer": 689, "dup": 363}],
    685: [function (require, module, exports) {
        "use strict"

        function unique_pred(list, compare) {
            var ptr = 1
                , len = list.length
                , a = list[0], b = list[0]
            for (var i = 1; i < len; ++i) {
                b = a
                a = list[i]
                if (compare(a, b)) {
                    if (i === ptr) {
                        ptr++
                        continue
                    }
                    list[ptr++] = a
                }
            }
            list.length = ptr
            return list
        }

        function unique_eq(list) {
            var ptr = 1
                , len = list.length
                , a = list[0], b = list[0]
            for (var i = 1; i < len; ++i, b = a) {
                b = a
                a = list[i]
                if (a !== b) {
                    if (i === ptr) {
                        ptr++
                        continue
                    }
                    list[ptr++] = a
                }
            }
            list.length = ptr
            return list
        }

        function unique(list, compare, sorted) {
            if (list.length === 0) {
                return list
            }
            if (compare) {
                if (!sorted) {
                    list.sort(compare)
                }
                return unique_pred(list, compare)
            }
            if (!sorted) {
                list.sort()
            }
            return unique_eq(list)
        }

        module.exports = unique

    }, {}],
    686: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        module.exports = extend;

        function extend(origin, add) {
            // Don't do anything if add isn't an object
            if (!add || typeof add !== 'object') return origin;

            var keys = Object.keys(add);
            var i = keys.length;
            while (i--) {
                origin[keys[i]] = add[keys[i]];
            }
            return origin;
        }

    }, {}],
    687: [function (require, module, exports) {

    }, {}],
    688: [function (require, module, exports) {
        'use strict'

        exports.byteLength = byteLength
        exports.toByteArray = toByteArray
        exports.fromByteArray = fromByteArray

        var lookup = []
        var revLookup = []
        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
        for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i]
            revLookup[code.charCodeAt(i)] = i
        }

        revLookup['-'.charCodeAt(0)] = 62
        revLookup['_'.charCodeAt(0)] = 63

        function placeHoldersCount(b64) {
            var len = b64.length
            if (len % 4 > 0) {
                throw new Error('Invalid string. Length must be a multiple of 4')
            }

            // the number of equal signs (place holders)
            // if there are two placeholders, than the two characters before it
            // represent one byte
            // if there is only one, then the three characters before it represent 2 bytes
            // this is just a cheap hack to not do indexOf twice
            return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
        }

        function byteLength(b64) {
            // base64 is 4/3 + up to two characters of the original data
            return (b64.length * 3 / 4) - placeHoldersCount(b64)
        }

        function toByteArray(b64) {
            var i, l, tmp, placeHolders, arr
            var len = b64.length
            placeHolders = placeHoldersCount(b64)

            arr = new Arr((len * 3 / 4) - placeHolders)

            // if there are placeholders, only get up to the last complete 4 chars
            l = placeHolders > 0 ? len - 4 : len

            var L = 0

            for (i = 0; i < l; i += 4) {
                tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
                arr[L++] = (tmp >> 16) & 0xFF
                arr[L++] = (tmp >> 8) & 0xFF
                arr[L++] = tmp & 0xFF
            }

            if (placeHolders === 2) {
                tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
                arr[L++] = tmp & 0xFF
            } else if (placeHolders === 1) {
                tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
                arr[L++] = (tmp >> 8) & 0xFF
                arr[L++] = tmp & 0xFF
            }

            return arr
        }

        function tripletToBase64(num) {
            return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
        }

        function encodeChunk(uint8, start, end) {
            var tmp
            var output = []
            for (var i = start; i < end; i += 3) {
                tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
                output.push(tripletToBase64(tmp))
            }
            return output.join('')
        }

        function fromByteArray(uint8) {
            var tmp
            var len = uint8.length
            var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
            var output = ''
            var parts = []
            var maxChunkLength = 16383 // must be multiple of 3

            // go through the array every three bytes, we'll deal with trailing stuff later
            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
            }

            // pad the end with zeros, but make sure to not forget the extra bytes
            if (extraBytes === 1) {
                tmp = uint8[len - 1]
                output += lookup[tmp >> 2]
                output += lookup[(tmp << 4) & 0x3F]
                output += '=='
            } else if (extraBytes === 2) {
                tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
                output += lookup[tmp >> 10]
                output += lookup[(tmp >> 4) & 0x3F]
                output += lookup[(tmp << 2) & 0x3F]
                output += '='
            }

            parts.push(output)

            return parts.join('')
        }

    }, {}],
    689: [function (require, module, exports) {
        /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
        /* eslint-disable no-proto */

        'use strict'

        var base64 = require('base64-js')
        var ieee754 = require('ieee754')

        exports.Buffer = Buffer
        exports.SlowBuffer = SlowBuffer
        exports.INSPECT_MAX_BYTES = 50

        var K_MAX_LENGTH = 0x7fffffff
        exports.kMaxLength = K_MAX_LENGTH

        /**
         * If `Buffer.TYPED_ARRAY_SUPPORT`:
         *   === true    Use Uint8Array implementation (fastest)
         *   === false   Print warning and recommend using `buffer` v4.x which has an Object
         *               implementation (most compatible, even IE6)
         *
         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
         * Opera 11.6+, iOS 4.2+.
         *
         * We report that the browser does not support typed arrays if the are not subclassable
         * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
         * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
         * for __proto__ and has a buggy typed array implementation.
         */
        Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

        if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
            typeof console.error === 'function') {
            console.error(
                'This browser lacks typed array (Uint8Array) support which is required by ' +
                '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
            )
        }

        function typedArraySupport() {
            // Can typed array instances can be augmented?
            try {
                var arr = new Uint8Array(1)
                arr.__proto__ = {
                    __proto__: Uint8Array.prototype, foo: function () {
                        return 42
                    }
                }
                return arr.foo() === 42
            } catch (e) {
                return false
            }
        }

        function createBuffer(length) {
            if (length > K_MAX_LENGTH) {
                throw new RangeError('Invalid typed array length')
            }
            // Return an augmented `Uint8Array` instance
            var buf = new Uint8Array(length)
            buf.__proto__ = Buffer.prototype
            return buf
        }

        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */

        function Buffer(arg, encodingOrOffset, length) {
            // Common case.
            if (typeof arg === 'number') {
                if (typeof encodingOrOffset === 'string') {
                    throw new Error(
                        'If encoding is specified then the first argument must be a string'
                    )
                }
                return allocUnsafe(arg)
            }
            return from(arg, encodingOrOffset, length)
        }

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
        if (typeof Symbol !== 'undefined' && Symbol.species &&
            Buffer[Symbol.species] === Buffer) {
            Object.defineProperty(Buffer, Symbol.species, {
                value: null,
                configurable: true,
                enumerable: false,
                writable: false
            })
        }

        Buffer.poolSize = 8192 // not used by this implementation

        function from(value, encodingOrOffset, length) {
            if (typeof value === 'number') {
                throw new TypeError('"value" argument must not be a number')
            }

            if (isArrayBuffer(value)) {
                return fromArrayBuffer(value, encodingOrOffset, length)
            }

            if (typeof value === 'string') {
                return fromString(value, encodingOrOffset)
            }

            return fromObject(value)
        }

        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/
        Buffer.from = function (value, encodingOrOffset, length) {
            return from(value, encodingOrOffset, length)
        }

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
        Buffer.prototype.__proto__ = Uint8Array.prototype
        Buffer.__proto__ = Uint8Array

        function assertSize(size) {
            if (typeof size !== 'number') {
                throw new TypeError('"size" argument must be a number')
            } else if (size < 0) {
                throw new RangeError('"size" argument must not be negative')
            }
        }

        function alloc(size, fill, encoding) {
            assertSize(size)
            if (size <= 0) {
                return createBuffer(size)
            }
            if (fill !== undefined) {
                // Only pay attention to encoding if it's a string. This
                // prevents accidentally sending in a number that would
                // be interpretted as a start offset.
                return typeof encoding === 'string'
                    ? createBuffer(size).fill(fill, encoding)
                    : createBuffer(size).fill(fill)
            }
            return createBuffer(size)
        }

        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/
        Buffer.alloc = function (size, fill, encoding) {
            return alloc(size, fill, encoding)
        }

        function allocUnsafe(size) {
            assertSize(size)
            return createBuffer(size < 0 ? 0 : checked(size) | 0)
        }

        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */
        Buffer.allocUnsafe = function (size) {
            return allocUnsafe(size)
        }
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */
        Buffer.allocUnsafeSlow = function (size) {
            return allocUnsafe(size)
        }

        function fromString(string, encoding) {
            if (typeof encoding !== 'string' || encoding === '') {
                encoding = 'utf8'
            }

            if (!Buffer.isEncoding(encoding)) {
                throw new TypeError('"encoding" must be a valid string encoding')
            }

            var length = byteLength(string, encoding) | 0
            var buf = createBuffer(length)

            var actual = buf.write(string, encoding)

            if (actual !== length) {
                // Writing a hex string, for example, that contains invalid characters will
                // cause everything after the first invalid character to be ignored. (e.g.
                // 'abxxcd' will be treated as 'ab')
                buf = buf.slice(0, actual)
            }

            return buf
        }

        function fromArrayLike(array) {
            var length = array.length < 0 ? 0 : checked(array.length) | 0
            var buf = createBuffer(length)
            for (var i = 0; i < length; i += 1) {
                buf[i] = array[i] & 255
            }
            return buf
        }

        function fromArrayBuffer(array, byteOffset, length) {
            if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('\'offset\' is out of bounds')
            }

            if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('\'length\' is out of bounds')
            }

            var buf
            if (byteOffset === undefined && length === undefined) {
                buf = new Uint8Array(array)
            } else if (length === undefined) {
                buf = new Uint8Array(array, byteOffset)
            } else {
                buf = new Uint8Array(array, byteOffset, length)
            }

            // Return an augmented `Uint8Array` instance
            buf.__proto__ = Buffer.prototype
            return buf
        }

        function fromObject(obj) {
            if (Buffer.isBuffer(obj)) {
                var len = checked(obj.length) | 0
                var buf = createBuffer(len)

                if (buf.length === 0) {
                    return buf
                }

                obj.copy(buf, 0, 0, len)
                return buf
            }

            if (obj) {
                if (isArrayBufferView(obj) || 'length' in obj) {
                    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                        return createBuffer(0)
                    }
                    return fromArrayLike(obj)
                }

                if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                    return fromArrayLike(obj.data)
                }
            }

            throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
        }

        function checked(length) {
            // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
            // length is NaN (which is otherwise coerced to zero.)
            if (length >= K_MAX_LENGTH) {
                throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                    'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
            }
            return length | 0
        }

        function SlowBuffer(length) {
            if (+length != length) { // eslint-disable-line eqeqeq
                length = 0
            }
            return Buffer.alloc(+length)
        }

        Buffer.isBuffer = function isBuffer(b) {
            return b != null && b._isBuffer === true
        }

        Buffer.compare = function compare(a, b) {
            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                throw new TypeError('Arguments must be Buffers')
            }

            if (a === b) return 0

            var x = a.length
            var y = b.length

            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                    x = a[i]
                    y = b[i]
                    break
                }
            }

            if (x < y) return -1
            if (y < x) return 1
            return 0
        }

        Buffer.isEncoding = function isEncoding(encoding) {
            switch (String(encoding).toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'latin1':
                case 'binary':
                case 'base64':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                    return true
                default:
                    return false
            }
        }

        Buffer.concat = function concat(list, length) {
            if (!Array.isArray(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers')
            }

            if (list.length === 0) {
                return Buffer.alloc(0)
            }

            var i
            if (length === undefined) {
                length = 0
                for (i = 0; i < list.length; ++i) {
                    length += list[i].length
                }
            }

            var buffer = Buffer.allocUnsafe(length)
            var pos = 0
            for (i = 0; i < list.length; ++i) {
                var buf = list[i]
                if (!Buffer.isBuffer(buf)) {
                    throw new TypeError('"list" argument must be an Array of Buffers')
                }
                buf.copy(buffer, pos)
                pos += buf.length
            }
            return buffer
        }

        function byteLength(string, encoding) {
            if (Buffer.isBuffer(string)) {
                return string.length
            }
            if (isArrayBufferView(string) || isArrayBuffer(string)) {
                return string.byteLength
            }
            if (typeof string !== 'string') {
                string = '' + string
            }

            var len = string.length
            if (len === 0) return 0

            // Use a for loop to avoid recursion
            var loweredCase = false
            for (; ;) {
                switch (encoding) {
                    case 'ascii':
                    case 'latin1':
                    case 'binary':
                        return len
                    case 'utf8':
                    case 'utf-8':
                    case undefined:
                        return utf8ToBytes(string).length
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return len * 2
                    case 'hex':
                        return len >>> 1
                    case 'base64':
                        return base64ToBytes(string).length
                    default:
                        if (loweredCase) return utf8ToBytes(string).length // assume utf8
                        encoding = ('' + encoding).toLowerCase()
                        loweredCase = true
                }
            }
        }

        Buffer.byteLength = byteLength

        function slowToString(encoding, start, end) {
            var loweredCase = false

            // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
            // property of a typed array.

            // This behaves neither like String nor Uint8Array in that we set start/end
            // to their upper/lower bounds if the value passed is out of range.
            // undefined is handled specially as per ECMA-262 6th Edition,
            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
            if (start === undefined || start < 0) {
                start = 0
            }
            // Return early if start > this.length. Done here to prevent potential uint32
            // coercion fail below.
            if (start > this.length) {
                return ''
            }

            if (end === undefined || end > this.length) {
                end = this.length
            }

            if (end <= 0) {
                return ''
            }

            // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
            end >>>= 0
            start >>>= 0

            if (end <= start) {
                return ''
            }

            if (!encoding) encoding = 'utf8'

            while (true) {
                switch (encoding) {
                    case 'hex':
                        return hexSlice(this, start, end)

                    case 'utf8':
                    case 'utf-8':
                        return utf8Slice(this, start, end)

                    case 'ascii':
                        return asciiSlice(this, start, end)

                    case 'latin1':
                    case 'binary':
                        return latin1Slice(this, start, end)

                    case 'base64':
                        return base64Slice(this, start, end)

                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return utf16leSlice(this, start, end)

                    default:
                        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                        encoding = (encoding + '').toLowerCase()
                        loweredCase = true
                }
            }
        }

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
        Buffer.prototype._isBuffer = true

        function swap(b, n, m) {
            var i = b[n]
            b[n] = b[m]
            b[m] = i
        }

        Buffer.prototype.swap16 = function swap16() {
            var len = this.length
            if (len % 2 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 16-bits')
            }
            for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1)
            }
            return this
        }

        Buffer.prototype.swap32 = function swap32() {
            var len = this.length
            if (len % 4 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 32-bits')
            }
            for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3)
                swap(this, i + 1, i + 2)
            }
            return this
        }

        Buffer.prototype.swap64 = function swap64() {
            var len = this.length
            if (len % 8 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 64-bits')
            }
            for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7)
                swap(this, i + 1, i + 6)
                swap(this, i + 2, i + 5)
                swap(this, i + 3, i + 4)
            }
            return this
        }

        Buffer.prototype.toString = function toString() {
            var length = this.length
            if (length === 0) return ''
            if (arguments.length === 0) return utf8Slice(this, 0, length)
            return slowToString.apply(this, arguments)
        }

        Buffer.prototype.equals = function equals(b) {
            if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
            if (this === b) return true
            return Buffer.compare(this, b) === 0
        }

        Buffer.prototype.inspect = function inspect() {
            var str = ''
            var max = exports.INSPECT_MAX_BYTES
            if (this.length > 0) {
                str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
                if (this.length > max) str += ' ... '
            }
            return '<Buffer ' + str + '>'
        }

        Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
            if (!Buffer.isBuffer(target)) {
                throw new TypeError('Argument must be a Buffer')
            }

            if (start === undefined) {
                start = 0
            }
            if (end === undefined) {
                end = target ? target.length : 0
            }
            if (thisStart === undefined) {
                thisStart = 0
            }
            if (thisEnd === undefined) {
                thisEnd = this.length
            }

            if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError('out of range index')
            }

            if (thisStart >= thisEnd && start >= end) {
                return 0
            }
            if (thisStart >= thisEnd) {
                return -1
            }
            if (start >= end) {
                return 1
            }

            start >>>= 0
            end >>>= 0
            thisStart >>>= 0
            thisEnd >>>= 0

            if (this === target) return 0

            var x = thisEnd - thisStart
            var y = end - start
            var len = Math.min(x, y)

            var thisCopy = this.slice(thisStart, thisEnd)
            var targetCopy = target.slice(start, end)

            for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                    x = thisCopy[i]
                    y = targetCopy[i]
                    break
                }
            }

            if (x < y) return -1
            if (y < x) return 1
            return 0
        }

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
            // Empty buffer means no match
            if (buffer.length === 0) return -1

            // Normalize byteOffset
            if (typeof byteOffset === 'string') {
                encoding = byteOffset
                byteOffset = 0
            } else if (byteOffset > 0x7fffffff) {
                byteOffset = 0x7fffffff
            } else if (byteOffset < -0x80000000) {
                byteOffset = -0x80000000
            }
            byteOffset = +byteOffset  // Coerce to Number.
            if (numberIsNaN(byteOffset)) {
                // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                byteOffset = dir ? 0 : (buffer.length - 1)
            }

            // Normalize byteOffset: negative offsets start from the end of the buffer
            if (byteOffset < 0) byteOffset = buffer.length + byteOffset
            if (byteOffset >= buffer.length) {
                if (dir) return -1
                else byteOffset = buffer.length - 1
            } else if (byteOffset < 0) {
                if (dir) byteOffset = 0
                else return -1
            }

            // Normalize val
            if (typeof val === 'string') {
                val = Buffer.from(val, encoding)
            }

            // Finally, search either indexOf (if dir is true) or lastIndexOf
            if (Buffer.isBuffer(val)) {
                // Special case: looking for empty string/buffer always fails
                if (val.length === 0) {
                    return -1
                }
                return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
            } else if (typeof val === 'number') {
                val = val & 0xFF // Search for a byte value [0-255]
                if (typeof Uint8Array.prototype.indexOf === 'function') {
                    if (dir) {
                        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                    } else {
                        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                    }
                }
                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
            }

            throw new TypeError('val must be string, number or Buffer')
        }

        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
            var indexSize = 1
            var arrLength = arr.length
            var valLength = val.length

            if (encoding !== undefined) {
                encoding = String(encoding).toLowerCase()
                if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                    encoding === 'utf16le' || encoding === 'utf-16le') {
                    if (arr.length < 2 || val.length < 2) {
                        return -1
                    }
                    indexSize = 2
                    arrLength /= 2
                    valLength /= 2
                    byteOffset /= 2
                }
            }

            function read(buf, i) {
                if (indexSize === 1) {
                    return buf[i]
                } else {
                    return buf.readUInt16BE(i * indexSize)
                }
            }

            var i
            if (dir) {
                var foundIndex = -1
                for (i = byteOffset; i < arrLength; i++) {
                    if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                        if (foundIndex === -1) foundIndex = i
                        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                    } else {
                        if (foundIndex !== -1) i -= i - foundIndex
                        foundIndex = -1
                    }
                }
            } else {
                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
                for (i = byteOffset; i >= 0; i--) {
                    var found = true
                    for (var j = 0; j < valLength; j++) {
                        if (read(arr, i + j) !== read(val, j)) {
                            found = false
                            break
                        }
                    }
                    if (found) return i
                }
            }

            return -1
        }

        Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
            return this.indexOf(val, byteOffset, encoding) !== -1
        }

        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
        }

        Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
        }

        function hexWrite(buf, string, offset, length) {
            offset = Number(offset) || 0
            var remaining = buf.length - offset
            if (!length) {
                length = remaining
            } else {
                length = Number(length)
                if (length > remaining) {
                    length = remaining
                }
            }

            // must be an even number of digits
            var strLen = string.length
            if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

            if (length > strLen / 2) {
                length = strLen / 2
            }
            for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16)
                if (numberIsNaN(parsed)) return i
                buf[offset + i] = parsed
            }
            return i
        }

        function utf8Write(buf, string, offset, length) {
            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
        }

        function asciiWrite(buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length)
        }

        function latin1Write(buf, string, offset, length) {
            return asciiWrite(buf, string, offset, length)
        }

        function base64Write(buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length)
        }

        function ucs2Write(buf, string, offset, length) {
            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
        }

        Buffer.prototype.write = function write(string, offset, length, encoding) {
            // Buffer#write(string)
            if (offset === undefined) {
                encoding = 'utf8'
                length = this.length
                offset = 0
                // Buffer#write(string, encoding)
            } else if (length === undefined && typeof offset === 'string') {
                encoding = offset
                length = this.length
                offset = 0
                // Buffer#write(string, offset[, length][, encoding])
            } else if (isFinite(offset)) {
                offset = offset >>> 0
                if (isFinite(length)) {
                    length = length >>> 0
                    if (encoding === undefined) encoding = 'utf8'
                } else {
                    encoding = length
                    length = undefined
                }
            } else {
                throw new Error(
                    'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                )
            }

            var remaining = this.length - offset
            if (length === undefined || length > remaining) length = remaining

            if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                throw new RangeError('Attempt to write outside buffer bounds')
            }

            if (!encoding) encoding = 'utf8'

            var loweredCase = false
            for (; ;) {
                switch (encoding) {
                    case 'hex':
                        return hexWrite(this, string, offset, length)

                    case 'utf8':
                    case 'utf-8':
                        return utf8Write(this, string, offset, length)

                    case 'ascii':
                        return asciiWrite(this, string, offset, length)

                    case 'latin1':
                    case 'binary':
                        return latin1Write(this, string, offset, length)

                    case 'base64':
                        // Warning: maxLength not taken into account in base64Write
                        return base64Write(this, string, offset, length)

                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return ucs2Write(this, string, offset, length)

                    default:
                        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                        encoding = ('' + encoding).toLowerCase()
                        loweredCase = true
                }
            }
        }

        Buffer.prototype.toJSON = function toJSON() {
            return {
                type: 'Buffer',
                data: Array.prototype.slice.call(this._arr || this, 0)
            }
        }

        function base64Slice(buf, start, end) {
            if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf)
            } else {
                return base64.fromByteArray(buf.slice(start, end))
            }
        }

        function utf8Slice(buf, start, end) {
            end = Math.min(buf.length, end)
            var res = []

            var i = start
            while (i < end) {
                var firstByte = buf[i]
                var codePoint = null
                var bytesPerSequence = (firstByte > 0xEF) ? 4
                    : (firstByte > 0xDF) ? 3
                        : (firstByte > 0xBF) ? 2
                            : 1

                if (i + bytesPerSequence <= end) {
                    var secondByte, thirdByte, fourthByte, tempCodePoint

                    switch (bytesPerSequence) {
                        case 1:
                            if (firstByte < 0x80) {
                                codePoint = firstByte
                            }
                            break
                        case 2:
                            secondByte = buf[i + 1]
                            if ((secondByte & 0xC0) === 0x80) {
                                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                                if (tempCodePoint > 0x7F) {
                                    codePoint = tempCodePoint
                                }
                            }
                            break
                        case 3:
                            secondByte = buf[i + 1]
                            thirdByte = buf[i + 2]
                            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                                    codePoint = tempCodePoint
                                }
                            }
                            break
                        case 4:
                            secondByte = buf[i + 1]
                            thirdByte = buf[i + 2]
                            fourthByte = buf[i + 3]
                            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                                    codePoint = tempCodePoint
                                }
                            }
                    }
                }

                if (codePoint === null) {
                    // we did not generate a valid codePoint so insert a
                    // replacement char (U+FFFD) and advance only 1 byte
                    codePoint = 0xFFFD
                    bytesPerSequence = 1
                } else if (codePoint > 0xFFFF) {
                    // encode to utf16 (surrogate pair dance)
                    codePoint -= 0x10000
                    res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                    codePoint = 0xDC00 | codePoint & 0x3FF
                }

                res.push(codePoint)
                i += bytesPerSequence
            }

            return decodeCodePointsArray(res)
        }

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
        var MAX_ARGUMENTS_LENGTH = 0x1000

        function decodeCodePointsArray(codePoints) {
            var len = codePoints.length
            if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
            }

            // Decode in chunks to avoid "call stack size exceeded".
            var res = ''
            var i = 0
            while (i < len) {
                res += String.fromCharCode.apply(
                    String,
                    codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                )
            }
            return res
        }

        function asciiSlice(buf, start, end) {
            var ret = ''
            end = Math.min(buf.length, end)

            for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 0x7F)
            }
            return ret
        }

        function latin1Slice(buf, start, end) {
            var ret = ''
            end = Math.min(buf.length, end)

            for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i])
            }
            return ret
        }

        function hexSlice(buf, start, end) {
            var len = buf.length

            if (!start || start < 0) start = 0
            if (!end || end < 0 || end > len) end = len

            var out = ''
            for (var i = start; i < end; ++i) {
                out += toHex(buf[i])
            }
            return out
        }

        function utf16leSlice(buf, start, end) {
            var bytes = buf.slice(start, end)
            var res = ''
            for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
            }
            return res
        }

        Buffer.prototype.slice = function slice(start, end) {
            var len = this.length
            start = ~~start
            end = end === undefined ? len : ~~end

            if (start < 0) {
                start += len
                if (start < 0) start = 0
            } else if (start > len) {
                start = len
            }

            if (end < 0) {
                end += len
                if (end < 0) end = 0
            } else if (end > len) {
                end = len
            }

            if (end < start) end = start

            var newBuf = this.subarray(start, end)
            // Return an augmented `Uint8Array` instance
            newBuf.__proto__ = Buffer.prototype
            return newBuf
        }

        /*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
        function checkOffset(offset, ext, length) {
            if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
            if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
        }

        Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var val = this[offset]
            var mul = 1
            var i = 0
            while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul
            }

            return val
        }

        Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) {
                checkOffset(offset, byteLength, this.length)
            }

            var val = this[offset + --byteLength]
            var mul = 1
            while (byteLength > 0 && (mul *= 0x100)) {
                val += this[offset + --byteLength] * mul
            }

            return val
        }

        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 1, this.length)
            return this[offset]
        }

        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 2, this.length)
            return this[offset] | (this[offset + 1] << 8)
        }

        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 2, this.length)
            return (this[offset] << 8) | this[offset + 1]
        }

        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)

            return ((this[offset]) |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16)) +
                (this[offset + 3] * 0x1000000)
        }

        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset] * 0x1000000) +
                ((this[offset + 1] << 16) |
                    (this[offset + 2] << 8) |
                    this[offset + 3])
        }

        Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var val = this[offset]
            var mul = 1
            var i = 0
            while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul
            }
            mul *= 0x80

            if (val >= mul) val -= Math.pow(2, 8 * byteLength)

            return val
        }

        Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var i = byteLength
            var mul = 1
            var val = this[offset + --i]
            while (i > 0 && (mul *= 0x100)) {
                val += this[offset + --i] * mul
            }
            mul *= 0x80

            if (val >= mul) val -= Math.pow(2, 8 * byteLength)

            return val
        }

        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 1, this.length)
            if (!(this[offset] & 0x80)) return (this[offset])
            return ((0xff - this[offset] + 1) * -1)
        }

        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 2, this.length)
            var val = this[offset] | (this[offset + 1] << 8)
            return (val & 0x8000) ? val | 0xFFFF0000 : val
        }

        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 2, this.length)
            var val = this[offset + 1] | (this[offset] << 8)
            return (val & 0x8000) ? val | 0xFFFF0000 : val
        }

        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset]) |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16) |
                (this[offset + 3] << 24)
        }

        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset] << 24) |
                (this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                (this[offset + 3])
        }

        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)
            return ieee754.read(this, offset, true, 23, 4)
        }

        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)
            return ieee754.read(this, offset, false, 23, 4)
        }

        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 8, this.length)
            return ieee754.read(this, offset, true, 52, 8)
        }

        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 8, this.length)
            return ieee754.read(this, offset, false, 52, 8)
        }

        function checkInt(buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
            if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
            if (offset + ext > buf.length) throw new RangeError('Index out of range')
        }

        Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
            value = +value
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1
                checkInt(this, value, offset, byteLength, maxBytes, 0)
            }

            var mul = 1
            var i = 0
            this[offset] = value & 0xFF
            while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF
            }

            return offset + byteLength
        }

        Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
            value = +value
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1
                checkInt(this, value, offset, byteLength, maxBytes, 0)
            }

            var i = byteLength - 1
            var mul = 1
            this[offset + i] = value & 0xFF
            while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF
            }

            return offset + byteLength
        }

        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
            this[offset] = (value & 0xff)
            return offset + 1
        }

        Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
            this[offset] = (value & 0xff)
            this[offset + 1] = (value >>> 8)
            return offset + 2
        }

        Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
            this[offset] = (value >>> 8)
            this[offset + 1] = (value & 0xff)
            return offset + 2
        }

        Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
            this[offset + 3] = (value >>> 24)
            this[offset + 2] = (value >>> 16)
            this[offset + 1] = (value >>> 8)
            this[offset] = (value & 0xff)
            return offset + 4
        }

        Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
            this[offset] = (value >>> 24)
            this[offset + 1] = (value >>> 16)
            this[offset + 2] = (value >>> 8)
            this[offset + 3] = (value & 0xff)
            return offset + 4
        }

        Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) {
                var limit = Math.pow(2, (8 * byteLength) - 1)

                checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }

            var i = 0
            var mul = 1
            var sub = 0
            this[offset] = value & 0xFF
            while (++i < byteLength && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                    sub = 1
                }
                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
            }

            return offset + byteLength
        }

        Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) {
                var limit = Math.pow(2, (8 * byteLength) - 1)

                checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }

            var i = byteLength - 1
            var mul = 1
            var sub = 0
            this[offset + i] = value & 0xFF
            while (--i >= 0 && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                    sub = 1
                }
                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
            }

            return offset + byteLength
        }

        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
            if (value < 0) value = 0xff + value + 1
            this[offset] = (value & 0xff)
            return offset + 1
        }

        Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
            this[offset] = (value & 0xff)
            this[offset + 1] = (value >>> 8)
            return offset + 2
        }

        Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
            this[offset] = (value >>> 8)
            this[offset + 1] = (value & 0xff)
            return offset + 2
        }

        Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
            this[offset] = (value & 0xff)
            this[offset + 1] = (value >>> 8)
            this[offset + 2] = (value >>> 16)
            this[offset + 3] = (value >>> 24)
            return offset + 4
        }

        Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
            if (value < 0) value = 0xffffffff + value + 1
            this[offset] = (value >>> 24)
            this[offset + 1] = (value >>> 16)
            this[offset + 2] = (value >>> 8)
            this[offset + 3] = (value & 0xff)
            return offset + 4
        }

        function checkIEEE754(buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length) throw new RangeError('Index out of range')
            if (offset < 0) throw new RangeError('Index out of range')
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) {
                checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
            }
            ieee754.write(buf, value, offset, littleEndian, 23, 4)
            return offset + 4
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
            return writeFloat(this, value, offset, true, noAssert)
        }

        Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
            return writeFloat(this, value, offset, false, noAssert)
        }

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) {
                checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
            }
            ieee754.write(buf, value, offset, littleEndian, 52, 8)
            return offset + 8
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
            return writeDouble(this, value, offset, true, noAssert)
        }

        Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
            return writeDouble(this, value, offset, false, noAssert)
        }

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
            if (!start) start = 0
            if (!end && end !== 0) end = this.length
            if (targetStart >= target.length) targetStart = target.length
            if (!targetStart) targetStart = 0
            if (end > 0 && end < start) end = start

            // Copy 0 bytes; we're done
            if (end === start) return 0
            if (target.length === 0 || this.length === 0) return 0

            // Fatal error conditions
            if (targetStart < 0) {
                throw new RangeError('targetStart out of bounds')
            }
            if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
            if (end < 0) throw new RangeError('sourceEnd out of bounds')

            // Are we oob?
            if (end > this.length) end = this.length
            if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start
            }

            var len = end - start
            var i

            if (this === target && start < targetStart && targetStart < end) {
                // descending copy from end
                for (i = len - 1; i >= 0; --i) {
                    target[i + targetStart] = this[i + start]
                }
            } else if (len < 1000) {
                // ascending copy from start
                for (i = 0; i < len; ++i) {
                    target[i + targetStart] = this[i + start]
                }
            } else {
                Uint8Array.prototype.set.call(
                    target,
                    this.subarray(start, start + len),
                    targetStart
                )
            }

            return len
        }

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
        Buffer.prototype.fill = function fill(val, start, end, encoding) {
            // Handle string cases:
            if (typeof val === 'string') {
                if (typeof start === 'string') {
                    encoding = start
                    start = 0
                    end = this.length
                } else if (typeof end === 'string') {
                    encoding = end
                    end = this.length
                }
                if (val.length === 1) {
                    var code = val.charCodeAt(0)
                    if (code < 256) {
                        val = code
                    }
                }
                if (encoding !== undefined && typeof encoding !== 'string') {
                    throw new TypeError('encoding must be a string')
                }
                if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                    throw new TypeError('Unknown encoding: ' + encoding)
                }
            } else if (typeof val === 'number') {
                val = val & 255
            }

            // Invalid ranges are not set to a default, so can range check early.
            if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError('Out of range index')
            }

            if (end <= start) {
                return this
            }

            start = start >>> 0
            end = end === undefined ? this.length : end >>> 0

            if (!val) val = 0

            var i
            if (typeof val === 'number') {
                for (i = start; i < end; ++i) {
                    this[i] = val
                }
            } else {
                var bytes = Buffer.isBuffer(val)
                    ? val
                    : new Buffer(val, encoding)
                var len = bytes.length
                for (i = 0; i < end - start; ++i) {
                    this[i + start] = bytes[i % len]
                }
            }

            return this
        }

// HELPER FUNCTIONS
// ================

        var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

        function base64clean(str) {
            // Node strips out invalid characters like \n and \t from the string, base64-js does not
            str = str.trim().replace(INVALID_BASE64_RE, '')
            // Node converts strings with length < 2 to ''
            if (str.length < 2) return ''
            // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
            while (str.length % 4 !== 0) {
                str = str + '='
            }
            return str
        }

        function toHex(n) {
            if (n < 16) return '0' + n.toString(16)
            return n.toString(16)
        }

        function utf8ToBytes(string, units) {
            units = units || Infinity
            var codePoint
            var length = string.length
            var leadSurrogate = null
            var bytes = []

            for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i)

                // is surrogate component
                if (codePoint > 0xD7FF && codePoint < 0xE000) {
                    // last char was a lead
                    if (!leadSurrogate) {
                        // no lead yet
                        if (codePoint > 0xDBFF) {
                            // unexpected trail
                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                            continue
                        } else if (i + 1 === length) {
                            // unpaired lead
                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                            continue
                        }

                        // valid lead
                        leadSurrogate = codePoint

                        continue
                    }

                    // 2 leads in a row
                    if (codePoint < 0xDC00) {
                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                        leadSurrogate = codePoint
                        continue
                    }

                    // valid surrogate pair
                    codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
                } else if (leadSurrogate) {
                    // valid bmp char, but last char was a lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                }

                leadSurrogate = null

                // encode utf8
                if (codePoint < 0x80) {
                    if ((units -= 1) < 0) break
                    bytes.push(codePoint)
                } else if (codePoint < 0x800) {
                    if ((units -= 2) < 0) break
                    bytes.push(
                        codePoint >> 0x6 | 0xC0,
                        codePoint & 0x3F | 0x80
                    )
                } else if (codePoint < 0x10000) {
                    if ((units -= 3) < 0) break
                    bytes.push(
                        codePoint >> 0xC | 0xE0,
                        codePoint >> 0x6 & 0x3F | 0x80,
                        codePoint & 0x3F | 0x80
                    )
                } else if (codePoint < 0x110000) {
                    if ((units -= 4) < 0) break
                    bytes.push(
                        codePoint >> 0x12 | 0xF0,
                        codePoint >> 0xC & 0x3F | 0x80,
                        codePoint >> 0x6 & 0x3F | 0x80,
                        codePoint & 0x3F | 0x80
                    )
                } else {
                    throw new Error('Invalid code point')
                }
            }

            return bytes
        }

        function asciiToBytes(str) {
            var byteArray = []
            for (var i = 0; i < str.length; ++i) {
                // Node's code seems to be doing this and not & 0x7F..
                byteArray.push(str.charCodeAt(i) & 0xFF)
            }
            return byteArray
        }

        function utf16leToBytes(str, units) {
            var c, hi, lo
            var byteArray = []
            for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0) break

                c = str.charCodeAt(i)
                hi = c >> 8
                lo = c % 256
                byteArray.push(lo)
                byteArray.push(hi)
            }

            return byteArray
        }

        function base64ToBytes(str) {
            return base64.toByteArray(base64clean(str))
        }

        function blitBuffer(src, dst, offset, length) {
            for (var i = 0; i < length; ++i) {
                if ((i + offset >= dst.length) || (i >= src.length)) break
                dst[i + offset] = src[i]
            }
            return i
        }

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
        function isArrayBuffer(obj) {
            return obj instanceof ArrayBuffer ||
                (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
                    typeof obj.byteLength === 'number')
        }

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
        function isArrayBufferView(obj) {
            return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
        }

        function numberIsNaN(obj) {
            return obj !== obj // eslint-disable-line no-self-compare
        }

    }, {"base64-js": 688, "ieee754": 690}],
    690: [function (require, module, exports) {
        exports.read = function (buffer, offset, isLE, mLen, nBytes) {
            var e, m
            var eLen = nBytes * 8 - mLen - 1
            var eMax = (1 << eLen) - 1
            var eBias = eMax >> 1
            var nBits = -7
            var i = isLE ? (nBytes - 1) : 0
            var d = isLE ? -1 : 1
            var s = buffer[offset + i]

            i += d

            e = s & ((1 << (-nBits)) - 1)
            s >>= (-nBits)
            nBits += eLen
            for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
            }

            m = e & ((1 << (-nBits)) - 1)
            e >>= (-nBits)
            nBits += mLen
            for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
            }

            if (e === 0) {
                e = 1 - eBias
            } else if (e === eMax) {
                return m ? NaN : ((s ? -1 : 1) * Infinity)
            } else {
                m = m + Math.pow(2, mLen)
                e = e - eBias
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
        }

        exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c
            var eLen = nBytes * 8 - mLen - 1
            var eMax = (1 << eLen) - 1
            var eBias = eMax >> 1
            var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
            var i = isLE ? 0 : (nBytes - 1)
            var d = isLE ? 1 : -1
            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

            value = Math.abs(value)

            if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0
                e = eMax
            } else {
                e = Math.floor(Math.log(value) / Math.LN2)
                if (value * (c = Math.pow(2, -e)) < 1) {
                    e--
                    c *= 2
                }
                if (e + eBias >= 1) {
                    value += rt / c
                } else {
                    value += rt * Math.pow(2, 1 - eBias)
                }
                if (value * c >= 2) {
                    e++
                    c /= 2
                }

                if (e + eBias >= eMax) {
                    m = 0
                    e = eMax
                } else if (e + eBias >= 1) {
                    m = (value * c - 1) * Math.pow(2, mLen)
                    e = e + eBias
                } else {
                    m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
                    e = 0
                }
            }

            for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {
            }

            e = (e << mLen) | m
            eLen += mLen
            for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {
            }

            buffer[offset + i - d] |= s * 128
        }

    }, {}],
    691: [function (require, module, exports) {
// shim for using process in browser
        var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
            throw new Error('setTimeout has not been defined');
        }

        function defaultClearTimeout() {
            throw new Error('clearTimeout has not been defined');
        }

        (function () {
            try {
                if (typeof setTimeout === 'function') {
                    cachedSetTimeout = setTimeout;
                } else {
                    cachedSetTimeout = defaultSetTimout;
                }
            } catch (e) {
                cachedSetTimeout = defaultSetTimout;
            }
            try {
                if (typeof clearTimeout === 'function') {
                    cachedClearTimeout = clearTimeout;
                } else {
                    cachedClearTimeout = defaultClearTimeout;
                }
            } catch (e) {
                cachedClearTimeout = defaultClearTimeout;
            }
        }())

        function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
                //normal enviroments in sane situations
                return setTimeout(fun, 0);
            }
            // if setTimeout wasn't available but was latter defined
            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedSetTimeout(fun, 0);
            } catch (e) {
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                    return cachedSetTimeout.call(null, fun, 0);
                } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                    return cachedSetTimeout.call(this, fun, 0);
                }
            }


        }

        function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
                //normal enviroments in sane situations
                return clearTimeout(marker);
            }
            // if clearTimeout wasn't available but was latter defined
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedClearTimeout(marker);
            } catch (e) {
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                    return cachedClearTimeout.call(null, marker);
                } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                    // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                    return cachedClearTimeout.call(this, marker);
                }
            }


        }

        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
            if (!draining || !currentQueue) {
                return;
            }
            draining = false;
            if (currentQueue.length) {
                queue = currentQueue.concat(queue);
            } else {
                queueIndex = -1;
            }
            if (queue.length) {
                drainQueue();
            }
        }

        function drainQueue() {
            if (draining) {
                return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;

            var len = queue.length;
            while (len) {
                currentQueue = queue;
                queue = [];
                while (++queueIndex < len) {
                    if (currentQueue) {
                        currentQueue[queueIndex].run();
                    }
                }
                queueIndex = -1;
                len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
        }

        process.nextTick = function (fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i];
                }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
            }
        };

// v8 likes predictible objects
        function Item(fun, array) {
            this.fun = fun;
            this.array = array;
        }

        Item.prototype.run = function () {
            this.fun.apply(null, this.array);
        };
        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ''; // empty string to avoid regexp issues
        process.versions = {};

        function noop() {
        }

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function (name) {
            return []
        }

        process.binding = function (name) {
            throw new Error('process.binding is not supported');
        };

        process.cwd = function () {
            return '/'
        };
        process.chdir = function (dir) {
            throw new Error('process.chdir is not supported');
        };
        process.umask = function () {
            return 0;
        };

    }, {}],
    "keras-js": [function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "Model", {
            enumerable: true,
            get: function () {
                return _Model.default;
            }
        });
        Object.defineProperty(exports, "Tensor", {
            enumerable: true,
            get: function () {
                return _Tensor.default;
            }
        });
        exports.testUtils = exports.layers = exports.activations = exports.default = exports.GPU_SUPPORT = void 0;

        require("@babel/polyfill");

        var _Model = _interopRequireDefault(require("./Model"));

        var _Tensor = _interopRequireDefault(require("./Tensor"));

        var _WebGL = require("./WebGL2");

        var activations = _interopRequireWildcard(require("./activations"));

        exports.activations = activations;

        var layers = _interopRequireWildcard(require("./layers"));

        exports.layers = layers;

        var testUtils = _interopRequireWildcard(require("./utils/testUtils"));

        exports.testUtils = testUtils;

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            } else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        const GPU_SUPPORT = _WebGL.webgl2.isSupported;
        exports.GPU_SUPPORT = GPU_SUPPORT;
        const KerasJS = {
            Model: _Model.default,
            Tensor: _Tensor.default,
            GPU_SUPPORT,
            activations,
            layers,
            testUtils
        };
        exports.default = KerasJS;
    }, {
        "./Model": 369,
        "./Tensor": 370,
        "./WebGL2": 371,
        "./activations": 374,
        "./layers": 418,
        "./utils/testUtils": 462,
        "@babel/polyfill": 1
    }],
    "ndarray-ops": [function (require, module, exports) {
        "use strict"

        var compile = require("cwise-compiler")

        var EmptyProc = {
            body: "",
            args: [],
            thisVars: [],
            localVars: []
        }

        function fixup(x) {
            if (!x) {
                return EmptyProc
            }
            for (var i = 0; i < x.args.length; ++i) {
                var a = x.args[i]
                if (i === 0) {
                    x.args[i] = {name: a, lvalue: true, rvalue: !!x.rvalue, count: x.count || 1}
                } else {
                    x.args[i] = {name: a, lvalue: false, rvalue: true, count: 1}
                }
            }
            if (!x.thisVars) {
                x.thisVars = []
            }
            if (!x.localVars) {
                x.localVars = []
            }
            return x
        }

        function pcompile(user_args) {
            return compile({
                args: user_args.args,
                pre: fixup(user_args.pre),
                body: fixup(user_args.body),
                post: fixup(user_args.proc),
                funcName: user_args.funcName
            })
        }

        function makeOp(user_args) {
            var args = []
            for (var i = 0; i < user_args.args.length; ++i) {
                args.push("a" + i)
            }
            var wrapper = new Function("P", [
                "return function ", user_args.funcName, "_ndarrayops(", args.join(","), ") {P(", args.join(","), ");return a0}"
            ].join(""))
            return wrapper(pcompile(user_args))
        }

        var assign_ops = {
                add: "+",
                sub: "-",
                mul: "*",
                div: "/",
                mod: "%",
                band: "&",
                bor: "|",
                bxor: "^",
                lshift: "<<",
                rshift: ">>",
                rrshift: ">>>"
            }
        ;(function () {
            for (var id in assign_ops) {
                var op = assign_ops[id]
                exports[id] = makeOp({
                    args: ["array", "array", "array"],
                    body: {
                        args: ["a", "b", "c"],
                        body: "a=b" + op + "c"
                    },
                    funcName: id
                })
                exports[id + "eq"] = makeOp({
                    args: ["array", "array"],
                    body: {
                        args: ["a", "b"],
                        body: "a" + op + "=b"
                    },
                    rvalue: true,
                    funcName: id + "eq"
                })
                exports[id + "s"] = makeOp({
                    args: ["array", "array", "scalar"],
                    body: {
                        args: ["a", "b", "s"],
                        body: "a=b" + op + "s"
                    },
                    funcName: id + "s"
                })
                exports[id + "seq"] = makeOp({
                    args: ["array", "scalar"],
                    body: {
                        args: ["a", "s"],
                        body: "a" + op + "=s"
                    },
                    rvalue: true,
                    funcName: id + "seq"
                })
            }
        })();

        var unary_ops = {
                not: "!",
                bnot: "~",
                neg: "-",
                recip: "1.0/"
            }
        ;(function () {
            for (var id in unary_ops) {
                var op = unary_ops[id]
                exports[id] = makeOp({
                    args: ["array", "array"],
                    body: {
                        args: ["a", "b"],
                        body: "a=" + op + "b"
                    },
                    funcName: id
                })
                exports[id + "eq"] = makeOp({
                    args: ["array"],
                    body: {
                        args: ["a"],
                        body: "a=" + op + "a"
                    },
                    rvalue: true,
                    count: 2,
                    funcName: id + "eq"
                })
            }
        })();

        var binary_ops = {
                and: "&&",
                or: "||",
                eq: "===",
                neq: "!==",
                lt: "<",
                gt: ">",
                leq: "<=",
                geq: ">="
            }
        ;(function () {
            for (var id in binary_ops) {
                var op = binary_ops[id]
                exports[id] = makeOp({
                    args: ["array", "array", "array"],
                    body: {
                        args: ["a", "b", "c"],
                        body: "a=b" + op + "c"
                    },
                    funcName: id
                })
                exports[id + "s"] = makeOp({
                    args: ["array", "array", "scalar"],
                    body: {
                        args: ["a", "b", "s"],
                        body: "a=b" + op + "s"
                    },
                    funcName: id + "s"
                })
                exports[id + "eq"] = makeOp({
                    args: ["array", "array"],
                    body: {
                        args: ["a", "b"],
                        body: "a=a" + op + "b"
                    },
                    rvalue: true,
                    count: 2,
                    funcName: id + "eq"
                })
                exports[id + "seq"] = makeOp({
                    args: ["array", "scalar"],
                    body: {
                        args: ["a", "s"],
                        body: "a=a" + op + "s"
                    },
                    rvalue: true,
                    count: 2,
                    funcName: id + "seq"
                })
            }
        })();

        var math_unary = [
                "abs",
                "acos",
                "asin",
                "atan",
                "ceil",
                "cos",
                "exp",
                "floor",
                "log",
                "round",
                "sin",
                "sqrt",
                "tan"
            ]
        ;(function () {
            for (var i = 0; i < math_unary.length; ++i) {
                var f = math_unary[i]
                exports[f] = makeOp({
                    args: ["array", "array"],
                    pre: {args: [], body: "this_f=Math." + f, thisVars: ["this_f"]},
                    body: {args: ["a", "b"], body: "a=this_f(b)", thisVars: ["this_f"]},
                    funcName: f
                })
                exports[f + "eq"] = makeOp({
                    args: ["array"],
                    pre: {args: [], body: "this_f=Math." + f, thisVars: ["this_f"]},
                    body: {args: ["a"], body: "a=this_f(a)", thisVars: ["this_f"]},
                    rvalue: true,
                    count: 2,
                    funcName: f + "eq"
                })
            }
        })();

        var math_comm = [
                "max",
                "min",
                "atan2",
                "pow"
            ]
        ;(function () {
            for (var i = 0; i < math_comm.length; ++i) {
                var f = math_comm[i]
                exports[f] = makeOp({
                    args: ["array", "array", "array"],
                    pre: {args: [], body: "this_f=Math." + f, thisVars: ["this_f"]},
                    body: {args: ["a", "b", "c"], body: "a=this_f(b,c)", thisVars: ["this_f"]},
                    funcName: f
                })
                exports[f + "s"] = makeOp({
                    args: ["array", "array", "scalar"],
                    pre: {args: [], body: "this_f=Math." + f, thisVars: ["this_f"]},
                    body: {args: ["a", "b", "c"], body: "a=this_f(b,c)", thisVars: ["this_f"]},
                    funcName: f + "s"
                })
                exports[f + "eq"] = makeOp({
                    args: ["array", "array"],
                    pre: {args: [], body: "this_f=Math." + f, thisVars: ["this_f"]},
                    body: {args: ["a", "b"], body: "a=this_f(a,b)", thisVars: ["this_f"]},
                    rvalue: true,
                    count: 2,
                    funcName: f + "eq"
                })
                exports[f + "seq"] = makeOp({
                    args: ["array", "scalar"],
                    pre: {args: [], body: "this_f=Math." + f, thisVars: ["this_f"]},
                    body: {args: ["a", "b"], body: "a=this_f(a,b)", thisVars: ["this_f"]},
                    rvalue: true,
                    count: 2,
                    funcName: f + "seq"
                })
            }
        })();

        var math_noncomm = [
                "atan2",
                "pow"
            ]
        ;(function () {
            for (var i = 0; i < math_noncomm.length; ++i) {
                var f = math_noncomm[i]
                exports[f + "op"] = makeOp({
                    args: ["array", "array", "array"],
                    pre: {args: [], body: "this_f=Math." + f, thisVars: ["this_f"]},
                    body: {args: ["a", "b", "c"], body: "a=this_f(c,b)", thisVars: ["this_f"]},
                    funcName: f + "op"
                })
                exports[f + "ops"] = makeOp({
                    args: ["array", "array", "scalar"],
                    pre: {args: [], body: "this_f=Math." + f, thisVars: ["this_f"]},
                    body: {args: ["a", "b", "c"], body: "a=this_f(c,b)", thisVars: ["this_f"]},
                    funcName: f + "ops"
                })
                exports[f + "opeq"] = makeOp({
                    args: ["array", "array"],
                    pre: {args: [], body: "this_f=Math." + f, thisVars: ["this_f"]},
                    body: {args: ["a", "b"], body: "a=this_f(b,a)", thisVars: ["this_f"]},
                    rvalue: true,
                    count: 2,
                    funcName: f + "opeq"
                })
                exports[f + "opseq"] = makeOp({
                    args: ["array", "scalar"],
                    pre: {args: [], body: "this_f=Math." + f, thisVars: ["this_f"]},
                    body: {args: ["a", "b"], body: "a=this_f(b,a)", thisVars: ["this_f"]},
                    rvalue: true,
                    count: 2,
                    funcName: f + "opseq"
                })
            }
        })();

        exports.any = compile({
            args: ["array"],
            pre: EmptyProc,
            body: {
                args: [{name: "a", lvalue: false, rvalue: true, count: 1}],
                body: "if(a){return true}",
                localVars: [],
                thisVars: []
            },
            post: {args: [], localVars: [], thisVars: [], body: "return false"},
            funcName: "any"
        })

        exports.all = compile({
            args: ["array"],
            pre: EmptyProc,
            body: {
                args: [{name: "x", lvalue: false, rvalue: true, count: 1}],
                body: "if(!x){return false}",
                localVars: [],
                thisVars: []
            },
            post: {args: [], localVars: [], thisVars: [], body: "return true"},
            funcName: "all"
        })

        exports.sum = compile({
            args: ["array"],
            pre: {args: [], localVars: [], thisVars: ["this_s"], body: "this_s=0"},
            body: {
                args: [{name: "a", lvalue: false, rvalue: true, count: 1}],
                body: "this_s+=a",
                localVars: [],
                thisVars: ["this_s"]
            },
            post: {args: [], localVars: [], thisVars: ["this_s"], body: "return this_s"},
            funcName: "sum"
        })

        exports.prod = compile({
            args: ["array"],
            pre: {args: [], localVars: [], thisVars: ["this_s"], body: "this_s=1"},
            body: {
                args: [{name: "a", lvalue: false, rvalue: true, count: 1}],
                body: "this_s*=a",
                localVars: [],
                thisVars: ["this_s"]
            },
            post: {args: [], localVars: [], thisVars: ["this_s"], body: "return this_s"},
            funcName: "prod"
        })

        exports.norm2squared = compile({
            args: ["array"],
            pre: {args: [], localVars: [], thisVars: ["this_s"], body: "this_s=0"},
            body: {
                args: [{name: "a", lvalue: false, rvalue: true, count: 2}],
                body: "this_s+=a*a",
                localVars: [],
                thisVars: ["this_s"]
            },
            post: {args: [], localVars: [], thisVars: ["this_s"], body: "return this_s"},
            funcName: "norm2squared"
        })

        exports.norm2 = compile({
            args: ["array"],
            pre: {args: [], localVars: [], thisVars: ["this_s"], body: "this_s=0"},
            body: {
                args: [{name: "a", lvalue: false, rvalue: true, count: 2}],
                body: "this_s+=a*a",
                localVars: [],
                thisVars: ["this_s"]
            },
            post: {args: [], localVars: [], thisVars: ["this_s"], body: "return Math.sqrt(this_s)"},
            funcName: "norm2"
        })


        exports.norminf = compile({
            args: ["array"],
            pre: {args: [], localVars: [], thisVars: ["this_s"], body: "this_s=0"},
            body: {
                args: [{name: "a", lvalue: false, rvalue: true, count: 4}],
                body: "if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}",
                localVars: [],
                thisVars: ["this_s"]
            },
            post: {args: [], localVars: [], thisVars: ["this_s"], body: "return this_s"},
            funcName: "norminf"
        })

        exports.norm1 = compile({
            args: ["array"],
            pre: {args: [], localVars: [], thisVars: ["this_s"], body: "this_s=0"},
            body: {
                args: [{name: "a", lvalue: false, rvalue: true, count: 3}],
                body: "this_s+=a<0?-a:a",
                localVars: [],
                thisVars: ["this_s"]
            },
            post: {args: [], localVars: [], thisVars: ["this_s"], body: "return this_s"},
            funcName: "norm1"
        })

        exports.sup = compile({
            args: ["array"],
            pre:
                {
                    body: "this_h=-Infinity",
                    args: [],
                    thisVars: ["this_h"],
                    localVars: []
                },
            body:
                {
                    body: "if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_",
                    args: [{"name": "_inline_1_arg0_", "lvalue": false, "rvalue": true, "count": 2}],
                    thisVars: ["this_h"],
                    localVars: []
                },
            post:
                {
                    body: "return this_h",
                    args: [],
                    thisVars: ["this_h"],
                    localVars: []
                }
        })

        exports.inf = compile({
            args: ["array"],
            pre:
                {
                    body: "this_h=Infinity",
                    args: [],
                    thisVars: ["this_h"],
                    localVars: []
                },
            body:
                {
                    body: "if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_",
                    args: [{"name": "_inline_1_arg0_", "lvalue": false, "rvalue": true, "count": 2}],
                    thisVars: ["this_h"],
                    localVars: []
                },
            post:
                {
                    body: "return this_h",
                    args: [],
                    thisVars: ["this_h"],
                    localVars: []
                }
        })

        exports.argmin = compile({
            args: ["index", "array", "shape"],
            pre: {
                body: "{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}",
                args: [
                    {name: "_inline_0_arg0_", lvalue: false, rvalue: false, count: 0},
                    {name: "_inline_0_arg1_", lvalue: false, rvalue: false, count: 0},
                    {name: "_inline_0_arg2_", lvalue: false, rvalue: true, count: 1}
                ],
                thisVars: ["this_i", "this_v"],
                localVars: []
            },
            body: {
                body: "{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
                args: [
                    {name: "_inline_1_arg0_", lvalue: false, rvalue: true, count: 2},
                    {name: "_inline_1_arg1_", lvalue: false, rvalue: true, count: 2}],
                thisVars: ["this_i", "this_v"],
                localVars: ["_inline_1_k"]
            },
            post: {
                body: "{return this_i}",
                args: [],
                thisVars: ["this_i"],
                localVars: []
            }
        })

        exports.argmax = compile({
            args: ["index", "array", "shape"],
            pre: {
                body: "{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}",
                args: [
                    {name: "_inline_0_arg0_", lvalue: false, rvalue: false, count: 0},
                    {name: "_inline_0_arg1_", lvalue: false, rvalue: false, count: 0},
                    {name: "_inline_0_arg2_", lvalue: false, rvalue: true, count: 1}
                ],
                thisVars: ["this_i", "this_v"],
                localVars: []
            },
            body: {
                body: "{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
                args: [
                    {name: "_inline_1_arg0_", lvalue: false, rvalue: true, count: 2},
                    {name: "_inline_1_arg1_", lvalue: false, rvalue: true, count: 2}],
                thisVars: ["this_i", "this_v"],
                localVars: ["_inline_1_k"]
            },
            post: {
                body: "{return this_i}",
                args: [],
                thisVars: ["this_i"],
                localVars: []
            }
        })

        exports.random = makeOp({
            args: ["array"],
            pre: {args: [], body: "this_f=Math.random", thisVars: ["this_f"]},
            body: {args: ["a"], body: "a=this_f()", thisVars: ["this_f"]},
            funcName: "random"
        })

        exports.assign = makeOp({
            args: ["array", "array"],
            body: {args: ["a", "b"], body: "a=b"},
            funcName: "assign"
        })

        exports.assigns = makeOp({
            args: ["array", "scalar"],
            body: {args: ["a", "b"], body: "a=b"},
            funcName: "assigns"
        })


        exports.equals = compile({
            args: ["array", "array"],
            pre: EmptyProc,
            body: {
                args: [{name: "x", lvalue: false, rvalue: true, count: 1},
                    {name: "y", lvalue: false, rvalue: true, count: 1}],
                body: "if(x!==y){return false}",
                localVars: [],
                thisVars: []
            },
            post: {args: [], localVars: [], thisVars: [], body: "return true"},
            funcName: "equals"
        })


    }, {"cwise-compiler": 357}],
    "ndarray": [function (require, module, exports) {
        var iota = require("iota-array")
        var isBuffer = require("is-buffer")

        var hasTypedArrays = ((typeof Float64Array) !== "undefined")

        function compare1st(a, b) {
            return a[0] - b[0]
        }

        function order() {
            var stride = this.stride
            var terms = new Array(stride.length)
            var i
            for (i = 0; i < terms.length; ++i) {
                terms[i] = [Math.abs(stride[i]), i]
            }
            terms.sort(compare1st)
            var result = new Array(terms.length)
            for (i = 0; i < result.length; ++i) {
                result[i] = terms[i][1]
            }
            return result
        }

        function compileConstructor(dtype, dimension) {
            var className = ["View", dimension, "d", dtype].join("")
            if (dimension < 0) {
                className = "View_Nil" + dtype
            }
            var useGetters = (dtype === "generic")

            if (dimension === -1) {
                //Special case for trivial arrays
                var code =
                    "function " + className + "(a){this.data=a;};\
var proto=" + className + ".prototype;\
proto.dtype='" + dtype + "';\
proto.index=function(){return -1};\
proto.size=0;\
proto.dimension=-1;\
proto.shape=proto.stride=proto.order=[];\
proto.lo=proto.hi=proto.transpose=proto.step=\
function(){return new " + className + "(this.data);};\
proto.get=proto.set=function(){};\
proto.pick=function(){return null};\
return function construct_" + className + "(a){return new " + className + "(a);}"
                var procedure = new Function(code)
                return procedure()
            } else if (dimension === 0) {
                //Special case for 0d arrays
                var code =
                    "function " + className + "(a,d) {\
this.data = a;\
this.offset = d\
};\
var proto=" + className + ".prototype;\
proto.dtype='" + dtype + "';\
proto.index=function(){return this.offset};\
proto.dimension=0;\
proto.size=1;\
proto.shape=\
proto.stride=\
proto.order=[];\
proto.lo=\
proto.hi=\
proto.transpose=\
proto.step=function " + className + "_copy() {\
return new " + className + "(this.data,this.offset)\
};\
proto.pick=function " + className + "_pick(){\
return TrivialArray(this.data);\
};\
proto.valueOf=proto.get=function " + className + "_get(){\
return " + (useGetters ? "this.data.get(this.offset)" : "this.data[this.offset]") +
                    "};\
proto.set=function " + className + "_set(v){\
return " + (useGetters ? "this.data.set(this.offset,v)" : "this.data[this.offset]=v") + "\
};\
return function construct_" + className + "(a,b,c,d){return new " + className + "(a,d)}"
                var procedure = new Function("TrivialArray", code)
                return procedure(CACHED_CONSTRUCTORS[dtype][0])
            }

            var code = ["'use strict'"]

            //Create constructor for view
            var indices = iota(dimension)
            var args = indices.map(function (i) {
                return "i" + i
            })
            var index_str = "this.offset+" + indices.map(function (i) {
                return "this.stride[" + i + "]*i" + i
            }).join("+")
            var shapeArg = indices.map(function (i) {
                return "b" + i
            }).join(",")
            var strideArg = indices.map(function (i) {
                return "c" + i
            }).join(",")
            code.push(
                "function " + className + "(a," + shapeArg + "," + strideArg + ",d){this.data=a",
                "this.shape=[" + shapeArg + "]",
                "this.stride=[" + strideArg + "]",
                "this.offset=d|0}",
                "var proto=" + className + ".prototype",
                "proto.dtype='" + dtype + "'",
                "proto.dimension=" + dimension)

            //view.size:
            code.push("Object.defineProperty(proto,'size',{get:function " + className + "_size(){\
return " + indices.map(function (i) {
                return "this.shape[" + i + "]"
            }).join("*"),
                "}})")

            //view.order:
            if (dimension === 1) {
                code.push("proto.order=[0]")
            } else {
                code.push("Object.defineProperty(proto,'order',{get:")
                if (dimension < 4) {
                    code.push("function " + className + "_order(){")
                    if (dimension === 2) {
                        code.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})")
                    } else if (dimension === 3) {
                        code.push(
                            "var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\
if(s0>s1){\
if(s1>s2){\
return [2,1,0];\
}else if(s0>s2){\
return [1,2,0];\
}else{\
return [1,0,2];\
}\
}else if(s0>s2){\
return [2,0,1];\
}else if(s2>s1){\
return [0,1,2];\
}else{\
return [0,2,1];\
}}})")
                    }
                } else {
                    code.push("ORDER})")
                }
            }

            //view.set(i0, ..., v):
            code.push(
                "proto.set=function " + className + "_set(" + args.join(",") + ",v){")
            if (useGetters) {
                code.push("return this.data.set(" + index_str + ",v)}")
            } else {
                code.push("return this.data[" + index_str + "]=v}")
            }

            //view.get(i0, ...):
            code.push("proto.get=function " + className + "_get(" + args.join(",") + "){")
            if (useGetters) {
                code.push("return this.data.get(" + index_str + ")}")
            } else {
                code.push("return this.data[" + index_str + "]}")
            }

            //view.index:
            code.push(
                "proto.index=function " + className + "_index(", args.join(), "){return " + index_str + "}")

            //view.hi():
            code.push("proto.hi=function " + className + "_hi(" + args.join(",") + "){return new " + className + "(this.data," +
                indices.map(function (i) {
                    return ["(typeof i", i, "!=='number'||i", i, "<0)?this.shape[", i, "]:i", i, "|0"].join("")
                }).join(",") + "," +
                indices.map(function (i) {
                    return "this.stride[" + i + "]"
                }).join(",") + ",this.offset)}")

            //view.lo():
            var a_vars = indices.map(function (i) {
                return "a" + i + "=this.shape[" + i + "]"
            })
            var c_vars = indices.map(function (i) {
                return "c" + i + "=this.stride[" + i + "]"
            })
            code.push("proto.lo=function " + className + "_lo(" + args.join(",") + "){var b=this.offset,d=0," + a_vars.join(",") + "," + c_vars.join(","))
            for (var i = 0; i < dimension; ++i) {
                code.push(
                    "if(typeof i" + i + "==='number'&&i" + i + ">=0){\
d=i" + i + "|0;\
b+=c" + i + "*d;\
a" + i + "-=d}")
            }
            code.push("return new " + className + "(this.data," +
                indices.map(function (i) {
                    return "a" + i
                }).join(",") + "," +
                indices.map(function (i) {
                    return "c" + i
                }).join(",") + ",b)}")

            //view.step():
            code.push("proto.step=function " + className + "_step(" + args.join(",") + "){var " +
                indices.map(function (i) {
                    return "a" + i + "=this.shape[" + i + "]"
                }).join(",") + "," +
                indices.map(function (i) {
                    return "b" + i + "=this.stride[" + i + "]"
                }).join(",") + ",c=this.offset,d=0,ceil=Math.ceil")
            for (var i = 0; i < dimension; ++i) {
                code.push(
                    "if(typeof i" + i + "==='number'){\
d=i" + i + "|0;\
if(d<0){\
c+=b" + i + "*(a" + i + "-1);\
a" + i + "=ceil(-a" + i + "/d)\
}else{\
a" + i + "=ceil(a" + i + "/d)\
}\
b" + i + "*=d\
}")
            }
            code.push("return new " + className + "(this.data," +
                indices.map(function (i) {
                    return "a" + i
                }).join(",") + "," +
                indices.map(function (i) {
                    return "b" + i
                }).join(",") + ",c)}")

            //view.transpose():
            var tShape = new Array(dimension)
            var tStride = new Array(dimension)
            for (var i = 0; i < dimension; ++i) {
                tShape[i] = "a[i" + i + "]"
                tStride[i] = "b[i" + i + "]"
            }
            code.push("proto.transpose=function " + className + "_transpose(" + args + "){" +
                args.map(function (n, idx) {
                    return n + "=(" + n + "===undefined?" + idx + ":" + n + "|0)"
                }).join(";"),
                "var a=this.shape,b=this.stride;return new " + className + "(this.data," + tShape.join(",") + "," + tStride.join(",") + ",this.offset)}")

            //view.pick():
            code.push("proto.pick=function " + className + "_pick(" + args + "){var a=[],b=[],c=this.offset")
            for (var i = 0; i < dimension; ++i) {
                code.push("if(typeof i" + i + "==='number'&&i" + i + ">=0){c=(c+this.stride[" + i + "]*i" + i + ")|0}else{a.push(this.shape[" + i + "]);b.push(this.stride[" + i + "])}")
            }
            code.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}")

            //Add return statement
            code.push("return function construct_" + className + "(data,shape,stride,offset){return new " + className + "(data," +
                indices.map(function (i) {
                    return "shape[" + i + "]"
                }).join(",") + "," +
                indices.map(function (i) {
                    return "stride[" + i + "]"
                }).join(",") + ",offset)}")

            //Compile procedure
            var procedure = new Function("CTOR_LIST", "ORDER", code.join("\n"))
            return procedure(CACHED_CONSTRUCTORS[dtype], order)
        }

        function arrayDType(data) {
            if (isBuffer(data)) {
                return "buffer"
            }
            if (hasTypedArrays) {
                switch (Object.prototype.toString.call(data)) {
                    case "[object Float64Array]":
                        return "float64"
                    case "[object Float32Array]":
                        return "float32"
                    case "[object Int8Array]":
                        return "int8"
                    case "[object Int16Array]":
                        return "int16"
                    case "[object Int32Array]":
                        return "int32"
                    case "[object Uint8Array]":
                        return "uint8"
                    case "[object Uint16Array]":
                        return "uint16"
                    case "[object Uint32Array]":
                        return "uint32"
                    case "[object Uint8ClampedArray]":
                        return "uint8_clamped"
                }
            }
            if (Array.isArray(data)) {
                return "array"
            }
            return "generic"
        }

        var CACHED_CONSTRUCTORS = {
                "float32": [],
                "float64": [],
                "int8": [],
                "int16": [],
                "int32": [],
                "uint8": [],
                "uint16": [],
                "uint32": [],
                "array": [],
                "uint8_clamped": [],
                "buffer": [],
                "generic": []
            }

        ;(function () {
            for (var id in CACHED_CONSTRUCTORS) {
                CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))
            }
        });

        function wrappedNDArrayCtor(data, shape, stride, offset) {
            if (data === undefined) {
                var ctor = CACHED_CONSTRUCTORS.array[0]
                return ctor([])
            } else if (typeof data === "number") {
                data = [data]
            }
            if (shape === undefined) {
                shape = [data.length]
            }
            var d = shape.length
            if (stride === undefined) {
                stride = new Array(d)
                for (var i = d - 1, sz = 1; i >= 0; --i) {
                    stride[i] = sz
                    sz *= shape[i]
                }
            }
            if (offset === undefined) {
                offset = 0
                for (var i = 0; i < d; ++i) {
                    if (stride[i] < 0) {
                        offset -= (shape[i] - 1) * stride[i]
                    }
                }
            }
            var dtype = arrayDType(data)
            var ctor_list = CACHED_CONSTRUCTORS[dtype]
            while (ctor_list.length <= d + 1) {
                ctor_list.push(compileConstructor(dtype, ctor_list.length - 1))
            }
            var ctor = ctor_list[d + 1]
            return ctor(data, shape, stride, offset)
        }

        module.exports = wrappedNDArrayCtor

    }, {"iota-array": 366, "is-buffer": 367}]
}, {}, []);
