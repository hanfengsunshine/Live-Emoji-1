<!DOCTYPE html>
<html lang="en">
<head>
    <title> Live Emoji </title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">

    <link rel="stylesheet" href="css/jquery-ui.min.css"/>
    <link rel="stylesheet" href="css/bootstrap.css">
    <link rel="stylesheet" href="css/dark.css"/>
    <link rel="stylesheet" type="text/css" href="css/litegraph.css"/>
    <link rel="stylesheet" type="text/css" href="css/litegraph-style.css"/>
    <link rel="stylesheet" type="text/css" href="css/jsgrid.css"/>
    <link rel="stylesheet" type="text/css" href="css/jsgrid-theme.css"/>

    <script src="js/libs/howler.min.js"></script>

    <!--for uuid-->
    <!--<script src="http://wzrd.in/standalone/uuid%2Fv5@latest"></script>-->
    <script src="js/libs/uuid.js"></script>

    <!--chart-->
    <script src="js/libs/Chart.bundle.js"></script>

    <!--ui-->
    <script src="js/ui.js"></script>

    <!--script editing-->
    <link rel="stylesheet" type="text/css" href="js/libs/quill/quill.core.css"/>
    <link rel="stylesheet" type="text/css" href="js/libs/quill/quill.bubble.css"/>
    <link rel="stylesheet" type="text/css" href="js/libs/quill/quill.snow.css"/>
    <script src="js/libs/quill/quill.min.js"></script>

    <!--jquery-->
    <script src="js/libs/jquery/jquery.min.js"></script>
    <script src="js/libs/jquery/jquery-ui.min.js"></script>
    <script src="js/libs/jquery/jsgrid.js"></script>
    <script src="js/libs/jquery/popper.js"></script>
    <script src="js/libs/jquery/bootstrap.js"></script>

    <!--numeric-->
    <script src="js/libs/gaussian.js"></script>
    <script src="js/libs/signals.min.js"></script>

    <!--threejs-->
    <script src="js/libs/threejs/three.js"></script>
    <script src="js/libs/threejs/OrbitControls.js"></script>
    <!--webvr-->
    <script src="js/libs/threejs/webvr/WebVR.js"></script>
    <script src="js/libs/threejs/BoxLineGeometry.js"></script>
    <script src="js/libs/threejs/ui.three.js"></script>
    <script src="js/libs/threejs/Tween.js"></script>
    <!--text-->
    <script src="js/libs/text/three-bmfont-text-bundle.js"></script>
    <script src="js/libs/text/sdf-shader.js"></script>
    <script src="js/libs/text/text-bitmap.js"></script>

    <!--other threejs modules-->
    <script src="js/libs/threejs/examples/js/libs/system.min.js"></script>
    <script src="js/libs/threejs/examples/js/renderers/Projector.js"></script>
    <script src="js/libs/threejs/examples/js/renderers/CanvasRenderer.js"></script>
    <script src="js/libs/threejs/examples/js/renderers/RaytracingRenderer.js"></script>
    <script src="js/libs/threejs/examples/js/renderers/SoftwareRenderer.js"></script>
    <script src="js/libs/threejs/examples/js/renderers/SVGRenderer.js"></script>
    <script src="js/libs/threejs/examples/js/loaders/OBJLoader.js"></script>

    <!--loading-->
    <script src="asset/character_preload.js"></script>

    <script src="js/Editor.js"></script>
    <script src="js/Config.js"></script>
    <script src="js/History.js"></script>
    <script src="js/Loader.js"></script>

    <script src="js/command/Command.js"></script>
    <script src="js/command/AddObjectCommand.js"></script>
    <script src="js/command/RemoveObjectCommand.js"></script>
    <script src="js/command/MoveObjectCommand.js"></script>
    <script src="js/command/SetPositionCommand.js"></script>
    <script src="js/command/SetRotationCommand.js"></script>
    <script src="js/command/SetScaleCommand.js"></script>
    <script src="js/command/SetValueCommand.js"></script>
    <script src="js/command/SetUuidCommand.js"></script>
    <script src="js/command/SetColorCommand.js"></script>
    <script src="js/command/SetGeometryCommand.js"></script>
    <script src="js/command/SetGeometryValueCommand.js"></script>
    <script src="js/command/MultiCmdsCommand.js"></script>
    <script src="js/command/SetMaterialCommand.js"></script>
    <script src="js/command/SetMaterialValueCommand.js"></script>
    <script src="js/command/SetMaterialColorCommand.js"></script>
    <script src="js/command/SetMaterialMapCommand.js"></script>
    <script src="js/command/SetSceneCommand.js"></script>

    <!-- my animation library -->
    <script src="js/animation/CharacterStructure.js"></script>
    <script src="js/animation/PNGReader.js"></script>
    <script src="js/animation/earcut.js"></script>
    <script src="js/animation/Utils.js"></script>
    <script src="js/animation/Contour.js"></script>

    <!--graph editing-->
    <script src="js/libs/graph/litegraph.js"></script>
    <script src="js/libs/graph/nodes/base.js"></script>
    <script src="js/libs/graph/nodes/logic.js"></script>
    <script src="js/libs/graph/nodes/events.js"></script>
    <script src="js/libs/graph/nodes/math.js"></script>
    <script src="js/libs/graph/nodes/interface.js"></script>
    <script src="js/libs/graph/nodes/graphics.js"></script>
    <script src="js/libs/graph/nodes/input.js"></script>
    <script src="js/libs/graph/nodes/midi.js"></script>
    <script src="js/libs/graph/nodes/audio.js"></script>
    <script src="js/libs/graph/nodes/network.js"></script>

    <!--particle system-->
    <script src="js/libs/particle/three.proton.min.js"></script>

    <!--script editor-->
    <script src="js/ScriptEditor.js"></script>

    <!--editor-->
    <script src="js/authoring/NodeEditor.ParticleSystem.js"></script>
    <script src="js/authoring/NodeEditor.Util.js"></script>
    <script src="js/authoring/NodeEditor.SceneNode.js"></script>
    <script src="js/authoring/NodeEditor.SoundNode.js"></script>
    <script src="js/authoring/NodeEditor.LogicNode.js"></script>
    <script src="js/authoring/NodeEditor.EventNode.js"></script>
    <script src="js/authoring/NodeEditor.FaceNode.js"></script>
    <script src="js/authoring/NodeEditor.DanmakuNode.js"></script>
    <script src="js/authoring/NodeEditor.ParticleNode.js"></script>
    <script src="js/authoring/NodeEditor.NodeLoading.js"></script>
    <script src="js/authoring/NodeEditor.Editor.js"></script>
    <script src="js/authoring/EmotionCMD.js"></script>
    <script src="js/authoring/NodeEditor.SoundAnimation.js"></script>

    <!--face tracking library-->
    <script src="js/face/ParticleFilter.js"></script>
    <script src="js/face/clmtrackr.js"></script>
    <script src="js/face/bundle.js"></script>
    <script src="js/face/image_process.js"></script>

    <script src="js/Scene.js"></script>

    <script src="js/Menubar.js"></script>
    <script src="js/Menubar.File.js"></script>
    <script src="js/Menubar.Edit.js"></script>
    <script src="js/Menubar.About.js"></script>

    <script src="js/Sidebar.Left.js"></script>
    <script src="js/Sidebar.Right.js"></script>
    <script src="js/Sidebar.EmotionCMD.js"></script>

    <script src="js/View.MainView.js"></script>
    <script src="js/View.FaceView.js"></script>
    <script src="js/View.AudienceView.js"></script>

    <script src="js/RecommendationUtil.js"></script>
</head>
<body>
<script>
    // configs
    window.URL = window.URL || window.webkitURL;
    window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;

    Number.prototype.format = function () {
        return this.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
    };

    var user_config_json = '<%= user.config %>'.replace(/&quot;/g, '"');
    console.log(user_config_json);

    var editor = new Editor();

    // load pre-defined cmds
    editor.emotionCMDManager = new EmotionCMDManager(editor);
    LoadConfigurationJSONFile(editor, user_config_json);
    // threejs stuff
    editor.scene = MakeScene();

    // layout
    var main_view = new MainView(editor);
    document.body.appendChild(main_view.dom);

    var node_editor = new NodeEditor(editor);
    document.body.appendChild(node_editor.dom);

    var script_editor = new ScriptEditor(editor);
    document.body.appendChild(script_editor.dom);

    var sidebar_left = new SidebarLeft(editor);
    document.body.appendChild(sidebar_left.dom);

    var sidebar_right = new SidebarRight(editor);
    document.body.appendChild(sidebar_right.dom);

    var menubar = new Menubar(editor);
    document.body.appendChild(menubar.dom);

    var sound_animation = new SoundAnimation(editor);

    // Danmaku
    var DanmakuRobotoBoldKey = 'roboto-bold';
    var DanmakuFileName = 'js/libs/text/fonts/roboto/bitmap/' + DanmakuRobotoBoldKey;
    var DanmakuJsonPath = DanmakuFileName + '.json';
    var DanmakuImagePath = DanmakuFileName + '.png';

    // load the Roboto bitmap font assets and assign them to the key
    TextBitmap.load( DanmakuRobotoBoldKey, DanmakuJsonPath, DanmakuImagePath );

    // after the assets load, you can pass the font key to TextBitmap constructor
    THREE.DefaultLoadingManager.onLoad = function ( ) {

        // fontKey and text are required, the rest are optional
        editor.danmaku_bmtext = new TextBitmap({
            text: 'Grumpy wizards make toxic brew for the evil Queen and Jack.',
            fontKey: DanmakuRobotoBoldKey,
            width: 1000,
            align: 'center',
            valign: 'center',
            lineHeight: 80,
            letterSpacing: 1,
            scale: 0.01,
            color: '#fff',
            outlineColor: '#000'
        });

        // TextBitmap inherits THREE.Group
        // so you can add instances to the scene
        // and position, scale or rotate them
        editor.scene.add( editor.danmaku_bmtext );
        editor.danmaku_bmtext.position.set( 0, 1, -0.5 );
    };

    $('a').css('bottom', '');

    // add events
    editor.signals.windowResize.add(function () {
        editor.main_camera.fov = 90;
        editor.main_camera.aspect = editor.main_view.dom.offsetWidth / editor.main_view.dom.offsetHeight;
        editor.main_camera.near = 1; //0.1;
        editor.main_camera.far = 1000; //10;
        editor.main_camera.position.z = 10;
        editor.main_camera.layers.enable(1);
        editor.main_camera.updateProjectionMatrix();
        editor.main_view_renderer.setSize( editor.main_view.dom.offsetWidth, editor.main_view.dom.offsetHeight);

        editor.side_view_renderer.setSize( editor.side_view.dom.offsetWidth, editor.side_view.dom.offsetHeight);

        editor.node_editor_canvas.dom.width = editor.main_view.dom.clientWidth;
        editor.node_editor_canvas.dom.height = editor.main_view.dom.clientHeight - 44;
        editor.node_editor_canvas.dom.style.width = editor.main_view.dom.clientWidth + 'px';
        editor.node_editor_canvas.dom.style.height = editor.main_view.dom.clientHeight - 44 + 'px';

        editor.signals.sceneGraphChanged.dispatch();
    });

    // rendering
    editor.signals.sceneGraphChanged.add(function () {
        _Rendering();
    });
    
    // keyboard
    document.addEventListener('keydown', function (event) {
        editor.emotionCMDManager.current_key = event.key;
        console.log(event.key);
    });

    $(main_view.dom).mousedown(function (event) {
        if(event.which==1){
            editor.emotionCMDManager.current_mouse = 'left';
        }
        if(event.which==3){
            editor.emotionCMDManager.current_mouse = 'right';
        }
    });
    
    // track face
    editor.signals.followFace.add(function (event) {
        let puppet = editor.selected;
        if (puppet !== null) {
            // if (editor.facePositionMutex === false) {
                puppet.position.x = event.x;
                puppet.position.y = event.y;
                editor.signals.sceneGraphChanged.dispatch();
            // }
        }
    });

    editor.signals.followLeftEye.add(function (state) {
        let puppet = editor.selected;
        if (puppet !== null) {
            puppet.updateLeftEye(state);
            editor.signals.sceneGraphChanged.dispatch();
        }
    });

    editor.signals.followRightEye.add(function (state) {
        let puppet = editor.selected;
        if (puppet !== null) {
            puppet.updateRightEye(state);
            editor.signals.sceneGraphChanged.dispatch();
        }
    });

    editor.signals.followMouth.add(function (state) {
        let puppet = editor.selected;
        if (puppet !== null) {
            puppet.updateMouth(state);
            editor.signals.sceneGraphChanged.dispatch();
        }
    });
    
    // dom stuff
    document.addEventListener('dragover', function (event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
    }, false);

    document.addEventListener('drop', function (event) {
        event.preventDefault();
        if (event.dataTransfer.files.length > 0) {
            editor.loader.loadFile(event.dataTransfer.files[0]);
        }
    }, false);

    window.addEventListener('resize', function (env) {
        editor.signals.windowResize.dispatch();
    }, false);

    // rendering
    // we must have those constraints to make everything work
    let controls = new THREE.OrbitControls(editor.main_camera, editor.main_view_renderer.domElement);
    controls.enableZoom = false;
    controls.enablePan = false;
    controls.enableDamping = true;
    controls.dampingFactor = 1;
    controls.rotateSpeed = 0.01;

    function _Rendering() {
        controls.update();
        if (editor.selected != null) {
            editor.selected.lookAt(editor.main_camera.position);
        }
        if(editor.danmaku_bmtext!=null){
            editor.danmaku_bmtext.lookAt(editor.main_camera.position);
        }
        editor.scene.updateMatrixWorld();
        editor.main_view_renderer.render(editor.scene, editor.main_camera);
        editor.side_view_renderer.render(editor.scene, editor.side_camera);
    }

    // particle system stuff
    editor.particle_engine_proton = new Proton();

    let clock = new THREE.Clock();
    clock.start();

    // animation loop
    function _Animate() {
        // control fps
        setTimeout( function() {
            editor.side_view_renderer.setAnimationLoop(_Animate); // for VR rendering
            // requestAnimationFrame(animate);
        }, 1000 / 20 ); // time interval 20 ms

        // update global state
        let num = editor.particle_engine_proton.getCount();
        if( num===0 ) {
            editor.GlobalRunningEmotionCMDState.has_particle_node = false;
        }

        if(clock.getElapsedTime()>1){
            editor.UpdateRunningEmotionCMDState();
            clock.start();
        }

        // TWEEN.update();

        editor.particle_engine_proton.update();

        editor.side_camera.copy(editor.main_camera);

        editor.signals.sceneGraphChanged.dispatch(); // re-rendering
    }

    _Animate();
    editor.signals.windowResize.dispatch();
</script>
</body>
</html>
